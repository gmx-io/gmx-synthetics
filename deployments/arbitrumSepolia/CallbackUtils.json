{
  "address": "0x6644F2a4a862e367a3DB6683F421e47C296F8993",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasToBeForwarded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callbackGasLimit",
          "type": "uint256"
        }
      ],
      "name": "InsufficientGasLeftForCallback",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackGasLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCallbackGasLimit",
          "type": "uint256"
        }
      ],
      "name": "MaxCallbackGasLimitExceeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Deposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Deposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Deposit.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Deposit.Props",
          "name": "deposit",
          "type": "tuple"
        }
      ],
      "name": "AfterDepositCancellationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Deposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Deposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Deposit.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Deposit.Props",
          "name": "deposit",
          "type": "tuple"
        }
      ],
      "name": "AfterDepositExecutionError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "glv",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct GlvDeposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minGlvTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GlvDeposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isMarketTokenDeposit",
                  "type": "bool"
                }
              ],
              "internalType": "struct GlvDeposit.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlvDeposit.Props",
          "name": "glvDeposit",
          "type": "tuple"
        }
      ],
      "name": "AfterGlvDepositCancellationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "glv",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct GlvDeposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minGlvTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GlvDeposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isMarketTokenDeposit",
                  "type": "bool"
                }
              ],
              "internalType": "struct GlvDeposit.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlvDeposit.Props",
          "name": "glvDeposit",
          "type": "tuple"
        }
      ],
      "name": "AfterGlvDepositExecutionError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "glv",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct GlvWithdrawal.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "glvTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GlvWithdrawal.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct GlvWithdrawal.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlvWithdrawal.Props",
          "name": "glvWithdrawal",
          "type": "tuple"
        }
      ],
      "name": "AfterGlvWithdrawalCancellationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "glv",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct GlvWithdrawal.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "glvTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GlvWithdrawal.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct GlvWithdrawal.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct GlvWithdrawal.Props",
          "name": "glvWithdrawal",
          "type": "tuple"
        }
      ],
      "name": "AfterGlvWithdrawalExecutionError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "cancellationReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Order.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Order.OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Order.DecreasePositionSwapType",
                  "name": "decreasePositionSwapType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validFromTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Order.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isFrozen",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "autoCancel",
                  "type": "bool"
                }
              ],
              "internalType": "struct Order.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Order.Props",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "AfterOrderCancellationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "cancellationReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Order.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Order.OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Order.DecreasePositionSwapType",
                  "name": "decreasePositionSwapType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validFromTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Order.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isFrozen",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "autoCancel",
                  "type": "bool"
                }
              ],
              "internalType": "struct Order.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Order.Props",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "AfterOrderExecutionError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "cancellationReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Order.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Order.OrderType",
                  "name": "orderType",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Order.DecreasePositionSwapType",
                  "name": "decreasePositionSwapType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "validFromTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Order.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isFrozen",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "autoCancel",
                  "type": "bool"
                }
              ],
              "internalType": "struct Order.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Order.Props",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "AfterOrderFrozenError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "fromMarket",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toMarket",
                  "type": "address"
                }
              ],
              "internalType": "struct Shift.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Shift.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Shift.Props",
          "name": "shift",
          "type": "tuple"
        }
      ],
      "name": "AfterShiftCancellationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "fromMarket",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toMarket",
                  "type": "address"
                }
              ],
              "internalType": "struct Shift.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Shift.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Shift.Props",
          "name": "shift",
          "type": "tuple"
        }
      ],
      "name": "AfterShiftExecutionError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Withdrawal.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Withdrawal.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Withdrawal.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Withdrawal.Props",
          "name": "withdrawal",
          "type": "tuple"
        }
      ],
      "name": "AfterWithdrawalCancellationError",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Withdrawal.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Withdrawal.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Withdrawal.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Withdrawal.Props",
          "name": "withdrawal",
          "type": "tuple"
        }
      ],
      "name": "AfterWithdrawalExecutionError",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract DataStore",
          "name": "dataStore",
          "type": "DataStore"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getSavedCallbackContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callbackContract",
          "type": "address"
        }
      ],
      "name": "isValidCallbackContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DataStore",
          "name": "dataStore",
          "type": "DataStore"
        },
        {
          "internalType": "uint256",
          "name": "callbackGasLimit",
          "type": "uint256"
        }
      ],
      "name": "validateCallbackGasLimit",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c67091e65c85502a9df74388694593d8fa5aca192cc67e88a82c7c13a45f43e",
  "receipt": {
    "to": null,
    "from": "0xCD9706B6B71fdC4351091B5b1D910cEe7Fde28D0",
    "contractAddress": "0x6644F2a4a862e367a3DB6683F421e47C296F8993",
    "transactionIndex": 16,
    "gasUsed": "5430298",
    "logsBloom": "0x
    "blockHash": "0x19d7166ed8bd4186ae4a836a7d0fd539dd6bad90c4ee0ece2f2ad9c6ab060908",
    "transactionHash": "0x5c67091e65c85502a9df74388694593d8fa5aca192cc67e88a82c7c13a45f43e",
    "logs": [],
    "blockNumber": 145238428,
    "cumulativeGasUsed": "6627520",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "56be4a23543c966cc969a78e013c5aca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasToBeForwarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"InsufficientGasLeftForCallback\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCallbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"MaxCallbackGasLimitExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Deposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Deposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Deposit.Props\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"name\":\"AfterDepositCancellationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Deposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Deposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Deposit.Props\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"name\":\"AfterDepositExecutionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"glv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct GlvDeposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minGlvTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct GlvDeposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMarketTokenDeposit\",\"type\":\"bool\"}],\"internalType\":\"struct GlvDeposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct GlvDeposit.Props\",\"name\":\"glvDeposit\",\"type\":\"tuple\"}],\"name\":\"AfterGlvDepositCancellationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"glv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct GlvDeposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minGlvTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct GlvDeposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMarketTokenDeposit\",\"type\":\"bool\"}],\"internalType\":\"struct GlvDeposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct GlvDeposit.Props\",\"name\":\"glvDeposit\",\"type\":\"tuple\"}],\"name\":\"AfterGlvDepositExecutionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"glv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct GlvWithdrawal.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"glvTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct GlvWithdrawal.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct GlvWithdrawal.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct GlvWithdrawal.Props\",\"name\":\"glvWithdrawal\",\"type\":\"tuple\"}],\"name\":\"AfterGlvWithdrawalCancellationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"glv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct GlvWithdrawal.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"glvTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct GlvWithdrawal.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct GlvWithdrawal.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct GlvWithdrawal.Props\",\"name\":\"glvWithdrawal\",\"type\":\"tuple\"}],\"name\":\"AfterGlvWithdrawalExecutionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cancellationReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Order.DecreasePositionSwapType\",\"name\":\"decreasePositionSwapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validFromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoCancel\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Order.Props\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"AfterOrderCancellationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cancellationReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Order.DecreasePositionSwapType\",\"name\":\"decreasePositionSwapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validFromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoCancel\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Order.Props\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"AfterOrderExecutionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cancellationReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Order.DecreasePositionSwapType\",\"name\":\"decreasePositionSwapType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validFromTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoCancel\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Order.Props\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"AfterOrderFrozenError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMarket\",\"type\":\"address\"}],\"internalType\":\"struct Shift.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Shift.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Shift.Props\",\"name\":\"shift\",\"type\":\"tuple\"}],\"name\":\"AfterShiftCancellationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMarket\",\"type\":\"address\"}],\"internalType\":\"struct Shift.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Shift.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Shift.Props\",\"name\":\"shift\",\"type\":\"tuple\"}],\"name\":\"AfterShiftExecutionError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Withdrawal.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Withdrawal.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Withdrawal.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Withdrawal.Props\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"AfterWithdrawalCancellationError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Withdrawal.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Withdrawal.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Withdrawal.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"indexed\":false,\"internalType\":\"struct Withdrawal.Props\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"AfterWithdrawalExecutionError\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"dataStore\",\"type\":\"DataStore\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getSavedCallbackContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"}],\"name\":\"isValidCallbackContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"dataStore\",\"type\":\"DataStore\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"validateCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/callback/CallbackUtils.sol\":\"CallbackUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/callback/CallbackUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"./IOrderCallbackReceiver.sol\\\";\\nimport \\\"./IDepositCallbackReceiver.sol\\\";\\nimport \\\"./IWithdrawalCallbackReceiver.sol\\\";\\nimport \\\"./IShiftCallbackReceiver.sol\\\";\\nimport \\\"./IGasFeeCallbackReceiver.sol\\\";\\nimport \\\"./IGlvDepositCallbackReceiver.sol\\\";\\nimport \\\"./IGlvWithdrawalCallbackReceiver.sol\\\";\\n\\nimport \\\"../order/OrderEventUtils.sol\\\";\\nimport \\\"../withdrawal/WithdrawalEventUtils.sol\\\";\\nimport \\\"../deposit/DepositEventUtils.sol\\\";\\nimport \\\"../shift/ShiftEventUtils.sol\\\";\\nimport \\\"../glv/glvDeposit/GlvDepositEventUtils.sol\\\";\\nimport \\\"../glv/glvWithdrawal/GlvWithdrawalEventUtils.sol\\\";\\n\\n// @title CallbackUtils\\n// @dev most features require a two step process to complete\\n// the user first sends a request transaction, then a second transaction is sent\\n// by a keeper to execute the request\\n//\\n// to allow for better composability with other contracts, a callback contract\\n// can be specified to be called after request executions or cancellations\\n//\\n// in case it is necessary to add \\\"before\\\" callbacks, extra care should be taken\\n// to ensure that important state cannot be changed during the before callback\\n// for example, if an order can be cancelled in the \\\"before\\\" callback during\\n// order execution, it may lead to an order being executed even though the user\\n// was already refunded for its cancellation\\n//\\n// the details from callback errors are not processed to avoid cases where a malicious\\n// callback contract returns a very large value to cause transactions to run out of gas\\nlibrary CallbackUtils {\\n    using Address for address;\\n    using Deposit for Deposit.Props;\\n    using Withdrawal for Withdrawal.Props;\\n    using Shift for Shift.Props;\\n    using Order for Order.Props;\\n    using GlvDeposit for GlvDeposit.Props;\\n    using GlvWithdrawal for GlvWithdrawal.Props;\\n\\n    event AfterDepositExecutionError(bytes32 key, Deposit.Props deposit);\\n    event AfterDepositCancellationError(bytes32 key, Deposit.Props deposit);\\n\\n    event AfterWithdrawalExecutionError(bytes32 key, Withdrawal.Props withdrawal);\\n    event AfterWithdrawalCancellationError(bytes32 key, Withdrawal.Props withdrawal);\\n\\n    event AfterShiftExecutionError(bytes32 key, Shift.Props shift);\\n    event AfterShiftCancellationError(bytes32 key, Shift.Props shift);\\n\\n    event AfterOrderExecutionError(bytes32 key, Order.Props order);\\n    event AfterOrderCancellationError(bytes32 key, Order.Props order);\\n    event AfterOrderFrozenError(bytes32 key, Order.Props order);\\n\\n    event AfterGlvDepositExecutionError(bytes32 key, GlvDeposit.Props glvDeposit);\\n    event AfterGlvDepositCancellationError(bytes32 key, GlvDeposit.Props glvDeposit);\\n    event AfterGlvWithdrawalExecutionError(bytes32 key, GlvWithdrawal.Props glvWithdrawal);\\n    event AfterGlvWithdrawalCancellationError(bytes32 key, GlvWithdrawal.Props glvWithdrawal);\\n\\n    // @dev validate that the callbackGasLimit is less than the max specified value\\n    // this is to prevent callback gas limits which are larger than the max gas limits per block\\n    // as this would allow for callback contracts that can consume all gas and conditionally cause\\n    // executions to fail\\n    // @param dataStore DataStore\\n    // @param callbackGasLimit the callback gas limit\\n    function validateCallbackGasLimit(DataStore dataStore, uint256 callbackGasLimit) external view {\\n        uint256 maxCallbackGasLimit = dataStore.getUint(Keys.MAX_CALLBACK_GAS_LIMIT);\\n        if (callbackGasLimit > maxCallbackGasLimit) {\\n            revert Errors.MaxCallbackGasLimitExceeded(callbackGasLimit, maxCallbackGasLimit);\\n        }\\n    }\\n\\n    function validateGasLeftForCallback(uint256 callbackGasLimit) internal view {\\n        uint256 gasToBeForwarded = gasleft() / 64 * 63;\\n        if (gasToBeForwarded < callbackGasLimit) {\\n            revert Errors.InsufficientGasLeftForCallback(gasToBeForwarded, callbackGasLimit);\\n        }\\n    }\\n\\n    function setSavedCallbackContract(DataStore dataStore, address account, address market, address callbackContract) external {\\n        dataStore.setAddress(Keys.savedCallbackContract(account, market), callbackContract);\\n    }\\n\\n    function getSavedCallbackContract(DataStore dataStore, address account, address market) external view returns (address) {\\n        return dataStore.getAddress(Keys.savedCallbackContract(account, market));\\n    }\\n\\n    function refundExecutionFee(\\n        DataStore dataStore,\\n        bytes32 key,\\n        address callbackContract,\\n        uint256 refundFeeAmount,\\n        EventUtils.EventLogData memory eventData\\n    ) internal returns (bool) {\\n        if (!isValidCallbackContract(callbackContract)) { return false; }\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.REFUND_EXECUTION_FEE_GAS_LIMIT);\\n\\n        validateGasLeftForCallback(gasLimit);\\n\\n        try IGasFeeCallbackReceiver(callbackContract).refundExecutionFee{ gas: gasLimit, value: refundFeeAmount }(\\n            key,\\n            eventData\\n        ) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(deposit.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory depositData = DepositEventUtils.createEventData(deposit, Deposit.DepositType.Normal);\\n\\n        validateGasLeftForCallback(deposit.callbackGasLimit());\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract()).afterDepositExecution{ gas: deposit.callbackGasLimit() }(\\n            key,\\n            depositData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterDepositExecutionError(key, deposit);\\n        }\\n    }\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(deposit.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory depositData = DepositEventUtils.createEventData(deposit, Deposit.DepositType.Normal);\\n\\n        validateGasLeftForCallback(deposit.callbackGasLimit());\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract()).afterDepositCancellation{ gas: deposit.callbackGasLimit() }(\\n            key,\\n            depositData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterDepositCancellationError(key, deposit);\\n        }\\n    }\\n\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(\\n        bytes32 key,\\n        Withdrawal.Props memory withdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(withdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory withdrawalData = WithdrawalEventUtils.createEventData(withdrawal, Withdrawal.WithdrawalType.Normal);\\n\\n        validateGasLeftForCallback(withdrawal.callbackGasLimit());\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract()).afterWithdrawalExecution{ gas: withdrawal.callbackGasLimit() }(\\n            key,\\n            withdrawalData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterWithdrawalExecutionError(key, withdrawal);\\n        }\\n    }\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(\\n        bytes32 key,\\n        Withdrawal.Props memory withdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(withdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory withdrawalData = WithdrawalEventUtils.createEventData(withdrawal, Withdrawal.WithdrawalType.Normal);\\n\\n        validateGasLeftForCallback(withdrawal.callbackGasLimit());\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract()).afterWithdrawalCancellation{ gas: withdrawal.callbackGasLimit() }(\\n            key,\\n            withdrawalData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterWithdrawalCancellationError(key, withdrawal);\\n        }\\n    }\\n\\n    function afterShiftExecution(\\n        bytes32 key,\\n        Shift.Props memory shift,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(shift.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory shiftData = ShiftEventUtils.createEventData(shift);\\n\\n        validateGasLeftForCallback(shift.callbackGasLimit());\\n\\n        try IShiftCallbackReceiver(shift.callbackContract()).afterShiftExecution{ gas: shift.callbackGasLimit() }(\\n            key,\\n            shiftData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterShiftExecutionError(key, shift);\\n        }\\n    }\\n    function afterShiftCancellation(\\n        bytes32 key,\\n        Shift.Props memory shift,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(shift.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory shiftData = ShiftEventUtils.createEventData(shift);\\n\\n        validateGasLeftForCallback(shift.callbackGasLimit());\\n\\n        try IShiftCallbackReceiver(shift.callbackContract()).afterShiftCancellation{ gas: shift.callbackGasLimit() }(\\n            key,\\n            shiftData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterShiftCancellationError(key, shift);\\n        }\\n    }\\n\\n    // @dev called after an order execution\\n    // note that the order.size, order.initialCollateralDeltaAmount and other\\n    // properties may be updated during execution, the new values may not be\\n    // updated in the order object for the callback\\n    // @param key the key of the order\\n    // @param order the order that was executed\\n    function afterOrderExecution(\\n        bytes32 key,\\n        Order.Props memory order,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory orderData = OrderEventUtils.createEventData(order);\\n\\n        validateGasLeftForCallback(order.callbackGasLimit());\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderExecution{ gas: order.callbackGasLimit() }(\\n            key,\\n            orderData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterOrderExecutionError(key, order);\\n        }\\n    }\\n\\n    // @dev called after an order cancellation\\n    // @param key the key of the order\\n    // @param order the order that was cancelled\\n    function afterOrderCancellation(\\n        bytes32 key,\\n        Order.Props memory order,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory orderData = OrderEventUtils.createEventData(order);\\n\\n        validateGasLeftForCallback(order.callbackGasLimit());\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderCancellation{ gas: order.callbackGasLimit() }(\\n            key,\\n            orderData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterOrderCancellationError(key, order);\\n        }\\n    }\\n\\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\\n    // @param key the key of the order\\n    // @param order the order that was frozen\\n    function afterOrderFrozen(\\n        bytes32 key,\\n        Order.Props memory order,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory orderData = OrderEventUtils.createEventData(order);\\n\\n        validateGasLeftForCallback(order.callbackGasLimit());\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderFrozen{ gas: order.callbackGasLimit() }(\\n            key,\\n            orderData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterOrderFrozenError(key, order);\\n        }\\n    }\\n\\n    // @dev called after a glvDeposit execution\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was executed\\n    function afterGlvDepositExecution(\\n        bytes32 key,\\n        GlvDeposit.Props memory glvDeposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvDeposit.callbackContract())) {\\n            return;\\n        }\\n\\n        EventUtils.EventLogData memory glvData = GlvDepositEventUtils.createEventData(glvDeposit);\\n\\n        validateGasLeftForCallback(glvDeposit.callbackGasLimit());\\n\\n        try IGlvDepositCallbackReceiver(glvDeposit.callbackContract()).afterGlvDepositExecution{ gas: glvDeposit.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvDepositExecutionError(key, glvDeposit);\\n        }\\n    }\\n\\n    // @dev called after a glvDeposit cancellation\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was cancelled\\n    function afterGlvDepositCancellation(\\n        bytes32 key,\\n        GlvDeposit.Props memory glvDeposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvDeposit.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory glvData = GlvDepositEventUtils.createEventData(glvDeposit);\\n\\n        validateGasLeftForCallback(glvDeposit.callbackGasLimit());\\n\\n        try IGlvDepositCallbackReceiver(glvDeposit.callbackContract()).afterGlvDepositCancellation{ gas: glvDeposit.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvDepositCancellationError(key, glvDeposit);\\n        }\\n    }\\n\\n    // @dev called after a glvWithdrawal execution\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was executed\\n    function afterGlvWithdrawalExecution(\\n        bytes32 key,\\n        GlvWithdrawal.Props memory glvWithdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvWithdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory glvData = GlvWithdrawalEventUtils.createEventData(glvWithdrawal);\\n\\n        validateGasLeftForCallback(glvWithdrawal.callbackGasLimit());\\n\\n        try IGlvWithdrawalCallbackReceiver(glvWithdrawal.callbackContract()).afterGlvWithdrawalExecution{ gas: glvWithdrawal.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvWithdrawalExecutionError(key, glvWithdrawal);\\n        }\\n    }\\n\\n    // @dev called after a glvWithdrawal cancellation\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was cancelled\\n    function afterGlvWithdrawalCancellation(\\n        bytes32 key,\\n        GlvWithdrawal.Props memory glvWithdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvWithdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory glvData = GlvWithdrawalEventUtils.createEventData(glvWithdrawal);\\n\\n        validateGasLeftForCallback(glvWithdrawal.callbackGasLimit());\\n\\n        try IGlvWithdrawalCallbackReceiver(glvWithdrawal.callbackContract()).afterGlvWithdrawalCancellation{ gas: glvWithdrawal.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvWithdrawalCancellationError(key, glvWithdrawal);\\n        }\\n    }\\n\\n    // @dev validates that the given address is a contract\\n    // @param callbackContract the contract to call\\n    function isValidCallbackContract(address callbackContract) public view returns (bool) {\\n        if (callbackContract == address(0)) { return false; }\\n        if (!callbackContract.isContract()) { return false; }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xec102961f11fd9afa3b96276bd556417fae2e4b28b76c419b0009d9846608700\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IDepositCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n\\n// @title IDepositCallbackReceiver\\n// @dev interface for a deposit callback contract\\ninterface IDepositCallbackReceiver {\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(bytes32 key, EventUtils.EventLogData memory depositData, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(bytes32 key, EventUtils.EventLogData memory depositData, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0x689084be91534e98f5be68704e40ed84a5a2eebb8f56921c36e2fe1a2d57158b\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IGasFeeCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\ninterface IGasFeeCallbackReceiver {\\n    function refundExecutionFee(bytes32 key, EventUtils.EventLogData memory eventData) external payable;\\n}\\n\",\"keccak256\":\"0xfe5c4e4729d117cd2559c0a6b20567ec940d02c2fad5f58a276e854bf5c1e15d\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IGlvDepositCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n// @title IGlvDepositCallbackReceiver\\n// @dev interface for a glvDeposit callback contract\\ninterface IGlvDepositCallbackReceiver {\\n    // @dev called after a glvDeposit execution\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was executed\\n    function afterGlvDepositExecution(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvDepositData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n\\n    // @dev called after a glvDeposit cancellation\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was cancelled\\n    function afterGlvDepositCancellation(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvDepositData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0f350e9b2e6aef3eef5167bdc20d871de28da8525dd93e947e454e93adadd37b\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IGlvWithdrawalCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n\\n// @title IGlvWithdrawalCallbackReceiver\\n// @dev interface for a glvWithdrawal callback contract\\ninterface IGlvWithdrawalCallbackReceiver {\\n    // @dev called after a glvWithdrawal execution\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was executed\\n    function afterGlvWithdrawalExecution(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvWithdrawalData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n\\n    // @dev called after a glvWithdrawal cancellation\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was cancelled\\n    function afterGlvWithdrawalCancellation(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvWithdrawalData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f6d71eed3afc99cdb08b8ec6363612554593b9d589a2b70164aaee4abc575c3\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IOrderCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\n\\n// @title IOrderCallbackReceiver\\n// @dev interface for an order callback contract\\ninterface IOrderCallbackReceiver {\\n    // @dev called after an order execution\\n    // @param key the key of the order\\n    // @param order the order that was executed\\n    function afterOrderExecution(bytes32 key, EventUtils.EventLogData memory orderData, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after an order cancellation\\n    // @param key the key of the order\\n    // @param order the order that was cancelled\\n    function afterOrderCancellation(bytes32 key, EventUtils.EventLogData memory order, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\\n    // @param key the key of the order\\n    // @param order the order that was frozen\\n    function afterOrderFrozen(bytes32 key, EventUtils.EventLogData memory order, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0x7eb8395b962b6cf0dbdd5795baed6a1436f2473274265058b12ca47e5d76aa25\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IShiftCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\ninterface IShiftCallbackReceiver {\\n    function afterShiftExecution(bytes32 key, EventUtils.EventLogData memory shiftData, EventUtils.EventLogData memory eventData) external;\\n    function afterShiftCancellation(bytes32 key, EventUtils.EventLogData memory shiftData, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0xd567e87837ba0aff0955704de4d81778d05b96ab775723ca7232bda8eca7c9ab\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IWithdrawalCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n// @title IWithdrawalCallbackReceiver\\n// @dev interface for a withdrawal callback contract\\ninterface IWithdrawalCallbackReceiver {\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(bytes32 key, EventUtils.EventLogData memory withdrawal, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(bytes32 key, EventUtils.EventLogData memory withdrawal, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0xb42f1929f23d01a7368b1e967417ac5f90b1e6be2d36cedc7894bd3521f5e4e5\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbGasInfo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ArbGasInfo\\ninterface ArbGasInfo {\\n    function getCurrentTxL1GasFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x48c4ffaab45cc49cf4d4014eaf92867b65f7cf5c20deca5199e746d72c197816\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ArbSys\\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\\n// value, the ArbSys interface is used to retrieve the L2 value\\ninterface ArbSys {\\n    function arbBlockNumber() external view returns (uint256);\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x97a2fcc4828af974d9e763db893b1188fec4d964ec3896611284678631dc5ffd\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArbSys.sol\\\";\\nimport \\\"./ArbGasInfo.sol\\\";\\n\\n// @title Chain\\n// @dev Wrap the calls to retrieve chain variables to handle differences\\n// between chain implementations\\nlibrary Chain {\\n    // if the ARBITRUM_CHAIN_ID changes, a new version of this library\\n    // and contracts depending on it would need to be deployed\\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\\n    uint256 public constant ARBITRUM_SEPOLIA_CHAIN_ID = 421614;\\n\\n    ArbSys public constant arbSys = ArbSys(address(100));\\n    ArbGasInfo public constant arbGasInfo = ArbGasInfo(address(108));\\n\\n    // @dev return the current block's timestamp\\n    // @return the current block's timestamp\\n    function currentTimestamp() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    // @dev return the current block's number\\n    // @return the current block's number\\n    function currentBlockNumber() internal view returns (uint256) {\\n        if (shouldUseArbPrecompiles()) {\\n            return arbSys.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    // @dev return the current block's hash\\n    // @return the current block's hash\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (shouldUseArbPrecompiles()) {\\n            return arbSys.arbBlockHash(blockNumber);\\n        }\\n\\n        return blockhash(blockNumber);\\n    }\\n\\n    function shouldUseArbPrecompiles() internal view returns (bool) {\\n        return block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_SEPOLIA_CHAIN_ID;\\n    }\\n\\n    function getCurrentTxL1GasFees() internal view returns (uint256) {\\n        if (!shouldUseArbPrecompiles()) {\\n            return 0;\\n        }\\n        return arbGasInfo.getCurrentTxL1GasFees();\\n    }\\n}\\n\",\"keccak256\":\"0x6aaf3c482b05293c1d7582182e5453a25d4e87aa7d51388865d11984daba94cd\",\"license\":\"BUSL-1.1\"},\"contracts/data/DataStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\n// @title DataStore\\n// @dev DataStore for all general state values\\ncontract DataStore is RoleModule {\\n    using SafeCast for int256;\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.UintSet;\\n\\n    // store for uint values\\n    mapping(bytes32 => uint256) public uintValues;\\n    // store for int values\\n    mapping(bytes32 => int256) public intValues;\\n    // store for address values\\n    mapping(bytes32 => address) public addressValues;\\n    // store for bool values\\n    mapping(bytes32 => bool) public boolValues;\\n    // store for string values\\n    mapping(bytes32 => string) public stringValues;\\n    // store for bytes32 values\\n    mapping(bytes32 => bytes32) public bytes32Values;\\n\\n    // store for uint[] values\\n    mapping(bytes32 => uint256[]) public uintArrayValues;\\n    // store for int[] values\\n    mapping(bytes32 => int256[]) public intArrayValues;\\n    // store for address[] values\\n    mapping(bytes32 => address[]) public addressArrayValues;\\n    // store for bool[] values\\n    mapping(bytes32 => bool[]) public boolArrayValues;\\n    // store for string[] values\\n    mapping(bytes32 => string[]) public stringArrayValues;\\n    // store for bytes32[] values\\n    mapping(bytes32 => bytes32[]) public bytes32ArrayValues;\\n\\n    // store for bytes32 sets\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) internal bytes32Sets;\\n    // store for address sets\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal addressSets;\\n    // store for uint256 sets\\n    mapping(bytes32 => EnumerableSet.UintSet) internal uintSets;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev get the uint value for the given key\\n    // @param key the key of the value\\n    // @return the uint value for the key\\n    function getUint(bytes32 key) external view returns (uint256) {\\n        return uintValues[key];\\n    }\\n\\n    // @dev set the uint value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the uint value for the key\\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uintValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the uint value for the given key\\n    // @param key the key of the value\\n    function removeUint(bytes32 key) external onlyController {\\n        delete uintValues[key];\\n    }\\n\\n    // @dev add the input int value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, int256 value, string memory errorMessage) external onlyController returns (uint256) {\\n        uint256 currValue = uintValues[key];\\n        if (value < 0 && (-value).toUint256() > currValue) {\\n            revert(errorMessage);\\n        }\\n        uint256 nextUint = Calc.sumReturnUint256(currValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 currValue = uintValues[key];\\n        uint256 nextUint = currValue + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input int value to the existing uint value, prevent the uint\\n    // value from becoming negative\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyBoundedDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\\n        uint256 uintValue = uintValues[key];\\n        if (value < 0 && (-value).toUint256() > uintValue) {\\n            uintValues[key] = 0;\\n            return 0;\\n        }\\n\\n        uint256 nextUint = Calc.sumReturnUint256(uintValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev subtract the input uint value from the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] - value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev get the int value for the given key\\n    // @param key the key of the value\\n    // @return the int value for the key\\n    function getInt(bytes32 key) external view returns (int256) {\\n        return intValues[key];\\n    }\\n\\n    // @dev set the int value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the int value for the key\\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        intValues[key] = value;\\n        return value;\\n    }\\n\\n    function removeInt(bytes32 key) external onlyController {\\n        delete intValues[key];\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev subtract the input int value from the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] - value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev get the address value for the given key\\n    // @param key the key of the value\\n    // @return the address value for the key\\n    function getAddress(bytes32 key) external view returns (address) {\\n        return addressValues[key];\\n    }\\n\\n    // @dev set the address value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the address value for the key\\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\\n        addressValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the address value for the given key\\n    // @param key the key of the value\\n    function removeAddress(bytes32 key) external onlyController {\\n        delete addressValues[key];\\n    }\\n\\n    // @dev get the bool value for the given key\\n    // @param key the key of the value\\n    // @return the bool value for the key\\n    function getBool(bytes32 key) external view returns (bool) {\\n        return boolValues[key];\\n    }\\n\\n    // @dev set the bool value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bool value for the key\\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\\n        boolValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the bool value for the given key\\n    // @param key the key of the value\\n    function removeBool(bytes32 key) external onlyController {\\n        delete boolValues[key];\\n    }\\n\\n    // @dev get the string value for the given key\\n    // @param key the key of the value\\n    // @return the string value for the key\\n    function getString(bytes32 key) external view returns (string memory) {\\n        return stringValues[key];\\n    }\\n\\n    // @dev set the string value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the string value for the key\\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\\n        stringValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the string value for the given key\\n    // @param key the key of the value\\n    function removeString(bytes32 key) external onlyController {\\n        delete stringValues[key];\\n    }\\n\\n    // @dev get the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @return the bytes32 value for the key\\n    function getBytes32(bytes32 key) external view returns (bytes32) {\\n        return bytes32Values[key];\\n    }\\n\\n    // @dev set the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bytes32 value for the key\\n    function setBytes32(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\\n        bytes32Values[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the bytes32 value for the given key\\n    // @param key the key of the value\\n    function removeBytes32(bytes32 key) external onlyController {\\n        delete bytes32Values[key];\\n    }\\n\\n    // @dev get the uint array for the given key\\n    // @param key the key of the uint array\\n    // @return the uint array for the key\\n    function getUintArray(bytes32 key) external view returns (uint256[] memory) {\\n        return uintArrayValues[key];\\n    }\\n\\n    // @dev set the uint array for the given key\\n    // @param key the key of the uint array\\n    // @param value the value of the uint array\\n    function setUintArray(bytes32 key, uint256[] memory value) external onlyController {\\n        uintArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the uint array for the given key\\n    // @param key the key of the uint array\\n    // @param value the value of the uint array\\n    function removeUintArray(bytes32 key) external onlyController {\\n        delete uintArrayValues[key];\\n    }\\n\\n    // @dev get the int array for the given key\\n    // @param key the key of the int array\\n    // @return the int array for the key\\n    function getIntArray(bytes32 key) external view returns (int256[] memory) {\\n        return intArrayValues[key];\\n    }\\n\\n    // @dev set the int array for the given key\\n    // @param key the key of the int array\\n    // @param value the value of the int array\\n    function setIntArray(bytes32 key, int256[] memory value) external onlyController {\\n        intArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the int array for the given key\\n    // @param key the key of the int array\\n    // @param value the value of the int array\\n    function removeIntArray(bytes32 key) external onlyController {\\n        delete intArrayValues[key];\\n    }\\n\\n    // @dev get the address array for the given key\\n    // @param key the key of the address array\\n    // @return the address array for the key\\n    function getAddressArray(bytes32 key) external view returns (address[] memory) {\\n        return addressArrayValues[key];\\n    }\\n\\n    // @dev set the address array for the given key\\n    // @param key the key of the address array\\n    // @param value the value of the address array\\n    function setAddressArray(bytes32 key, address[] memory value) external onlyController {\\n        addressArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the address array for the given key\\n    // @param key the key of the address array\\n    // @param value the value of the address array\\n    function removeAddressArray(bytes32 key) external onlyController {\\n        delete addressArrayValues[key];\\n    }\\n\\n    // @dev get the bool array for the given key\\n    // @param key the key of the bool array\\n    // @return the bool array for the key\\n    function getBoolArray(bytes32 key) external view returns (bool[] memory) {\\n        return boolArrayValues[key];\\n    }\\n\\n    // @dev set the bool array for the given key\\n    // @param key the key of the bool array\\n    // @param value the value of the bool array\\n    function setBoolArray(bytes32 key, bool[] memory value) external onlyController {\\n        boolArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the bool array for the given key\\n    // @param key the key of the bool array\\n    // @param value the value of the bool array\\n    function removeBoolArray(bytes32 key) external onlyController {\\n        delete boolArrayValues[key];\\n    }\\n\\n    // @dev get the string array for the given key\\n    // @param key the key of the string array\\n    // @return the string array for the key\\n    function getStringArray(bytes32 key) external view returns (string[] memory) {\\n        return stringArrayValues[key];\\n    }\\n\\n    // @dev set the string array for the given key\\n    // @param key the key of the string array\\n    // @param value the value of the string array\\n    function setStringArray(bytes32 key, string[] memory value) external onlyController {\\n        stringArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the string array for the given key\\n    // @param key the key of the string array\\n    // @param value the value of the string array\\n    function removeStringArray(bytes32 key) external onlyController {\\n        delete stringArrayValues[key];\\n    }\\n\\n    // @dev get the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @return the bytes32 array for the key\\n    function getBytes32Array(bytes32 key) external view returns (bytes32[] memory) {\\n        return bytes32ArrayValues[key];\\n    }\\n\\n    // @dev set the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @param value the value of the bytes32 array\\n    function setBytes32Array(bytes32 key, bytes32[] memory value) external onlyController {\\n        bytes32ArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @param value the value of the bytes32 array\\n    function removeBytes32Array(bytes32 key) external onlyController {\\n        delete bytes32ArrayValues[key];\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool) {\\n        return bytes32Sets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getBytes32Count(bytes32 setKey) external view returns (uint256) {\\n        return bytes32Sets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getBytes32ValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return bytes32Sets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addBytes32(bytes32 setKey, bytes32 value) external onlyController {\\n        bytes32Sets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeBytes32(bytes32 setKey, bytes32 value) external onlyController {\\n        bytes32Sets[setKey].remove(value);\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsAddress(bytes32 setKey, address value) external view returns (bool) {\\n        return addressSets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getAddressCount(bytes32 setKey) external view returns (uint256) {\\n        return addressSets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getAddressValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return addressSets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addAddress(bytes32 setKey, address value) external onlyController {\\n        addressSets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeAddress(bytes32 setKey, address value) external onlyController {\\n        addressSets[setKey].remove(value);\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsUint(bytes32 setKey, uint256 value) external view returns (bool) {\\n        return uintSets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getUintCount(bytes32 setKey) external view returns (uint256) {\\n        return uintSets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getUintValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (uint256[] memory) {\\n        return uintSets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addUint(bytes32 setKey, uint256 value) external onlyController {\\n        uintSets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeUint(bytes32 setKey, uint256 value) external onlyController {\\n        uintSets[setKey].remove(value);\\n    }\\n}\\n\",\"keccak256\":\"0x38684fbf5eaa5e5c4ae0d220b28b7ceb3ddd6be8d983f162ac4430e7479dd90c\",\"license\":\"BUSL-1.1\"},\"contracts/data/Keys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Keys\\n// @dev Keys for values in the DataStore\\nlibrary Keys {\\n    // @dev key for the address of the wrapped native token\\n    bytes32 public constant WNT = keccak256(abi.encode(\\\"WNT\\\"));\\n    // @dev key for the nonce value used in NonceUtils\\n    bytes32 public constant NONCE = keccak256(abi.encode(\\\"NONCE\\\"));\\n\\n    // @dev for sending received fees\\n    bytes32 public constant FEE_RECEIVER = keccak256(abi.encode(\\\"FEE_RECEIVER\\\"));\\n\\n    // @dev for holding tokens that could not be sent out\\n    bytes32 public constant HOLDING_ADDRESS = keccak256(abi.encode(\\\"HOLDING_ADDRESS\\\"));\\n    bytes32 public constant RELAY_FEE_ADDRESS = keccak256(abi.encode(\\\"RELAY_FEE_ADDRESS\\\"));\\n\\n    // @dev key for the minimum gas for execution error\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS\\\"));\\n\\n    // @dev key for the minimum gas that should be forwarded for execution error handling\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD\\\"));\\n\\n    // @dev key for the min additional gas for execution\\n    bytes32 public constant MIN_ADDITIONAL_GAS_FOR_EXECUTION = keccak256(abi.encode(\\\"MIN_ADDITIONAL_GAS_FOR_EXECUTION\\\"));\\n\\n    // @dev for a global reentrancy guard\\n    bytes32 public constant REENTRANCY_GUARD_STATUS = keccak256(abi.encode(\\\"REENTRANCY_GUARD_STATUS\\\"));\\n\\n    // @dev key for deposit fees\\n    bytes32 public constant DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"DEPOSIT_FEE_TYPE\\\"));\\n    // @dev key for withdrawal fees\\n    bytes32 public constant WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"WITHDRAWAL_FEE_TYPE\\\"));\\n    // @dev key for swap fees\\n    bytes32 public constant SWAP_FEE_TYPE = keccak256(abi.encode(\\\"SWAP_FEE_TYPE\\\"));\\n    bytes32 public constant ATOMIC_SWAP_FEE_TYPE = keccak256(abi.encode(\\\"ATOMIC_SWAP_FEE_TYPE\\\"));\\n    // @dev key for position fees\\n    bytes32 public constant POSITION_FEE_TYPE = keccak256(abi.encode(\\\"POSITION_FEE_TYPE\\\"));\\n    // @dev key for ui deposit fees\\n    bytes32 public constant UI_DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"UI_DEPOSIT_FEE_TYPE\\\"));\\n    // @dev key for ui withdrawal fees\\n    bytes32 public constant UI_WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"UI_WITHDRAWAL_FEE_TYPE\\\"));\\n    // @dev key for ui swap fees\\n    bytes32 public constant UI_SWAP_FEE_TYPE = keccak256(abi.encode(\\\"UI_SWAP_FEE_TYPE\\\"));\\n    // @dev key for ui position fees\\n    bytes32 public constant UI_POSITION_FEE_TYPE = keccak256(abi.encode(\\\"UI_POSITION_FEE_TYPE\\\"));\\n\\n    // @dev key for ui fee factor\\n    bytes32 public constant UI_FEE_FACTOR = keccak256(abi.encode(\\\"UI_FEE_FACTOR\\\"));\\n    // @dev key for max ui fee receiver factor\\n    bytes32 public constant MAX_UI_FEE_FACTOR = keccak256(abi.encode(\\\"MAX_UI_FEE_FACTOR\\\"));\\n\\n    // @dev key for the claimable fee amount\\n    bytes32 public constant CLAIMABLE_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FEE_AMOUNT\\\"));\\n    // @dev key for the claimable ui fee amount\\n    bytes32 public constant CLAIMABLE_UI_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_UI_FEE_AMOUNT\\\"));\\n    // @dev key for the max number of auto cancel orders\\n    bytes32 public constant MAX_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\\\"MAX_AUTO_CANCEL_ORDERS\\\"));\\n    // @dev key for the max total callback gas limit for auto cancel orders\\n    bytes32 public constant MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\\\"MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS\\\"));\\n\\n    // @dev key for the market list\\n    bytes32 public constant MARKET_LIST = keccak256(abi.encode(\\\"MARKET_LIST\\\"));\\n\\n    // @dev key for the fee batch list\\n    bytes32 public constant FEE_BATCH_LIST = keccak256(abi.encode(\\\"FEE_BATCH_LIST\\\"));\\n\\n    // @dev key for the deposit list\\n    bytes32 public constant DEPOSIT_LIST = keccak256(abi.encode(\\\"DEPOSIT_LIST\\\"));\\n    // @dev key for the account deposit list\\n    bytes32 public constant ACCOUNT_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_DEPOSIT_LIST\\\"));\\n\\n    // @dev key for the withdrawal list\\n    bytes32 public constant WITHDRAWAL_LIST = keccak256(abi.encode(\\\"WITHDRAWAL_LIST\\\"));\\n    // @dev key for the account withdrawal list\\n    bytes32 public constant ACCOUNT_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"ACCOUNT_WITHDRAWAL_LIST\\\"));\\n\\n    // @dev key for the shift list\\n    bytes32 public constant SHIFT_LIST = keccak256(abi.encode(\\\"SHIFT_LIST\\\"));\\n    // @dev key for the account shift list\\n    bytes32 public constant ACCOUNT_SHIFT_LIST = keccak256(abi.encode(\\\"ACCOUNT_SHIFT_LIST\\\"));\\n\\n    bytes32 public constant GLV_LIST = keccak256(abi.encode(\\\"GLV_LIST\\\"));\\n    bytes32 public constant GLV_DEPOSIT_LIST = keccak256(abi.encode(\\\"GLV_DEPOSIT_LIST\\\"));\\n    bytes32 public constant GLV_SHIFT_LIST = keccak256(abi.encode(\\\"GLV_SHIFT_LIST\\\"));\\n    bytes32 public constant ACCOUNT_GLV_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_GLV_DEPOSIT_LIST\\\"));\\n    bytes32 public constant GLV_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"GLV_WITHDRAWAL_LIST\\\"));\\n    bytes32 public constant ACCOUNT_GLV_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"ACCOUNT_GLV_WITHDRAWAL_LIST\\\"));\\n    bytes32 public constant GLV_SUPPORTED_MARKET_LIST = keccak256(abi.encode(\\\"GLV_SUPPORTED_MARKET_LIST\\\"));\\n\\n    // @dev key for the position list\\n    bytes32 public constant POSITION_LIST = keccak256(abi.encode(\\\"POSITION_LIST\\\"));\\n    // @dev key for the account position list\\n    bytes32 public constant ACCOUNT_POSITION_LIST = keccak256(abi.encode(\\\"ACCOUNT_POSITION_LIST\\\"));\\n\\n    // @dev key for the order list\\n    bytes32 public constant ORDER_LIST = keccak256(abi.encode(\\\"ORDER_LIST\\\"));\\n    // @dev key for the account order list\\n    bytes32 public constant ACCOUNT_ORDER_LIST = keccak256(abi.encode(\\\"ACCOUNT_ORDER_LIST\\\"));\\n\\n    // @dev key for the subaccount list\\n    bytes32 public constant SUBACCOUNT_LIST = keccak256(abi.encode(\\\"SUBACCOUNT_LIST\\\"));\\n\\n    // @dev key for the auto cancel order list\\n    bytes32 public constant AUTO_CANCEL_ORDER_LIST = keccak256(abi.encode(\\\"AUTO_CANCEL_ORDER_LIST\\\"));\\n\\n    // @dev key for is market disabled\\n    bytes32 public constant IS_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_MARKET_DISABLED\\\"));\\n\\n    // @dev key for the max swap path length allowed\\n    bytes32 public constant MAX_SWAP_PATH_LENGTH = keccak256(abi.encode(\\\"MAX_SWAP_PATH_LENGTH\\\"));\\n    // @dev key used to store markets observed in a swap path, to ensure that a swap path contains unique markets\\n    bytes32 public constant SWAP_PATH_MARKET_FLAG = keccak256(abi.encode(\\\"SWAP_PATH_MARKET_FLAG\\\"));\\n    // @dev key used to store the min market tokens for the first deposit for a market\\n    bytes32 public constant MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\\\"MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT\\\"));\\n\\n    bytes32 public constant CREATE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    bytes32 public constant CANCEL_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    bytes32 public constant EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n\\n    bytes32 public constant CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    bytes32 public constant CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    bytes32 public constant EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n\\n    bytes32 public constant CREATE_GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_SHIFT_FEATURE_DISABLED\\\"));\\n    bytes32 public constant EXECUTE_GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_SHIFT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create deposit feature is disabled\\n    bytes32 public constant CREATE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel deposit feature is disabled\\n    bytes32 public constant CANCEL_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute deposit feature is disabled\\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_DEPOSIT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create withdrawal feature is disabled\\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel withdrawal feature is disabled\\n    bytes32 public constant CANCEL_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute withdrawal feature is disabled\\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute atomic withdrawal feature is disabled\\n    bytes32 public constant EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create shift feature is disabled\\n    bytes32 public constant CREATE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_SHIFT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel shift feature is disabled\\n    bytes32 public constant CANCEL_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_SHIFT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute shift feature is disabled\\n    bytes32 public constant EXECUTE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_SHIFT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create order feature is disabled\\n    bytes32 public constant CREATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute order feature is disabled\\n    bytes32 public constant EXECUTE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute adl feature is disabled\\n    // for liquidations, it can be disabled by using the EXECUTE_ORDER_FEATURE_DISABLED key with the Liquidation\\n    // order type, ADL orders have a MarketDecrease order type, so a separate key is needed to disable it\\n    bytes32 public constant EXECUTE_ADL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ADL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the update order feature is disabled\\n    bytes32 public constant UPDATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"UPDATE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel order feature is disabled\\n    bytes32 public constant CANCEL_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_ORDER_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the claim funding fees feature is disabled\\n    bytes32 public constant CLAIM_FUNDING_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_FUNDING_FEES_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim collateral feature is disabled\\n    bytes32 public constant CLAIM_COLLATERAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_COLLATERAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim affiliate rewards feature is disabled\\n    bytes32 public constant CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim ui fees feature is disabled\\n    bytes32 public constant CLAIM_UI_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_UI_FEES_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the subaccount feature is disabled\\n    bytes32 public constant SUBACCOUNT_FEATURE_DISABLED = keccak256(abi.encode(\\\"SUBACCOUNT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the gasless feature is disabled\\n    bytes32 public constant GASLESS_FEATURE_DISABLED = keccak256(abi.encode(\\\"GASLESS_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for the minimum required oracle signers for an oracle observation\\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(abi.encode(\\\"MIN_ORACLE_SIGNERS\\\"));\\n    // @dev key for the minimum block confirmations before blockhash can be excluded for oracle signature validation\\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(abi.encode(\\\"MIN_ORACLE_BLOCK_CONFIRMATIONS\\\"));\\n    // @dev key for the maximum usable oracle price age in seconds\\n    bytes32 public constant MAX_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ORACLE_PRICE_AGE\\\"));\\n    // @dev key for the maximum usable atomic oracle price age in seconds\\n    bytes32 public constant MAX_ATOMIC_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ATOMIC_ORACLE_PRICE_AGE\\\"));\\n    // @dev key for the maximum oracle timestamp range\\n    bytes32 public constant MAX_ORACLE_TIMESTAMP_RANGE = keccak256(abi.encode(\\\"MAX_ORACLE_TIMESTAMP_RANGE\\\"));\\n    // @dev key for the maximum oracle price deviation factor from the ref price\\n    bytes32 public constant MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR = keccak256(abi.encode(\\\"MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR\\\"));\\n    // @dev key for whether an oracle provider is enabled\\n    bytes32 public constant IS_ORACLE_PROVIDER_ENABLED = keccak256(abi.encode(\\\"IS_ORACLE_PROVIDER_ENABLED\\\"));\\n    // @dev key for whether an oracle provider can be used for atomic actions\\n    bytes32 public constant IS_ATOMIC_ORACLE_PROVIDER = keccak256(abi.encode(\\\"IS_ATOMIC_ORACLE_PROVIDER\\\"));\\n    // @dev key for oracle timestamp adjustment\\n    bytes32 public constant ORACLE_TIMESTAMP_ADJUSTMENT = keccak256(abi.encode(\\\"ORACLE_TIMESTAMP_ADJUSTMENT\\\"));\\n    // @dev key for oracle provider for token\\n    bytes32 public constant ORACLE_PROVIDER_FOR_TOKEN = keccak256(abi.encode(\\\"ORACLE_PROVIDER_FOR_TOKEN\\\"));\\n    // @dev key for oracle provider updated time\\n    bytes32 public constant ORACLE_PROVIDER_UPDATED_AT = keccak256(abi.encode(\\\"ORACLE_PROVIDER_UPDATED_AT\\\"));\\n    // @dev key for oracle provider same value delay\\n    bytes32 public constant ORACLE_PROVIDER_MIN_CHANGE_DELAY = keccak256(abi.encode(\\\"ORACLE_PROVIDER_MIN_CHANGE_DELAY\\\"));\\n    // @dev key for the chainlink payment token\\n    bytes32 public constant CHAINLINK_PAYMENT_TOKEN = keccak256(abi.encode(\\\"CHAINLINK_PAYMENT_TOKEN\\\"));\\n    // @dev key for the sequencer grace duration\\n    bytes32 public constant SEQUENCER_GRACE_DURATION = keccak256(abi.encode(\\\"SEQUENCER_GRACE_DURATION\\\"));\\n\\n    // @dev key for the percentage amount of position fees to be received\\n    bytes32 public constant POSITION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of liquidation fees to be received\\n    bytes32 public constant LIQUIDATION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"LIQUIDATION_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of swap fees to be received\\n    bytes32 public constant SWAP_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of borrowing fees to be received\\n    bytes32 public constant BORROWING_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"BORROWING_FEE_RECEIVER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1\\\"));\\n    // @dev key for the gas limit used for each oracle price when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_PER_ORACLE_PRICE\\\"));\\n    // @dev key for the multiplier used when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when calculating execution fee\\n    bytes32 public constant EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1\\\"));\\n    // @dev key for the gas limit used for each oracle price\\n    bytes32 public constant EXECUTION_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_PER_ORACLE_PRICE\\\"));\\n    // @dev key for the multiplier used when calculating execution fee\\n    bytes32 public constant EXECUTION_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the max execution fee multiplier\\n    bytes32 public constant MAX_EXECUTION_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"MAX_EXECUTION_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    bytes32 public constant MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT = keccak256(abi.encode(\\\"MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT\\\"));\\n    bytes32 public constant GELATO_RELAY_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"GELATO_RELAY_FEE_MULTIPLIER_FACTOR\\\"));\\n    bytes32 public constant GELATO_RELAY_FEE_BASE_AMOUNT = keccak256(abi.encode(\\\"GELATO_RELAY_FEE_BASE_AMOUNT\\\"));\\n    // @dev key for the estimated gas limit for deposits\\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"DEPOSIT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for withdrawals\\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"WITHDRAWAL_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_DEPOSIT_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_WITHDRAWAL_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_SHIFT_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_SHIFT_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_PER_MARKET_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_PER_MARKET_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for shifts\\n    bytes32 public constant SHIFT_GAS_LIMIT = keccak256(abi.encode(\\\"SHIFT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for single swaps\\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(abi.encode(\\\"SINGLE_SWAP_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for increase orders\\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"INCREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for decrease orders\\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"DECREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for swap orders\\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"SWAP_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for token transfers\\n    bytes32 public constant TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for native token transfers\\n    bytes32 public constant NATIVE_TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"NATIVE_TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the request expiration time, after which the request will be considered expired\\n    bytes32 public constant REQUEST_EXPIRATION_TIME = keccak256(abi.encode(\\\"REQUEST_EXPIRATION_TIME\\\"));\\n\\n    bytes32 public constant MAX_CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"MAX_CALLBACK_GAS_LIMIT\\\"));\\n    bytes32 public constant REFUND_EXECUTION_FEE_GAS_LIMIT = keccak256(abi.encode(\\\"REFUND_EXECUTION_FEE_GAS_LIMIT\\\"));\\n    bytes32 public constant SAVED_CALLBACK_CONTRACT = keccak256(abi.encode(\\\"SAVED_CALLBACK_CONTRACT\\\"));\\n\\n    // @dev key for the min collateral factor\\n    bytes32 public constant MIN_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR\\\"));\\n    // @dev key for the min collateral factor for open interest multiplier\\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER\\\"));\\n    // @dev key for the min allowed collateral in USD\\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(abi.encode(\\\"MIN_COLLATERAL_USD\\\"));\\n    // @dev key for the min allowed collateral factor which is using for some new markets to limit allowed leverage\\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_LIQUIDATION = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR_FOR_LIQUIDATION\\\"));\\n    // @dev key for the min allowed position size in USD\\n    bytes32 public constant MIN_POSITION_SIZE_USD = keccak256(abi.encode(\\\"MIN_POSITION_SIZE_USD\\\"));\\n\\n    // @dev key for the virtual id of tokens\\n    bytes32 public constant VIRTUAL_TOKEN_ID = keccak256(abi.encode(\\\"VIRTUAL_TOKEN_ID\\\"));\\n    // @dev key for the virtual id of markets\\n    bytes32 public constant VIRTUAL_MARKET_ID = keccak256(abi.encode(\\\"VIRTUAL_MARKET_ID\\\"));\\n    // @dev key for the virtual inventory for swaps\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_SWAPS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_SWAPS\\\"));\\n    // @dev key for the virtual inventory for positions\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_POSITIONS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_POSITIONS\\\"));\\n\\n    // @dev key for the position impact factor\\n    bytes32 public constant POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the position impact exponent factor\\n    bytes32 public constant POSITION_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the max decrease position impact factor\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the max position impact factor for liquidations\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS\\\"));\\n    // @dev key for the position fee factor\\n    bytes32 public constant POSITION_FEE_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_FACTOR\\\"));\\n    bytes32 public constant PRO_TRADER_TIER = keccak256(abi.encode(\\\"PRO_TRADER_TIER\\\"));\\n    bytes32 public constant PRO_DISCOUNT_FACTOR = keccak256(abi.encode(\\\"PRO_DISCOUNT_FACTOR\\\"));\\n    // @dev key for the liquidation fee factor\\n    bytes32 public constant LIQUIDATION_FEE_FACTOR = keccak256(abi.encode(\\\"LIQUIDATION_FEE_FACTOR\\\"));\\n    // @dev key for the swap impact factor\\n    bytes32 public constant SWAP_IMPACT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_FACTOR\\\"));\\n    // @dev key for the swap impact exponent factor\\n    bytes32 public constant SWAP_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the swap fee factor\\n    bytes32 public constant SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_FACTOR\\\"));\\n    // @dev key for the atomic swap fee factor\\n    bytes32 public constant ATOMIC_SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"ATOMIC_SWAP_FEE_FACTOR\\\"));\\n    bytes32 public constant ATOMIC_WITHDRAWAL_FEE_FACTOR = keccak256(abi.encode(\\\"ATOMIC_WITHDRAWAL_FEE_FACTOR\\\"));\\n    bytes32 public constant DEPOSIT_FEE_FACTOR = keccak256(abi.encode(\\\"DEPOSIT_FEE_FACTOR\\\"));\\n    bytes32 public constant WITHDRAWAL_FEE_FACTOR = keccak256(abi.encode(\\\"WITHDRAWAL_FEE_FACTOR\\\"));\\n    // @dev key for the oracle type\\n    bytes32 public constant ORACLE_TYPE = keccak256(abi.encode(\\\"ORACLE_TYPE\\\"));\\n    // @dev key for open interest\\n    bytes32 public constant OPEN_INTEREST = keccak256(abi.encode(\\\"OPEN_INTEREST\\\"));\\n    // @dev key for open interest in tokens\\n    bytes32 public constant OPEN_INTEREST_IN_TOKENS = keccak256(abi.encode(\\\"OPEN_INTEREST_IN_TOKENS\\\"));\\n    // @dev key for collateral sum for a market\\n    bytes32 public constant COLLATERAL_SUM = keccak256(abi.encode(\\\"COLLATERAL_SUM\\\"));\\n    // @dev key for pool amount\\n    bytes32 public constant POOL_AMOUNT = keccak256(abi.encode(\\\"POOL_AMOUNT\\\"));\\n    // @dev key for max pool amount\\n    bytes32 public constant MAX_POOL_AMOUNT = keccak256(abi.encode(\\\"MAX_POOL_AMOUNT\\\"));\\n    // @dev key for max pool usd for deposit\\n    bytes32 public constant MAX_POOL_USD_FOR_DEPOSIT = keccak256(abi.encode(\\\"MAX_POOL_USD_FOR_DEPOSIT\\\"));\\n    // @dev key for max open interest\\n    bytes32 public constant MAX_OPEN_INTEREST = keccak256(abi.encode(\\\"MAX_OPEN_INTEREST\\\"));\\n    // @dev key for position impact pool amount\\n    bytes32 public constant POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for min position impact pool amount\\n    bytes32 public constant MIN_POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"MIN_POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for position impact pool distribution rate\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTION_RATE = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTION_RATE\\\"));\\n    // @dev key for position impact pool distributed at\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTED_AT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTED_AT\\\"));\\n    // @dev key for swap impact pool amount\\n    bytes32 public constant SWAP_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"SWAP_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for price feed\\n    bytes32 public constant PRICE_FEED = keccak256(abi.encode(\\\"PRICE_FEED\\\"));\\n    // @dev key for price feed multiplier\\n    bytes32 public constant PRICE_FEED_MULTIPLIER = keccak256(abi.encode(\\\"PRICE_FEED_MULTIPLIER\\\"));\\n    // @dev key for price feed heartbeat\\n    bytes32 public constant PRICE_FEED_HEARTBEAT_DURATION = keccak256(abi.encode(\\\"PRICE_FEED_HEARTBEAT_DURATION\\\"));\\n    // @dev key for data stream feed id\\n    bytes32 public constant DATA_STREAM_ID = keccak256(abi.encode(\\\"DATA_STREAM_ID\\\"));\\n    // @dev key for edge oracle data stream feed id\\n    bytes32 public constant EDGE_DATA_STREAM_ID = keccak256(abi.encode(\\\"EDGE_DATA_STREAM_ID\\\"));\\n    // @dev key for data stream feed multiplier\\n    bytes32 public constant DATA_STREAM_MULTIPLIER = keccak256(abi.encode(\\\"DATA_STREAM_MULTIPLIER\\\"));\\n    bytes32 public constant DATA_STREAM_SPREAD_REDUCTION_FACTOR = keccak256(abi.encode(\\\"DATA_STREAM_SPREAD_REDUCTION_FACTOR\\\"));\\n    // @dev key for stable price\\n    bytes32 public constant STABLE_PRICE = keccak256(abi.encode(\\\"STABLE_PRICE\\\"));\\n    // @dev key for reserve factor\\n    bytes32 public constant RESERVE_FACTOR = keccak256(abi.encode(\\\"RESERVE_FACTOR\\\"));\\n    // @dev key for open interest reserve factor\\n    bytes32 public constant OPEN_INTEREST_RESERVE_FACTOR = keccak256(abi.encode(\\\"OPEN_INTEREST_RESERVE_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR = keccak256(abi.encode(\\\"MAX_PNL_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_TRADERS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_TRADERS\\\"));\\n    // @dev key for max pnl factor for adl\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_ADL = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_ADL\\\"));\\n    // @dev key for min pnl factor for adl\\n    bytes32 public constant MIN_PNL_FACTOR_AFTER_ADL = keccak256(abi.encode(\\\"MIN_PNL_FACTOR_AFTER_ADL\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_DEPOSITS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_DEPOSITS\\\"));\\n    // @dev key for max pnl factor for withdrawals\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_WITHDRAWALS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_WITHDRAWALS\\\"));\\n    // @dev key for latest ADL at\\n    bytes32 public constant LATEST_ADL_AT = keccak256(abi.encode(\\\"LATEST_ADL_AT\\\"));\\n    // @dev key for whether ADL is enabled\\n    bytes32 public constant IS_ADL_ENABLED = keccak256(abi.encode(\\\"IS_ADL_ENABLED\\\"));\\n    // @dev key for funding factor\\n    bytes32 public constant FUNDING_FACTOR = keccak256(abi.encode(\\\"FUNDING_FACTOR\\\"));\\n    // @dev key for funding exponent factor\\n    bytes32 public constant FUNDING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"FUNDING_EXPONENT_FACTOR\\\"));\\n    // @dev key for saved funding factor\\n    bytes32 public constant SAVED_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"SAVED_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for funding increase factor\\n    bytes32 public constant FUNDING_INCREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_INCREASE_FACTOR_PER_SECOND\\\"));\\n    // @dev key for funding decrease factor\\n    bytes32 public constant FUNDING_DECREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_DECREASE_FACTOR_PER_SECOND\\\"));\\n    // @dev key for min funding factor\\n    bytes32 public constant MIN_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MIN_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for max funding factor\\n    bytes32 public constant MAX_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MAX_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for threshold for stable funding\\n    bytes32 public constant THRESHOLD_FOR_STABLE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_STABLE_FUNDING\\\"));\\n    // @dev key for threshold for decrease funding\\n    bytes32 public constant THRESHOLD_FOR_DECREASE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_DECREASE_FUNDING\\\"));\\n    // @dev key for funding fee amount per size\\n    bytes32 public constant FUNDING_FEE_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"FUNDING_FEE_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for claimable funding amount per size\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for when funding was last updated at\\n    bytes32 public constant FUNDING_UPDATED_AT = keccak256(abi.encode(\\\"FUNDING_UPDATED_AT\\\"));\\n    // @dev key for claimable funding amount\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT\\\"));\\n    // @dev key for claimable collateral amount\\n    bytes32 public constant CLAIMABLE_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_AMOUNT\\\"));\\n    // @dev key for claimable collateral factor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_FACTOR\\\"));\\n    // @dev key for claimable collateral reduction factor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_REDUCTION_FACTOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_REDUCTION_FACTOR\\\"));\\n    // @dev key for claimable collateral time divisor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_TIME_DIVISOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_TIME_DIVISOR\\\"));\\n    // @dev key for claimable collateral delay\\n    bytes32 public constant CLAIMABLE_COLLATERAL_DELAY = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_DELAY\\\"));\\n    // @dev key for claimed collateral amount\\n    bytes32 public constant CLAIMED_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMED_COLLATERAL_AMOUNT\\\"));\\n    // @dev key for optimal usage factor\\n    bytes32 public constant OPTIMAL_USAGE_FACTOR = keccak256(abi.encode(\\\"OPTIMAL_USAGE_FACTOR\\\"));\\n    // @dev key for base borrowing factor\\n    bytes32 public constant BASE_BORROWING_FACTOR = keccak256(abi.encode(\\\"BASE_BORROWING_FACTOR\\\"));\\n    // @dev key for above optimal usage borrowing factor\\n    bytes32 public constant ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR = keccak256(abi.encode(\\\"ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\\\"BORROWING_FACTOR\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"BORROWING_EXPONENT_FACTOR\\\"));\\n    // @dev key for skipping the borrowing factor for the smaller side\\n    bytes32 public constant SKIP_BORROWING_FEE_FOR_SMALLER_SIDE = keccak256(abi.encode(\\\"SKIP_BORROWING_FEE_FOR_SMALLER_SIDE\\\"));\\n    // @dev key for cumulative borrowing factor\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR\\\"));\\n    // @dev key for when the cumulative borrowing factor was last updated at\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\\\"));\\n    // @dev key for total borrowing amount\\n    bytes32 public constant TOTAL_BORROWING = keccak256(abi.encode(\\\"TOTAL_BORROWING\\\"));\\n    // @dev key for affiliate reward\\n    bytes32 public constant MIN_AFFILIATE_REWARD_FACTOR = keccak256(abi.encode(\\\"MIN_AFFILIATE_REWARD_FACTOR\\\"));\\n    bytes32 public constant AFFILIATE_REWARD = keccak256(abi.encode(\\\"AFFILIATE_REWARD\\\"));\\n    // @dev key for max allowed subaccount action count\\n    bytes32 public constant MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT\\\"));\\n    bytes32 public constant SUBACCOUNT_EXPIRES_AT = keccak256(abi.encode(\\\"SUBACCOUNT_EXPIRES_AT\\\"));\\n    // @dev key for subaccount action count\\n    bytes32 public constant SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"SUBACCOUNT_ACTION_COUNT\\\"));\\n    // @dev key for subaccount auto top up amount\\n    bytes32 public constant SUBACCOUNT_AUTO_TOP_UP_AMOUNT = keccak256(abi.encode(\\\"SUBACCOUNT_AUTO_TOP_UP_AMOUNT\\\"));\\n    // @dev key for subaccount order action\\n    bytes32 public constant SUBACCOUNT_ORDER_ACTION = keccak256(abi.encode(\\\"SUBACCOUNT_ORDER_ACTION\\\"));\\n    // @dev key for subaccount integration id\\n    bytes32 public constant SUBACCOUNT_INTEGRATION_ID = keccak256(abi.encode(\\\"SUBACCOUNT_INTEGRATION_ID\\\"));\\n    // @dev key for subaccount integration id disabled status\\n    bytes32 public constant SUBACCOUNT_INTEGRATION_DISABLED = keccak256(abi.encode(\\\"SUBACCOUNT_INTEGRATION_DISABLED\\\"));\\n    // @dev key for fee distributor swap order token index\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX\\\"));\\n    // @dev key for fee distributor swap fee batch\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_FEE_BATCH = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_FEE_BATCH\\\"));\\n\\n    bytes32 public constant GLV_MAX_MARKET_COUNT = keccak256(abi.encode(\\\"GLV_MAX_MARKET_COUNT\\\"));\\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_USD = keccak256(abi.encode(\\\"GLV_MAX_MARKET_TOKEN_BALANCE_USD\\\"));\\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT = keccak256(abi.encode(\\\"GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT\\\"));\\n    bytes32 public constant IS_GLV_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_GLV_MARKET_DISABLED\\\"));\\n    bytes32 public constant GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR = keccak256(abi.encode(\\\"GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR\\\"));\\n    bytes32 public constant GLV_SHIFT_LAST_EXECUTED_AT = keccak256(abi.encode(\\\"GLV_SHIFT_LAST_EXECUTED_AT\\\"));\\n    bytes32 public constant GLV_SHIFT_MIN_INTERVAL = keccak256(abi.encode(\\\"GLV_SHIFT_MIN_INTERVAL\\\"));\\n    bytes32 public constant MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\\\"MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT\\\"));\\n\\n    // @dev key for disabling automatic parameter updates via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_FEATURE_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_FEATURE_DISABLED\\\"));\\n    // @dev key for disabling all parameter updates for a specific market via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_MARKET_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_MARKET_DISABLED\\\"));\\n    // @dev key for disabling all updates for a specific parameter via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_PARAMETER_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_PARAMETER_DISABLED\\\"));\\n    // @dev key for disabling all updates for a specific market parameter via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_MARKET_PARAMETER_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_MARKET_PARAMETER_DISABLED\\\"));\\n    // @dev key for tracking which updateIds have already been applied by ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_UPDATE_COMPLETED = keccak256(abi.encode(\\\"SYNC_CONFIG_UPDATE_COMPLETED\\\"));\\n    // @dev key for the latest updateId that has been applied by ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_LATEST_UPDATE_ID = keccak256(abi.encode(\\\"SYNC_CONFIG_LATEST_UPDATE_ID\\\"));\\n\\n    // @dev key for the contributor account list\\n    bytes32 public constant CONTRIBUTOR_ACCOUNT_LIST = keccak256(abi.encode(\\\"CONTRIBUTOR_ACCOUNT_LIST\\\"));\\n    // @dev key for the contributor token list\\n    bytes32 public constant CONTRIBUTOR_TOKEN_LIST = keccak256(abi.encode(\\\"CONTRIBUTOR_TOKEN_LIST\\\"));\\n    // @dev key for the contributor token amount\\n    bytes32 public constant CONTRIBUTOR_TOKEN_AMOUNT = keccak256(abi.encode(\\\"CONTRIBUTOR_TOKEN_AMOUNT\\\"));\\n    // @dev key for the max total contributor token amount\\n    bytes32 public constant MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT = keccak256(abi.encode(\\\"MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT\\\"));\\n    // @dev key for the contributor token vault\\n    bytes32 public constant CONTRIBUTOR_TOKEN_VAULT = keccak256(abi.encode(\\\"CONTRIBUTOR_TOKEN_VAULT\\\"));\\n    // @dev key for the contributor last payment at\\n    bytes32 public constant CONTRIBUTOR_LAST_PAYMENT_AT = keccak256(abi.encode(\\\"CONTRIBUTOR_LAST_PAYMENT_AT\\\"));\\n    // @dev key for the min contributor payment interval\\n    bytes32 public constant MIN_CONTRIBUTOR_PAYMENT_INTERVAL = keccak256(abi.encode(\\\"MIN_CONTRIBUTOR_PAYMENT_INTERVAL\\\"));\\n\\n    // @dev key for the buyback batch amount used when claiming and swapping fees\\n    bytes32 public constant BUYBACK_BATCH_AMOUNT = keccak256(abi.encode(\\\"BUYBACK_BATCH_AMOUNT\\\"));\\n    // @dev key for the buyback available fees\\n    bytes32 public constant BUYBACK_AVAILABLE_FEE_AMOUNT = keccak256(abi.encode(\\\"BUYBACK_AVAILABLE_FEE_AMOUNT\\\"));\\n    // @dev key for the buyback gmx fee factor used in calculating fees by GMX/WNT\\n    bytes32 public constant BUYBACK_GMX_FACTOR = keccak256(abi.encode(\\\"BUYBACK_GMX_FACTOR\\\"));\\n    // @dev key for the FeeHandler max price impact when buying back fees\\n    bytes32 public constant BUYBACK_MAX_PRICE_IMPACT_FACTOR = keccak256(abi.encode(\\\"BUYBACK_MAX_PRICE_IMPACT_FACTOR\\\"));\\n    // @dev key for the maximum price delay in seconds when buying back fees\\n    bytes32 public constant BUYBACK_MAX_PRICE_AGE = keccak256(abi.encode(\\\"BUYBACK_MAX_PRICE_AGE\\\"));\\n    // @dev key for the buyback withdrawable fees\\n    bytes32 public constant WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT = keccak256(abi.encode(\\\"WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT\\\"));\\n\\n    // @dev key for user's multichain balance\\n    bytes32 public constant MULTICHAIN_BALANCE = keccak256(abi.encode(\\\"MULTICHAIN_BALANCE\\\"));\\n    // @dev key for the flag if a multichain provider is enabled\\n    bytes32 public constant IS_MULTICHAIN_PROVIDER_ENABLED = keccak256(abi.encode(\\\"IS_MULTICHAIN_PROVIDER_ENABLED\\\"));\\n    // @dev key for the flag if a multichain endpoint is enabled\\n    bytes32 public constant IS_MULTICHAIN_ENDPOINT_ENABLED = keccak256(abi.encode(\\\"IS_MULTICHAIN_ENDPOINT_ENABLED\\\"));\\n    // @dev key for the last src chain id from which the user last managed his position\\n    bytes32 public constant POSITION_LAST_SRC_CHAIN_ID = keccak256(abi.encode(\\\"POSITION_LAST_SRC_CHAIN_ID\\\"));\\n    // @dev key for the flag if a src chain is enabled\\n    bytes32 public constant IS_SRC_CHAIN_ID_ENABLED = keccak256(abi.encode(\\\"IS_SRC_CHAIN_ID_ENABLED\\\"));\\n\\n    // @dev key for the maximum length for data list array of bytes32\\n    bytes32 public constant MAX_DATA_LENGTH = keccak256(abi.encode(\\\"MAX_DATA_LENGTH\\\"));\\n\\n    // @dev constant for user initiated cancel reason\\n    string public constant USER_INITIATED_CANCEL = \\\"USER_INITIATED_CANCEL\\\";\\n\\n    // @dev function used to calculate fullKey for a given market parameter\\n    // @param baseKey the base key for the market parameter\\n    // @param data the additional data for the market parameter\\n    function getFullKey(bytes32 baseKey, bytes memory data) internal pure returns (bytes32) {\\n        if (data.length == 0) {\\n            return baseKey;\\n        }\\n\\n        return keccak256(bytes.concat(baseKey, data));\\n    }\\n\\n    // @dev key for the account deposit list\\n    // @param account the account for the list\\n    function accountDepositListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_DEPOSIT_LIST, account));\\n    }\\n\\n    // @dev key for the account withdrawal list\\n    // @param account the account for the list\\n    function accountWithdrawalListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_WITHDRAWAL_LIST, account));\\n    }\\n\\n    // @dev key for the account shift list\\n    // @param account the account for the list\\n    function accountShiftListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_SHIFT_LIST, account));\\n    }\\n\\n    // @dev key for the account glv deposit list\\n    // @param account the account for the list\\n    function accountGlvDepositListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_GLV_DEPOSIT_LIST, account));\\n    }\\n\\n    // @dev key for the account glv deposit list\\n    // @param account the account for the list\\n    function accountGlvWithdrawalListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_GLV_WITHDRAWAL_LIST, account));\\n    }\\n\\n    // @dev key for the glv supported market list\\n    // @param glv the glv for the supported market list\\n    function glvSupportedMarketListKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_SUPPORTED_MARKET_LIST, glv));\\n    }\\n\\n    // @dev key for the account position list\\n    // @param account the account for the list\\n    function accountPositionListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_POSITION_LIST, account));\\n    }\\n\\n    // @dev key for the account order list\\n    // @param account the account for the list\\n    function accountOrderListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_ORDER_LIST, account));\\n    }\\n\\n    // @dev key for the subaccount list\\n    // @param account the account for the list\\n    function subaccountListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(SUBACCOUNT_LIST, account));\\n    }\\n\\n    // @dev key for the auto cancel order list\\n    // @param position key the position key for the list\\n    function autoCancelOrderListKey(bytes32 positionKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(AUTO_CANCEL_ORDER_LIST, positionKey));\\n    }\\n\\n    // @dev key for the claimable fee amount\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    function claimableFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_FEE_AMOUNT, market, token));\\n    }\\n\\n    // @dev key for the claimable ui fee amount\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    // @param account the account that can claim the ui fee\\n    function claimableUiFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token));\\n    }\\n\\n    // @dev key for the claimable ui fee amount for account\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    // @param account the account that can claim the ui fee\\n    function claimableUiFeeAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token, account));\\n    }\\n\\n    // @dev key for deposit gas limit\\n    // @param singleToken whether a single token or pair tokens are being deposited\\n    // @return key for deposit gas limit\\n    function depositGasLimitKey() internal pure returns (bytes32) {\\n        return DEPOSIT_GAS_LIMIT;\\n    }\\n\\n    // @dev key for withdrawal gas limit\\n    // @return key for withdrawal gas limit\\n    function withdrawalGasLimitKey() internal pure returns (bytes32) {\\n        return WITHDRAWAL_GAS_LIMIT;\\n    }\\n\\n    // @dev key for shift gas limit\\n    // @return key for shift gas limit\\n    function shiftGasLimitKey() internal pure returns (bytes32) {\\n        return SHIFT_GAS_LIMIT;\\n    }\\n\\n    function glvDepositGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_DEPOSIT_GAS_LIMIT;\\n    }\\n\\n    function glvWithdrawalGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_WITHDRAWAL_GAS_LIMIT;\\n    }\\n\\n    function glvShiftGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_SHIFT_GAS_LIMIT;\\n    }\\n\\n    function glvPerMarketGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_PER_MARKET_GAS_LIMIT;\\n    }\\n\\n    // @dev key for single swap gas limit\\n    // @return key for single swap gas limit\\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\\n        return SINGLE_SWAP_GAS_LIMIT;\\n    }\\n\\n    // @dev key for increase order gas limit\\n    // @return key for increase order gas limit\\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return INCREASE_ORDER_GAS_LIMIT;\\n    }\\n\\n    // @dev key for decrease order gas limit\\n    // @return key for decrease order gas limit\\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return DECREASE_ORDER_GAS_LIMIT;\\n    }\\n\\n    // @dev key for swap order gas limit\\n    // @return key for swap order gas limit\\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\\n        return SWAP_ORDER_GAS_LIMIT;\\n    }\\n\\n    function swapPathMarketFlagKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_PATH_MARKET_FLAG,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for whether create glv deposit is disabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is disabled\\n    function createGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel glv deposit is disabled\\n    // @param the cancel deposit module\\n    // @return key for whether cancel deposit is disabled\\n    function cancelGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute glv deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function executeGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create glv withdrawal is disabled\\n    // @param the create withdrawal module\\n    // @return key for whether create withdrawal is disabled\\n    function createGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel glv withdrawal is disabled\\n    // @param the cancel withdrawal module\\n    // @return key for whether cancel withdrawal is disabled\\n    function cancelGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute glv withdrawal is disabled\\n    // @param the execute withdrawal module\\n    // @return key for whether execute withdrawal is disabled\\n    function executeGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    function createGlvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    function executeGlvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n\\n    // @dev key for whether create deposit is disabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is disabled\\n    function createDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel deposit is disabled\\n    // @param the cancel deposit module\\n    // @return key for whether cancel deposit is disabled\\n    function cancelDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function executeDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create withdrawal is disabled\\n    // @param the create withdrawal module\\n    // @return key for whether create withdrawal is disabled\\n    function createWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel withdrawal is disabled\\n    // @param the cancel withdrawal module\\n    // @return key for whether cancel withdrawal is disabled\\n    function cancelWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute withdrawal is disabled\\n    // @param the execute withdrawal module\\n    // @return key for whether execute withdrawal is disabled\\n    function executeWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute atomic withdrawal is disabled\\n    // @param the execute atomic withdrawal module\\n    // @return key for whether execute atomic withdrawal is disabled\\n    function executeAtomicWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create shift is disabled\\n    // @param the create shift module\\n    // @return key for whether create shift is disabled\\n    function createShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel shift is disabled\\n    // @param the cancel shift module\\n    // @return key for whether cancel shift is disabled\\n    function cancelShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute shift is disabled\\n    // @param the execute shift module\\n    // @return key for whether execute shift is disabled\\n    function executeShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create order is disabled\\n    // @param the create order module\\n    // @return key for whether create order is disabled\\n    function createOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute order is disabled\\n    // @param the execute order module\\n    // @return key for whether execute order is disabled\\n    function executeOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute adl is disabled\\n    // @param the execute adl module\\n    // @return key for whether execute adl is disabled\\n    function executeAdlFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ADL_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether update order is disabled\\n    // @param the update order module\\n    // @return key for whether update order is disabled\\n    function updateOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UPDATE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether cancel order is disabled\\n    // @param the cancel order module\\n    // @return key for whether cancel order is disabled\\n    function cancelOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether claim funding fees is disabled\\n    // @param the claim funding fees module\\n    function claimFundingFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_FUNDING_FEES_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim colltareral is disabled\\n    // @param the claim funding fees module\\n    function claimCollateralFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_COLLATERAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim affiliate rewards is disabled\\n    // @param the claim affiliate rewards module\\n    function claimAffiliateRewardsFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim ui fees is disabled\\n    // @param the claim ui fees module\\n    function claimUiFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_UI_FEES_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether subaccounts are disabled\\n    // @param the subaccount module\\n    function subaccountFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether subaccounts are disabled\\n    // @param the gasless module\\n    function gaslessFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GASLESS_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for ui fee factor\\n    // @param account the fee receiver account\\n    // @return key for ui fee factor\\n    function uiFeeFactorKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UI_FEE_FACTOR,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for whether an oracle provider is enabled\\n    // @param provider the oracle provider\\n    // @return key for whether an oracle provider is enabled\\n    function isOracleProviderEnabledKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ORACLE_PROVIDER_ENABLED,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for whether an oracle provider is allowed to be used for atomic actions\\n    // @param provider the oracle provider\\n    // @return key for whether an oracle provider is allowed to be used for atomic actions\\n    function isAtomicOracleProviderKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ATOMIC_ORACLE_PROVIDER,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for oracle timestamp adjustment\\n    // @param provider the oracle provider\\n    // @param token the token\\n    // @return key for oracle timestamp adjustment\\n    function oracleTimestampAdjustmentKey(address provider, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TIMESTAMP_ADJUSTMENT,\\n            provider,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for oracle provider for token\\n    // @param token the token\\n    // @return key for oracle provider for token\\n    function oracleProviderForTokenKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_PROVIDER_FOR_TOKEN,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for oracle provider update time\\n    // @param token the token\\n    // @param provider address\\n    // @return key for oracle provider updated time\\n    function oracleProviderUpdatedAt(address token, address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_PROVIDER_UPDATED_AT,\\n            token,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for gas to forward for token transfer\\n    // @param the token to check\\n    // @return key for gas to forward for token transfer\\n    function tokenTransferGasLimit(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOKEN_TRANSFER_GAS_LIMIT,\\n            token\\n        ));\\n   }\\n\\n   // @dev the default callback contract\\n   // @param account the user's account\\n   // @param market the address of the market\\n   // @param callbackContract the callback contract\\n   function savedCallbackContract(address account, address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           SAVED_CALLBACK_CONTRACT,\\n           account,\\n           market\\n       ));\\n   }\\n\\n   // @dev the min collateral factor key\\n   // @param the market for the min collateral factor\\n   function minCollateralFactorKey(address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           MIN_COLLATERAL_FACTOR,\\n           market\\n       ));\\n   }\\n\\n   // @dev the min collateral factor for open interest multiplier key\\n   // @param the market for the factor\\n   function minCollateralFactorForOpenInterestMultiplierKey(address market, bool isLong) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER,\\n           market,\\n           isLong\\n       ));\\n   }\\n\\n    // @dev the min collateral factor for open interest multiplier key\\n    // @param the market for the factor\\n    function minCollateralFactorForLiquidationKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_COLLATERAL_FACTOR_FOR_LIQUIDATION,\\n            market\\n        ));\\n    }\\n\\n   // @dev the key for the virtual token id\\n   // @param the token to get the virtual id for\\n   function virtualTokenIdKey(address token) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_TOKEN_ID,\\n           token\\n       ));\\n   }\\n\\n   // @dev the key for the virtual market id\\n   // @param the market to get the virtual id for\\n   function virtualMarketIdKey(address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_MARKET_ID,\\n           market\\n       ));\\n   }\\n\\n   // @dev the key for the virtual inventory for positions\\n   // @param the virtualTokenId the virtual token id\\n   function virtualInventoryForPositionsKey(bytes32 virtualTokenId) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_INVENTORY_FOR_POSITIONS,\\n           virtualTokenId\\n       ));\\n   }\\n\\n   // @dev the key for the virtual inventory for swaps\\n   // @param the virtualMarketId the virtual market id\\n   // @param the token to check the inventory for\\n   function virtualInventoryForSwapsKey(bytes32 virtualMarketId, bool isLongToken) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_INVENTORY_FOR_SWAPS,\\n           virtualMarketId,\\n           isLongToken\\n       ));\\n   }\\n\\n    // @dev key for position impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for position impact factor\\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n   }\\n\\n    // @dev key for position impact exponent factor\\n    // @param market the market address to check\\n    // @return key for position impact exponent factor\\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for the max position impact factor\\n    // @param market the market address to check\\n    // @return key for the max position impact factor\\n    function maxPositionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for the max position impact factor for liquidations\\n    // @param market the market address to check\\n    // @return key for the max position impact factor\\n    function maxPositionImpactFactorForLiquidationsKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position fee factor\\n    // @param market the market address to check\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for position fee factor\\n    function positionFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for pro trader's tier\\n    function proTraderTierKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRO_TRADER_TIER,\\n            account\\n        ));\\n    }\\n\\n\\n    // @dev key for pro discount factor for specific tier\\n    function proDiscountFactorKey(uint256 proTier) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRO_DISCOUNT_FACTOR,\\n            proTier\\n        ));\\n    }\\n\\n    // @dev key for liquidation fee factor\\n    // @param market the market address to check\\n    // @return key for liquidation fee factor\\n    function liquidationFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            LIQUIDATION_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for swap impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for swap impact factor\\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for swap impact exponent factor\\n    // @param market the market address to check\\n    // @return key for swap impact exponent factor\\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n\\n    // @dev key for swap fee factor\\n    // @param market the market address to check\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for swap fee factor\\n    function swapFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for atomic swap fee factor\\n    // @param market the market address to check\\n    // @return key for atomic swap fee factor\\n    function atomicSwapFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ATOMIC_SWAP_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for atomic withdrawal fee factor\\n    // @param market the market address to check\\n    // @return key for atomic withdrawal fee factor\\n    function atomicWithdrawalFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ATOMIC_WITHDRAWAL_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for deposit fee factor\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for deposit fee factor\\n    function depositFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DEPOSIT_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for withdrawal fee factor\\n    // @param market the market address to check\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for withdrawal fee factor\\n    function withdrawalFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            WITHDRAWAL_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for oracle type\\n    // @param token the token to check\\n    // @return key for oracle type\\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TYPE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for open interest\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest\\n    function openInterestKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest in tokens\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest in tokens\\n    function openInterestInTokensKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_IN_TOKENS,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for collateral sum for a market\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for collateral sum\\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            COLLATERAL_SUM,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's pool\\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max amount of pool tokens\\n    // @param market the market for the pool\\n    // @param token the token for the pool\\n    function maxPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max usd of pool tokens for deposits\\n    // @param market the market for the pool\\n    // @param token the token for the pool\\n    function maxPoolUsdForDepositKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POOL_USD_FOR_DEPOSIT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max open interest\\n    // @param market the market for the pool\\n    // @param isLong whether the key is for the long or short side\\n    function maxOpenInterestKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_OPEN_INTEREST,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for amount of tokens in a market's position impact pool\\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for min amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for min amount of tokens in a market's position impact pool\\n    function minPositionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position impact pool distribution rate\\n    // @param market the market to check\\n    // @return key for position impact pool distribution rate\\n    function positionImpactPoolDistributionRateKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_DISTRIBUTION_RATE,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position impact pool distributed at\\n    // @param market the market to check\\n    // @return key for position impact pool distributed at\\n    function positionImpactPoolDistributedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_DISTRIBUTED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's swap impact pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's swap impact pool\\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for reserve factor\\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for open interest reserve factor\\n    function openInterestReserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for max pnl factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for max pnl factor\\n    function maxPnlFactorKey(bytes32 pnlFactorType, address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_PNL_FACTOR,\\n            pnlFactorType,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev the key for min PnL factor after ADL\\n    // @param market the market for the pool\\n    // @param isLong whether the key is for the long or short side\\n    function minPnlFactorAfterAdlKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_PNL_FACTOR_AFTER_ADL,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for latest adl time\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for latest adl time\\n    function latestAdlAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            LATEST_ADL_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for whether adl is enabled\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for whether adl is enabled\\n    function isAdlEnabledKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ADL_ENABLED,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for funding factor\\n    // @param market the market to check\\n    // @return key for funding factor\\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding exponent\\n    // @param market the market for the pool\\n    function fundingExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for saved funding factor\\n    // @param market the market for the pool\\n    function savedFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SAVED_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding increase factor\\n    // @param market the market for the pool\\n    function fundingIncreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_INCREASE_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding decrease factor\\n    // @param market the market for the pool\\n    function fundingDecreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_DECREASE_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for min funding factor\\n    // @param market the market for the pool\\n    function minFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for max funding factor\\n    // @param market the market for the pool\\n    function maxFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for threshold for stable funding\\n    // @param market the market for the pool\\n    function thresholdForStableFundingKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            THRESHOLD_FOR_STABLE_FUNDING,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for threshold for decreasing funding\\n    // @param market the market for the pool\\n    function thresholdForDecreaseFundingKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            THRESHOLD_FOR_DECREASE_FUNDING,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for funding fee amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for funding fee amount per size\\n    function fundingFeeAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FEE_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for claimabel funding amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for claimable funding amount per size\\n    function claimableFundingAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for when funding was last updated\\n    // @param market the market to check\\n    // @return key for when funding was last updated\\n    function fundingUpdatedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_UPDATED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount by account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral amount for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor for a timeKey\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_FACTOR,\\n            market,\\n            token,\\n            timeKey\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable amount\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_FACTOR,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral reduction factor for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable factor\\n    // @param account the account to check\\n    // @return key for claimable funding factor\\n    function claimableCollateralReductionFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_REDUCTION_FACTOR,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimedCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMED_COLLATERAL_AMOUNT,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for optimal usage factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for optimal usage factor\\n    function optimalUsageFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPTIMAL_USAGE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for base borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for base borrowing factor\\n    function baseBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BASE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for above optimal usage borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for above optimal usage borrowing factor\\n    function aboveOptimalUsageBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for borrowing factor\\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev the key for borrowing exponent\\n    // @param market the market for the pool\\n    // @param isLong whether to get the key for the long or short side\\n    function borrowingExponentFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_EXPONENT_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor\\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor updated at\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor updated at\\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for total borrowing amount\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for total borrowing amount\\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOTAL_BORROWING,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    function minAffiliateRewardFactorKey(uint256 referralTierLevel) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_AFFILIATE_REWARD_FACTOR,\\n            referralTierLevel\\n        ));\\n    }\\n\\n    function maxAllowedSubaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountExpiresAtKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_EXPIRES_AT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_ACTION_COUNT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountAutoTopUpAmountKey(address account, address subaccount) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_AUTO_TOP_UP_AMOUNT,\\n            account,\\n            subaccount\\n        ));\\n    }\\n\\n    function subaccountIntegrationIdKey(address account, address subaccount) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_INTEGRATION_ID,\\n            account,\\n            subaccount\\n        ));\\n    }\\n\\n    function subaccountIntegrationDisabledKey(bytes32 integrationId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_INTEGRATION_DISABLED,\\n            integrationId\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount for an account\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for is market disabled\\n    // @param market the market to check\\n    // @return key for is market disabled\\n    function isMarketDisabledKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MARKET_DISABLED,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for min market tokens for first deposit\\n    // @param market the market to check\\n    // @return key for min market tokens for first deposit\\n    function minMarketTokensForFirstDepositKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for price feed address\\n    // @param token the token to get the key for\\n    // @return key for price feed address\\n    function priceFeedKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for data stream feed ID\\n    // @param token the token to get the key for\\n    // @return key for data stream feed ID\\n    function dataStreamIdKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_ID,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for edge oracle data stream feed ID\\n    // @param token the token to get the key for\\n    // @return key for data stream feed ID\\n    function edgeDataStreamIdKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EDGE_DATA_STREAM_ID,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for data stream feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for data stream feed multiplier\\n    function dataStreamMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    function dataStreamSpreadReductionFactorKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_SPREAD_REDUCTION_FACTOR,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for price feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for price feed multiplier\\n    function priceFeedMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    function priceFeedHeartbeatDurationKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_HEARTBEAT_DURATION,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for stable price value\\n    // @param token the token to get the key for\\n    // @return key for stable price value\\n    function stablePriceKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            STABLE_PRICE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for fee distributor swap token index\\n    // @param orderKey the swap order key\\n    // @return key for fee distributor swap token index\\n    function feeDistributorSwapTokenIndexKey(bytes32 orderKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX,\\n            orderKey\\n        ));\\n    }\\n\\n    // @dev key for fee distributor swap fee batch key\\n    // @param orderKey the swap order key\\n    // @return key for fee distributor swap fee batch key\\n    function feeDistributorSwapFeeBatchKey(bytes32 orderKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FEE_DISTRIBUTOR_SWAP_FEE_BATCH,\\n            orderKey\\n        ));\\n    }\\n\\n    // @dev key for max market token balance usd\\n    // it is used to limit amount of funds deposited into each market\\n    function glvMaxMarketTokenBalanceUsdKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_USD, glv, market));\\n    }\\n\\n    // @dev key for max market token balance amount\\n    // it is used to limit amount of funds deposited into each market\\n    function glvMaxMarketTokenBalanceAmountKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT, glv, market));\\n    }\\n\\n    // @dev key for is glv market disabled\\n    function isGlvMarketDisabledKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_GLV_MARKET_DISABLED,\\n            glv,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for max allowed price impact for glv shifts\\n    // if effective price impact exceeds max price impact then glv shift fails\\n    function glvShiftMaxPriceImpactFactorKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR,\\n            glv\\n        ));\\n    }\\n\\n    // @dev key for time when glv shift was executed last\\n    // used to validate glv shifts are not executed too frequently\\n    function glvShiftLastExecutedAtKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_LAST_EXECUTED_AT,\\n            glv\\n        ));\\n    }\\n\\n    // @dev key for min time interval between glv shifts in seconds\\n    function glvShiftMinIntervalKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_MIN_INTERVAL,\\n            glv\\n        ));\\n    }\\n\\n    function minGlvTokensForFirstGlvDepositKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT,\\n            glv\\n        ));\\n    }\\n\\n    // @dev key for whether the sync config feature is disabled\\n    // @param module the sync config module\\n    // @return key for sync config feature disabled\\n    function syncConfigFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether sync config updates are disabled for a market\\n    // @param market the market to check\\n    // @return key for sync config market disabled\\n    function syncConfigMarketDisabledKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_MARKET_DISABLED,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for whether sync config updates are disabled for a parameter\\n    // @param parameter the parameter to check\\n    // @return key for sync config parameter disabled\\n    function syncConfigParameterDisabledKey(string memory parameter) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_PARAMETER_DISABLED,\\n            parameter\\n        ));\\n    }\\n\\n    // @dev key for whether sync config updates are disabled for a market parameter\\n    // @param market the market to check\\n    // @param parameter the parameter to check\\n    // @return key for sync config market parameter disabled\\n    function syncConfigMarketParameterDisabledKey(address market, string memory parameter) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_MARKET_PARAMETER_DISABLED,\\n            market,\\n            parameter\\n        ));\\n    }\\n\\n    // @dev key for whether a sync config update is completed\\n    // @param updateId the update id to check\\n    // @return key for sync config market update completed\\n    function syncConfigUpdateCompletedKey(uint256 updateId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_UPDATE_COMPLETED,\\n            updateId\\n        ));\\n    }\\n\\n    // @dev key for the latest sync config update that was completed\\n    // @return key for sync config latest update id\\n    function syncConfigLatestUpdateIdKey() internal pure returns (bytes32) {\\n        return SYNC_CONFIG_LATEST_UPDATE_ID;\\n    }\\n\\n    // @dev key for the contributor token amount\\n    // @param account the contributor account\\n    // @param token the contributor token\\n    // @return key for the contributor token amount\\n    function contributorTokenAmountKey(address account, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CONTRIBUTOR_TOKEN_AMOUNT,\\n            account,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the max total contributor token amount\\n    // @param token the contributor token\\n    // @return key for the max contributor token amount\\n    function maxTotalContributorTokenAmountKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the contributor token vault\\n    // @param token the contributor token\\n    // @return key for the contributor token vault\\n    function contributorTokenVaultKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CONTRIBUTOR_TOKEN_VAULT,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the buyback batch amount\\n    // @param token the token for which to retrieve batch amount (GMX or WNT)\\n    // @return key for buyback batch amount for a given token\\n    function buybackBatchAmountKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_BATCH_AMOUNT,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the buyback available fee amount\\n    // @param feeToken the token in which the fees are denominated\\n    // @param swapToken the token for which fees are accumulated (GMX or WNT)\\n    // @return key for buyback available fee amount for a given token and feeToken\\n    function buybackAvailableFeeAmountKey(address feeToken, address swapToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_AVAILABLE_FEE_AMOUNT,\\n            feeToken,\\n            swapToken\\n        ));\\n    }\\n\\n    // @dev key for the buyback withdrawable fee amount\\n    // @param buybackToken the token that was bought back\\n    // @return key for the buyback withdrawable fee amount\\n    function withdrawableBuybackTokenAmountKey(address buybackToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT,\\n            buybackToken\\n        ));\\n    }\\n\\n    // @dev key for the buyback gmx fee factor\\n    // @param version the version for which to retrieve the fee numerator\\n    // @return key for buyback gmx fee factor for a given version\\n    function buybackGmxFactorKey(uint256 version) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_GMX_FACTOR,\\n            version\\n        ));\\n    }\\n\\n    // @dev key for the buyback max price impact factor\\n    // @param token the token for which to retrieve the max price impact factor key\\n    // @return key for buyback max price impact factor for a given token\\n    function buybackMaxPriceImpactFactorKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_MAX_PRICE_IMPACT_FACTOR,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for whether a multichain provider is enabled\\n    // @param provider the multichain provider\\n    // @return key for whether a multichain provider is enabled\\n    function isMultichainProviderEnabledKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MULTICHAIN_PROVIDER_ENABLED,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for whether a multichain endpoint is enabled\\n    // @param endpoint the multichain endpoint\\n    // @return key for whether a multichain endpoint is enabled\\n    function isMultichainEndpointEnabledKey(address endpoint) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MULTICHAIN_ENDPOINT_ENABLED,\\n            endpoint\\n        ));\\n    }\\n\\n    // @dev key for whether a multichain endpoint is enabled\\n    // @param endpoint the multichain endpoint\\n    // @return key for whether a multichain endpoint is enabled\\n    function isSrcChainIdEnabledKey(uint256 srcChainId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_SRC_CHAIN_ID_ENABLED,\\n            srcChainId\\n        ));\\n    }\\n\\n    // @dev key for the last src chain id from which the user last managed his position\\n    // @param positionKey the position key for which to retreive the last src chain id\\n    // @return key for the last src chain id from which the user last managed his position\\n    function positionLastSrcChainId(bytes32 positionKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_LAST_SRC_CHAIN_ID,\\n            positionKey\\n        ));\\n    }\\n\\n    // @dev key for user's multichain balance\\n    // @param account the account for which to retreive the user balance key\\n    // @param token the token for which to retreive the user balance key\\n    // @return key for multichain balance for a given user and token\\n    function multichainBalanceKey(address account, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MULTICHAIN_BALANCE,\\n            account,\\n            token\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x57c6332974e62898951643f9178e0fdb7f79e4de08adc3762954e8335ffb117a\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Deposit\\n// @dev Struct for deposits\\nlibrary Deposit {\\n    enum DepositType {\\n        Normal,\\n        Shift,\\n        Glv\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x622ecf0fa075bf13ef98ef44ec9c62f7b27c5d68229e9c9d86239e398b05ed5c\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"../pricing/ISwapPricingUtils.sol\\\";\\n\\nlibrary DepositEventUtils {\\n    using Deposit for Deposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitDepositCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        Deposit.DepositType depositType\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(deposit, depositType);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCreated\\\",\\n            key,\\n            Cast.toBytes32(deposit.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 longTokenAmount,\\n        uint256 shortTokenAmount,\\n        uint256 receivedMarketTokens,\\n        ISwapPricingUtils.SwapPricingType swapPricingType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"receivedMarketTokens\\\", receivedMarketTokens);\\n        eventData.uintItems.setItem(3, \\\"swapPricingType\\\", uint256(swapPricingType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Deposit.Props memory deposit, Deposit.DepositType depositType)\\n    public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(7);\\n        eventData.addressItems.setItem(0, \\\"account\\\", deposit.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", deposit.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", deposit.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", deposit.market());\\n        eventData.addressItems.setItem(4, \\\"initialLongToken\\\", deposit.initialLongToken());\\n        eventData.addressItems.setItem(5, \\\"initialShortToken\\\", deposit.initialShortToken());\\n        eventData.addressItems.setItem(6, \\\"uiFeeReceiver\\\", deposit.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", deposit.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", deposit.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"initialLongTokenAmount\\\", deposit.initialLongTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"initialShortTokenAmount\\\", deposit.initialShortTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minMarketTokens\\\", deposit.minMarketTokens());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", deposit.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", deposit.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", deposit.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"depositType\\\", uint256(depositType));\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", deposit.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", deposit.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x287fb035022729626f8b045c680aa4551d6c05012dcd448cbe2523f84846ea91\",\"license\":\"BUSL-1.1\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n    error InvalidTransferInAmount(address token, uint256 amount);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error InvalidClaimableReductionFactor(uint256 value);\\n    error OracleProviderAlreadyExistsForToken(address token);\\n    error OracleProviderMinChangeDelayNotYetPassed(address token, address provider);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n    error InvalidPositionImpactPoolDistributionRate(uint256 distributionAmount, uint256 positionImpactPoolAmount);\\n    error MaxDataListLengthExceeded(uint256 dataLength, uint256 maxDataLength);\\n    error EmptyToken();\\n\\n    // ContributorHandler errors\\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\\n    error InvalidContributorToken(address token);\\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address signer);\\n    error InvalidHoldingAddress(address account);\\n    error EmptyPositionImpactWithdrawalAmount();\\n    error OraclePriceOutdated();\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvShiftStoreUtils errors\\n    error GlvShiftNotFound(bytes32 key);\\n    // GlvWithdrawalStoreUtils errors\\n    error GlvWithdrawalNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvMarketAmount();\\n    error EmptyGlvDeposit();\\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\\n    // GlvWithdrawalUtils errors\\n    error EmptyGlvWithdrawal();\\n    error EmptyGlvWithdrawalAmount();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error EmptyGlvTokenSupply();\\n    error GlvNegativeMarketPoolValue(address glv, address market);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvEnabledMarket(address glv, address market);\\n    error GlvNonZeroMarketBalance(address glv, address market);\\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error GlvInvalidLongToken(address glv, address provided, address expected);\\n    error GlvInvalidShortToken(address glv, address provided, address expected);\\n    // GlvShiftUtils\\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\\n    // GlvFactory\\n    error GlvAlreadyExists(bytes32 salt, address glv);\\n    error GlvSymbolTooLong();\\n    error GlvNameTooLong();\\n    // GlvStoreUtils\\n    error GlvNotFound(address key);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidBuybackToken(address buybackToken);\\n    error InvalidVersion(uint256 version);\\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\\n    error EmptyClaimFeesMarket();\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForAutoCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\\n    error EmptyRelayFeeAddress();\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // MarketPositionImpactUtils errors\\n    error InsufficientImpactPoolValueForWithdrawal(uint256 withdrawalAmount, uint256 poolValue);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices(); // not used, kept for compatibility\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error UnsupportedOrderTypeForAutoCancellation(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n    error UnexpectedValidFromTime(uint256 orderType);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\\n    error SubaccountIntegrationIdDisabled(bytes32 integrationId);\\n\\n    // TokenUtils errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\\n    // some contracts with this error cannot be re-deployed so it has been left as is\\n    error EmptyTokenTranferGasLimit(address token);\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error DataListLengthExceeded();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n\\n    // Cast errors\\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\\n\\n    // ConfigSyncer errors\\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\\n    error SyncConfigUpdatesDisabledForMarket(address market);\\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\\n\\n    // Reader errors\\n    error EmptyMarketPrice(address market);\\n\\n    // Multichain errors\\n    error InvalidTransferRequestsLength();\\n    error EmptyMultichainTransferInAmount(address account, address token);\\n    error EmptyMultichainTransferOutAmount(address account, address token);\\n    error InsufficientMultichainBalance(address account, address token, uint256 balance, uint256 amount);\\n    error InvalidSrcChainId(uint256 srcChainId);\\n    error InvalidDestinationChainId(uint256 desChainId);\\n    error TokenPermitsNotAllowedForMultichain();\\n    error InvalidMultichainProvider(address provider);\\n    error InvalidMultichainEndpoint(address endpoint);\\n    error UnableToPayOrderFee();\\n    error UnableToPayOrderFeeFromCollateral();\\n    error InvalidBridgeOutToken(address token);\\n\\n    enum SignatureType {\\n        Call,\\n        SubaccountApproval\\n    }\\n\\n    // Gelato relay errors\\n    error InvalidSignature(string signatureType);\\n    // User sent incorrect fee token or incorrect swap path\\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    // Contract received unsupported fee token from Gelato relay\\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    error InvalidPermitSpender(address spender, address expectedSpender);\\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\\n    error InvalidSubaccountApprovalSubaccount();\\n    error NonEmptyExternalCallsForSubaccountOrder();\\n\\n    // EventUtils error\\n    error EventItemNotFound(string key);\\n\\n    // EdgeOracle verifier errors\\n    error InvalidTrustedSignerAddress();\\n    error InvalidEdgeSigner();\\n    error InvalidEdgeSignature(uint256 recoverError);\\n    error InvalidEdgeDataStreamBidAsk(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamPrices(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamExpo(int256 expo);\\n    error RelayEmptyBatch();\\n    error RelayCalldataTooLong(uint256 calldataLength);\\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\\n}\\n\",\"keccak256\":\"0xf899157d263ab4bb424c2bd33f1e871ab758ce320f46e6efca90c077a5bb24ef\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n\\n\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a99c1d3590daa8030345ffb09e3f769a93e0178e4c85986dc0e08cc84e8f82c\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary EventUtils {\\n\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(AddressItems memory addresses, string memory key) external pure returns(address) {\\n        (bool found, address value) = getWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(AddressItems memory addresses, string memory key) public pure returns(bool, address) {\\n        for (uint i = 0; i < addresses.items.length; i++) {\\n            if (compareStrings(addresses.items[i].key, key)) {\\n                return (true, addresses.items[i].value);\\n            }\\n        }\\n        return (false, address(0));\\n    }\\n\\n    function getArray(AddressItems memory addresses, string memory key) external pure\\n    returns(address[] memory) {\\n        (bool found, address[] memory value) = getArrayWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(AddressItems memory addresses, string memory key) public pure\\n    returns(bool, address[] memory) {\\n        for (uint i = 0; i < addresses.arrayItems.length; i++) {\\n            if (compareStrings(addresses.arrayItems[i].key, key)) {\\n                return (true, addresses.arrayItems[i].value);\\n            }\\n        }\\n        address[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(UintItems memory items, string memory key) external pure returns(uint256) {\\n        (bool found, uint256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(UintItems memory items, string memory key) public pure returns(bool, uint256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(UintItems memory items, string memory key) external pure\\n    returns(uint256[] memory) {\\n        (bool found, uint256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(UintItems memory items, string memory key) public pure\\n    returns(bool, uint256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        uint256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(IntItems memory items, string memory key) external pure returns(int256) {\\n        (bool found, int256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(IntItems memory items, string memory key) public pure returns(bool, int256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(IntItems memory items, string memory key) external pure\\n    returns(int256[] memory) {\\n        (bool found, int256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(IntItems memory items, string memory key) public pure\\n    returns(bool, int256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        int256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BoolItems memory items, string memory key) external pure returns(bool) {\\n        (bool found, bool value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BoolItems memory items, string memory key) public pure returns(bool, bool) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, false);\\n    }\\n\\n    function getArray(BoolItems memory items, string memory key) external pure\\n    returns(bool[] memory) {\\n        (bool found, bool[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BoolItems memory items, string memory key) public pure\\n    returns(bool, bool[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bool[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(Bytes32Items memory items, string memory key) external pure returns(bytes32) {\\n        (bool found, bytes32 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(Bytes32Items memory items, string memory key) public pure returns(bool, bytes32) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(Bytes32Items memory items, string memory key) external pure\\n    returns(bytes32[] memory) {\\n        (bool found, bytes32[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(Bytes32Items memory items, string memory key) public pure\\n    returns(bool, bytes32[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes32[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BytesItems memory items, string memory key) external pure returns(bytes memory) {\\n        (bool found, bytes memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BytesItems memory items, string memory key) public pure returns(bool, bytes memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(BytesItems memory items, string memory key) external pure\\n    returns(bytes[] memory) {\\n        (bool found, bytes[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BytesItems memory items, string memory key) public pure\\n    returns(bool, bytes[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(StringItems memory items, string memory key) external pure returns(string memory) {\\n        (bool found, string memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(StringItems memory items, string memory key) public pure returns(bool, string memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(StringItems memory items, string memory key) external pure\\n    returns(string[] memory) {\\n        (bool found, string[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(StringItems memory items, string memory key) public pure\\n    returns(bool, string[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        string[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x301b8df4bd9f7cd46804d6a732e8f092b59fda0450c59ef33845eda262f5e6d5\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/GlvDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title GlvDeposit\\n// @dev Struct for GLV deposits\\nlibrary GlvDeposit {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // large number of fields my also cause incorrect display in Tenderly\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address glv;\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param marketTokenAmount the amount of market tokens to deposit\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minGlvTokens the minimum acceptable number of Glv tokens\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minGlvTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    // @param isMarketTokenDeposit whether to deposit market tokens or long/short tokens\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n        bool isMarketTokenDeposit;\\n    }\\n\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function glv(Props memory props) internal pure returns (address) {\\n        return props.addresses.glv;\\n    }\\n\\n    function setGlv(Props memory props, address value) internal pure {\\n        props.addresses.glv = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minGlvTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minGlvTokens;\\n    }\\n\\n    function setMinGlvTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minGlvTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function isMarketTokenDeposit(Props memory props) internal pure returns (bool) {\\n        return props.flags.isMarketTokenDeposit;\\n    }\\n\\n    function setIsMarketTokenDeposit(Props memory props, bool value) internal pure {\\n        props.flags.isMarketTokenDeposit = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x1ccb6e26de76db774ecf7db3a6d2806021eb00b14948cd374e9f6f82a23946b1\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/GlvDepositEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../event/EventEmitter.sol\\\";\\nimport \\\"../../event/EventUtils.sol\\\";\\nimport \\\"../../utils/Cast.sol\\\";\\n\\nimport \\\"./GlvDeposit.sol\\\";\\n\\nlibrary GlvDepositEventUtils {\\n    using GlvDeposit for GlvDeposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitGlvDepositCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        GlvDeposit.Props memory glvDeposit\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(glvDeposit);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"GlvDepositCreated\\\",\\n            key,\\n            Cast.toBytes32(glvDeposit.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitGlvDepositExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 receivedGlvTokens\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"receivedGlvTokens\\\", receivedGlvTokens);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"GlvDepositExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitGlvDepositCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"GlvDepositCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(GlvDeposit.Props memory glvDeposit) public pure\\n    returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n        eventData.addressItems.initItems(8);\\n        eventData.addressItems.setItem(0, \\\"account\\\", glvDeposit.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", glvDeposit.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", glvDeposit.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", glvDeposit.market());\\n        eventData.addressItems.setItem(4, \\\"glv\\\", glvDeposit.glv());\\n        eventData.addressItems.setItem(5, \\\"initialLongToken\\\", glvDeposit.initialLongToken());\\n        eventData.addressItems.setItem(6, \\\"initialShortToken\\\", glvDeposit.initialShortToken());\\n        eventData.addressItems.setItem(7, \\\"uiFeeReceiver\\\", glvDeposit.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", glvDeposit.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", glvDeposit.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"initialLongTokenAmount\\\", glvDeposit.initialLongTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"initialShortTokenAmount\\\", glvDeposit.initialShortTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minGlvTokens\\\", glvDeposit.minGlvTokens());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", glvDeposit.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", glvDeposit.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", glvDeposit.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"marketTokenAmount\\\", glvDeposit.marketTokenAmount());\\n\\n        eventData.boolItems.initItems(2);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", glvDeposit.shouldUnwrapNativeToken());\\n        eventData.boolItems.setItem(1, \\\"isMarketTokenDeposit\\\", glvDeposit.isMarketTokenDeposit());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", glvDeposit.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x6590ea178d1f8b7eec240cdd75df63f2b245d5a9aec0c6ac28fd4fbec06e3000\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvWithdrawal/GlvWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Withdrawal\\n * @dev Struct for withdrawals\\n */\\nlibrary GlvWithdrawal {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account The account to withdraw for.\\n    // @param receiver The address that will receive the withdrawn tokens.\\n    // @param callbackContract The contract that will be called back.\\n    // @param uiFeeReceiver The ui fee receiver.\\n    // @param market The market on which the withdrawal will be executed.\\n    // @param glv\\n    struct Addresses {\\n        address glv;\\n        address market;\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param glvTokenAmount The amount of market tokens that will be withdrawn.\\n    // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\\n    // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\\n    // @param executionFee The execution fee for the withdrawal.\\n    // @param callbackGasLimit The gas limit for calling the callback contract.\\n    // @param srcChainId The source chain id.\\n    struct Numbers {\\n        uint256 glvTokenAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function glv(Props memory props) internal pure returns (address) {\\n        return props.addresses.glv;\\n    }\\n\\n    function setGlv(Props memory props, address value) internal pure {\\n        props.addresses.glv = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function glvTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.glvTokenAmount;\\n    }\\n\\n    function setGlvTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.glvTokenAmount = value;\\n    }\\n\\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minLongTokenAmount;\\n    }\\n\\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minLongTokenAmount = value;\\n    }\\n\\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minShortTokenAmount;\\n    }\\n\\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minShortTokenAmount = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x020f469ffd039179ceaed3b46135872a1f51a5f561496e2b423ac3e5e4abcd42\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvWithdrawal/GlvWithdrawalEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../event/EventEmitter.sol\\\";\\nimport \\\"../../event/EventUtils.sol\\\";\\nimport \\\"../../utils/Cast.sol\\\";\\n\\nimport \\\"./GlvWithdrawal.sol\\\";\\n\\nlibrary GlvWithdrawalEventUtils {\\n    using GlvWithdrawal for GlvWithdrawal.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitGlvWithdrawalCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        GlvWithdrawal.Props memory glvWithdrawal\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(glvWithdrawal);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvWithdrawalCreated\\\", key, Cast.toBytes32(glvWithdrawal.account()), eventData);\\n    }\\n\\n    function emitGlvWithdrawalExecuted(EventEmitter eventEmitter, bytes32 key, address account) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvWithdrawalExecuted\\\", key, Cast.toBytes32(account), eventData);\\n    }\\n\\n    function emitGlvWithdrawalCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvWithdrawalCancelled\\\", key, Cast.toBytes32(account), eventData);\\n    }\\n\\n    function createEventData(GlvWithdrawal.Props memory glvWithdrawal) public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(6);\\n        eventData.addressItems.setItem(0, \\\"account\\\", glvWithdrawal.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", glvWithdrawal.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", glvWithdrawal.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", glvWithdrawal.market());\\n        eventData.addressItems.setItem(4, \\\"glv\\\", glvWithdrawal.glv());\\n        eventData.addressItems.setItem(5, \\\"uiFeeReceiver\\\", glvWithdrawal.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", glvWithdrawal.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", glvWithdrawal.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(6);\\n        eventData.uintItems.setItem(0, \\\"glvTokenAmount\\\", glvWithdrawal.glvTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"minLongTokenAmount\\\", glvWithdrawal.minLongTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minShortTokenAmount\\\", glvWithdrawal.minShortTokenAmount());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", glvWithdrawal.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", glvWithdrawal.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", glvWithdrawal.callbackGasLimit());\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", glvWithdrawal.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", glvWithdrawal.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x87877bae18f86d6b878442b3de8c5136f597d12ed23a65f71dab5a3fa843b5ba\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\n\\n// @title Order\\n// @dev Struct for orders\\nlibrary Order {\\n    using Order for Props;\\n\\n    enum OrderType {\\n        // @dev MarketSwap: swap token A to token B at the current market price\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\n        MarketSwap,\\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\n        LimitSwap,\\n        // @dev MarketIncrease: increase position at the current market price\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\n        MarketIncrease,\\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitIncrease,\\n        // @dev MarketDecrease: decrease position at the current market price\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\n        MarketDecrease,\\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitDecrease,\\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopLossDecrease,\\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\\n        Liquidation,\\n        // @dev StopIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopIncrease\\n    }\\n\\n    // to help further differentiate orders\\n    enum SecondaryOrderType {\\n        None,\\n        Adl\\n    }\\n\\n    enum DecreasePositionSwapType {\\n        NoSwap,\\n        SwapPnlTokenToCollateralToken,\\n        SwapCollateralTokenToPnlToken\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account of the order\\n    // @param receiver the receiver for any token transfers\\n    // this field is meant to allow the output of an order to be\\n    // received by an address that is different from the creator of the\\n    // order whether this is for swaps or whether the account is the owner\\n    // of a position\\n    // for funding fees and claimable collateral, the funds are still\\n    // credited to the owner of the position indicated by order.account\\n    // @param callbackContract the contract to call for callbacks\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the trading market\\n    // @param initialCollateralToken for increase orders, initialCollateralToken\\n    // is the token sent in by the user, the token will be swapped through the\\n    // specified swapPath, before being deposited into the position as collateral\\n    // for decrease orders, initialCollateralToken is the collateral token of the position\\n    // withdrawn collateral from the decrease of the position will be swapped\\n    // through the specified swapPath\\n    // for swaps, initialCollateralToken is the initial token sent for the swap\\n    // @param swapPath an array of market addresses to swap through\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address cancellationReceiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialCollateralToken;\\n        address[] swapPath;\\n    }\\n\\n    // @param sizeDeltaUsd the requested change in position size\\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\\n    // is the amount of the initialCollateralToken sent in by the user\\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\\n    // collateralToken to withdraw\\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\\n    // in for the swap\\n    // @param orderType the order type\\n    // @param triggerPrice the trigger price for non-market orders\\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\\n    // note that for decrease orders, multiple tokens could be received, for this reason, the\\n    // minOutputAmount value is treated as a USD value for validation in decrease orders\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        OrderType orderType;\\n        DecreasePositionSwapType decreasePositionSwapType;\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n        uint256 updatedAtTime;\\n        uint256 validFromTime;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param isLong whether the order is for a long or short\\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\\n    // transferring to the user\\n    // @param isFrozen whether the order is frozen\\n    struct Flags {\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n        bool isFrozen;\\n        bool autoCancel;\\n    }\\n\\n    // @dev the order account\\n    // @param props Props\\n    // @return the order account\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    // @dev set the order account\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    // @dev the order receiver\\n    // @param props Props\\n    // @return the order receiver\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    // @dev set the order receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function cancellationReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.cancellationReceiver;\\n    }\\n\\n    function setCancellationReceiver(Props memory props, address value) internal pure {\\n        props.addresses.cancellationReceiver = value;\\n    }\\n\\n    // @dev the order callbackContract\\n    // @param props Props\\n    // @return the order callbackContract\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    // @dev set the order callbackContract\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    // @dev the order market\\n    // @param props Props\\n    // @return the order market\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    // @dev set the order market\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    // @dev the order initialCollateralToken\\n    // @param props Props\\n    // @return the order initialCollateralToken\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialCollateralToken;\\n    }\\n\\n    // @dev set the order initialCollateralToken\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\\n        props.addresses.initialCollateralToken = value;\\n    }\\n\\n    // @dev the order uiFeeReceiver\\n    // @param props Props\\n    // @return the order uiFeeReceiver\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    // @dev set the order uiFeeReceiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    // @dev the order swapPath\\n    // @param props Props\\n    // @return the order swapPath\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.swapPath;\\n    }\\n\\n    // @dev set the order swapPath\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.swapPath = value;\\n    }\\n\\n    // @dev the order type\\n    // @param props Props\\n    // @return the order type\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\n        return props.numbers.orderType;\\n    }\\n\\n    // @dev set the order type\\n    // @param props Props\\n    // @param value the value to set to\\n    function setOrderType(Props memory props, OrderType value) internal pure {\\n        props.numbers.orderType = value;\\n    }\\n\\n    function decreasePositionSwapType(Props memory props) internal pure returns (DecreasePositionSwapType) {\\n        return props.numbers.decreasePositionSwapType;\\n    }\\n\\n    function setDecreasePositionSwapType(Props memory props, DecreasePositionSwapType value) internal pure {\\n        props.numbers.decreasePositionSwapType = value;\\n    }\\n\\n    // @dev the order sizeDeltaUsd\\n    // @param props Props\\n    // @return the order sizeDeltaUsd\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeDeltaUsd;\\n    }\\n\\n    // @dev set the order sizeDeltaUsd\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\\n        props.numbers.sizeDeltaUsd = value;\\n    }\\n\\n    // @dev the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @return the order initialCollateralDeltaAmount\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialCollateralDeltaAmount;\\n    }\\n\\n    // @dev set the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialCollateralDeltaAmount = value;\\n    }\\n\\n    // @dev the order triggerPrice\\n    // @param props Props\\n    // @return the order triggerPrice\\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.triggerPrice;\\n    }\\n\\n    // @dev set the order triggerPrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.triggerPrice = value;\\n    }\\n\\n    // @dev the order acceptablePrice\\n    // @param props Props\\n    // @return the order acceptablePrice\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.acceptablePrice;\\n    }\\n\\n    // @dev set the order acceptablePrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.acceptablePrice = value;\\n    }\\n\\n    // @dev set the order executionFee\\n    // @param props Props\\n    // @param value the value to set to\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    // @dev the order executionFee\\n    // @param props Props\\n    // @return the order executionFee\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    // @dev the order callbackGasLimit\\n    // @param props Props\\n    // @return the order callbackGasLimit\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    // @dev set the order callbackGasLimit\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    // @dev the order minOutputAmount\\n    // @param props Props\\n    // @return the order minOutputAmount\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minOutputAmount;\\n    }\\n\\n    // @dev set the order minOutputAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minOutputAmount = value;\\n    }\\n\\n    // @dev the order updatedAtTime\\n    // @param props Props\\n    // @return the order updatedAtTime\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    // @dev set the order updatedAtTime\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function validFromTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.validFromTime;\\n    }\\n    function setValidFromTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.validFromTime = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    // @dev whether the order is for a long or short\\n    // @param props Props\\n    // @return whether the order is for a long or short\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    // @dev set whether the order is for a long or short\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsLong(Props memory props, bool value) internal pure {\\n        props.flags.isLong = value;\\n    }\\n\\n    // @dev whether to unwrap the native token before transfers to the user\\n    // @param props Props\\n    // @return whether to unwrap the native token before transfers to the user\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    // @dev set whether the native token should be unwrapped before being\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    // @dev whether the order is frozen\\n    // @param props Props\\n    // @return whether the order is frozen\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\n        return props.flags.isFrozen;\\n    }\\n\\n    // @dev set whether the order is frozen\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsFrozen(Props memory props, bool value) internal pure {\\n        props.flags.isFrozen = value;\\n    }\\n\\n    function autoCancel(Props memory props) internal pure returns (bool) {\\n        return props.flags.autoCancel;\\n    }\\n\\n    function setAutoCancel(Props memory props, bool value) internal pure {\\n        props.flags.autoCancel = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n\\n    // @param props Props\\n    function touch(Props memory props) internal view {\\n        props.setUpdatedAtTime(Chain.currentTimestamp());\\n    }\\n}\\n\",\"keccak256\":\"0x356d6e3d8ec086d94aae20e81da9ab5c0f46789ef57ede76e15a1491d6fe1d18\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Order.sol\\\";\\n\\nlibrary OrderEventUtils {\\n    using Order for Order.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitOrderCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Order.Props memory order\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(order);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderCreated\\\",\\n            key,\\n            Cast.toBytes32(order.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        Order.SecondaryOrderType secondaryOrderType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"secondaryOrderType\\\", uint256(secondaryOrderType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Order.Props memory order\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", order.account());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"sizeDeltaUsd\\\", order.sizeDeltaUsd());\\n        eventData.uintItems.setItem(1, \\\"acceptablePrice\\\", order.acceptablePrice());\\n        eventData.uintItems.setItem(2, \\\"triggerPrice\\\", order.triggerPrice());\\n        eventData.uintItems.setItem(3, \\\"minOutputAmount\\\", order.minOutputAmount());\\n        eventData.uintItems.setItem(4, \\\"updatedAtTime\\\", order.updatedAtTime());\\n        eventData.uintItems.setItem(5, \\\"validFromTime\\\", order.validFromTime());\\n        eventData.uintItems.setItem(6, \\\"srcChainId\\\", order.srcChainId());\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"autoCancel\\\", order.autoCancel());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", order.dataList());\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderUpdated\\\",\\n            key,\\n            Cast.toBytes32(order.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderSizeDeltaAutoUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 nextSizeDeltaUsd\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"sizeDeltaUsd\\\", sizeDeltaUsd);\\n        eventData.uintItems.setItem(1, \\\"nextSizeDeltaUsd\\\", nextSizeDeltaUsd);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OrderSizeDeltaAutoUpdated\\\",\\n            key,\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderCollateralDeltaAmountAutoUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        uint256 collateralDeltaAmount,\\n        uint256 nextCollateralDeltaAmount\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"collateralDeltaAmount\\\", collateralDeltaAmount);\\n        eventData.uintItems.setItem(1, \\\"nextCollateralDeltaAmount\\\", nextCollateralDeltaAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OrderCollateralDeltaAmountAutoUpdated\\\",\\n            key,\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderFrozen(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderFrozen\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Order.Props memory order) public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n        eventData.addressItems.initItems(7);\\n        eventData.addressItems.setItem(0, \\\"account\\\", order.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", order.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", order.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"uiFeeReceiver\\\", order.uiFeeReceiver());\\n        eventData.addressItems.setItem(4, \\\"market\\\", order.market());\\n        eventData.addressItems.setItem(5, \\\"initialCollateralToken\\\", order.initialCollateralToken());\\n        eventData.addressItems.setItem(6, \\\"cancellationReceiver\\\", order.cancellationReceiver());\\n\\n        eventData.addressItems.initArrayItems(1);\\n        eventData.addressItems.setItem(0, \\\"swapPath\\\", order.swapPath());\\n\\n        eventData.uintItems.initItems(11);\\n        eventData.uintItems.setItem(0, \\\"orderType\\\", uint256(order.orderType()));\\n        eventData.uintItems.setItem(1, \\\"decreasePositionSwapType\\\", uint256(order.decreasePositionSwapType()));\\n        eventData.uintItems.setItem(2, \\\"sizeDeltaUsd\\\", order.sizeDeltaUsd());\\n        eventData.uintItems.setItem(3, \\\"initialCollateralDeltaAmount\\\", order.initialCollateralDeltaAmount());\\n        eventData.uintItems.setItem(4, \\\"triggerPrice\\\", order.triggerPrice());\\n        eventData.uintItems.setItem(5, \\\"acceptablePrice\\\", order.acceptablePrice());\\n        eventData.uintItems.setItem(6, \\\"executionFee\\\", order.executionFee());\\n        eventData.uintItems.setItem(7, \\\"callbackGasLimit\\\", order.callbackGasLimit());\\n        eventData.uintItems.setItem(8, \\\"minOutputAmount\\\", order.minOutputAmount());\\n        eventData.uintItems.setItem(9, \\\"updatedAtTime\\\", order.updatedAtTime());\\n        eventData.uintItems.setItem(10, \\\"validFromTime\\\", order.validFromTime());\\n\\n        eventData.boolItems.initItems(3);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", order.isLong());\\n        eventData.boolItems.setItem(1, \\\"shouldUnwrapNativeToken\\\", order.shouldUnwrapNativeToken());\\n        eventData.boolItems.setItem(2, \\\"autoCancel\\\", order.autoCancel());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", order.dataList());\\n        return eventData;\\n    }\\n\\n    function emitPositionCollateralUsedForExecutionFee(\\n        EventEmitter eventEmitter,\\n        bytes32 orderKey,\\n        address feeToken,\\n        uint256 positionCollateralAmountUsed\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", orderKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"feeToken\\\", feeToken);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"positionCollateralAmountUsed\\\", positionCollateralAmountUsed);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionCollateralUsedForExecutionFee\\\",\\n            orderKey,\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9886192b6636ec4eeaec21cd5cb566fb59788fc999c157fe6451ba95cf8a76dd\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/ISwapPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISwapPricingUtils {\\n    enum SwapPricingType {\\n        Swap,\\n        Shift,\\n        AtomicWithdrawal,\\n        Deposit,\\n        Withdrawal,\\n        AtomicSwap\\n    }\\n}\\n\",\"keccak256\":\"0x8504d26a64dbbc21e250abe890c99b0558879617c44590285f05a62315f1b288\",\"license\":\"MIT\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_KEEPER role.\\n     * Hash: 0xfa89e7b5ea0a346d73c71d7d6a3512b9f2ea2c2e6c5fb8211ec351d35deef0f4\\n     */\\n    bytes32 public constant CONTRIBUTOR_KEEPER = keccak256(abi.encode(\\\"CONTRIBUTOR_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_DISTRIBUTOR role.\\n     * Hash: 0xcdf6da7ad30d8b9afea66fb1cb11b1b7d0b50e9b30b69561a3ca52c39251360c\\n     */\\n    bytes32 public constant CONTRIBUTOR_DISTRIBUTOR = keccak256(abi.encode(\\\"CONTRIBUTOR_DISTRIBUTOR\\\"));\\n}\\n\",\"keccak256\":\"0xf82e35db50f74b43c8598bacd2df901f3c1a292302680a1b02b076fdb387a6ef\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIMITED_CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyLimitedConfigKeeper() {\\n        _validateRole(Role.LIMITED_CONFIG_KEEPER, \\\"LIMITED_CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_KEEPER role to call the function.\\n     */\\n    modifier onlyContributorKeeper() {\\n        _validateRole(Role.CONTRIBUTOR_KEEPER, \\\"CONTRIBUTOR_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_DISTRIBUTOR role to call the function.\\n     */\\n    modifier onlyContributorDistributor() {\\n        _validateRole(Role.CONTRIBUTOR_DISTRIBUTOR, \\\"CONTRIBUTOR_DISTRIBUTOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd5f2168b69a6c70dc6aacf850491a4eb7c3eaf7b9078deaa83aee0febb9b5ab\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/shift/Shift.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Shift {\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        bytes32[] _dataList;\\n    }\\n\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address fromMarket;\\n        address toMarket;\\n    }\\n\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function fromMarket(Props memory props) internal pure returns (address) {\\n        return props.addresses.fromMarket;\\n    }\\n\\n    function setFromMarket(Props memory props, address value) internal pure {\\n        props.addresses.fromMarket = value;\\n    }\\n\\n    function toMarket(Props memory props) internal pure returns (address) {\\n        return props.addresses.toMarket;\\n    }\\n\\n    function setToMarket(Props memory props, address value) internal pure {\\n        props.addresses.toMarket = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0xe99c93879ffd1027252d42d1e0edb8f178d0cc4926b5de81fbd439651e324935\",\"license\":\"BUSL-1.1\"},\"contracts/shift/ShiftEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Shift.sol\\\";\\n\\nlibrary ShiftEventUtils {\\n    using Shift for Shift.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitShiftCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Shift.Props memory shift\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(shift);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ShiftCreated\\\",\\n            key,\\n            Cast.toBytes32(shift.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitShiftExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 receivedMarketTokens\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"receivedMarketTokens\\\", receivedMarketTokens);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ShiftExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitShiftCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ShiftCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Shift.Props memory shift) public pure returns(EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(6);\\n        eventData.addressItems.setItem(0, \\\"account\\\", shift.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", shift.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", shift.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"fromMarket\\\", shift.fromMarket());\\n        eventData.addressItems.setItem(4, \\\"toMarket\\\", shift.toMarket());\\n        eventData.addressItems.setItem(5, \\\"uiFeeReceiver\\\", shift.uiFeeReceiver());\\n\\n        eventData.uintItems.initItems(5);\\n        eventData.uintItems.setItem(0, \\\"marketTokenAmount\\\", shift.marketTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"minMarketTokens\\\", shift.minMarketTokens());\\n        eventData.uintItems.setItem(2, \\\"updatedAtTime\\\", shift.updatedAtTime());\\n        eventData.uintItems.setItem(3, \\\"executionFee\\\", shift.executionFee());\\n        eventData.uintItems.setItem(4, \\\"callbackGasLimit\\\", shift.callbackGasLimit());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", shift.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0xdb201f7e0a5f4ed6fd4e732e2abea81a388c7eff64455ab9ba1b024a1843c6a8\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title Calc\\n * @dev Library for math functions\\n */\\nlibrary Calc {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    // this method assumes that min is less than max\\n    function boundMagnitude(int256 value, uint256 min, uint256 max) internal pure returns (int256) {\\n        uint256 magnitude = value.abs();\\n\\n        if (magnitude < min) {\\n            magnitude = min;\\n        }\\n\\n        if (magnitude > max) {\\n            magnitude = max;\\n        }\\n\\n        int256 sign = value == 0 ? int256(1) : value / value.abs().toInt256();\\n\\n        return magnitude.toInt256() * sign;\\n    }\\n\\n    /**\\n     * @dev Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    /**\\n     * Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     * The rounding is purely on the magnitude of a, if a is negative the result\\n     * is a larger magnitude negative\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpMagnitudeDivision(int256 a, uint256 b) internal pure returns (int256) {\\n        if (a < 0) {\\n            return (a - b.toInt256() + 1) / b.toInt256();\\n        }\\n\\n        return (a + b.toInt256() - 1) / b.toInt256();\\n    }\\n\\n    /**\\n     * Adds two numbers together and return a uint256 value, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sumReturnUint256(uint256 a, int256 b) internal pure returns (uint256) {\\n        if (b > 0) {\\n            return a + b.abs();\\n        }\\n\\n        return a - b.abs();\\n    }\\n\\n    /**\\n     * Adds two numbers together and return an int256 value, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sumReturnInt256(uint256 a, int256 b) internal pure returns (int256) {\\n        return a.toInt256() + b;\\n    }\\n\\n    /**\\n     * @dev Calculates the absolute difference between two numbers.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the absolute difference between the two numbers\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n    /**\\n     * Adds two numbers together, the result is bounded to prevent overflows.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function boundedAdd(int256 a, int256 b) internal pure returns (int256) {\\n        // if either a or b is zero or if the signs are different there should not be any overflows\\n        if (a == 0 || b == 0 || (a < 0 && b > 0) || (a > 0 && b < 0)) {\\n            return a + b;\\n        }\\n\\n        // if adding `b` to `a` would result in a value less than the min int256 value\\n        // then return the min int256 value\\n        if (a < 0 && b <= type(int256).min - a) {\\n            return type(int256).min;\\n        }\\n\\n        // if adding `b` to `a` would result in a value more than the max int256 value\\n        // then return the max int256 value\\n        if (a > 0 && b >= type(int256).max - a) {\\n            return type(int256).max;\\n        }\\n\\n        return a + b;\\n    }\\n\\n    /**\\n     * Returns a - b, the result is bounded to prevent overflows.\\n     * Note that this will revert if b is type(int256).min because of the usage of \\\"-b\\\".\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the bounded result of a - b\\n     */\\n    function boundedSub(int256 a, int256 b) internal pure returns (int256) {\\n        // if either a or b is zero or the signs are the same there should not be any overflow\\n        if (a == 0 || b == 0 || (a > 0 && b > 0) || (a < 0 && b < 0)) {\\n            return a - b;\\n        }\\n\\n        // if adding `-b` to `a` would result in a value greater than the max int256 value\\n        // then return the max int256 value\\n        if (a > 0 && -b >= type(int256).max - a) {\\n            return type(int256).max;\\n        }\\n\\n        // if subtracting `b` from `a` would result in a value less than the min int256 value\\n        // then return the min int256 value\\n        if (a < 0 && -b <= type(int256).min - a) {\\n            return type(int256).min;\\n        }\\n\\n        return a - b;\\n    }\\n\\n\\n    /**\\n     * Converts the given unsigned integer to a signed integer, using the given\\n     * flag to determine whether the result should be positive or negative.\\n     *\\n     * @param a the unsigned integer to convert\\n     * @param isPositive whether the result should be positive (if true) or negative (if false)\\n     * @return the signed integer representation of the given unsigned integer\\n     */\\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\\n        if (isPositive) {\\n            return a.toInt256();\\n        } else {\\n            return -a.toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3848e1c51a6c77a1d6ec30bb052e97f6c39437110c773ebc06956ce5e4a54370\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n\\n    function toBytes32(string memory value) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyString = bytes(value);\\n        if (tempEmptyString.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(value, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a bytes array to a uint256.\\n     * Handles cases where the uint256 stored in bytes is stored with or without padding.\\n     * @param uint256AsBytes The bytes array representing the uint256 value.\\n     * @return value The uint256 value obtained from the bytes array.\\n     */\\n    function bytesToUint256(bytes memory uint256AsBytes) internal pure returns (uint256) {\\n        uint256 length = uint256AsBytes.length;\\n\\n        if(length > 32) {\\n            revert Errors.Uint256AsBytesLengthExceeds32Bytes(length);\\n        }\\n\\n        if (length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 value;\\n\\n        assembly {\\n            value := mload(add(uint256AsBytes, 32))\\n        }\\n\\n        return value = value >> (8 * (32 - length));\\n    }\\n\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint192ToBytes(uint192 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint32ToBytes(uint32 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x75f1c33e5e28c00f2f3e49db548cc8fb97f9371cc31fc0ebcc073eb2f75af1dc\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"},\"contracts/withdrawal/Withdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Withdrawal\\n * @dev Struct for withdrawals\\n */\\nlibrary Withdrawal {\\n    enum WithdrawalType {\\n        Normal,\\n        Shift,\\n        Glv\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account The account to withdraw for.\\n    // @param receiver The address that will receive the withdrawn tokens.\\n    // @param callbackContract The contract that will be called back.\\n    // @param uiFeeReceiver The ui fee receiver.\\n    // @param market The market on which the withdrawal will be executed.\\n    // @param longTokenSwapPath The path for swapping long tokens.\\n    // @param shortTokenSwapPath The path for swapping short tokens.\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param marketTokenAmount The amount of market tokens that will be withdrawn.\\n    // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\\n    // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\\n    // @param executionFee The execution fee for the withdrawal.\\n    // @param callbackGasLimit The gas limit for calling the callback contract.\\n    // @param srcChainId The source chain id.\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minLongTokenAmount;\\n    }\\n\\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minLongTokenAmount = value;\\n    }\\n\\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minShortTokenAmount;\\n    }\\n\\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minShortTokenAmount = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x852668dd57383f864c6b9b1de53e1391fff8336602661d6808a81522f6309b9b\",\"license\":\"BUSL-1.1\"},\"contracts/withdrawal/WithdrawalEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Withdrawal.sol\\\";\\nimport \\\"../pricing/ISwapPricingUtils.sol\\\";\\n\\nlibrary WithdrawalEventUtils {\\n    using Withdrawal for Withdrawal.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitWithdrawalCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Withdrawal.Props memory withdrawal,\\n        Withdrawal.WithdrawalType withdrawalType\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(withdrawal, withdrawalType);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"WithdrawalCreated\\\",\\n            key,\\n            Cast.toBytes32(withdrawal.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitWithdrawalExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        ISwapPricingUtils.SwapPricingType swapPricingType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"swapPricingType\\\", uint256(swapPricingType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"WithdrawalExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitWithdrawalCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"WithdrawalCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Withdrawal.Props memory withdrawal, Withdrawal.WithdrawalType withdrawalType)\\n    public pure returns(EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(5);\\n        eventData.addressItems.setItem(0, \\\"account\\\", withdrawal.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", withdrawal.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", withdrawal.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", withdrawal.market());\\n        eventData.addressItems.setItem(4, \\\"uiFeeReceiver\\\", withdrawal.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", withdrawal.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", withdrawal.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"marketTokenAmount\\\", withdrawal.marketTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"minLongTokenAmount\\\", withdrawal.minLongTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minShortTokenAmount\\\", withdrawal.minShortTokenAmount());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", withdrawal.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", withdrawal.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", withdrawal.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"withdrawalType\\\", uint256(withdrawalType));\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", withdrawal.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", withdrawal.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x8fc4fb80111bce4477f294b120ccb5d183c4433b70c3f7a8fca9828ec5e95950\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x615e3e6200003b600b82828239805160001a60731461002e57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100e55760003560e01c806314df816b146100ea57806339510d6f146100ff5780633ef2464d1461011f5780635004ae8e1461013f57806351034cc31461015f578063569d6f2b1461017f578063717c2ba5146101af5780637ac9a535146101d2578063840b4478146101f25780639384884d146102125780639d63a68614610232578063b3678d5b14610252578063b385847a14610272578063b47d5c9f14610292578063b4849276146102b2578063c9d846da146102d2578063f00202e0146102f2575b600080fd5b6100fd6100f8366004611778565b610312565b005b81801561010b57600080fd5b506100fd61011a366004612bec565b610409565b81801561012b57600080fd5b506100fd61013a366004612ddb565b61056d565b81801561014b57600080fd5b506100fd61015a366004613021565b6106bf565b81801561016b57600080fd5b506100fd61017a3660046132d5565b61080f565b61019261018d36600461341f565b61095f565b6040516001600160a01b0390911681526020015b60405180910390f35b6101c26101bd366004613477565b6109e3565b60405190151581526020016101a6565b8180156101de57600080fd5b506100fd6101ed366004613021565b610a1a565b8180156101fe57600080fd5b506100fd61020d3660046132d5565b610b6a565b81801561021e57600080fd5b506100fd61022d366004613494565b610cba565b81801561023e57600080fd5b506100fd61024d366004612ddb565b610e0c565b81801561025e57600080fd5b506100fd61026d3660046135df565b610f5e565b81801561027e57600080fd5b506100fd61028d366004613494565b610fef565b81801561029e57600080fd5b506100fd6102ad36600461363b565b611141565b8180156102be57600080fd5b506100fd6102cd36600461363b565b611291565b8180156102de57600080fd5b506100fd6102ed3660046132d5565b6113e1565b8180156102fe57600080fd5b506100fd61030d366004612bec565b611531565b6000826001600160a01b031663bd02d0f560405160200161035d9060208082526016908201527513505617d0d05313109050d2d7d1d054d7d31253525560521b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161039191815260200190565b602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190613798565b905080821115610404576040516308575b4960e11b815260048101839052602481018290526044015b60405180910390fd5b505050565b6104186101bd83516040015190565b61042157505050565b6040516384b29b5760e01b815260009073ba6a67b9D280EC5e2cC919658B5957588791d37f906384b29b579061045b908690600401613871565b600060405180830381865af4158015610478573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a09190810190614861565b90506104b96104b484602001516080015190565b611681565b8251604001516001600160a01b0316633accaf266104dc85602001516080015190565b8684866040518563ffffffff1660e01b81526004016104fd939291906151ff565b600060405180830381600088803b15801561051757600080fd5b5087f193505050508015610529575060015b610567577fbefdc7c08b73634e388aa6a4849cfa7f8c2d2b9e4dc8f9790efd40114a1ccea4848460405161055e929190615234565b60405180910390a15b50505050565b61057c6101bd83516040015190565b61058557505050565b604051637093839f60e01b815260009073F1f4dAe0660De81C944a0dFC957415D4fcF7426290637093839f906105c190869085906004016152ec565b600060405180830381865af41580156105de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106069190810190614861565b905061061a6104b4846020015160a0015190565b8251604001516001600160a01b03166329e5be2161063d856020015160a0015190565b8684866040518563ffffffff1660e01b815260040161065e939291906151ff565b600060405180830381600088803b15801561067857600080fd5b5087f19350505050801561068a575060015b610567577f380ebabc00a0193314fe71ac63be6788bd78a935c348b66828cbc935bf0d889e848460405161055e929190615411565b6106ce6101bd83516060015190565b6106d757505050565b6040516379145fc560e01b8152600090730dCc8a2415206aaa3453442979f004069F45E3a5906379145fc590610711908690600401615579565b600060405180830381865af415801561072e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107569190810190614861565b905061076a6104b4846020015160c0015190565b8251606001516001600160a01b0316631d5c411261078d856020015160c0015190565b8684866040518563ffffffff1660e01b81526004016107ae939291906151ff565b600060405180830381600088803b1580156107c857600080fd5b5087f1935050505080156107da575060015b610567577ff8ad94b0b4db45343504cdad24293ea3fd54bb199bc53eef64cfd4aa65056421848460405161055e9291906156b8565b61081e6101bd83516060015190565b61082757505050565b60405163163a46cd60e01b81526000907377664058485b15805Be8f3eFB0Ca23F68901e2a29063163a46cd906108619086906004016158ba565b600060405180830381865af415801561087e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a69190810190614861565b90506108ba6104b4846020015160e0015190565b8251606001516001600160a01b031663ffaf393f6108dd856020015160e0015190565b8684866040518563ffffffff1660e01b81526004016108fe939291906151ff565b600060405180830381600088803b15801561091857600080fd5b5087f19350505050801561092a575060015b610567577f1a77c0912881ff648e2052d6f9d04d5b49a7aa516967275c74add34c65d5a5d4848460405161055e9291906159af565b6000836001600160a01b03166321f8a72161097a85856116cc565b6040518263ffffffff1660e01b815260040161099891815260200190565b602060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190615aa8565b90505b9392505050565b60006001600160a01b0382166109fb57506000919050565b6001600160a01b0382163b610a1257506000919050565b506001919050565b610a296101bd83516060015190565b610a3257505050565b6040516379145fc560e01b8152600090730dCc8a2415206aaa3453442979f004069F45E3a5906379145fc590610a6c908690600401615579565b600060405180830381865af4158015610a89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab19190810190614861565b9050610ac56104b4846020015160c0015190565b8251606001516001600160a01b031663ca2ff6a2610ae8856020015160c0015190565b8684866040518563ffffffff1660e01b8152600401610b09939291906151ff565b600060405180830381600088803b158015610b2357600080fd5b5087f193505050508015610b35575060015b610567577f9821b6fcb394be152c4864dcbfccf0ba2a32bcf7f2f6b316470e78c4e44d92f6848460405161055e9291906156b8565b610b796101bd83516060015190565b610b8257505050565b60405163163a46cd60e01b81526000907377664058485b15805Be8f3eFB0Ca23F68901e2a29063163a46cd90610bbc9086906004016158ba565b600060405180830381865af4158015610bd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c019190810190614861565b9050610c156104b4846020015160e0015190565b8251606001516001600160a01b03166383fc34cf610c38856020015160e0015190565b8684866040518563ffffffff1660e01b8152600401610c59939291906151ff565b600060405180830381600088803b158015610c7357600080fd5b5087f193505050508015610c85575060015b610567577fd6142bdbcb7f6b7674e793dd31ef1ecdae5be9a475644beb8238617242d256c5848460405161055e9291906159af565b610cc96101bd83516040015190565b610cd257505050565b604051634673c40d60e01b81526000907324937cc0eC5048eDB8C0FAcFeCEb35CA9da2dc1290634673c40d90610d0e9086908590600401615ac5565b600060405180830381865af4158015610d2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d539190810190614861565b9050610d676104b4846020015160a0015190565b8251604001516001600160a01b0316631046848b610d8a856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401610dab939291906151ff565b600060405180830381600088803b158015610dc557600080fd5b5087f193505050508015610dd7575060015b610567577fe13cbf4c327b33a9d2e5963825ddd30ebe121b89d5ac1d4a65af848501448603848460405161055e929190615b66565b610e1b6101bd83516040015190565b610e2457505050565b604051637093839f60e01b815260009073F1f4dAe0660De81C944a0dFC957415D4fcF7426290637093839f90610e6090869085906004016152ec565b600060405180830381865af4158015610e7d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ea59190810190614861565b9050610eb96104b4846020015160a0015190565b8251604001516001600160a01b03166351f21238610edc856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401610efd939291906151ff565b600060405180830381600088803b158015610f1757600080fd5b5087f193505050508015610f29575060015b610567577f2eba240a3d3070bfec2568eb305818feb740b736d35d99c5f44c647d4c0d4d8b848460405161055e929190615411565b836001600160a01b031663ca446dd9610f7785856116cc565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b03841660248201526044016020604051808303816000875af1158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe89190615aa8565b5050505050565b610ffe6101bd83516040015190565b61100757505050565b604051634673c40d60e01b81526000907324937cc0eC5048eDB8C0FAcFeCEb35CA9da2dc1290634673c40d906110439086908590600401615ac5565b600060405180830381865af4158015611060573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110889190810190614861565b905061109c6104b4846020015160a0015190565b8251604001516001600160a01b03166381b6d9126110bf856020015160a0015190565b8684866040518563ffffffff1660e01b81526004016110e0939291906151ff565b600060405180830381600088803b1580156110fa57600080fd5b5087f19350505050801561110c575060015b610567577fc0f2eb8071e0d571b552589c90992b567c17c67516648c72b6fbe0e373ebe4be848460405161055e929190615b66565b6111506101bd83516080015190565b61115957505050565b60405163cb58eb5b60e01b81526000907376518C470c38010f5ea225434587670D07a90ca59063cb58eb5b90611193908690600401615c0d565b600060405180830381865af41580156111b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d89190810190614861565b90506111ec6104b4846020015160a0015190565b8251608001516001600160a01b03166352c631c861120f856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401611230939291906151ff565b600060405180830381600088803b15801561124a57600080fd5b5087f19350505050801561125c575060015b610567577f6c475808d30c96d678f6f8be069a06808c8cfc432c08082dad5c45e9f87919ec848460405161055e929190615cf9565b6112a06101bd83516080015190565b6112a957505050565b60405163cb58eb5b60e01b81526000907376518C470c38010f5ea225434587670D07a90ca59063cb58eb5b906112e3908690600401615c0d565b600060405180830381865af4158015611300573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113289190810190614861565b905061133c6104b4846020015160a0015190565b8251608001516001600160a01b0316634658379c61135f856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401611380939291906151ff565b600060405180830381600088803b15801561139a57600080fd5b5087f1935050505080156113ac575060015b610567577fb9898a5974aff894bdb0cc66a32cd9e69e00cd5122423a7beea199426ff19c80848460405161055e929190615cf9565b6113f06101bd83516060015190565b6113f957505050565b60405163163a46cd60e01b81526000907377664058485b15805Be8f3eFB0Ca23F68901e2a29063163a46cd906114339086906004016158ba565b600060405180830381865af4158015611450573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114789190810190614861565b905061148c6104b4846020015160e0015190565b8251606001516001600160a01b031663d8bbbe426114af856020015160e0015190565b8684866040518563ffffffff1660e01b81526004016114d0939291906151ff565b600060405180830381600088803b1580156114ea57600080fd5b5087f1935050505080156114fc575060015b610567577fae6226bd5e7b59d8cef685e023de512bdfcb3c146f2be0a86484237f94e252f4848460405161055e9291906159af565b6115406101bd83516040015190565b61154957505050565b6040516384b29b5760e01b815260009073ba6a67b9D280EC5e2cC919658B5957588791d37f906384b29b5790611583908690600401613871565b600060405180830381865af41580156115a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c89190810190614861565b90506115dc6104b484602001516080015190565b8251604001516001600160a01b03166360bc514b6115ff85602001516080015190565b8684866040518563ffffffff1660e01b8152600401611620939291906151ff565b600060405180830381600088803b15801561163a57600080fd5b5087f19350505050801561164c575060015b610567577f24b81d467c346571d5b95fff6054842e6137fdd52e61966ce97f90eb8bf8d153848460405161055e929190615234565b600060405a6116909190615dc1565b61169b90603f615de3565b9050818110156116c8576040516379a2abad60e01b815260048101829052602481018390526044016103fb565b5050565b60006040516020016117099060208082526017908201527614d055915117d0d05313109050d2d7d0d3d395149050d5604a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0380861691830191909152831660608201526080016040516020818303038152906040528051906020012090505b92915050565b6001600160a01b038116811461177557600080fd5b50565b6000806040838503121561178b57600080fd5b823561179681611760565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156117dc576117dc6117a4565b60405290565b604080519081016001600160401b03811182821017156117dc576117dc6117a4565b60405160e081016001600160401b03811182821017156117dc576117dc6117a4565b604051606081016001600160401b03811182821017156117dc576117dc6117a4565b604051608081016001600160401b03811182821017156117dc576117dc6117a4565b60405161012081016001600160401b03811182821017156117dc576117dc6117a4565b60405161010081016001600160401b03811182821017156117dc576117dc6117a4565b60405161014081016001600160401b03811182821017156117dc576117dc6117a4565b60405161018081016001600160401b03811182821017156117dc576117dc6117a4565b604051601f8201601f191681016001600160401b038111828210171561191e5761191e6117a4565b604052919050565b803561193181611760565b919050565b600060c0828403121561194857600080fd5b6119506117ba565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015292915050565b60006001600160401b038211156119a7576119a76117a4565b5060051b60200190565b600082601f8301126119c257600080fd5b813560206119d76119d28361198e565b6118f6565b82815260059290921b840181019181810190868411156119f657600080fd5b8286015b84811015611a1157803583529183019183016119fa565b509695505050505050565b60006001600160401b03821115611a3557611a356117a4565b50601f01601f191660200190565b600082601f830112611a5457600080fd5b8135611a626119d282611a1c565b818152846020838601011115611a7757600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611aa557600080fd5b81356020611ab56119d28361198e565b82815260059290921b84018101918181019086841115611ad457600080fd5b8286015b84811015611a11578035611aeb81611760565b8352918301918301611ad8565b600082601f830112611b0957600080fd5b81356020611b196119d28361198e565b82815260059290921b84018101918181019086841115611b3857600080fd5b8286015b84811015611a115780356001600160401b0380821115611b5c5760008081fd5b908801906040828b03601f1901811315611b765760008081fd5b611b7e6117e2565b8784013583811115611b905760008081fd5b611b9e8d8a83880101611a43565b825250908301359082821115611bb45760008081fd5b611bc28c8984870101611a94565b818901528652505050918301918301611b3c565b60006040808385031215611be957600080fd5b611bf16117e2565b915082356001600160401b0380821115611c0a57600080fd5b818501915085601f830112611c1e57600080fd5b81356020611c2e6119d28361198e565b82815260059290921b84018101918181019089841115611c4d57600080fd5b8286015b84811015611ccc57803586811115611c695760008081fd5b8701808c03601f1901891315611c7f5760008081fd5b611c876117e2565b8582013588811115611c995760008081fd5b611ca78e8883860101611a43565b8252509089013590611cb882611760565b808601919091528352918301918301611c51565b5087525086810135945082851115611ce357600080fd5b611cef88868901611af8565b81870152505050505092915050565b600082601f830112611d0f57600080fd5b81356020611d1f6119d28361198e565b828152600592831b8501820192828201919087851115611d3e57600080fd5b8387015b85811015611e335780356001600160401b0380821115611d625760008081fd5b908901906040828c03601f1901811315611d7c5760008081fd5b611d846117e2565b8884013583811115611d965760008081fd5b611da48e8b83880101611a43565b8252508184013583811115611db95760008081fd5b8085019450508c603f850112611dd157600092508283fd5b888401359250611de36119d28461198e565b83815292861b8401820192898101908e851115611e005760008081fd5b948301945b84861015611e1e5785358252948a0194908a0190611e05565b828b0152508752505050928401928401611d42565b5090979650505050505050565b60006040808385031215611e5357600080fd5b611e5b6117e2565b915082356001600160401b0380821115611e7457600080fd5b818501915085601f830112611e8857600080fd5b81356020611e986119d28361198e565b82815260059290921b84018101918181019089841115611eb757600080fd5b8286015b84811015611f2957803586811115611ed35760008081fd5b8701808c03601f1901891315611ee95760008081fd5b611ef16117e2565b8582013588811115611f035760008081fd5b611f118e8883860101611a43565b82525090890135858201528352918301918301611ebb565b5087525086810135945082851115611f4057600080fd5b611cef88868901611cfe565b600082601f830112611f5d57600080fd5b81356020611f6d6119d28361198e565b828152600592831b8501820192828201919087851115611f8c57600080fd5b8387015b85811015611e335780356001600160401b0380821115611fb05760008081fd5b908901906040828c03601f1901811315611fca5760008081fd5b611fd26117e2565b8884013583811115611fe45760008081fd5b611ff28e8b83880101611a43565b82525081840135838111156120075760008081fd5b8085019450508c603f85011261201f57600092508283fd5b8884013592506120316119d28461198e565b83815292861b8401820192898101908e85111561204e5760008081fd5b948301945b8486101561206c5785358252948a0194908a0190612053565b828b0152508752505050928401928401611f90565b6000604080838503121561209457600080fd5b61209c6117e2565b915082356001600160401b03808211156120b557600080fd5b818501915085601f8301126120c957600080fd5b813560206120d96119d28361198e565b82815260059290921b840181019181810190898411156120f857600080fd5b8286015b8481101561216a578035868111156121145760008081fd5b8701808c03601f190189131561212a5760008081fd5b6121326117e2565b85820135888111156121445760008081fd5b6121528e8883860101611a43565b825250908901358582015283529183019183016120fc565b508752508681013594508285111561218157600080fd5b611cef88868901611f4c565b801515811461177557600080fd5b600082601f8301126121ac57600080fd5b813560206121bc6119d28361198e565b828152600592831b85018201928282019190878511156121db57600080fd5b8387015b85811015611e335780356001600160401b03808211156121ff5760008081fd5b908901906040828c03601f19018113156122195760008081fd5b6122216117e2565b88840135838111156122335760008081fd5b6122418e8b83880101611a43565b82525081840135838111156122565760008081fd5b8085019450508c603f85011261226e57600092508283fd5b8884013592506122806119d28461198e565b83815292861b8401820192898101908e85111561229d5760008081fd5b948301945b848610156122c757853593506122b78461218d565b838252948a0194908a01906122a2565b828b01525087525050509284019284016121df565b600060408083850312156122ef57600080fd5b6122f76117e2565b915082356001600160401b038082111561231057600080fd5b818501915085601f83011261232457600080fd5b813560206123346119d28361198e565b82815260059290921b8401810191818101908984111561235357600080fd5b8286015b848110156123d25780358681111561236f5760008081fd5b8701808c03601f19018913156123855760008081fd5b61238d6117e2565b858201358881111561239f5760008081fd5b6123ad8e8883860101611a43565b82525090890135906123be8261218d565b808601919091528352918301918301612357565b50875250868101359450828511156123e957600080fd5b611cef8886890161219b565b600082601f83011261240657600080fd5b813560206124166119d28361198e565b82815260059290921b8401810191818101908684111561243557600080fd5b8286015b84811015611a115780356001600160401b03808211156124595760008081fd5b908801906040828b03601f19018113156124735760008081fd5b61247b6117e2565b878401358381111561248d5760008081fd5b61249b8d8a83880101611a43565b8252509083013590828211156124b15760008081fd5b6124bf8c89848701016119b1565b818901528652505050918301918301612439565b600060408083850312156124e657600080fd5b6124ee6117e2565b915082356001600160401b038082111561250757600080fd5b818501915085601f83011261251b57600080fd5b8135602061252b6119d28361198e565b82815260059290921b8401810191818101908984111561254a57600080fd5b8286015b848110156125bc578035868111156125665760008081fd5b8701808c03601f190189131561257c5760008081fd5b6125846117e2565b85820135888111156125965760008081fd5b6125a48e8883860101611a43565b8252509089013585820152835291830191830161254e565b50875250868101359450828511156125d357600080fd5b611cef888689016123f5565b600082601f8301126125f057600080fd5b813560206126006119d28361198e565b82815260059290921b8401810191818101908684111561261f57600080fd5b8286015b84811015611a11576001600160401b03813581101561264157600080fd5b813588016040818b03601f1901121561265957600080fd5b6126616117e2565b868201358381111561267257600080fd5b6126808c8983860101611a43565b82525060408201358381111561269557600080fd5b8083019250508a603f8301126126aa57600080fd5b868201356126ba6119d28261198e565b81815260059190911b830160400190888101908d8311156126da57600080fd5b604085015b838110156127125786813511156126f557600080fd5b6127058f60408335890101611a43565b8352918a01918a016126df565b50838a0152505085525050918301918301612623565b6000604080838503121561273b57600080fd5b6127436117e2565b915082356001600160401b038082111561275c57600080fd5b818501915085601f83011261277057600080fd5b813560206127806119d28361198e565b82815260059290921b8401810191818101908984111561279f57600080fd5b8286015b8481101561282f578035868111156127bb5760008081fd5b8701808c03601f19018913156127d15760008081fd5b6127d96117e2565b85820135888111156127eb5760008081fd5b6127f98e8883860101611a43565b825250898201358881111561280e5760008081fd5b61281c8e8883860101611a43565b82880152508452509183019183016127a3565b508752508681013594508285111561284657600080fd5b611cef888689016125df565b600082601f83011261286357600080fd5b813560206128736119d28361198e565b82815260059290921b8401810191818101908684111561289257600080fd5b8286015b84811015611a11576001600160401b0381358110156128b457600080fd5b813588016040818b03601f190112156128cc57600080fd5b6128d46117e2565b86820135838111156128e557600080fd5b6128f38c8983860101611a43565b82525060408201358381111561290857600080fd5b8083019250508a603f83011261291d57600080fd5b8682013561292d6119d28261198e565b81815260059190911b830160400190888101908d83111561294d57600080fd5b604085015b8381101561298557868135111561296857600080fd5b6129788f60408335890101611a43565b8352918a01918a01612952565b50838a0152505085525050918301918301612896565b600060408083850312156129ae57600080fd5b6129b66117e2565b915082356001600160401b03808211156129cf57600080fd5b818501915085601f8301126129e357600080fd5b813560206129f36119d28361198e565b82815260059290921b84018101918181019089841115612a1257600080fd5b8286015b84811015612aa257803586811115612a2e5760008081fd5b8701808c03601f1901891315612a445760008081fd5b612a4c6117e2565b8582013588811115612a5e5760008081fd5b612a6c8e8883860101611a43565b8252508982013588811115612a815760008081fd5b612a8f8e8883860101611a43565b8288015250845250918301918301612a16565b5087525086810135945082851115612ab957600080fd5b611cef88868901612852565b600060e08284031215612ad757600080fd5b612adf611804565b905081356001600160401b0380821115612af857600080fd5b612b0485838601611bd6565b83526020840135915080821115612b1a57600080fd5b612b2685838601611e40565b60208401526040840135915080821115612b3f57600080fd5b612b4b85838601612081565b60408401526060840135915080821115612b6457600080fd5b612b70858386016122dc565b60608401526080840135915080821115612b8957600080fd5b612b95858386016124d3565b608084015260a0840135915080821115612bae57600080fd5b612bba85838601612728565b60a084015260c0840135915080821115612bd357600080fd5b50612be08482850161299b565b60c08301525092915050565b600080600060608486031215612c0157600080fd5b8335925060208401356001600160401b0380821115612c1f57600080fd5b908501908187036101a0811215612c3557600080fd5b612c3d611826565b60c0821215612c4b57600080fd5b612c536117ba565b91508335612c6081611760565b82526020840135612c7081611760565b60208301526040840135612c8381611760565b60408301526060840135612c9681611760565b60608301526080840135612ca981611760565b608083015260a0840135612cbc81611760565b60a0830152818152612cd18960c08601611936565b6020820152610180840135915082821115612ceb57600080fd5b612cf7898386016119b1565b604082015280955050506040860135915080821115612d1557600080fd5b50612d2286828701612ac5565b9150509250925092565b600060e08284031215612d3e57600080fd5b612d46611804565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015292915050565b600060208284031215612da057600080fd5b604051602081016001600160401b0381118282101715612dc257612dc26117a4565b6040529050808235612dd38161218d565b905292915050565b600080600060608486031215612df057600080fd5b8335925060208401356001600160401b0380821115612e0e57600080fd5b908501906101408288031215612e2357600080fd5b612e2b611848565b823582811115612e3a57600080fd5b8301610120818a03811315612e4e57600080fd5b612e5661186a565b612e5f83611926565b8152612e6d60208401611926565b6020820152612e7e60408401611926565b6040820152612e8f60608401611926565b6060820152612ea060808401611926565b6080820152612eb160a08401611926565b60a0820152612ec260c08401611926565b60c082015260e083013585811115612ed957600080fd5b612ee58c828601611a94565b60e0830152506101008084013586811115612eff57600080fd5b612f0b8d828701611a94565b8284015250818552612f208c60208901612d2c565b6020860152612f318c828901612d8e565b60408601525050840135905082811115612f4a57600080fd5b612f56898286016119b1565b60608301525093506040860135915080821115612d1557600080fd5b60006101008284031215612f8557600080fd5b612f8d61188d565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015292915050565b600060408284031215612ff157600080fd5b612ff96117e2565b905081356130068161218d565b815260208201356130168161218d565b602082015292915050565b60008060006060848603121561303657600080fd5b8335925060208401356001600160401b038082111561305457600080fd5b90850190610180828803121561306957600080fd5b613071611848565b82358281111561308057600080fd5b8301610140818a03121561309357600080fd5b61309b6118b0565b6130a482611926565b81526130b260208301611926565b60208201526130c360408301611926565b60408201526130d460608301611926565b60608201526130e560808301611926565b60808201526130f660a08301611926565b60a082015261310760c08301611926565b60c082015261311860e08301611926565b60e0820152610100808301358581111561313157600080fd5b61313d8c828601611a94565b828401525050610120808301358581111561315757600080fd5b6131638c828601611a94565b82840152508184526131788b60208801612f72565b60208501526131898b828801612fdf565b604085015250505061016083013582811115612f4a57600080fd5b80356009811061193157600080fd5b80356003811061193157600080fd5b600061018082840312156131d557600080fd5b6131dd6118d3565b90506131e8826131a4565b81526131f6602083016131b3565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b60006080828403121561327f57600080fd5b613287611848565b905081356132948161218d565b815260208201356132a48161218d565b602082015260408201356132b78161218d565b604082015260608201356132ca8161218d565b606082015292915050565b6000806000606084860312156132ea57600080fd5b8335925060208401356001600160401b038082111561330857600080fd5b90850190610240828803121561331d57600080fd5b613325611848565b82358281111561333457600080fd5b8301610100818a03121561334757600080fd5b61334f61188d565b61335882611926565b815261336660208301611926565b602082015261337760408301611926565b604082015261338860608301611926565b606082015261339960808301611926565b60808201526133aa60a08301611926565b60a08201526133bb60c08301611926565b60c082015260e0820135848111156133d257600080fd5b6133de8b828501611a94565b60e0830152508252506133f488602085016131c2565b6020820152613407886101a0850161326d565b604082015261022083013582811115612f4a57600080fd5b60008060006060848603121561343457600080fd5b833561343f81611760565b9250602084013561344f81611760565b9150604084013561345f81611760565b809150509250925092565b6001600160a01b03169052565b60006020828403121561348957600080fd5b81356109dc81611760565b6000806000606084860312156134a957600080fd5b8335925060208401356001600160401b03808211156134c757600080fd5b9085019061014082880312156134dc57600080fd5b6134e4611848565b8235828111156134f357600080fd5b830160e0818a03121561350557600080fd5b61350d611804565b61351682611926565b815261352460208301611926565b602082015261353560408301611926565b604082015261354660608301611926565b606082015261355760808301611926565b608082015260a08201358481111561356e57600080fd5b61357a8b828501611a94565b60a08301525060c08201358481111561359257600080fd5b61359e8b828501611a94565b60c0830152508252506135b48860208501612d2c565b60208201526135c7886101008501612d8e565b604082015261012083013582811115612f4a57600080fd5b600080600080608085870312156135f557600080fd5b843561360081611760565b9350602085013561361081611760565b9250604085013561362081611760565b9150606085013561363081611760565b939692955090935050565b60008060006060848603121561365057600080fd5b8335925060208401356001600160401b038082111561366e57600080fd5b90850190610140828803121561368357600080fd5b61368b611848565b82358281111561369a57600080fd5b8301610100818a038113156136ae57600080fd5b6136b661188d565b6136bf83611926565b81526136cd60208401611926565b60208201526136de60408401611926565b60408201526136ef60608401611926565b606082015261370060808401611926565b608082015261371160a08401611926565b60a082015260c08301358581111561372857600080fd5b6137348c828601611a94565b60c08301525060e08301358581111561374c57600080fd5b6137588c828601611a94565b60e083015250835261376d8a60208701612d2c565b602084015261377e8a828701612d8e565b6040840152505061012083013582811115612f4a57600080fd5b6000602082840312156137aa57600080fd5b5051919050565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015182169084015260808083015182169084015260a09182015116910152565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600081518084526020808501945080840160005b838110156138665781518752958201959082019060010161384a565b509495945050505050565b602081526138836020820183516137b1565b6000602083015161389760e08401826137fc565b5060408301516101a0838101526138b26101c0840182613836565b949350505050565b60005b838110156138d55781810151838201526020016138bd565b50506000910152565b600082601f8301126138ef57600080fd5b81516138fd6119d282611a1c565b81815284602083860101111561391257600080fd5b6138b28260208301602087016138ba565b600082601f83011261393457600080fd5b815160206139446119d28361198e565b828152600592831b850182019282820191908785111561396357600080fd5b8387015b85811015611e335780516001600160401b03808211156139875760008081fd5b908901906040828c03601f19018113156139a15760008081fd5b6139a96117e2565b88840151838111156139bb5760008081fd5b6139c98e8b838801016138de565b82525081840151838111156139de5760008081fd5b8085019450508c603f8501126139f657600092508283fd5b888401519250613a086119d28461198e565b83815292861b8401820192898101908e851115613a255760008081fd5b948301945b84861015613a4f5785519350613a3f84611760565b838252948a0194908a0190613a2a565b828b0152508752505050928401928401613967565b60006040808385031215613a7757600080fd5b613a7f6117e2565b83519092506001600160401b0380821115613a9957600080fd5b818501915085601f830112613aad57600080fd5b81516020613abd6119d28361198e565b82815260059290921b84018101918181019089841115613adc57600080fd5b8286015b84811015613b5b57805186811115613af85760008081fd5b8701808c03601f1901891315613b0e5760008081fd5b613b166117e2565b8582015188811115613b285760008081fd5b613b368e88838601016138de565b8252509089015190613b4782611760565b808601919091528352918301918301613ae0565b5087525086810151945082851115613b7257600080fd5b611cef88868901613923565b600082601f830112613b8f57600080fd5b81516020613b9f6119d28361198e565b828152600592831b8501820192828201919087851115613bbe57600080fd5b8387015b85811015611e335780516001600160401b0380821115613be25760008081fd5b908901906040828c03601f1901811315613bfc5760008081fd5b613c046117e2565b8884015183811115613c165760008081fd5b613c248e8b838801016138de565b8252508184015183811115613c395760008081fd5b8085019450508c603f850112613c5157600092508283fd5b888401519250613c636119d28461198e565b83815292861b8401820192898101908e851115613c805760008081fd5b948301945b84861015613c9e5785518252948a0194908a0190613c85565b828b0152508752505050928401928401613bc2565b60006040808385031215613cc657600080fd5b613cce6117e2565b83519092506001600160401b0380821115613ce857600080fd5b818501915085601f830112613cfc57600080fd5b81516020613d0c6119d28361198e565b82815260059290921b84018101918181019089841115613d2b57600080fd5b8286015b84811015613d9d57805186811115613d475760008081fd5b8701808c03601f1901891315613d5d5760008081fd5b613d656117e2565b8582015188811115613d775760008081fd5b613d858e88838601016138de565b82525090890151858201528352918301918301613d2f565b5087525086810151945082851115613db457600080fd5b611cef88868901613b7e565b600082601f830112613dd157600080fd5b81516020613de16119d28361198e565b828152600592831b8501820192828201919087851115613e0057600080fd5b8387015b85811015611e335780516001600160401b0380821115613e245760008081fd5b908901906040828c03601f1901811315613e3e5760008081fd5b613e466117e2565b8884015183811115613e585760008081fd5b613e668e8b838801016138de565b8252508184015183811115613e7b5760008081fd5b8085019450508c603f850112613e9357600092508283fd5b888401519250613ea56119d28461198e565b83815292861b8401820192898101908e851115613ec25760008081fd5b948301945b84861015613ee05785518252948a0194908a0190613ec7565b828b0152508752505050928401928401613e04565b60006040808385031215613f0857600080fd5b613f106117e2565b83519092506001600160401b0380821115613f2a57600080fd5b818501915085601f830112613f3e57600080fd5b81516020613f4e6119d28361198e565b82815260059290921b84018101918181019089841115613f6d57600080fd5b8286015b84811015613fdf57805186811115613f895760008081fd5b8701808c03601f1901891315613f9f5760008081fd5b613fa76117e2565b8582015188811115613fb95760008081fd5b613fc78e88838601016138de565b82525090890151858201528352918301918301613f71565b5087525086810151945082851115613ff657600080fd5b611cef88868901613dc0565b600082601f83011261401357600080fd5b815160206140236119d28361198e565b828152600592831b850182019282820191908785111561404257600080fd5b8387015b85811015611e335780516001600160401b03808211156140665760008081fd5b908901906040828c03601f19018113156140805760008081fd5b6140886117e2565b888401518381111561409a5760008081fd5b6140a88e8b838801016138de565b82525081840151838111156140bd5760008081fd5b8085019450508c603f8501126140d557600092508283fd5b8884015192506140e76119d28461198e565b83815292861b8401820192898101908e8511156141045760008081fd5b948301945b8486101561412e578551935061411e8461218d565b838252948a0194908a0190614109565b828b0152508752505050928401928401614046565b6000604080838503121561415657600080fd5b61415e6117e2565b83519092506001600160401b038082111561417857600080fd5b818501915085601f83011261418c57600080fd5b8151602061419c6119d28361198e565b82815260059290921b840181019181810190898411156141bb57600080fd5b8286015b8481101561423a578051868111156141d75760008081fd5b8701808c03601f19018913156141ed5760008081fd5b6141f56117e2565b85820151888111156142075760008081fd5b6142158e88838601016138de565b82525090890151906142268261218d565b8086019190915283529183019183016141bf565b508752508681015194508285111561425157600080fd5b611cef88868901614002565b6000604080838503121561427057600080fd5b6142786117e2565b83519092506001600160401b038082111561429257600080fd5b818501915085601f8301126142a657600080fd5b815160206142b66119d28361198e565b82815260059290921b840181019181810190898411156142d557600080fd5b8286015b84811015613fdf578051868111156142f15760008081fd5b8701808c03601f19018913156143075760008081fd5b61430f6117e2565b85820151888111156143215760008081fd5b61432f8e88838601016138de565b825250908901518582015283529183019183016142d9565b600082601f83011261435857600080fd5b81516143666119d28261198e565b8082825260208201915060208360051b86010192508583111561438857600080fd5b602085015b838110156144a45780516001600160401b03808211156143ac57600080fd5b908701906040828a03601f190112156143c457600080fd5b6143cc6117e2565b6020830151828111156143de57600080fd5b6143ed8b6020838701016138de565b82525060408301518281111561440257600080fd5b80840193505089603f84011261441757600080fd5b60208301516144286119d28261198e565b81815260059190911b84016040019060208101908c83111561444957600080fd5b604086015b838110156144835780518681111561446557600080fd5b6144748f6040838b01016138de565b8452506020928301920161444e565b5080602085015250505080865250505060208301925060208101905061438d565b5095945050505050565b600060408083850312156144c157600080fd5b6144c96117e2565b83519092506001600160401b03808211156144e357600080fd5b818501915085601f8301126144f757600080fd5b815160206145076119d28361198e565b82815260059290921b8401810191818101908984111561452657600080fd5b8286015b848110156145b6578051868111156145425760008081fd5b8701808c03601f19018913156145585760008081fd5b6145606117e2565b85820151888111156145725760008081fd5b6145808e88838601016138de565b82525089820151888111156145955760008081fd5b6145a38e88838601016138de565b828801525084525091830191830161452a565b50875250868101519450828511156145cd57600080fd5b611cef88868901614347565b600082601f8301126145ea57600080fd5b81516145f86119d28261198e565b8082825260208201915060208360051b86010192508583111561461a57600080fd5b602085015b838110156144a45780516001600160401b038082111561463e57600080fd5b908701906040828a03601f1901121561465657600080fd5b61465e6117e2565b60208301518281111561467057600080fd5b61467f8b6020838701016138de565b82525060408301518281111561469457600080fd5b80840193505089603f8401126146a957600080fd5b60208301516146ba6119d28261198e565b81815260059190911b84016040019060208101908c8311156146db57600080fd5b604086015b83811015614715578051868111156146f757600080fd5b6147068f6040838b01016138de565b845250602092830192016146e0565b5080602085015250505080865250505060208301925060208101905061461f565b6000604080838503121561474957600080fd5b6147516117e2565b83519092506001600160401b038082111561476b57600080fd5b818501915085601f83011261477f57600080fd5b8151602061478f6119d28361198e565b82815260059290921b840181019181810190898411156147ae57600080fd5b8286015b8481101561483e578051868111156147ca5760008081fd5b8701808c03601f19018913156147e05760008081fd5b6147e86117e2565b85820151888111156147fa5760008081fd5b6148088e88838601016138de565b825250898201518881111561481d5760008081fd5b61482b8e88838601016138de565b82880152508452509183019183016147b2565b508752508681015194508285111561485557600080fd5b611cef888689016145d9565b60006020828403121561487357600080fd5b81516001600160401b038082111561488a57600080fd5b9083019060e0828603121561489e57600080fd5b6148a6611804565b8251828111156148b557600080fd5b6148c187828601613a64565b8252506020830151828111156148d657600080fd5b6148e287828601613cb3565b6020830152506040830151828111156148fa57600080fd5b61490687828601613ef5565b60408301525060608301518281111561491e57600080fd5b61492a87828601614143565b60608301525060808301518281111561494257600080fd5b61494e8782860161425d565b60808301525060a08301518281111561496657600080fd5b614972878286016144ae565b60a08301525060c08301518281111561498a57600080fd5b61499687828601614736565b60c08301525095945050505050565b600081518084526149bd8160208601602086016138ba565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156138665781516001600160a01b0316875295820195908201906001016149e5565b600081518084526020808501808196508360051b8101915082860160005b85811015614a78578284038952815160408151818752614a4a828801826149a5565b91505086820151915085810387870152614a6481836149d1565b9a87019a9550505090840190600101614a28565b5091979650505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015614afc57898603605f1901845284518051888852614ad6898901826149a5565b918401516001600160a01b03169784019790975295509381019392810192600101614ab2565b50808801519550888503818a015250505050614b188183614a0a565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015614bb3578385038a52825160408151818852614b62828901826149a5565b92890151888403898b01528051808552908a01938693508a0191505b80831015614b9e5783518252928901926001929092019190890190614b7e565b509b88019b9650505091850191600101614b40565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015614c2f57898603605f1901845284518051888852614c12898901826149a5565b918401519784019790975295509381019392810192600101614bee565b50808801519550888503818a015250505050614b188183614b21565b600081518084526020808501808196508360051b810191508286016000805b86811015614bb3578385038a52825160408151818852614c8c828901826149a5565b92890151888403898b01528051808552908a01938693508a0191505b80831015614cc85783518252928901926001929092019190890190614ca8565b509b88019b9650505091850191600101614c6a565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015614d4b57898603605f1901845284518051888852614d2e898901826149a5565b918401519784019790975295509381019392810192600101614d0a565b50808801519550888503818a015250505050614b188183614c4b565b600081518084526020808501808196508360051b810191508286016000805b86811015614bb3578385038a52825160408151818852614da8828901826149a5565b92890151888403898b01528051808552908a01938693508a0191505b80831015614de657835115158252928901926001929092019190890190614dc4565b509b88019b9650505091850191600101614d86565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015614e6b57898603605f1901845284518051888852614e4c898901826149a5565b9184015115159784019790975295509381019392810192600101614e28565b50808801519550888503818a015250505050614b188183614d67565b600081518084526020808501808196508360051b8101915082860160005b85811015614a78578284038952815160408151818752614ec7828801826149a5565b91505086820151915085810387870152614ee18183613836565b9a87019a9550505090840190600101614ea5565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015614f6357898603605f1901845284518051888852614f46898901826149a5565b918401519784019790975295509381019392810192600101614f22565b50808801519550888503818a015250505050614b188183614e87565b600081518084526020808501808196506005915083821b81018387016000805b8781101561502a578484038b52825160408151818752614fc1828801826149a5565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561501357601f198583030184526150018287516149a5565b958d0195938d01939150600101614fe5565b509e8b019e97505050938801935050600101614f9f565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156150b657898603605f190184528451805188885261508a898901826149a5565b91840151888303898601529190506150a281836149a5565b975050509381019392810192600101615066565b50808801519550888503818a015250505050614b188183614f7f565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156150b657898603605f1901845284518051888852615123898901826149a5565b918401518883038986015291905061513b81836149a5565b9750505093810193928101926001016150ff565b6000815160e0845261516460e0850182614a85565b90506020830151848203602086015261517d8282614bc1565b915050604083015184820360408601526151978282614cdd565b915050606083015184820360608601526151b18282614dfb565b915050608083015184820360808601526151cb8282614ef5565b91505060a083015184820360a08601526151e58282615039565b91505060c083015184820360c0860152614b1882826150d2565b838152606060208201526000615218606083018561514f565b828103604084015261522a818561514f565b9695505050505050565b8281526040602082015261524c6040820183516137b1565b600060208301516152616101008401826137fc565b5060408301516101a06101c0840152614b186101e0840182613836565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b634e487b7160e01b600052602160045260246000fd5b600381106152e8576152e86152c2565b9052565b604081526000835161014080604085015261530c6101808501835161346a565b602082015161531f6101a086018261346a565b5060408201516153336101c086018261346a565b5060608201516153476101e086018261346a565b50608082015161535b61020086018261346a565b5060a082015161536f61022086018261346a565b5060c082015161538361024086018261346a565b5060e08201516101206102608601526153a06102a08601826149d1565b9050610100830151925061017f19858203016102808601526153c281846149d1565b92505060208601516153d7606086018261527e565b506040860151511515908401526060850151603f19848303016101608501526154008282613836565b925050506109dc60208301846152d8565b82815260406020820152600082516101408060408501526154376101808501835161346a565b602082015161544a6101a086018261346a565b50604082015161545e6101c086018261346a565b5060608201516154726101e086018261346a565b50608082015161548661020086018261346a565b5060a082015161549a61022086018261346a565b5060c08201516154ae61024086018261346a565b5060e08201516101206102608601526154cb6102a08601826149d1565b9050610100830151925061017f19858203016102808601526154ed81846149d1565b9250506020850151615502606086018261527e565b506040850151511515908401526060840151603f198483030161016085015261522a8282613836565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b60208152600082516101808060208501526155996101a08501835161346a565b60208201516155ac6101c086018261346a565b5060408201516155c06101e086018261346a565b5060608201516155d461020086018261346a565b5060808201516155e861022086018261346a565b5060a08201516155fc61024086018261346a565b5060c082015161561061026086018261346a565b5060e082015161562461028086018261346a565b50610100820151610140806102a08701526156436102e08701836149d1565b9150610120840151935061019f19868303016102c087015261566582856149d1565b93506020870151915061567b604087018361552b565b6040870151915061569c818701838051151582526020908101511515910152565b50506060850151848303601f19018286015261522a8382613836565b828152604060208201526000825161018060408401526156dd6101c08401825161346a565b60208101516156f06101e085018261346a565b50604081015161570461020085018261346a565b50606081015161571861022085018261346a565b50608081015161572c61024085018261346a565b5060a081015161574061026085018261346a565b5060c081015161575461028085018261346a565b5060e08101516157686102a085018261346a565b506101008101516101406102c08501526157866103008501826149d1565b905061012082015191506101bf19848203016102e08501526157a881836149d1565b91505060208401516157bd606085018261552b565b506040840151805115156101608501526020015115156101808401526060840151603f19848303016101a085015261522a8282613836565b600981106152e8576152e86152c2565b6158108282516157f5565b602081015161582260208401826152d8565b5060408181015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e0808201519083015261010080820151908301526101208082015190830152610140808201519083015261016090810151910152565b8051151582526020810151151560208301526040810151151560408301526060810151151560608301525050565b602081526000825161024080602085015260018060a01b0380835116610260860152806020840151166102808601525060408201516158fd6102a086018261346a565b5060608201516159116102c086018261346a565b5060808201516159256102e086018261346a565b5060a082015161593961030086018261346a565b5060c082015161594d61032086018261346a565b5060e0820151915061010061034085015261596c6103608501836149d1565b915060208501516159806040860182615805565b5060408501516159946101c086018261588c565b506060850151848303601f19018286015261522a8382613836565b8281526040602082015260008251610240604084015260018060a01b0380825116610280850152806020830151166102a08501525060408101516159f76102c085018261346a565b506060810151615a0b6102e085018261346a565b506080810151615a1f61030085018261346a565b5060a0810151615a3361032085018261346a565b5060c0810151615a4761034085018261346a565b5060e00151610100610360840152615a636103808401826149d1565b90506020840151615a776060850182615805565b506040840151615a8b6101e085018261588c565b506060840151838203603f190161026085015261522a8282613836565b600060208284031215615aba57600080fd5b81516109dc81611760565b604081526000835161014080604085015260018060a01b0380835116610180860152806020840151166101a0860152806040840151166101c0860152506060820151615b156101e086018261346a565b506080820151615b2961020086018261346a565b5060a082015160e0610220860152615b456102608601826149d1565b905060c0830151925061017f19858203016102408601526153c281846149d1565b828152604060208201526000825161014080604085015260018060a01b0380835116610180860152806020840151166101a0860152806040840151166101c0860152506060820151615bbc6101e086018261346a565b506080820151615bd061020086018261346a565b5060a082015160e0610220860152615bec6102608601826149d1565b905060c0830151925061017f19858203016102408601526154ed81846149d1565b602081526000825161014080602085015260018060a01b038251166101608501526020820151615c4161018086018261346a565b506040820151615c556101a086018261346a565b506060820151615c696101c086018261346a565b506080820151615c7d6101e086018261346a565b5060a0820151615c9161020086018261346a565b5060c0820151610100610220860152615cae6102608601826149d1565b905060e0830151925061015f1985820301610240860152615ccf81846149d1565b9250506020850151615ce4604086018261527e565b50604085015180511515610120860152615994565b828152604060208201526000825161014080604085015260018060a01b038251166101808501526020820151615d336101a086018261346a565b506040820151615d476101c086018261346a565b506060820151615d5b6101e086018261346a565b506080820151615d6f61020086018261346a565b5060a0820151615d8361022086018261346a565b5060c0820151610100610240860152615da06102808601826149d1565b905060e0830151925061017f19858203016102608601526154ed81846149d1565b600082615dde57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761175a57634e487b7160e01b600052601160045260246000fdfea26469706673582212203b2a71f112b1996fa9b67d71c89cdd8cc3ddd44b170600f765202877ef1d56b264736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100e55760003560e01c806314df816b146100ea57806339510d6f146100ff5780633ef2464d1461011f5780635004ae8e1461013f57806351034cc31461015f578063569d6f2b1461017f578063717c2ba5146101af5780637ac9a535146101d2578063840b4478146101f25780639384884d146102125780639d63a68614610232578063b3678d5b14610252578063b385847a14610272578063b47d5c9f14610292578063b4849276146102b2578063c9d846da146102d2578063f00202e0146102f2575b600080fd5b6100fd6100f8366004611778565b610312565b005b81801561010b57600080fd5b506100fd61011a366004612bec565b610409565b81801561012b57600080fd5b506100fd61013a366004612ddb565b61056d565b81801561014b57600080fd5b506100fd61015a366004613021565b6106bf565b81801561016b57600080fd5b506100fd61017a3660046132d5565b61080f565b61019261018d36600461341f565b61095f565b6040516001600160a01b0390911681526020015b60405180910390f35b6101c26101bd366004613477565b6109e3565b60405190151581526020016101a6565b8180156101de57600080fd5b506100fd6101ed366004613021565b610a1a565b8180156101fe57600080fd5b506100fd61020d3660046132d5565b610b6a565b81801561021e57600080fd5b506100fd61022d366004613494565b610cba565b81801561023e57600080fd5b506100fd61024d366004612ddb565b610e0c565b81801561025e57600080fd5b506100fd61026d3660046135df565b610f5e565b81801561027e57600080fd5b506100fd61028d366004613494565b610fef565b81801561029e57600080fd5b506100fd6102ad36600461363b565b611141565b8180156102be57600080fd5b506100fd6102cd36600461363b565b611291565b8180156102de57600080fd5b506100fd6102ed3660046132d5565b6113e1565b8180156102fe57600080fd5b506100fd61030d366004612bec565b611531565b6000826001600160a01b031663bd02d0f560405160200161035d9060208082526016908201527513505617d0d05313109050d2d7d1d054d7d31253525560521b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161039191815260200190565b602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190613798565b905080821115610404576040516308575b4960e11b815260048101839052602481018290526044015b60405180910390fd5b505050565b6104186101bd83516040015190565b61042157505050565b6040516384b29b5760e01b815260009073__$177448b54fb2cdec765bde6691f13c6dd4$__906384b29b579061045b908690600401613871565b600060405180830381865af4158015610478573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a09190810190614861565b90506104b96104b484602001516080015190565b611681565b8251604001516001600160a01b0316633accaf266104dc85602001516080015190565b8684866040518563ffffffff1660e01b81526004016104fd939291906151ff565b600060405180830381600088803b15801561051757600080fd5b5087f193505050508015610529575060015b610567577fbefdc7c08b73634e388aa6a4849cfa7f8c2d2b9e4dc8f9790efd40114a1ccea4848460405161055e929190615234565b60405180910390a15b50505050565b61057c6101bd83516040015190565b61058557505050565b604051637093839f60e01b815260009073__$c1a7af12cfab3fde53a677c13aea00f1f1$__90637093839f906105c190869085906004016152ec565b600060405180830381865af41580156105de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106069190810190614861565b905061061a6104b4846020015160a0015190565b8251604001516001600160a01b03166329e5be2161063d856020015160a0015190565b8684866040518563ffffffff1660e01b815260040161065e939291906151ff565b600060405180830381600088803b15801561067857600080fd5b5087f19350505050801561068a575060015b610567577f380ebabc00a0193314fe71ac63be6788bd78a935c348b66828cbc935bf0d889e848460405161055e929190615411565b6106ce6101bd83516060015190565b6106d757505050565b6040516379145fc560e01b815260009073__$0103e1f3fc7cf5dac62eee53f1c3919990$__906379145fc590610711908690600401615579565b600060405180830381865af415801561072e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107569190810190614861565b905061076a6104b4846020015160c0015190565b8251606001516001600160a01b0316631d5c411261078d856020015160c0015190565b8684866040518563ffffffff1660e01b81526004016107ae939291906151ff565b600060405180830381600088803b1580156107c857600080fd5b5087f1935050505080156107da575060015b610567577ff8ad94b0b4db45343504cdad24293ea3fd54bb199bc53eef64cfd4aa65056421848460405161055e9291906156b8565b61081e6101bd83516060015190565b61082757505050565b60405163163a46cd60e01b815260009073__$2cb2169b31257cc84fcd1b9a9c4c15efa9$__9063163a46cd906108619086906004016158ba565b600060405180830381865af415801561087e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a69190810190614861565b90506108ba6104b4846020015160e0015190565b8251606001516001600160a01b031663ffaf393f6108dd856020015160e0015190565b8684866040518563ffffffff1660e01b81526004016108fe939291906151ff565b600060405180830381600088803b15801561091857600080fd5b5087f19350505050801561092a575060015b610567577f1a77c0912881ff648e2052d6f9d04d5b49a7aa516967275c74add34c65d5a5d4848460405161055e9291906159af565b6000836001600160a01b03166321f8a72161097a85856116cc565b6040518263ffffffff1660e01b815260040161099891815260200190565b602060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190615aa8565b90505b9392505050565b60006001600160a01b0382166109fb57506000919050565b6001600160a01b0382163b610a1257506000919050565b506001919050565b610a296101bd83516060015190565b610a3257505050565b6040516379145fc560e01b815260009073__$0103e1f3fc7cf5dac62eee53f1c3919990$__906379145fc590610a6c908690600401615579565b600060405180830381865af4158015610a89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab19190810190614861565b9050610ac56104b4846020015160c0015190565b8251606001516001600160a01b031663ca2ff6a2610ae8856020015160c0015190565b8684866040518563ffffffff1660e01b8152600401610b09939291906151ff565b600060405180830381600088803b158015610b2357600080fd5b5087f193505050508015610b35575060015b610567577f9821b6fcb394be152c4864dcbfccf0ba2a32bcf7f2f6b316470e78c4e44d92f6848460405161055e9291906156b8565b610b796101bd83516060015190565b610b8257505050565b60405163163a46cd60e01b815260009073__$2cb2169b31257cc84fcd1b9a9c4c15efa9$__9063163a46cd90610bbc9086906004016158ba565b600060405180830381865af4158015610bd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c019190810190614861565b9050610c156104b4846020015160e0015190565b8251606001516001600160a01b03166383fc34cf610c38856020015160e0015190565b8684866040518563ffffffff1660e01b8152600401610c59939291906151ff565b600060405180830381600088803b158015610c7357600080fd5b5087f193505050508015610c85575060015b610567577fd6142bdbcb7f6b7674e793dd31ef1ecdae5be9a475644beb8238617242d256c5848460405161055e9291906159af565b610cc96101bd83516040015190565b610cd257505050565b604051634673c40d60e01b815260009073__$02d0c358d87c2372101d42c2df65da4fff$__90634673c40d90610d0e9086908590600401615ac5565b600060405180830381865af4158015610d2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d539190810190614861565b9050610d676104b4846020015160a0015190565b8251604001516001600160a01b0316631046848b610d8a856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401610dab939291906151ff565b600060405180830381600088803b158015610dc557600080fd5b5087f193505050508015610dd7575060015b610567577fe13cbf4c327b33a9d2e5963825ddd30ebe121b89d5ac1d4a65af848501448603848460405161055e929190615b66565b610e1b6101bd83516040015190565b610e2457505050565b604051637093839f60e01b815260009073__$c1a7af12cfab3fde53a677c13aea00f1f1$__90637093839f90610e6090869085906004016152ec565b600060405180830381865af4158015610e7d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ea59190810190614861565b9050610eb96104b4846020015160a0015190565b8251604001516001600160a01b03166351f21238610edc856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401610efd939291906151ff565b600060405180830381600088803b158015610f1757600080fd5b5087f193505050508015610f29575060015b610567577f2eba240a3d3070bfec2568eb305818feb740b736d35d99c5f44c647d4c0d4d8b848460405161055e929190615411565b836001600160a01b031663ca446dd9610f7785856116cc565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b03841660248201526044016020604051808303816000875af1158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe89190615aa8565b5050505050565b610ffe6101bd83516040015190565b61100757505050565b604051634673c40d60e01b815260009073__$02d0c358d87c2372101d42c2df65da4fff$__90634673c40d906110439086908590600401615ac5565b600060405180830381865af4158015611060573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110889190810190614861565b905061109c6104b4846020015160a0015190565b8251604001516001600160a01b03166381b6d9126110bf856020015160a0015190565b8684866040518563ffffffff1660e01b81526004016110e0939291906151ff565b600060405180830381600088803b1580156110fa57600080fd5b5087f19350505050801561110c575060015b610567577fc0f2eb8071e0d571b552589c90992b567c17c67516648c72b6fbe0e373ebe4be848460405161055e929190615b66565b6111506101bd83516080015190565b61115957505050565b60405163cb58eb5b60e01b815260009073__$e699bdc7034b9f834da4366fbe4e418c66$__9063cb58eb5b90611193908690600401615c0d565b600060405180830381865af41580156111b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111d89190810190614861565b90506111ec6104b4846020015160a0015190565b8251608001516001600160a01b03166352c631c861120f856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401611230939291906151ff565b600060405180830381600088803b15801561124a57600080fd5b5087f19350505050801561125c575060015b610567577f6c475808d30c96d678f6f8be069a06808c8cfc432c08082dad5c45e9f87919ec848460405161055e929190615cf9565b6112a06101bd83516080015190565b6112a957505050565b60405163cb58eb5b60e01b815260009073__$e699bdc7034b9f834da4366fbe4e418c66$__9063cb58eb5b906112e3908690600401615c0d565b600060405180830381865af4158015611300573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113289190810190614861565b905061133c6104b4846020015160a0015190565b8251608001516001600160a01b0316634658379c61135f856020015160a0015190565b8684866040518563ffffffff1660e01b8152600401611380939291906151ff565b600060405180830381600088803b15801561139a57600080fd5b5087f1935050505080156113ac575060015b610567577fb9898a5974aff894bdb0cc66a32cd9e69e00cd5122423a7beea199426ff19c80848460405161055e929190615cf9565b6113f06101bd83516060015190565b6113f957505050565b60405163163a46cd60e01b815260009073__$2cb2169b31257cc84fcd1b9a9c4c15efa9$__9063163a46cd906114339086906004016158ba565b600060405180830381865af4158015611450573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114789190810190614861565b905061148c6104b4846020015160e0015190565b8251606001516001600160a01b031663d8bbbe426114af856020015160e0015190565b8684866040518563ffffffff1660e01b81526004016114d0939291906151ff565b600060405180830381600088803b1580156114ea57600080fd5b5087f1935050505080156114fc575060015b610567577fae6226bd5e7b59d8cef685e023de512bdfcb3c146f2be0a86484237f94e252f4848460405161055e9291906159af565b6115406101bd83516040015190565b61154957505050565b6040516384b29b5760e01b815260009073__$177448b54fb2cdec765bde6691f13c6dd4$",
  "libraries": {
    "GlvDepositEventUtils": "0x0dCc8a2415206aaa3453442979f004069F45E3a5",
    "GlvWithdrawalEventUtils": "0x76518C470c38010f5ea225434587670D07a90ca5",
    "OrderEventUtils": "0x77664058485b15805Be8f3eFB0Ca23F68901e2a2",
    "WithdrawalEventUtils": "0x24937cc0eC5048eDB8C0FAcFeCEb35CA9da2dc12",
    "DepositEventUtils": "0xF1f4dAe0660De81C944a0dFC957415D4fcF74262",
    "ShiftEventUtils": "0xba6a67b9D280EC5e2cC919658B5957588791d37f"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}