{
  "address": "0x0CbD22593EEC041117C0138BA2Fa9B18EDBac099",
  "abi": [],
  "transactionHash": "0x2748151b79f5a32b99580a2e46fbdc1a37e01c864438d4cb285452561e4dc3d8",
  "receipt": {
    "to": null,
    "from": "0xCD9706B6B71fdC4351091B5b1D910cEe7Fde28D0",
    "contractAddress": "0x0CbD22593EEC041117C0138BA2Fa9B18EDBac099",
    "transactionIndex": 3,
    "gasUsed": "3633104",
    "logsBloom": "0x
    "blockHash": "0x289582dfb2734290109da74f6e173eb146eb74ac35520f7ff22c025783d1ae3e",
    "transactionHash": "0x2748151b79f5a32b99580a2e46fbdc1a37e01c864438d4cb285452561e4dc3d8",
    "logs": [],
    "blockNumber": 151252493,
    "cumulativeGasUsed": "3793823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "71f4ffea0231d83b1ca2bfb33fa0be6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/market/MarketEventUtils.sol\":\"MarketEventUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error InvalidClaimableReductionFactor(uint256 value);\\n    error OracleProviderAlreadyExistsForToken(address token);\\n    error OracleProviderMinChangeDelayNotYetPassed(address token, address provider);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n    error InvalidPositionImpactPoolDistributionRate(uint256 distributionAmount, uint256 positionImpactPoolAmount);\\n    error MaxDataListLengthExceeded(uint256 dataLength, uint256 maxDataLength);\\n    error EmptyToken();\\n\\n    // ContributorHandler errors\\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\\n    error InvalidContributorToken(address token);\\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address signer);\\n    error InvalidHoldingAddress(address account);\\n    error EmptyPositionImpactWithdrawalAmount();\\n    error OraclePriceOutdated();\\n    error EmptyTarget();\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvShiftStoreUtils errors\\n    error GlvShiftNotFound(bytes32 key);\\n    // GlvWithdrawalStoreUtils errors\\n    error GlvWithdrawalNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvMarketAmount();\\n    error EmptyGlvDeposit();\\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\\n    // GlvWithdrawalUtils errors\\n    error EmptyGlvWithdrawal();\\n    error EmptyGlvWithdrawalAmount();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error EmptyGlvTokenSupply();\\n    error GlvNegativeMarketPoolValue(address glv, address market);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvEnabledMarket(address glv, address market);\\n    error GlvNonZeroMarketBalance(address glv, address market);\\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error GlvInvalidLongToken(address glv, address provided, address expected);\\n    error GlvInvalidShortToken(address glv, address provided, address expected);\\n    // GlvShiftUtils\\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\\n    // GlvFactory\\n    error GlvAlreadyExists(bytes32 salt, address glv);\\n    error GlvSymbolTooLong();\\n    error GlvNameTooLong();\\n    // GlvStoreUtils\\n    error GlvNotFound(address key);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidBuybackToken(address buybackToken);\\n    error InvalidVersion(uint256 version);\\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\\n    error EmptyClaimFeesMarket();\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForAutoCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\\n    error EmptyRelayFeeAddress();\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // MarketPositionImpactUtils errors\\n    error InsufficientImpactPoolValueForWithdrawal(uint256 withdrawalAmount, uint256 poolValue);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices(); // not used, kept for compatibility\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error UnsupportedOrderTypeForAutoCancellation(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n    error UnexpectedValidFromTime(uint256 orderType);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\\n    error SubaccountIntegrationIdDisabled(bytes32 integrationId);\\n\\n    // TokenUtils errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\\n    // some contracts with this error cannot be re-deployed so it has been left as is\\n    error EmptyTokenTranferGasLimit(address token);\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error DataListLengthExceeded();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n\\n    // Cast errors\\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\\n\\n    // ConfigSyncer errors\\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\\n    error SyncConfigUpdatesDisabledForMarket(address market);\\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\\n\\n    // Reader errors\\n    error EmptyMarketPrice(address market);\\n\\n    // Multichain errors\\n    error InvalidTransferRequestsLength();\\n    error EmptyMultichainTransferInAmount(address account, address token);\\n    error EmptyMultichainTransferOutAmount(address account, address token);\\n    error InsufficientMultichainBalance(address account, address token, uint256 balance, uint256 amount);\\n    error InvalidSrcChainId(uint256 srcChainId);\\n    error InvalidDestinationChainId(uint256 desChainId);\\n    error TokenPermitsNotAllowedForMultichain();\\n    error InvalidMultichainProvider(address provider);\\n    error InvalidMultichainEndpoint(address endpoint);\\n    error UnableToPayOrderFee();\\n    error UnableToPayOrderFeeFromCollateral();\\n    error InvalidBridgeOutToken(address token);\\n\\n    enum SignatureType {\\n        Call,\\n        SubaccountApproval\\n    }\\n\\n    // Gelato relay errors\\n    error InvalidSignature(string signatureType);\\n    // User sent incorrect fee token or incorrect swap path\\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    // Contract received unsupported fee token from Gelato relay\\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    error InvalidPermitSpender(address spender, address expectedSpender);\\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\\n    error InvalidSubaccountApprovalSubaccount();\\n    error NonEmptyExternalCallsForSubaccountOrder();\\n\\n    // EventUtils error\\n    error EventItemNotFound(string key);\\n\\n    // EdgeOracle verifier errors\\n    error InvalidTrustedSignerAddress();\\n    error InvalidEdgeSigner();\\n    error InvalidEdgeSignature(uint256 recoverError);\\n    error InvalidEdgeDataStreamBidAsk(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamPrices(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamExpo(int256 expo);\\n    error RelayEmptyBatch();\\n    error RelayCalldataTooLong(uint256 calldataLength);\\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\\n}\\n\",\"keccak256\":\"0x6286a632f9f785355a1e739ec1f0604cd8f050880258bcb93665a76aa543e9d2\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n\\n\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a99c1d3590daa8030345ffb09e3f769a93e0178e4c85986dc0e08cc84e8f82c\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary EventUtils {\\n\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(AddressItems memory addresses, string memory key) external pure returns(address) {\\n        (bool found, address value) = getWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(AddressItems memory addresses, string memory key) public pure returns(bool, address) {\\n        for (uint i = 0; i < addresses.items.length; i++) {\\n            if (compareStrings(addresses.items[i].key, key)) {\\n                return (true, addresses.items[i].value);\\n            }\\n        }\\n        return (false, address(0));\\n    }\\n\\n    function getArray(AddressItems memory addresses, string memory key) external pure\\n    returns(address[] memory) {\\n        (bool found, address[] memory value) = getArrayWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(AddressItems memory addresses, string memory key) public pure\\n    returns(bool, address[] memory) {\\n        for (uint i = 0; i < addresses.arrayItems.length; i++) {\\n            if (compareStrings(addresses.arrayItems[i].key, key)) {\\n                return (true, addresses.arrayItems[i].value);\\n            }\\n        }\\n        address[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(UintItems memory items, string memory key) external pure returns(uint256) {\\n        (bool found, uint256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(UintItems memory items, string memory key) public pure returns(bool, uint256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(UintItems memory items, string memory key) external pure\\n    returns(uint256[] memory) {\\n        (bool found, uint256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(UintItems memory items, string memory key) public pure\\n    returns(bool, uint256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        uint256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(IntItems memory items, string memory key) external pure returns(int256) {\\n        (bool found, int256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(IntItems memory items, string memory key) public pure returns(bool, int256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(IntItems memory items, string memory key) external pure\\n    returns(int256[] memory) {\\n        (bool found, int256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(IntItems memory items, string memory key) public pure\\n    returns(bool, int256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        int256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BoolItems memory items, string memory key) external pure returns(bool) {\\n        (bool found, bool value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BoolItems memory items, string memory key) public pure returns(bool, bool) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, false);\\n    }\\n\\n    function getArray(BoolItems memory items, string memory key) external pure\\n    returns(bool[] memory) {\\n        (bool found, bool[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BoolItems memory items, string memory key) public pure\\n    returns(bool, bool[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bool[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(Bytes32Items memory items, string memory key) external pure returns(bytes32) {\\n        (bool found, bytes32 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(Bytes32Items memory items, string memory key) public pure returns(bool, bytes32) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(Bytes32Items memory items, string memory key) external pure\\n    returns(bytes32[] memory) {\\n        (bool found, bytes32[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(Bytes32Items memory items, string memory key) public pure\\n    returns(bool, bytes32[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes32[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BytesItems memory items, string memory key) external pure returns(bytes memory) {\\n        (bool found, bytes memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BytesItems memory items, string memory key) public pure returns(bool, bytes memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(BytesItems memory items, string memory key) external pure\\n    returns(bytes[] memory) {\\n        (bool found, bytes[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BytesItems memory items, string memory key) public pure\\n    returns(bool, bytes[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(StringItems memory items, string memory key) external pure returns(string memory) {\\n        (bool found, string memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(StringItems memory items, string memory key) public pure returns(bool, string memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(StringItems memory items, string memory key) external pure\\n    returns(string[] memory) {\\n        (bool found, string[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(StringItems memory items, string memory key) public pure\\n    returns(bool, string[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        string[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x301b8df4bd9f7cd46804d6a732e8f092b59fda0450c59ef33845eda262f5e6d5\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./MarketPoolValueInfo.sol\\\";\\n\\nlibrary MarketEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // this event is emitted before a deposit or withdrawal\\n    // it provides information of the pool state so that the amount\\n    // of market tokens minted or amount withdrawn from the pool can be checked\\n    function emitMarketPoolValueInfo(\\n        EventEmitter eventEmitter,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueInfo\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    // this event is emitted after a deposit or withdrawal\\n    // it provides information of the updated pool state\\n    // note that the pool state can change even without a deposit / withdrawal\\n    // e.g. borrowing fees can increase the pool's value with time, trader pnl\\n    // will change as index prices change\\n    function emitMarketPoolValueUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 actionType,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(2);\\n        eventData.bytes32Items.setItem(0, \\\"actionType\\\", actionType);\\n        eventData.bytes32Items.setItem(1, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitSwapImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"SwapImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolDistributed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 distributionAmount,\\n        uint256 nextPositionImpactPoolAmount\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"distributionAmount\\\", distributionAmount);\\n        eventData.uintItems.setItem(1, \\\"nextPositionImpactPoolAmount\\\", nextPositionImpactPoolAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolDistributed\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualSwapInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLongToken,\\n        bytes32 virtualMarketId,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLongToken\\\", isLongToken);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualMarketId\\\", virtualMarketId);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualSwapInventoryUpdated\\\",\\n            Cast.toBytes32(market),\\n            virtualMarketId,\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualPositionInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address token,\\n        bytes32 virtualTokenId,\\n        int256 delta,\\n        int256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualTokenId\\\", virtualTokenId);\\n\\n        eventData.intItems.initItems(2);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.intItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualPositionInventoryUpdated\\\",\\n            Cast.toBytes32(token),\\n            virtualTokenId,\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestInTokensUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestInTokensUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralSumUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralSumUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowing(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 borrowingFactorPerSecond\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"borrowingFactorPerSecond\\\", borrowingFactorPerSecond);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"Borrowing\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowingFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CumulativeBorrowingFactorUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFunding(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 fundingFactorPerSecond\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"fundingFactorPerSecond\\\", fundingFactorPerSecond);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"Funding\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeeAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeeAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeesClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeesClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableCollateralUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(3, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableCollateralUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitUiFeeFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address account,\\n        uint256 uiFeeFactor\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"uiFeeFactor\\\", uiFeeFactor);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"UiFeeFactorUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolWithdrawal(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address receiver,\\n        uint256 amount\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolWithdrawal\\\",\\n            Cast.toBytes32(receiver),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc98efc57df60a95faf43ef9bd7e0748d7159612be79f17d7ed6d7c69b4e38da\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketPoolValueInfo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title MarketPoolInfo\\nlibrary MarketPoolValueInfo {\\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\\n    // @param value the pool value\\n    // @param longTokenAmount the amount of long token in the pool\\n    // @param shortTokenAmount the amount of short token in the pool\\n    // @param longTokenUsd the USD value of the long tokens in the pool\\n    // @param shortTokenUsd the USD value of the short tokens in the pool\\n    // @param totalBorrowingFees the total pending borrowing fees for the market\\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\\n    // @param impactPoolAmount the amount of tokens in the impact pool\\n    // @param longPnl the pending pnl of long positions\\n    // @param shortPnl the pending pnl of short positions\\n    // @param netPnl the net pnl of long and short positions\\n    struct Props {\\n        int256 poolValue;\\n        int256 longPnl;\\n        int256 shortPnl;\\n        int256 netPnl;\\n\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 longTokenUsd;\\n        uint256 shortTokenUsd;\\n\\n        uint256 totalBorrowingFees;\\n        uint256 borrowingFeePoolFactor;\\n\\n        uint256 impactPoolAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xcb7e29fde7da11b634235ba9845fafcbab8a6cdd2c882221bc9e6196b5fd39a4\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_KEEPER role.\\n     * Hash: 0xfa89e7b5ea0a346d73c71d7d6a3512b9f2ea2c2e6c5fb8211ec351d35deef0f4\\n     */\\n    bytes32 public constant CONTRIBUTOR_KEEPER = keccak256(abi.encode(\\\"CONTRIBUTOR_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_DISTRIBUTOR role.\\n     * Hash: 0xcdf6da7ad30d8b9afea66fb1cb11b1b7d0b50e9b30b69561a3ca52c39251360c\\n     */\\n    bytes32 public constant CONTRIBUTOR_DISTRIBUTOR = keccak256(abi.encode(\\\"CONTRIBUTOR_DISTRIBUTOR\\\"));\\n}\\n\",\"keccak256\":\"0xf82e35db50f74b43c8598bacd2df901f3c1a292302680a1b02b076fdb387a6ef\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIMITED_CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyLimitedConfigKeeper() {\\n        _validateRole(Role.LIMITED_CONFIG_KEEPER, \\\"LIMITED_CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_KEEPER role to call the function.\\n     */\\n    modifier onlyContributorKeeper() {\\n        _validateRole(Role.CONTRIBUTOR_KEEPER, \\\"CONTRIBUTOR_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_DISTRIBUTOR role to call the function.\\n     */\\n    modifier onlyContributorDistributor() {\\n        _validateRole(Role.CONTRIBUTOR_DISTRIBUTOR, \\\"CONTRIBUTOR_DISTRIBUTOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd5f2168b69a6c70dc6aacf850491a4eb7c3eaf7b9078deaa83aee0febb9b5ab\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n\\n    function toBytes32(string memory value) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyString = bytes(value);\\n        if (tempEmptyString.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(value, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a bytes array to a uint256.\\n     * Handles cases where the uint256 stored in bytes is stored with or without padding.\\n     * @param uint256AsBytes The bytes array representing the uint256 value.\\n     * @return value The uint256 value obtained from the bytes array.\\n     */\\n    function bytesToUint256(bytes memory uint256AsBytes) internal pure returns (uint256) {\\n        uint256 length = uint256AsBytes.length;\\n\\n        if(length > 32) {\\n            revert Errors.Uint256AsBytesLengthExceeds32Bytes(length);\\n        }\\n\\n        if (length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 value;\\n\\n        assembly {\\n            value := mload(add(uint256AsBytes, 32))\\n        }\\n\\n        return value = value >> (8 * (32 - length));\\n    }\\n\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint192ToBytes(uint192 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint32ToBytes(uint32 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x75f1c33e5e28c00f2f3e49db548cc8fb97f9371cc31fc0ebcc073eb2f75af1dc\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6140b561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101275760003560e01c8063061034701461012c5780630aa77b6a1461014e578063138231111461016e5780631daaefa11461018e5780631f20ad33146101ae57806328d445cb146101ce578063387a0f13146101ee57806346ff7f441461020e57806347bc64531461022e5780634c7c4a6d1461024e5780634ee4c8311461026e5780635375a2071461028e578063555a9979146102ae5780635bb3aa73146102ce5780636d6b2059146102ee57806386f48e481461030e5780638983b3ff1461032e578063a814bb6f1461034e578063b3d188de1461036e578063d206b7051461038e578063d52463b2146103ae578063d791fbb3146103ce578063e974c64c146103ee575b600080fd5b81801561013857600080fd5b5061014c610147366004612b06565b61040e565b005b81801561015a57600080fd5b5061014c610169366004612b72565b6105b6565b81801561017a57600080fd5b5061014c610189366004612cab565b61071b565b81801561019a57600080fd5b5061014c6101a9366004612b72565b610b40565b8180156101ba57600080fd5b5061014c6101c9366004612d11565b610c6b565b8180156101da57600080fd5b5061014c6101e9366004612b06565b610e3d565b8180156101fa57600080fd5b5061014c610209366004612d88565b610fb1565b81801561021a57600080fd5b5061014c610229366004612d88565b6110ba565b81801561023a57600080fd5b5061014c610249366004612b06565b611181565b81801561025a57600080fd5b5061014c610269366004612dc9565b6112f5565b81801561027a57600080fd5b5061014c610289366004612e43565b611467565b81801561029a57600080fd5b5061014c6102a9366004612d88565b6115ef565b8180156102ba57600080fd5b5061014c6102c9366004612ea9565b6116c2565b8180156102da57600080fd5b5061014c6102e9366004612eef565b6117fb565b8180156102fa57600080fd5b5061014c610309366004612b06565b6118bc565b81801561031a57600080fd5b5061014c610329366004612f40565b611a29565b81801561033a57600080fd5b5061014c610349366004612f91565b611b54565b81801561035a57600080fd5b5061014c610369366004613012565b611d62565b81801561037a57600080fd5b5061014c610389366004613075565b611ef0565b81801561039a57600080fd5b5061014c6103a9366004613101565b6120b3565b8180156103ba57600080fd5b5061014c6103c9366004613142565b6121ef565b8180156103da57600080fd5b5061014c6103e9366004612b06565b6125e1565b8180156103fa57600080fd5b5061014c610409366004612ea9565b612755565b6104166129e8565b8051610423906002612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161044f91600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161048491600190886128d7565b6060810151610494906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516104c39160009087612934565b60208101516104d3906002612872565b61050c60006040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b61054560016040518060400160405280600581526020016476616c756560d81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e461055d886129dc565b836040518363ffffffff1660e01b815260040161057b929190613a36565b600060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b5050505050505050505050565b6105be6129e8565b80516105cb906002612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516105f791600090886128d7565b6040805180820190915260058152643a37b5b2b760d91b6020820152815161062291600190876128d7565b6040810151610632906001612872565b604080518082018252600581526464656c746160d81b60208201529082015161065e9160009086612989565b602081015161066e906001612872565b6106ab6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e46106c3876129dc565b836040518363ffffffff1660e01b81526004016106e1929190613a8b565b600060405180830381600087803b1580156106fb57600080fd5b505af115801561070f573d6000803e3d6000fd5b50505050505050505050565b6107236129e8565b6080810151610733906002612872565b60408051808201909152600a815269616374696f6e5479706560b01b602082015260808201516107669160009089612989565b60408051808201909152600881526774726164654b657960c01b602082015260808201516107979160019088612989565b80516107a4906001612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516107d091600090876128d7565b60408101516107e0906004612872565b6040805180820182526009815268706f6f6c56616c756560b81b6020820152845191830151610813929091600091612989565b6108526001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612989909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151610886929091600291612989565b60408051808201825260068152651b995d141b9b60d21b60208201526060850151918301516108b9929091600391612989565b60208101516108c9906008612872565b61091060006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612989909392919063ffffffff16565b61095860016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612989909392919063ffffffff16565b61099c60026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612989909392919063ffffffff16565b6109e160036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612989909392919063ffffffff16565b610a2c600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612989909392919063ffffffff16565b610a7b6005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612989909392919063ffffffff16565b610ac460066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612989909392919063ffffffff16565b610b0a6007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4610b22866129dc565b836040518363ffffffff1660e01b815260040161057b929190613ad6565b610b486129e8565b8051610b55906002612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610b8191600090886128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610bac91600190876128d7565b6040810151610bbc906001612872565b604080518082018252600581526464656c746160d81b602082015290820151610be89160009086612989565b6020810151610bf8906001612872565b610c356000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e4610c4d876129dc565b836040518363ffffffff1660e01b81526004016106e1929190613b1c565b610c736129e8565b8051610c80906003612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610cac916000908a6128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610cd791600190896128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610d0491600290886128d7565b6020810151610d14906003612872565b610d4d60006040518060400160405280600581526020016464656c746160d81b815250868460200151612989909392919063ffffffff16565b610d8a6001604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612989909392919063ffffffff16565b610dcb60026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b876001600160a01b03166324de01e4610de3876129dc565b836040518363ffffffff1660e01b8152600401610e01929190613b5d565b600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b505050505050505050505050565b610e456129e8565b8051610e52906002612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610e7e91600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610eb391600190886128d7565b6060810151610ec3906001612872565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151610ef29160009087612934565b6040810151610f02906001612872565b604080518082018252600581526464656c746160d81b602082015290820151610f2e9160009086612989565b6020810151610f3e906001612872565b610f7b6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4610f93886129dc565b836040518363ffffffff1660e01b815260040161057b929190613ba4565b610fb96129e8565b8051610fc6906001612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610ff291600090866128d7565b6020810151611002906001612872565b61104c600060405180604001604052806016815260200175199d5b991a5b99d19858dd1bdc94195c94d958dbdb9960521b815250848460200151612989909392919063ffffffff16565b836001600160a01b03166324de01e4611064856129dc565b836040518363ffffffff1660e01b8152600401611082929190613be7565b600060405180830381600087803b15801561109c57600080fd5b505af11580156110b0573d6000803e3d6000fd5b5050505050505050565b6110c26129e8565b80516110cf906001612872565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516110fc91600090866128d7565b602081015161110c906001612872565b61114b60006040518060400160405280600b81526020016a3ab4a332b2a330b1ba37b960a91b815250848460200151612989909392919063ffffffff16565b836001600160a01b03166324de01e4611163856129dc565b836040518363ffffffff1660e01b8152600401611082929190613c1e565b6111896129e8565b8051611196906002612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516111c291600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516111f791600190886128d7565b6060810151611207906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516112369160009087612934565b6040810151611246906001612872565b604080518082018252600581526464656c746160d81b6020820152908201516112729160009086612989565b6020810151611282906001612872565b6112bf6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e46112d7886129dc565b836040518363ffffffff1660e01b815260040161057b929190613c60565b6112fd6129e8565b805161130a906003612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611336916000908a6128d7565b6040805180820190915260058152643a37b5b2b760d91b6020820152815161136191600190896128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161138e91600290876128d7565b602081015161139e906003612872565b6113d960006040518060400160405280600781526020016674696d654b657960c81b815250878460200151612989909392919063ffffffff16565b61141260016040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b61144f6002604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b876001600160a01b03166324de01e4610de3866129dc565b61146f6129e8565b805161147c906004612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516114a8916000908a6128d7565b6040805180820190915260058152643a37b5b2b760d91b602082015281516114d391600190896128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161150091600290886128d7565b6040805180820190915260088152673932b1b2b4bb32b960c11b6020820152815161152e91600390876128d7565b602081015161153e906002612872565b611578600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612989909392919063ffffffff16565b6115b960016040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b876001600160a01b03166324de01e46115d1876129dc565b836040518363ffffffff1660e01b8152600401610e01929190613ca4565b6115f76129e8565b8051611604906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161163091600090866128d7565b6020810151611640906001612872565b61168c600060405180604001604052806018815260200177189bdc9c9bddda5b99d19858dd1bdc94195c94d958dbdb9960421b815250848460200151612989909392919063ffffffff16565b836001600160a01b03166324de01e46116a4856129dc565b836040518363ffffffff1660e01b8152600401611082929190613ce6565b6116ca6129e8565b80516116d7906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161170391600090876128d7565b6040810151611713906001612872565b604080518082018252600581526464656c746160d81b60208201529082015161173f9160009086612989565b602081015161174f906001612872565b61178c6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b846001600160a01b03166324de01e46117a4866129dc565b836040518363ffffffff1660e01b81526004016117c2929190613d1f565b600060405180830381600087803b1580156117dc57600080fd5b505af11580156117f0573d6000803e3d6000fd5b505050505050505050565b6118036129e8565b8051611810906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161183c91600090876128d7565b602081015161184c906001612872565b611886600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250848460200151612989909392919063ffffffff16565b846001600160a01b03166324de01e461189e856129dc565b836040518363ffffffff1660e01b81526004016117c2929190613d6c565b6118c46129e8565b80516118d1906002612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516118fd91600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161193291600190886128d7565b6060810151611942906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516119719160009087612934565b6020810151611981906002612872565b6119ba60006040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b6119f360016040518060400160405280600581526020016476616c756560d81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4611a0b886129dc565b836040518363ffffffff1660e01b815260040161057b929190613db8565b611a316129e8565b8051611a3e906001612872565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611a6991600090886128d7565b6080810151611a79906001612872565b60408051808201909152600e81526d1d9a5c9d1d585b151bdad95b925960921b60208201526080820151611ab09160009087612989565b6040810151611ac0906002612872565b604080518082018252600581526464656c746160d81b602082015290820151611aec9160009086612989565b60408051808201825260098152686e65787456616c756560b81b602082015290820151611b1c9160019085612989565b856001600160a01b03166363d16363611b34876129dc565b86846040518463ffffffff1660e01b81526004016106e193929190613e12565b611b5c6129e8565b8051611b69906003612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611b95916000908b6128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611bc0916001908a6128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611bed91600290886128d7565b6020810151611bfd906004612872565b611c3860006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612989909392919063ffffffff16565b611c7160016040518060400160405280600581526020016464656c746160d81b815250868460200151612989909392919063ffffffff16565b611cae6002604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612989909392919063ffffffff16565b611cef60036040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b886001600160a01b03166324de01e4611d07876129dc565b836040518363ffffffff1660e01b8152600401611d25929190613e65565b600060405180830381600087803b158015611d3f57600080fd5b505af1158015611d53573d6000803e3d6000fd5b50505050505050505050505050565b611d6a6129e8565b8051611d77906001612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611da391600090896128d7565b6060810151611db3906001612872565b60408051808201909152600b81526a34b9a637b733aa37b5b2b760a91b60208201526060820151611de79160009088612934565b6080810151611df7906001612872565b60408051808201909152600f81526e1d9a5c9d1d585b13585c9ad95d1259608a1b60208201526080820151611e2f9160009087612989565b6040810151611e3f906001612872565b604080518082018252600581526464656c746160d81b602082015290820151611e6b9160009086612989565b6020810151611e7b906001612872565b611eb86000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166363d16363611ed0886129dc565b86846040518463ffffffff1660e01b815260040161057b93929190613eaf565b611ef86129e8565b8051611f05906004612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611f31916000908b6128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611f5c916001908a6128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611f8991600290886128d7565b6040805180820190915260088152673932b1b2b4bb32b960c11b60208201528151611fb791600390876128d7565b6020810151611fc7906003612872565b61200260006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612989909392919063ffffffff16565b61203c600160405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612989909392919063ffffffff16565b61207d60026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b886001600160a01b03166324de01e4612095876129dc565b836040518363ffffffff1660e01b8152600401611d25929190613f00565b6120bb6129e8565b80516120c8906001612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516120f491600090886128d7565b6060810151612104906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516121339160009087612934565b6020810151612143906002612872565b61217c60006040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b6121b96001604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e46121d1876129dc565b836040518363ffffffff1660e01b81526004016106e1929190613f41565b6121f76129e8565b6080810151612207906001612872565b60408051808201909152600881526774726164654b657960c01b602082015260808201516122389160009088612989565b8051612245906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161227191600090876128d7565b6040810151612281906004612872565b6040805180820182526009815268706f6f6c56616c756560b81b60208201528451918301516122b4929091600091612989565b6122f36001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612989909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151612327929091600291612989565b60408051808201825260068152651b995d141b9b60d21b602082015260608501519183015161235a929091600391612989565b602081015161236a906008612872565b6123b160006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612989909392919063ffffffff16565b6123f960016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612989909392919063ffffffff16565b61243d60026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612989909392919063ffffffff16565b61248260036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612989909392919063ffffffff16565b6124cd600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612989909392919063ffffffff16565b61251c6005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612989909392919063ffffffff16565b61256560066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612989909392919063ffffffff16565b6125ab6007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e46125c3866129dc565b836040518363ffffffff1660e01b81526004016106e1929190613f8e565b6125e96129e8565b80516125f6906002612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161262291600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161265791600190886128d7565b6060810151612667906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516126969160009087612934565b60408101516126a6906001612872565b604080518082018252600581526464656c746160d81b6020820152908201516126d29160009086612989565b60208101516126e2906001612872565b61271f6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4612737886129dc565b836040518363ffffffff1660e01b815260040161057b929190613fd1565b61275d6129e8565b805161276a906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161279691600090876128d7565b60208101516127a6906002612872565b6127ec600060405180604001604052806012815260200171191a5cdd1c9a589d5d1a5bdb905b5bdd5b9d60721b815250858460200151612989909392919063ffffffff16565b61283c60016040518060400160405280601c81526020017b1b995e1d141bdcda5d1a5bdb925b5c1858dd141bdbdb105b5bdd5b9d60221b815250848460200151612989909392919063ffffffff16565b846001600160a01b03166324de01e4612854866129dc565b836040518363ffffffff1660e01b81526004016117c292919061401c565b806001600160401b0381111561288a5761288a612bcd565b6040519080825280602002602001820160405280156128d057816020015b6040805180820190915260608152600060208201528152602001906001900390816128a85790505b5090915250565b81846000015184815181106128ee576128ee614069565b602002602001015160000181905250808460000151848151811061291457612914614069565b6020908102919091018101516001600160a01b0390921691015250505050565b818460000151848151811061294b5761294b614069565b602002602001015160000181905250808460000151848151811061297157612971614069565b60209081029190910181015191151591015250505050565b81846000015184815181106129a0576129a0614069565b60200260200101516000018190525080846000015184815181106129c6576129c6614069565b6020026020010151602001818152505050505050565b6001600160a01b031690565b604080516101208101909152606060e0820181815261010083019190915281908152602001612a2a604051806040016040528060608152602001606081525090565b8152602001612a4c604051806040016040528060608152602001606081525090565b8152602001612a6e604051806040016040528060608152602001606081525090565b8152602001612a90604051806040016040528060608152602001606081525090565b8152602001612ab2604051806040016040528060608152602001606081525090565b8152602001612ad4604051806040016040528060608152602001606081525090565b905290565b6001600160a01b0381168114612aee57600080fd5b50565b80358015158114612b0157600080fd5b919050565b60008060008060008060c08789031215612b1f57600080fd5b8635612b2a81612ad9565b95506020870135612b3a81612ad9565b94506040870135612b4a81612ad9565b9350612b5860608801612af1565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215612b8a57600080fd5b8535612b9581612ad9565b94506020860135612ba581612ad9565b93506040860135612bb581612ad9565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612c1457634e487b7160e01b600052604160045260246000fd5b60405290565b60006101608284031215612c2d57600080fd5b612c35612be3565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525092915050565b6000806000806000806102008789031215612cc557600080fd5b8635612cd081612ad9565b955060208701359450604087013593506060870135612cee81612ad9565b9250612cfd8860808901612c1a565b91506101e087013590509295509295509295565b600080600080600080600060e0888a031215612d2c57600080fd5b8735612d3781612ad9565b96506020880135612d4781612ad9565b95506040880135612d5781612ad9565b94506060880135612d6781612ad9565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600060608486031215612d9d57600080fd5b8335612da881612ad9565b92506020840135612db881612ad9565b929592945050506040919091013590565b600080600080600080600060e0888a031215612de457600080fd5b8735612def81612ad9565b96506020880135612dff81612ad9565b95506040880135612e0f81612ad9565b9450606088013593506080880135612e2681612ad9565b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600060e0888a031215612e5e57600080fd5b8735612e6981612ad9565b96506020880135612e7981612ad9565b95506040880135612e8981612ad9565b94506060880135612e9981612ad9565b93506080880135612e2681612ad9565b60008060008060808587031215612ebf57600080fd5b8435612eca81612ad9565b93506020850135612eda81612ad9565b93969395505050506040820135916060013590565b60008060008060808587031215612f0557600080fd5b8435612f1081612ad9565b93506020850135612f2081612ad9565b92506040850135612f3081612ad9565b9396929550929360600135925050565b600080600080600060a08688031215612f5857600080fd5b8535612f6381612ad9565b94506020860135612f7381612ad9565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600080610100898b031215612fae57600080fd5b8835612fb981612ad9565b97506020890135612fc981612ad9565b96506040890135612fd981612ad9565b9550606089013594506080890135612ff081612ad9565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060c0878903121561302b57600080fd5b863561303681612ad9565b9550602087013561304681612ad9565b945061305460408801612af1565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b03121561309257600080fd5b883561309d81612ad9565b975060208901356130ad81612ad9565b965060408901356130bd81612ad9565b95506060890135945060808901356130d481612ad9565b935060a08901356130e481612ad9565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600060a0868803121561311957600080fd5b853561312481612ad9565b9450602086013561313481612ad9565b9350612bb560408701612af1565b60008060008060006101e0868803121561315b57600080fd5b853561316681612ad9565b945060208601359350604086013561317d81612ad9565b925061318c8760608801612c1a565b949793965091946101c0013592915050565b6000815180845260005b818110156131c4576020818501810151868301820152016131a8565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a528251604081518188526132258289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b8083101561326a5783516001600160a01b03168252928901926001929092019190890190613241565b509b88019b9650505091850191600101613203565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561330457898603605f19018452845180518888526132de8989018261319e565b918401516001600160a01b031697840197909752955093810193928101926001016132ba565b50808801519550888503818a01525050505061332081836131e4565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a5282516040815181885261336a8289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b808310156133a65783518252928901926001929092019190890190613386565b509b88019b9650505091850191600101613348565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561342957898603605f190184528451805188885261340c8989018261319e565b9184015197840197909752955093810193928101926001016133e8565b50808801519550888503818a0152505050506133208183613329565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a528251604081518188526134868289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b808310156134c257835182529289019260019290920191908901906134a2565b509b88019b9650505091850191600101613464565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561354557898603605f19018452845180518888526135288989018261319e565b918401519784019790975295509381019392810192600101613504565b50808801519550888503818a0152505050506133208183613445565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a528251604081518188526135a28289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b808310156135e0578351151582529289019260019290920191908901906135be565b509b88019b9650505091850191600101613580565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561366557898603605f19018452845180518888526136468989018261319e565b9184015115159784019790975295509381019392810192600101613622565b50808801519550888503818a0152505050506133208183613561565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561342957898603605f19018452845180518888526136d28989018261319e565b9184015197840197909752955093810193928101926001016136ae565b600081518084526020808501808196506005915083821b81018387016000805b8781101561379a578484038b528251604081518187526137318288018261319e565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561378357601f1985830301845261377182875161319e565b958d0195938d01939150600101613755565b509e8b019e9750505093880193505060010161370f565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561382657898603605f19018452845180518888526137fa8989018261319e565b9184015188830389860152919050613812818361319e565b9750505093810193928101926001016137d6565b50808801519550888503818a01525050505061332081836136ef565b600081518084526020808501808196506005915083821b81018387016000805b8781101561379a578484038b528251604081518187526138848288018261319e565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b828110156138d657601f198583030184526138c482875161319e565b958d0195938d019391506001016138a8565b509e8b019e97505050938801935050600101613862565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561396a57898603605f190184528451805188885261393e8989018261319e565b9184015188830389860152919050613956818361319e565b97505050938101939281019260010161391a565b50808801519550888503818a0152505050506133208183613842565b6000815160e0845261399b60e085018261328d565b9050602083015184820360208601526139b482826133bb565b915050604083015184820360408601526139ce82826134d7565b915050606083015184820360608601526139e882826135f5565b91505060808301518482036080860152613a028282613681565b91505060a083015184820360a0860152613a1c82826137a9565b91505060c083015184820360c086015261332082826138ed565b60608152601e60608201527f46756e64696e67466565416d6f756e7450657253697a65557064617465640000608082015282602082015260a060408201526000613a8360a0830184613986565b949350505050565b60608152601b60608201527a14ddd85c125b5c1858dd141bdbdb105b5bdd5b9d155c19185d1959602a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601660608201527513585c9ad95d141bdbdb15985b1d59555c19185d195960521b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526011606082015270141bdbdb105b5bdd5b9d155c19185d1959607a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601760608201527610db185a5b58589b19519d5b991a5b99d55c19185d1959604a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601360608201527213dc195b925b9d195c995cdd155c19185d1959606a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152600760608201526646756e64696e6760c81b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526012606082015271155a519959519858dd1bdc955c19185d195960721b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601460608201527310dbdb1b185d195c985b14dd5b555c19185d195960621b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526012606082015271119d5b991a5b99d199595cd0db185a5b595960721b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526009606082015268426f72726f77696e6760b81b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601f60608201527f506f736974696f6e496d70616374506f6f6c416d6f756e745570646174656400608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601c60608201527b141bdcda5d1a5bdb925b5c1858dd141bdbdb15da5d1a191c985dd85b60221b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152602460608201527f436c61696d61626c6546756e64696e67416d6f756e7450657253697a65557064608082015263185d195960e21b60a082015282602082015260c060408201526000613a8360c0830184613986565b60808152601f60808201527f5669727475616c506f736974696f6e496e76656e746f7279557064617465640060a082015283602082015282604082015260c06060820152600061332060c0830184613986565b60608152601a60608201527910db185a5b58589b1950dbdb1b185d195c985b155c19185d195960321b608082015282602082015260a060408201526000613a8360a0830184613986565b60808152601b60808201527a159a5c9d1d585b14ddd85c125b9d995b9d1bdc9e555c19185d1959602a1b60a082015283602082015282604082015260c06060820152600061332060c0830184613986565b60608152601160608201527010dbdb1b185d195c985b10db185a5b5959607a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152602060608201527f43756d756c6174697665426f72726f77696e67466163746f7255706461746564608082015282602082015260a060408201526000613a8360a0830184613986565b6060815260136060820152724d61726b6574506f6f6c56616c7565496e666f60681b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601b60608201527a13dc195b925b9d195c995cdd125b951bdad95b9cd55c19185d1959602a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601d60608201527f506f736974696f6e496d70616374506f6f6c4469737472696275746564000000608082015282602082015260a060408201526000613a8360a0830184613986565b634e487b7160e01b600052603260045260246000fdfea26469706673582212202782836d8bc7d0cc1e0e508668376304b9102d8b176edb3671ea0e115708f68064736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101275760003560e01c8063061034701461012c5780630aa77b6a1461014e578063138231111461016e5780631daaefa11461018e5780631f20ad33146101ae57806328d445cb146101ce578063387a0f13146101ee57806346ff7f441461020e57806347bc64531461022e5780634c7c4a6d1461024e5780634ee4c8311461026e5780635375a2071461028e578063555a9979146102ae5780635bb3aa73146102ce5780636d6b2059146102ee57806386f48e481461030e5780638983b3ff1461032e578063a814bb6f1461034e578063b3d188de1461036e578063d206b7051461038e578063d52463b2146103ae578063d791fbb3146103ce578063e974c64c146103ee575b600080fd5b81801561013857600080fd5b5061014c610147366004612b06565b61040e565b005b81801561015a57600080fd5b5061014c610169366004612b72565b6105b6565b81801561017a57600080fd5b5061014c610189366004612cab565b61071b565b81801561019a57600080fd5b5061014c6101a9366004612b72565b610b40565b8180156101ba57600080fd5b5061014c6101c9366004612d11565b610c6b565b8180156101da57600080fd5b5061014c6101e9366004612b06565b610e3d565b8180156101fa57600080fd5b5061014c610209366004612d88565b610fb1565b81801561021a57600080fd5b5061014c610229366004612d88565b6110ba565b81801561023a57600080fd5b5061014c610249366004612b06565b611181565b81801561025a57600080fd5b5061014c610269366004612dc9565b6112f5565b81801561027a57600080fd5b5061014c610289366004612e43565b611467565b81801561029a57600080fd5b5061014c6102a9366004612d88565b6115ef565b8180156102ba57600080fd5b5061014c6102c9366004612ea9565b6116c2565b8180156102da57600080fd5b5061014c6102e9366004612eef565b6117fb565b8180156102fa57600080fd5b5061014c610309366004612b06565b6118bc565b81801561031a57600080fd5b5061014c610329366004612f40565b611a29565b81801561033a57600080fd5b5061014c610349366004612f91565b611b54565b81801561035a57600080fd5b5061014c610369366004613012565b611d62565b81801561037a57600080fd5b5061014c610389366004613075565b611ef0565b81801561039a57600080fd5b5061014c6103a9366004613101565b6120b3565b8180156103ba57600080fd5b5061014c6103c9366004613142565b6121ef565b8180156103da57600080fd5b5061014c6103e9366004612b06565b6125e1565b8180156103fa57600080fd5b5061014c610409366004612ea9565b612755565b6104166129e8565b8051610423906002612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161044f91600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161048491600190886128d7565b6060810151610494906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516104c39160009087612934565b60208101516104d3906002612872565b61050c60006040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b61054560016040518060400160405280600581526020016476616c756560d81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e461055d886129dc565b836040518363ffffffff1660e01b815260040161057b929190613a36565b600060405180830381600087803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b5050505050505050505050565b6105be6129e8565b80516105cb906002612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516105f791600090886128d7565b6040805180820190915260058152643a37b5b2b760d91b6020820152815161062291600190876128d7565b6040810151610632906001612872565b604080518082018252600581526464656c746160d81b60208201529082015161065e9160009086612989565b602081015161066e906001612872565b6106ab6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e46106c3876129dc565b836040518363ffffffff1660e01b81526004016106e1929190613a8b565b600060405180830381600087803b1580156106fb57600080fd5b505af115801561070f573d6000803e3d6000fd5b50505050505050505050565b6107236129e8565b6080810151610733906002612872565b60408051808201909152600a815269616374696f6e5479706560b01b602082015260808201516107669160009089612989565b60408051808201909152600881526774726164654b657960c01b602082015260808201516107979160019088612989565b80516107a4906001612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516107d091600090876128d7565b60408101516107e0906004612872565b6040805180820182526009815268706f6f6c56616c756560b81b6020820152845191830151610813929091600091612989565b6108526001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612989909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151610886929091600291612989565b60408051808201825260068152651b995d141b9b60d21b60208201526060850151918301516108b9929091600391612989565b60208101516108c9906008612872565b61091060006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612989909392919063ffffffff16565b61095860016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612989909392919063ffffffff16565b61099c60026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612989909392919063ffffffff16565b6109e160036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612989909392919063ffffffff16565b610a2c600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612989909392919063ffffffff16565b610a7b6005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612989909392919063ffffffff16565b610ac460066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612989909392919063ffffffff16565b610b0a6007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4610b22866129dc565b836040518363ffffffff1660e01b815260040161057b929190613ad6565b610b486129e8565b8051610b55906002612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610b8191600090886128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610bac91600190876128d7565b6040810151610bbc906001612872565b604080518082018252600581526464656c746160d81b602082015290820151610be89160009086612989565b6020810151610bf8906001612872565b610c356000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e4610c4d876129dc565b836040518363ffffffff1660e01b81526004016106e1929190613b1c565b610c736129e8565b8051610c80906003612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610cac916000908a6128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610cd791600190896128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610d0491600290886128d7565b6020810151610d14906003612872565b610d4d60006040518060400160405280600581526020016464656c746160d81b815250868460200151612989909392919063ffffffff16565b610d8a6001604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612989909392919063ffffffff16565b610dcb60026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b876001600160a01b03166324de01e4610de3876129dc565b836040518363ffffffff1660e01b8152600401610e01929190613b5d565b600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b505050505050505050505050565b610e456129e8565b8051610e52906002612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610e7e91600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610eb391600190886128d7565b6060810151610ec3906001612872565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151610ef29160009087612934565b6040810151610f02906001612872565b604080518082018252600581526464656c746160d81b602082015290820151610f2e9160009086612989565b6020810151610f3e906001612872565b610f7b6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4610f93886129dc565b836040518363ffffffff1660e01b815260040161057b929190613ba4565b610fb96129e8565b8051610fc6906001612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610ff291600090866128d7565b6020810151611002906001612872565b61104c600060405180604001604052806016815260200175199d5b991a5b99d19858dd1bdc94195c94d958dbdb9960521b815250848460200151612989909392919063ffffffff16565b836001600160a01b03166324de01e4611064856129dc565b836040518363ffffffff1660e01b8152600401611082929190613be7565b600060405180830381600087803b15801561109c57600080fd5b505af11580156110b0573d6000803e3d6000fd5b5050505050505050565b6110c26129e8565b80516110cf906001612872565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516110fc91600090866128d7565b602081015161110c906001612872565b61114b60006040518060400160405280600b81526020016a3ab4a332b2a330b1ba37b960a91b815250848460200151612989909392919063ffffffff16565b836001600160a01b03166324de01e4611163856129dc565b836040518363ffffffff1660e01b8152600401611082929190613c1e565b6111896129e8565b8051611196906002612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516111c291600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516111f791600190886128d7565b6060810151611207906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516112369160009087612934565b6040810151611246906001612872565b604080518082018252600581526464656c746160d81b6020820152908201516112729160009086612989565b6020810151611282906001612872565b6112bf6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e46112d7886129dc565b836040518363ffffffff1660e01b815260040161057b929190613c60565b6112fd6129e8565b805161130a906003612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611336916000908a6128d7565b6040805180820190915260058152643a37b5b2b760d91b6020820152815161136191600190896128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161138e91600290876128d7565b602081015161139e906003612872565b6113d960006040518060400160405280600781526020016674696d654b657960c81b815250878460200151612989909392919063ffffffff16565b61141260016040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b61144f6002604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b876001600160a01b03166324de01e4610de3866129dc565b61146f6129e8565b805161147c906004612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516114a8916000908a6128d7565b6040805180820190915260058152643a37b5b2b760d91b602082015281516114d391600190896128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161150091600290886128d7565b6040805180820190915260088152673932b1b2b4bb32b960c11b6020820152815161152e91600390876128d7565b602081015161153e906002612872565b611578600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612989909392919063ffffffff16565b6115b960016040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b876001600160a01b03166324de01e46115d1876129dc565b836040518363ffffffff1660e01b8152600401610e01929190613ca4565b6115f76129e8565b8051611604906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161163091600090866128d7565b6020810151611640906001612872565b61168c600060405180604001604052806018815260200177189bdc9c9bddda5b99d19858dd1bdc94195c94d958dbdb9960421b815250848460200151612989909392919063ffffffff16565b836001600160a01b03166324de01e46116a4856129dc565b836040518363ffffffff1660e01b8152600401611082929190613ce6565b6116ca6129e8565b80516116d7906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161170391600090876128d7565b6040810151611713906001612872565b604080518082018252600581526464656c746160d81b60208201529082015161173f9160009086612989565b602081015161174f906001612872565b61178c6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b846001600160a01b03166324de01e46117a4866129dc565b836040518363ffffffff1660e01b81526004016117c2929190613d1f565b600060405180830381600087803b1580156117dc57600080fd5b505af11580156117f0573d6000803e3d6000fd5b505050505050505050565b6118036129e8565b8051611810906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161183c91600090876128d7565b602081015161184c906001612872565b611886600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250848460200151612989909392919063ffffffff16565b846001600160a01b03166324de01e461189e856129dc565b836040518363ffffffff1660e01b81526004016117c2929190613d6c565b6118c46129e8565b80516118d1906002612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516118fd91600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161193291600190886128d7565b6060810151611942906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516119719160009087612934565b6020810151611981906002612872565b6119ba60006040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b6119f360016040518060400160405280600581526020016476616c756560d81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4611a0b886129dc565b836040518363ffffffff1660e01b815260040161057b929190613db8565b611a316129e8565b8051611a3e906001612872565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611a6991600090886128d7565b6080810151611a79906001612872565b60408051808201909152600e81526d1d9a5c9d1d585b151bdad95b925960921b60208201526080820151611ab09160009087612989565b6040810151611ac0906002612872565b604080518082018252600581526464656c746160d81b602082015290820151611aec9160009086612989565b60408051808201825260098152686e65787456616c756560b81b602082015290820151611b1c9160019085612989565b856001600160a01b03166363d16363611b34876129dc565b86846040518463ffffffff1660e01b81526004016106e193929190613e12565b611b5c6129e8565b8051611b69906003612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611b95916000908b6128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611bc0916001908a6128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611bed91600290886128d7565b6020810151611bfd906004612872565b611c3860006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612989909392919063ffffffff16565b611c7160016040518060400160405280600581526020016464656c746160d81b815250868460200151612989909392919063ffffffff16565b611cae6002604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612989909392919063ffffffff16565b611cef60036040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b886001600160a01b03166324de01e4611d07876129dc565b836040518363ffffffff1660e01b8152600401611d25929190613e65565b600060405180830381600087803b158015611d3f57600080fd5b505af1158015611d53573d6000803e3d6000fd5b50505050505050505050505050565b611d6a6129e8565b8051611d77906001612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611da391600090896128d7565b6060810151611db3906001612872565b60408051808201909152600b81526a34b9a637b733aa37b5b2b760a91b60208201526060820151611de79160009088612934565b6080810151611df7906001612872565b60408051808201909152600f81526e1d9a5c9d1d585b13585c9ad95d1259608a1b60208201526080820151611e2f9160009087612989565b6040810151611e3f906001612872565b604080518082018252600581526464656c746160d81b602082015290820151611e6b9160009086612989565b6020810151611e7b906001612872565b611eb86000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166363d16363611ed0886129dc565b86846040518463ffffffff1660e01b815260040161057b93929190613eaf565b611ef86129e8565b8051611f05906004612872565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611f31916000908b6128d7565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611f5c916001908a6128d7565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611f8991600290886128d7565b6040805180820190915260088152673932b1b2b4bb32b960c11b60208201528151611fb791600390876128d7565b6020810151611fc7906003612872565b61200260006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612989909392919063ffffffff16565b61203c600160405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612989909392919063ffffffff16565b61207d60026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612989909392919063ffffffff16565b886001600160a01b03166324de01e4612095876129dc565b836040518363ffffffff1660e01b8152600401611d25929190613f00565b6120bb6129e8565b80516120c8906001612872565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516120f491600090886128d7565b6060810151612104906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516121339160009087612934565b6020810151612143906002612872565b61217c60006040518060400160405280600581526020016464656c746160d81b815250858460200151612989909392919063ffffffff16565b6121b96001604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e46121d1876129dc565b836040518363ffffffff1660e01b81526004016106e1929190613f41565b6121f76129e8565b6080810151612207906001612872565b60408051808201909152600881526774726164654b657960c01b602082015260808201516122389160009088612989565b8051612245906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161227191600090876128d7565b6040810151612281906004612872565b6040805180820182526009815268706f6f6c56616c756560b81b60208201528451918301516122b4929091600091612989565b6122f36001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612989909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151612327929091600291612989565b60408051808201825260068152651b995d141b9b60d21b602082015260608501519183015161235a929091600391612989565b602081015161236a906008612872565b6123b160006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612989909392919063ffffffff16565b6123f960016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612989909392919063ffffffff16565b61243d60026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612989909392919063ffffffff16565b61248260036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612989909392919063ffffffff16565b6124cd600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612989909392919063ffffffff16565b61251c6005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612989909392919063ffffffff16565b61256560066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612989909392919063ffffffff16565b6125ab6007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612989909392919063ffffffff16565b856001600160a01b03166324de01e46125c3866129dc565b836040518363ffffffff1660e01b81526004016106e1929190613f8e565b6125e96129e8565b80516125f6906002612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161262291600090896128d7565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161265791600190886128d7565b6060810151612667906001612872565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516126969160009087612934565b60408101516126a6906001612872565b604080518082018252600581526464656c746160d81b6020820152908201516126d29160009086612989565b60208101516126e2906001612872565b61271f6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612989909392919063ffffffff16565b866001600160a01b03166324de01e4612737886129dc565b836040518363ffffffff1660e01b815260040161057b929190613fd1565b61275d6129e8565b805161276a906001612872565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161279691600090876128d7565b60208101516127a6906002612872565b6127ec600060405180604001604052806012815260200171191a5cdd1c9a589d5d1a5bdb905b5bdd5b9d60721b815250858460200151612989909392919063ffffffff16565b61283c60016040518060400160405280601c81526020017b1b995e1d141bdcda5d1a5bdb925b5c1858dd141bdbdb105b5bdd5b9d60221b815250848460200151612989909392919063ffffffff16565b846001600160a01b03166324de01e4612854866129dc565b836040518363ffffffff1660e01b81526004016117c292919061401c565b806001600160401b0381111561288a5761288a612bcd565b6040519080825280602002602001820160405280156128d057816020015b6040805180820190915260608152600060208201528152602001906001900390816128a85790505b5090915250565b81846000015184815181106128ee576128ee614069565b602002602001015160000181905250808460000151848151811061291457612914614069565b6020908102919091018101516001600160a01b0390921691015250505050565b818460000151848151811061294b5761294b614069565b602002602001015160000181905250808460000151848151811061297157612971614069565b60209081029190910181015191151591015250505050565b81846000015184815181106129a0576129a0614069565b60200260200101516000018190525080846000015184815181106129c6576129c6614069565b6020026020010151602001818152505050505050565b6001600160a01b031690565b604080516101208101909152606060e0820181815261010083019190915281908152602001612a2a604051806040016040528060608152602001606081525090565b8152602001612a4c604051806040016040528060608152602001606081525090565b8152602001612a6e604051806040016040528060608152602001606081525090565b8152602001612a90604051806040016040528060608152602001606081525090565b8152602001612ab2604051806040016040528060608152602001606081525090565b8152602001612ad4604051806040016040528060608152602001606081525090565b905290565b6001600160a01b0381168114612aee57600080fd5b50565b80358015158114612b0157600080fd5b919050565b60008060008060008060c08789031215612b1f57600080fd5b8635612b2a81612ad9565b95506020870135612b3a81612ad9565b94506040870135612b4a81612ad9565b9350612b5860608801612af1565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215612b8a57600080fd5b8535612b9581612ad9565b94506020860135612ba581612ad9565b93506040860135612bb581612ad9565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612c1457634e487b7160e01b600052604160045260246000fd5b60405290565b60006101608284031215612c2d57600080fd5b612c35612be3565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525092915050565b6000806000806000806102008789031215612cc557600080fd5b8635612cd081612ad9565b955060208701359450604087013593506060870135612cee81612ad9565b9250612cfd8860808901612c1a565b91506101e087013590509295509295509295565b600080600080600080600060e0888a031215612d2c57600080fd5b8735612d3781612ad9565b96506020880135612d4781612ad9565b95506040880135612d5781612ad9565b94506060880135612d6781612ad9565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600060608486031215612d9d57600080fd5b8335612da881612ad9565b92506020840135612db881612ad9565b929592945050506040919091013590565b600080600080600080600060e0888a031215612de457600080fd5b8735612def81612ad9565b96506020880135612dff81612ad9565b95506040880135612e0f81612ad9565b9450606088013593506080880135612e2681612ad9565b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600060e0888a031215612e5e57600080fd5b8735612e6981612ad9565b96506020880135612e7981612ad9565b95506040880135612e8981612ad9565b94506060880135612e9981612ad9565b93506080880135612e2681612ad9565b60008060008060808587031215612ebf57600080fd5b8435612eca81612ad9565b93506020850135612eda81612ad9565b93969395505050506040820135916060013590565b60008060008060808587031215612f0557600080fd5b8435612f1081612ad9565b93506020850135612f2081612ad9565b92506040850135612f3081612ad9565b9396929550929360600135925050565b600080600080600060a08688031215612f5857600080fd5b8535612f6381612ad9565b94506020860135612f7381612ad9565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600080610100898b031215612fae57600080fd5b8835612fb981612ad9565b97506020890135612fc981612ad9565b96506040890135612fd981612ad9565b9550606089013594506080890135612ff081612ad9565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060c0878903121561302b57600080fd5b863561303681612ad9565b9550602087013561304681612ad9565b945061305460408801612af1565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b03121561309257600080fd5b883561309d81612ad9565b975060208901356130ad81612ad9565b965060408901356130bd81612ad9565b95506060890135945060808901356130d481612ad9565b935060a08901356130e481612ad9565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600060a0868803121561311957600080fd5b853561312481612ad9565b9450602086013561313481612ad9565b9350612bb560408701612af1565b60008060008060006101e0868803121561315b57600080fd5b853561316681612ad9565b945060208601359350604086013561317d81612ad9565b925061318c8760608801612c1a565b949793965091946101c0013592915050565b6000815180845260005b818110156131c4576020818501810151868301820152016131a8565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a528251604081518188526132258289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b8083101561326a5783516001600160a01b03168252928901926001929092019190890190613241565b509b88019b9650505091850191600101613203565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561330457898603605f19018452845180518888526132de8989018261319e565b918401516001600160a01b031697840197909752955093810193928101926001016132ba565b50808801519550888503818a01525050505061332081836131e4565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a5282516040815181885261336a8289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b808310156133a65783518252928901926001929092019190890190613386565b509b88019b9650505091850191600101613348565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561342957898603605f190184528451805188885261340c8989018261319e565b9184015197840197909752955093810193928101926001016133e8565b50808801519550888503818a0152505050506133208183613329565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a528251604081518188526134868289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b808310156134c257835182529289019260019290920191908901906134a2565b509b88019b9650505091850191600101613464565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561354557898603605f19018452845180518888526135288989018261319e565b918401519784019790975295509381019392810192600101613504565b50808801519550888503818a0152505050506133208183613445565b600081518084526020808501808196508360051b810191508286016000805b8681101561327f578385038a528251604081518188526135a28289018261319e565b92890151888403898b01528051808552908a01938693508a0191505b808310156135e0578351151582529289019260019290920191908901906135be565b509b88019b9650505091850191600101613580565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561366557898603605f19018452845180518888526136468989018261319e565b9184015115159784019790975295509381019392810192600101613622565b50808801519550888503818a0152505050506133208183613561565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561342957898603605f19018452845180518888526136d28989018261319e565b9184015197840197909752955093810193928101926001016136ae565b600081518084526020808501808196506005915083821b81018387016000805b8781101561379a578484038b528251604081518187526137318288018261319e565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561378357601f1985830301845261377182875161319e565b958d0195938d01939150600101613755565b509e8b019e9750505093880193505060010161370f565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561382657898603605f19018452845180518888526137fa8989018261319e565b9184015188830389860152919050613812818361319e565b9750505093810193928101926001016137d6565b50808801519550888503818a01525050505061332081836136ef565b600081518084526020808501808196506005915083821b81018387016000805b8781101561379a578484038b528251604081518187526138848288018261319e565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b828110156138d657601f198583030184526138c482875161319e565b958d0195938d019391506001016138a8565b509e8b019e97505050938801935050600101613862565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561396a57898603605f190184528451805188885261393e8989018261319e565b9184015188830389860152919050613956818361319e565b97505050938101939281019260010161391a565b50808801519550888503818a0152505050506133208183613842565b6000815160e0845261399b60e085018261328d565b9050602083015184820360208601526139b482826133bb565b915050604083015184820360408601526139ce82826134d7565b915050606083015184820360608601526139e882826135f5565b91505060808301518482036080860152613a028282613681565b91505060a083015184820360a0860152613a1c82826137a9565b91505060c083015184820360c086015261332082826138ed565b60608152601e60608201527f46756e64696e67466565416d6f756e7450657253697a65557064617465640000608082015282602082015260a060408201526000613a8360a0830184613986565b949350505050565b60608152601b60608201527a14ddd85c125b5c1858dd141bdbdb105b5bdd5b9d155c19185d1959602a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601660608201527513585c9ad95d141bdbdb15985b1d59555c19185d195960521b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526011606082015270141bdbdb105b5bdd5b9d155c19185d1959607a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601760608201527610db185a5b58589b19519d5b991a5b99d55c19185d1959604a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601360608201527213dc195b925b9d195c995cdd155c19185d1959606a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152600760608201526646756e64696e6760c81b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526012606082015271155a519959519858dd1bdc955c19185d195960721b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601460608201527310dbdb1b185d195c985b14dd5b555c19185d195960621b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526012606082015271119d5b991a5b99d199595cd0db185a5b595960721b608082015282602082015260a060408201526000613a8360a0830184613986565b606081526009606082015268426f72726f77696e6760b81b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601f60608201527f506f736974696f6e496d70616374506f6f6c416d6f756e745570646174656400608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601c60608201527b141bdcda5d1a5bdb925b5c1858dd141bdbdb15da5d1a191c985dd85b60221b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152602460608201527f436c61696d61626c6546756e64696e67416d6f756e7450657253697a65557064608082015263185d195960e21b60a082015282602082015260c060408201526000613a8360c0830184613986565b60808152601f60808201527f5669727475616c506f736974696f6e496e76656e746f7279557064617465640060a082015283602082015282604082015260c06060820152600061332060c0830184613986565b60608152601a60608201527910db185a5b58589b1950dbdb1b185d195c985b155c19185d195960321b608082015282602082015260a060408201526000613a8360a0830184613986565b60808152601b60808201527a159a5c9d1d585b14ddd85c125b9d995b9d1bdc9e555c19185d1959602a1b60a082015283602082015282604082015260c06060820152600061332060c0830184613986565b60608152601160608201527010dbdb1b185d195c985b10db185a5b5959607a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152602060608201527f43756d756c6174697665426f72726f77696e67466163746f7255706461746564608082015282602082015260a060408201526000613a8360a0830184613986565b6060815260136060820152724d61726b6574506f6f6c56616c7565496e666f60681b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601b60608201527a13dc195b925b9d195c995cdd125b951bdad95b9cd55c19185d1959602a1b608082015282602082015260a060408201526000613a8360a0830184613986565b60608152601d60608201527f506f736974696f6e496d70616374506f6f6c4469737472696275746564000000608082015282602082015260a060408201526000613a8360a0830184613986565b634e487b7160e01b600052603260045260246000fdfea26469706673582212202782836d8bc7d0cc1e0e508668376304b9102d8b176edb3671ea0e115708f68064736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}