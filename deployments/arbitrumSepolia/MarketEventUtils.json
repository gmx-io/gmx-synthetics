{
  "address": "0x8bac1F767C261580b42677a09085a293548aa8f3",
  "abi": [],
  "transactionHash": "0x75835ad641a12941c202f6d66789414d058d8ac5c48f3274e92cbb82dad6dbf8",
  "receipt": {
    "to": null,
    "from": "0xCD9706B6B71fdC4351091B5b1D910cEe7Fde28D0",
    "contractAddress": "0x8bac1F767C261580b42677a09085a293548aa8f3",
    "transactionIndex": 14,
    "gasUsed": "3751528",
    "logsBloom": "0x
    "blockHash": "0xd075226130bb5cb335acfff6a7839bcf1fdc40a9a12cd0f03f2ec6f049d6c975",
    "transactionHash": "0x75835ad641a12941c202f6d66789414d058d8ac5c48f3274e92cbb82dad6dbf8",
    "logs": [],
    "blockNumber": 154650513,
    "cumulativeGasUsed": "4547189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "07bf2f0e3a43f9cd4003783abc3e8968",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/market/MarketEventUtils.sol\":\"MarketEventUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error InvalidClaimableReductionFactor(uint256 value);\\n    error OracleProviderAlreadyExistsForToken(address token);\\n    error OracleProviderMinChangeDelayNotYetPassed(address token, address provider);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n    error InvalidPositionImpactPoolDistributionRate(uint256 distributionAmount, uint256 positionImpactPoolAmount);\\n    error MaxDataListLengthExceeded(uint256 dataLength, uint256 maxDataLength);\\n    error EmptyToken();\\n\\n    // ContributorHandler errors\\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\\n    error InvalidContributorToken(address token);\\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address signer);\\n    error InvalidHoldingAddress(address account);\\n    error EmptyPositionImpactWithdrawalAmount();\\n    error OraclePriceOutdated();\\n    error EmptyTarget();\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvShiftStoreUtils errors\\n    error GlvShiftNotFound(bytes32 key);\\n    // GlvWithdrawalStoreUtils errors\\n    error GlvWithdrawalNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvMarketAmount();\\n    error EmptyGlvDeposit();\\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\\n    // GlvWithdrawalUtils errors\\n    error EmptyGlvWithdrawal();\\n    error EmptyGlvWithdrawalAmount();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error EmptyGlvTokenSupply();\\n    error GlvNegativeMarketPoolValue(address glv, address market);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvEnabledMarket(address glv, address market);\\n    error GlvNonZeroMarketBalance(address glv, address market);\\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error GlvInvalidLongToken(address glv, address provided, address expected);\\n    error GlvInvalidShortToken(address glv, address provided, address expected);\\n    // GlvShiftUtils\\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\\n    // GlvFactory\\n    error GlvAlreadyExists(bytes32 salt, address glv);\\n    error GlvSymbolTooLong();\\n    error GlvNameTooLong();\\n    // GlvStoreUtils\\n    error GlvNotFound(address key);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidBuybackToken(address buybackToken);\\n    error InvalidVersion(uint256 version);\\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\\n    error EmptyClaimFeesMarket();\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForAutoCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\\n    error EmptyRelayFeeAddress();\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // MarketPositionImpactUtils errors\\n    error InsufficientImpactPoolValueForWithdrawal(uint256 withdrawalAmount, uint256 poolValue, int256 totalPendingImpactAmount);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices(); // not used, kept for compatibility\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error UnsupportedOrderTypeForAutoCancellation(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n    error UnexpectedValidFromTime(uint256 orderType);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\\n    error SubaccountIntegrationIdDisabled(bytes32 integrationId);\\n\\n    // TokenUtils errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\\n    // some contracts with this error cannot be re-deployed so it has been left as is\\n    error EmptyTokenTranferGasLimit(address token);\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error DataListLengthExceeded();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n\\n    // Cast errors\\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\\n\\n    // ConfigSyncer errors\\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\\n    error SyncConfigUpdatesDisabledForMarket(address market);\\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\\n\\n    // Reader errors\\n    error EmptyMarketPrice(address market);\\n\\n    // Multichain errors\\n    error InvalidTransferRequestsLength();\\n    error EmptyMultichainTransferInAmount(address account, address token);\\n    error EmptyMultichainTransferOutAmount(address account, address token);\\n    error InsufficientMultichainBalance(address account, address token, uint256 balance, uint256 amount);\\n    error InvalidSrcChainId(uint256 srcChainId);\\n    error InvalidDestinationChainId(uint256 desChainId);\\n    error TokenPermitsNotAllowedForMultichain();\\n    error InvalidMultichainProvider(address provider);\\n    error InvalidMultichainEndpoint(address endpoint);\\n    error UnableToPayOrderFee();\\n    error UnableToPayOrderFeeFromCollateral();\\n    error InvalidBridgeOutToken(address token);\\n    error InvalidMultichainAction();\\n    error InsufficientFee(uint256 feeProvided, uint256 feeRequired);\\n\\n    enum SignatureType {\\n        Call,\\n        SubaccountApproval\\n    }\\n\\n    // Gelato relay errors\\n    error InvalidSignature(string signatureType);\\n    // User sent incorrect fee token or incorrect swap path\\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    // Contract received unsupported fee token from Gelato relay\\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    error InvalidPermitSpender(address spender, address expectedSpender);\\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\\n    error InvalidSubaccountApprovalSubaccount();\\n    error NonEmptyExternalCallsForSubaccountOrder();\\n\\n    // EventUtils error\\n    error EventItemNotFound(string key);\\n\\n    // EdgeOracle verifier errors\\n    error InvalidTrustedSignerAddress();\\n    error InvalidEdgeSigner();\\n    error InvalidEdgeSignature(uint256 recoverError);\\n    error InvalidEdgeDataStreamBidAsk(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamPrices(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamExpo(int256 expo);\\n    error RelayEmptyBatch();\\n    error RelayCalldataTooLong(uint256 calldataLength);\\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\\n}\\n\",\"keccak256\":\"0x296f047a10a499806db5b4e88b636074aeef260d60b87e115c50df857228fff0\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n\\n\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a99c1d3590daa8030345ffb09e3f769a93e0178e4c85986dc0e08cc84e8f82c\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary EventUtils {\\n\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(AddressItems memory addresses, string memory key) external pure returns(address) {\\n        (bool found, address value) = getWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(AddressItems memory addresses, string memory key) public pure returns(bool, address) {\\n        for (uint i = 0; i < addresses.items.length; i++) {\\n            if (compareStrings(addresses.items[i].key, key)) {\\n                return (true, addresses.items[i].value);\\n            }\\n        }\\n        return (false, address(0));\\n    }\\n\\n    function getArray(AddressItems memory addresses, string memory key) external pure\\n    returns(address[] memory) {\\n        (bool found, address[] memory value) = getArrayWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(AddressItems memory addresses, string memory key) public pure\\n    returns(bool, address[] memory) {\\n        for (uint i = 0; i < addresses.arrayItems.length; i++) {\\n            if (compareStrings(addresses.arrayItems[i].key, key)) {\\n                return (true, addresses.arrayItems[i].value);\\n            }\\n        }\\n        address[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(UintItems memory items, string memory key) external pure returns(uint256) {\\n        (bool found, uint256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(UintItems memory items, string memory key) public pure returns(bool, uint256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(UintItems memory items, string memory key) external pure\\n    returns(uint256[] memory) {\\n        (bool found, uint256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(UintItems memory items, string memory key) public pure\\n    returns(bool, uint256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        uint256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(IntItems memory items, string memory key) external pure returns(int256) {\\n        (bool found, int256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(IntItems memory items, string memory key) public pure returns(bool, int256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(IntItems memory items, string memory key) external pure\\n    returns(int256[] memory) {\\n        (bool found, int256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(IntItems memory items, string memory key) public pure\\n    returns(bool, int256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        int256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BoolItems memory items, string memory key) external pure returns(bool) {\\n        (bool found, bool value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BoolItems memory items, string memory key) public pure returns(bool, bool) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, false);\\n    }\\n\\n    function getArray(BoolItems memory items, string memory key) external pure\\n    returns(bool[] memory) {\\n        (bool found, bool[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BoolItems memory items, string memory key) public pure\\n    returns(bool, bool[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bool[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(Bytes32Items memory items, string memory key) external pure returns(bytes32) {\\n        (bool found, bytes32 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(Bytes32Items memory items, string memory key) public pure returns(bool, bytes32) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(Bytes32Items memory items, string memory key) external pure\\n    returns(bytes32[] memory) {\\n        (bool found, bytes32[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(Bytes32Items memory items, string memory key) public pure\\n    returns(bool, bytes32[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes32[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BytesItems memory items, string memory key) external pure returns(bytes memory) {\\n        (bool found, bytes memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BytesItems memory items, string memory key) public pure returns(bool, bytes memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(BytesItems memory items, string memory key) external pure\\n    returns(bytes[] memory) {\\n        (bool found, bytes[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BytesItems memory items, string memory key) public pure\\n    returns(bool, bytes[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(StringItems memory items, string memory key) external pure returns(string memory) {\\n        (bool found, string memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(StringItems memory items, string memory key) public pure returns(bool, string memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(StringItems memory items, string memory key) external pure\\n    returns(string[] memory) {\\n        (bool found, string[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(StringItems memory items, string memory key) public pure\\n    returns(bool, string[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        string[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x301b8df4bd9f7cd46804d6a732e8f092b59fda0450c59ef33845eda262f5e6d5\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./MarketPoolValueInfo.sol\\\";\\n\\nlibrary MarketEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // this event is emitted before a deposit or withdrawal\\n    // it provides information of the pool state so that the amount\\n    // of market tokens minted or amount withdrawn from the pool can be checked\\n    function emitMarketPoolValueInfo(\\n        EventEmitter eventEmitter,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueInfo\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    // this event is emitted after a deposit or withdrawal\\n    // it provides information of the updated pool state\\n    // note that the pool state can change even without a deposit / withdrawal\\n    // e.g. borrowing fees can increase the pool's value with time, trader pnl\\n    // will change as index prices change\\n    function emitMarketPoolValueUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 actionType,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(2);\\n        eventData.bytes32Items.setItem(0, \\\"actionType\\\", actionType);\\n        eventData.bytes32Items.setItem(1, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitSwapImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"SwapImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolDistributed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 distributionAmount,\\n        uint256 nextPositionImpactPoolAmount\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"distributionAmount\\\", distributionAmount);\\n        eventData.uintItems.setItem(1, \\\"nextPositionImpactPoolAmount\\\", nextPositionImpactPoolAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolDistributed\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitTotalPendingImpactAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta,\\n        int256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(2);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.intItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"TotalPendingImpactAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitLentPositionImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"LentPositionImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualSwapInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLongToken,\\n        bytes32 virtualMarketId,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLongToken\\\", isLongToken);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualMarketId\\\", virtualMarketId);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualSwapInventoryUpdated\\\",\\n            Cast.toBytes32(market),\\n            virtualMarketId,\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualPositionInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address token,\\n        bytes32 virtualTokenId,\\n        int256 delta,\\n        int256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualTokenId\\\", virtualTokenId);\\n\\n        eventData.intItems.initItems(2);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.intItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualPositionInventoryUpdated\\\",\\n            Cast.toBytes32(token),\\n            virtualTokenId,\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestInTokensUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestInTokensUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralSumUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralSumUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowing(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 borrowingFactorPerSecond\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"borrowingFactorPerSecond\\\", borrowingFactorPerSecond);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"Borrowing\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowingFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CumulativeBorrowingFactorUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFunding(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 fundingFactorPerSecond\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"fundingFactorPerSecond\\\", fundingFactorPerSecond);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"Funding\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeeAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeeAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeesClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeesClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableCollateralUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(3, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableCollateralUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitUiFeeFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address account,\\n        uint256 uiFeeFactor\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"uiFeeFactor\\\", uiFeeFactor);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"UiFeeFactorUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolWithdrawal(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address receiver,\\n        uint256 amount\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolWithdrawal\\\",\\n            Cast.toBytes32(receiver),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcb3ae80582c636eb8b5bb09a14e5743e80290b4667dc982162b6fbdec158feb4\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketPoolValueInfo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title MarketPoolInfo\\nlibrary MarketPoolValueInfo {\\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\\n    // @param value the pool value\\n    // @param longTokenAmount the amount of long token in the pool\\n    // @param shortTokenAmount the amount of short token in the pool\\n    // @param longTokenUsd the USD value of the long tokens in the pool\\n    // @param shortTokenUsd the USD value of the short tokens in the pool\\n    // @param totalBorrowingFees the total pending borrowing fees for the market\\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\\n    // @param impactPoolAmount the amount of tokens in the impact pool\\n    // @param longPnl the pending pnl of long positions\\n    // @param shortPnl the pending pnl of short positions\\n    // @param netPnl the net pnl of long and short positions\\n    struct Props {\\n        int256 poolValue;\\n        int256 longPnl;\\n        int256 shortPnl;\\n        int256 netPnl;\\n\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 longTokenUsd;\\n        uint256 shortTokenUsd;\\n\\n        uint256 totalBorrowingFees;\\n        uint256 borrowingFeePoolFactor;\\n\\n        uint256 impactPoolAmount;\\n        uint256 lentImpactPoolAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xc66ec1c4f9e257e5e652c70be8e73c68df28c8a66ba8925ccf19f1d88a77f10c\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_KEEPER role.\\n     * Hash: 0xfa89e7b5ea0a346d73c71d7d6a3512b9f2ea2c2e6c5fb8211ec351d35deef0f4\\n     */\\n    bytes32 public constant CONTRIBUTOR_KEEPER = keccak256(abi.encode(\\\"CONTRIBUTOR_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_DISTRIBUTOR role.\\n     * Hash: 0xcdf6da7ad30d8b9afea66fb1cb11b1b7d0b50e9b30b69561a3ca52c39251360c\\n     */\\n    bytes32 public constant CONTRIBUTOR_DISTRIBUTOR = keccak256(abi.encode(\\\"CONTRIBUTOR_DISTRIBUTOR\\\"));\\n}\\n\",\"keccak256\":\"0xf82e35db50f74b43c8598bacd2df901f3c1a292302680a1b02b076fdb387a6ef\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIMITED_CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyLimitedConfigKeeper() {\\n        _validateRole(Role.LIMITED_CONFIG_KEEPER, \\\"LIMITED_CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_KEEPER role to call the function.\\n     */\\n    modifier onlyContributorKeeper() {\\n        _validateRole(Role.CONTRIBUTOR_KEEPER, \\\"CONTRIBUTOR_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_DISTRIBUTOR role to call the function.\\n     */\\n    modifier onlyContributorDistributor() {\\n        _validateRole(Role.CONTRIBUTOR_DISTRIBUTOR, \\\"CONTRIBUTOR_DISTRIBUTOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd5f2168b69a6c70dc6aacf850491a4eb7c3eaf7b9078deaa83aee0febb9b5ab\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n\\n    function toBytes32(string memory value) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyString = bytes(value);\\n        if (tempEmptyString.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(value, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a bytes array to a uint256.\\n     * Handles cases where the uint256 stored in bytes is stored with or without padding.\\n     * @param uint256AsBytes The bytes array representing the uint256 value.\\n     * @return value The uint256 value obtained from the bytes array.\\n     */\\n    function bytesToUint256(bytes memory uint256AsBytes) internal pure returns (uint256) {\\n        uint256 length = uint256AsBytes.length;\\n\\n        if(length > 32) {\\n            revert Errors.Uint256AsBytesLengthExceeds32Bytes(length);\\n        }\\n\\n        if (length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 value;\\n\\n        assembly {\\n            value := mload(add(uint256AsBytes, 32))\\n        }\\n\\n        return value = value >> (8 * (32 - length));\\n    }\\n\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint192ToBytes(uint192 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint32ToBytes(uint32 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function int32ToBytes(int32 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n//        bytes memory expoBytes = new bytes(1);\\n//        if (x < 0) {\\n//            expoBytes[0] = bytes1(uint8(-x)); // Use absolute value, e.g., uint8(8) -> 0x08\\n//        } else {\\n//            expoBytes[0] = bytes1(uint8(x));\\n//        }\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n//        return expoBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x6517a575dcc80e47912efac82d44ba1d8a89e2c40f8eb2f753304f0535f7ae35\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6142d961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061013d5760003560e01c806306103470146101425780630aa77b6a1461016457806313823111146101845780631daaefa1146101a45780631f20ad33146101c457806328d445cb146101e4578063387a0f131461020457806340bcc0791461022457806346ff7f441461024457806347bc6453146102645780634c7c4a6d146102845780634ddb3d81146102a45780634ee4c831146102c45780635375a207146102e4578063555a9979146103045780635bb3aa73146103245780636d6b20591461034457806386f48e48146103645780638983b3ff14610384578063a814bb6f146103a4578063b3d188de146103c4578063d206b705146103e4578063d52463b214610404578063d791fbb314610424578063e974c64c14610444575b600080fd5b81801561014e57600080fd5b5061016261015d366004612d3f565b610464565b005b81801561017057600080fd5b5061016261017f366004612dab565b61060c565b81801561019057600080fd5b5061016261019f366004612ef0565b610771565b8180156101b057600080fd5b506101626101bf366004612dab565b610b96565b8180156101d057600080fd5b506101626101df366004612f56565b610cc1565b8180156101f057600080fd5b506101626101ff366004612d3f565b610e93565b81801561021057600080fd5b5061016261021f366004612fcd565b611007565b81801561023057600080fd5b5061016261023f36600461300e565b611110565b81801561025057600080fd5b5061016261025f366004612fcd565b61122c565b81801561027057600080fd5b5061016261027f366004612d3f565b6112f3565b81801561029057600080fd5b5061016261029f366004613054565b611467565b8180156102b057600080fd5b506101626102bf36600461300e565b6115d9565b8180156102d057600080fd5b506101626102df3660046130ce565b6116d9565b8180156102f057600080fd5b506101626102ff366004612fcd565b611861565b81801561031057600080fd5b5061016261031f36600461300e565b611934565b81801561033057600080fd5b5061016261033f366004613134565b611a34565b81801561035057600080fd5b5061016261035f366004612d3f565b611af5565b81801561037057600080fd5b5061016261037f366004613185565b611c62565b81801561039057600080fd5b5061016261039f3660046131d6565b611d8d565b8180156103b057600080fd5b506101626103bf366004613257565b611f9b565b8180156103d057600080fd5b506101626103df3660046132ba565b612129565b8180156103f057600080fd5b506101626103ff366004613346565b6122ec565b81801561041057600080fd5b5061016261041f366004613387565b612428565b81801561043057600080fd5b5061016261043f366004612d3f565b61281a565b81801561045057600080fd5b5061016261045f36600461300e565b61298e565b61046c612c21565b8051610479906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516104a59160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516104da9160019088612b10565b60608101516104ea906001612aab565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516105199160009087612b6d565b6020810151610529906002612aab565b61056260006040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b61059b60016040518060400160405280600581526020016476616c756560d81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e46105b388612c15565b836040518363ffffffff1660e01b81526004016105d1929190613bb4565b600060405180830381600087803b1580156105eb57600080fd5b505af11580156105ff573d6000803e3d6000fd5b5050505050505050505050565b610614612c21565b8051610621906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161064d9160009088612b10565b6040805180820190915260058152643a37b5b2b760d91b602082015281516106789160019087612b10565b6040810151610688906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516106b49160009086612bc2565b60208101516106c4906001612aab565b6107016000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e461071987612c15565b836040518363ffffffff1660e01b8152600401610737929190613c09565b600060405180830381600087803b15801561075157600080fd5b505af1158015610765573d6000803e3d6000fd5b50505050505050505050565b610779612c21565b6080810151610789906002612aab565b60408051808201909152600a815269616374696f6e5479706560b01b602082015260808201516107bc9160009089612bc2565b60408051808201909152600881526774726164654b657960c01b602082015260808201516107ed9160019088612bc2565b80516107fa906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516108269160009087612b10565b6040810151610836906004612aab565b6040805180820182526009815268706f6f6c56616c756560b81b6020820152845191830151610869929091600091612bc2565b6108a86001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612bc2909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b602082015284820151918301516108dc929091600291612bc2565b60408051808201825260068152651b995d141b9b60d21b602082015260608501519183015161090f929091600391612bc2565b602081015161091f906008612aab565b61096660006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612bc2909392919063ffffffff16565b6109ae60016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612bc2909392919063ffffffff16565b6109f260026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612bc2909392919063ffffffff16565b610a3760036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612bc2909392919063ffffffff16565b610a82600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612bc2909392919063ffffffff16565b610ad16005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612bc2909392919063ffffffff16565b610b1a60066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612bc2909392919063ffffffff16565b610b606007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e4610b7886612c15565b836040518363ffffffff1660e01b81526004016105d1929190613c54565b610b9e612c21565b8051610bab906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610bd79160009088612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610c029160019087612b10565b6040810151610c12906001612aab565b604080518082018252600581526464656c746160d81b602082015290820151610c3e9160009086612bc2565b6020810151610c4e906001612aab565b610c8b6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e4610ca387612c15565b836040518363ffffffff1660e01b8152600401610737929190613c9a565b610cc9612c21565b8051610cd6906003612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610d02916000908a612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610d2d9160019089612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610d5a9160029088612b10565b6020810151610d6a906003612aab565b610da360006040518060400160405280600581526020016464656c746160d81b815250868460200151612bc2909392919063ffffffff16565b610de06001604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612bc2909392919063ffffffff16565b610e2160026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b876001600160a01b03166324de01e4610e3987612c15565b836040518363ffffffff1660e01b8152600401610e57929190613cdb565b600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505050505050505050505050565b610e9b612c21565b8051610ea8906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610ed49160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610f099160019088612b10565b6060810151610f19906001612aab565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151610f489160009087612b6d565b6040810151610f58906001612aab565b604080518082018252600581526464656c746160d81b602082015290820151610f849160009086612bc2565b6020810151610f94906001612aab565b610fd16000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e4610fe988612c15565b836040518363ffffffff1660e01b81526004016105d1929190613d22565b61100f612c21565b805161101c906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516110489160009086612b10565b6020810151611058906001612aab565b6110a2600060405180604001604052806016815260200175199d5b991a5b99d19858dd1bdc94195c94d958dbdb9960521b815250848460200151612bc2909392919063ffffffff16565b836001600160a01b03166324de01e46110ba85612c15565b836040518363ffffffff1660e01b81526004016110d8929190613d65565b600060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b5050505050505050565b611118612c21565b8051611125906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516111519160009087612b10565b6040810151611161906002612aab565b604080518082018252600581526464656c746160d81b60208201529082015161118d9160009086612bc2565b60408051808201825260098152686e65787456616c756560b81b6020820152908201516111bd9160019085612bc2565b846001600160a01b03166324de01e46111d586612c15565b836040518363ffffffff1660e01b81526004016111f3929190613d9c565b600060405180830381600087803b15801561120d57600080fd5b505af1158015611221573d6000803e3d6000fd5b505050505050505050565b611234612c21565b8051611241906001612aab565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161126e9160009086612b10565b602081015161127e906001612aab565b6112bd60006040518060400160405280600b81526020016a3ab4a332b2a330b1ba37b960a91b815250848460200151612bc2909392919063ffffffff16565b836001600160a01b03166324de01e46112d585612c15565b836040518363ffffffff1660e01b81526004016110d8929190613de9565b6112fb612c21565b8051611308906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516113349160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516113699160019088612b10565b6060810151611379906001612aab565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516113a89160009087612b6d565b60408101516113b8906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516113e49160009086612bc2565b60208101516113f4906001612aab565b6114316000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e461144988612c15565b836040518363ffffffff1660e01b81526004016105d1929190613e2b565b61146f612c21565b805161147c906003612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516114a8916000908a612b10565b6040805180820190915260058152643a37b5b2b760d91b602082015281516114d39160019089612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516115009160029087612b10565b6020810151611510906003612aab565b61154b60006040518060400160405280600781526020016674696d654b657960c81b815250878460200151612bc2909392919063ffffffff16565b61158460016040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b6115c16002604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b876001600160a01b03166324de01e4610e3986612c15565b6115e1612c21565b80516115ee906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161161a9160009087612b10565b604081015161162a906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516116569160009086612bc2565b6020810151611666906001612aab565b6116a36000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e46116bb86612c15565b836040518363ffffffff1660e01b81526004016111f3929190613e6f565b6116e1612c21565b80516116ee906004612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161171a916000908a612b10565b6040805180820190915260058152643a37b5b2b760d91b602082015281516117459160019089612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516117729160029088612b10565b6040805180820190915260088152673932b1b2b4bb32b960c11b602082015281516117a09160039087612b10565b60208101516117b0906002612aab565b6117ea600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612bc2909392919063ffffffff16565b61182b60016040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b876001600160a01b03166324de01e461184387612c15565b836040518363ffffffff1660e01b8152600401610e57929190613ec8565b611869612c21565b8051611876906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516118a29160009086612b10565b60208101516118b2906001612aab565b6118fe600060405180604001604052806018815260200177189bdc9c9bddda5b99d19858dd1bdc94195c94d958dbdb9960421b815250848460200151612bc2909392919063ffffffff16565b836001600160a01b03166324de01e461191685612c15565b836040518363ffffffff1660e01b81526004016110d8929190613f0a565b61193c612c21565b8051611949906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516119759160009087612b10565b6040810151611985906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516119b19160009086612bc2565b60208101516119c1906001612aab565b6119fe6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e4611a1686612c15565b836040518363ffffffff1660e01b81526004016111f3929190613f43565b611a3c612c21565b8051611a49906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611a759160009087612b10565b6020810151611a85906001612aab565b611abf600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e4611ad785612c15565b836040518363ffffffff1660e01b81526004016111f3929190613f90565b611afd612c21565b8051611b0a906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611b369160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151611b6b9160019088612b10565b6060810151611b7b906001612aab565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151611baa9160009087612b6d565b6020810151611bba906002612aab565b611bf360006040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b611c2c60016040518060400160405280600581526020016476616c756560d81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e4611c4488612c15565b836040518363ffffffff1660e01b81526004016105d1929190613fdc565b611c6a612c21565b8051611c77906001612aab565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611ca29160009088612b10565b6080810151611cb2906001612aab565b60408051808201909152600e81526d1d9a5c9d1d585b151bdad95b925960921b60208201526080820151611ce99160009087612bc2565b6040810151611cf9906002612aab565b604080518082018252600581526464656c746160d81b602082015290820151611d259160009086612bc2565b60408051808201825260098152686e65787456616c756560b81b602082015290820151611d559160019085612bc2565b856001600160a01b03166363d16363611d6d87612c15565b86846040518463ffffffff1660e01b815260040161073793929190614036565b611d95612c21565b8051611da2906003612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611dce916000908b612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611df9916001908a612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611e269160029088612b10565b6020810151611e36906004612aab565b611e7160006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612bc2909392919063ffffffff16565b611eaa60016040518060400160405280600581526020016464656c746160d81b815250868460200151612bc2909392919063ffffffff16565b611ee76002604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612bc2909392919063ffffffff16565b611f2860036040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b886001600160a01b03166324de01e4611f4087612c15565b836040518363ffffffff1660e01b8152600401611f5e929190614089565b600060405180830381600087803b158015611f7857600080fd5b505af1158015611f8c573d6000803e3d6000fd5b50505050505050505050505050565b611fa3612c21565b8051611fb0906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611fdc9160009089612b10565b6060810151611fec906001612aab565b60408051808201909152600b81526a34b9a637b733aa37b5b2b760a91b602082015260608201516120209160009088612b6d565b6080810151612030906001612aab565b60408051808201909152600f81526e1d9a5c9d1d585b13585c9ad95d1259608a1b602082015260808201516120689160009087612bc2565b6040810151612078906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516120a49160009086612bc2565b60208101516120b4906001612aab565b6120f16000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166363d1636361210988612c15565b86846040518463ffffffff1660e01b81526004016105d1939291906140d3565b612131612c21565b805161213e906004612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161216a916000908b612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151612195916001908a612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516121c29160029088612b10565b6040805180820190915260088152673932b1b2b4bb32b960c11b602082015281516121f09160039087612b10565b6020810151612200906003612aab565b61223b60006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612bc2909392919063ffffffff16565b612275600160405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612bc2909392919063ffffffff16565b6122b660026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b886001600160a01b03166324de01e46122ce87612c15565b836040518363ffffffff1660e01b8152600401611f5e929190614124565b6122f4612c21565b8051612301906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161232d9160009088612b10565b606081015161233d906001612aab565b60408051808201909152600681526569734c6f6e6760d01b6020820152606082015161236c9160009087612b6d565b602081015161237c906002612aab565b6123b560006040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b6123f26001604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e461240a87612c15565b836040518363ffffffff1660e01b8152600401610737929190614165565b612430612c21565b6080810151612440906001612aab565b60408051808201909152600881526774726164654b657960c01b602082015260808201516124719160009088612bc2565b805161247e906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516124aa9160009087612b10565b60408101516124ba906004612aab565b6040805180820182526009815268706f6f6c56616c756560b81b60208201528451918301516124ed929091600091612bc2565b61252c6001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612bc2909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151612560929091600291612bc2565b60408051808201825260068152651b995d141b9b60d21b6020820152606085015191830151612593929091600391612bc2565b60208101516125a3906008612aab565b6125ea60006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612bc2909392919063ffffffff16565b61263260016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612bc2909392919063ffffffff16565b61267660026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612bc2909392919063ffffffff16565b6126bb60036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612bc2909392919063ffffffff16565b612706600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612bc2909392919063ffffffff16565b6127556005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612bc2909392919063ffffffff16565b61279e60066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612bc2909392919063ffffffff16565b6127e46007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e46127fc86612c15565b836040518363ffffffff1660e01b81526004016107379291906141b2565b612822612c21565b805161282f906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161285b9160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516128909160019088612b10565b60608101516128a0906001612aab565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516128cf9160009087612b6d565b60408101516128df906001612aab565b604080518082018252600581526464656c746160d81b60208201529082015161290b9160009086612bc2565b602081015161291b906001612aab565b6129586000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e461297088612c15565b836040518363ffffffff1660e01b81526004016105d19291906141f5565b612996612c21565b80516129a3906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516129cf9160009087612b10565b60208101516129df906002612aab565b612a25600060405180604001604052806012815260200171191a5cdd1c9a589d5d1a5bdb905b5bdd5b9d60721b815250858460200151612bc2909392919063ffffffff16565b612a7560016040518060400160405280601c81526020017b1b995e1d141bdcda5d1a5bdb925b5c1858dd141bdbdb105b5bdd5b9d60221b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e4612a8d86612c15565b836040518363ffffffff1660e01b81526004016111f3929190614240565b806001600160401b03811115612ac357612ac3612e06565b604051908082528060200260200182016040528015612b0957816020015b604080518082019091526060815260006020820152815260200190600190039081612ae15790505b5090915250565b8184600001518481518110612b2757612b2761428d565b6020026020010151600001819052508084600001518481518110612b4d57612b4d61428d565b6020908102919091018101516001600160a01b0390921691015250505050565b8184600001518481518110612b8457612b8461428d565b6020026020010151600001819052508084600001518481518110612baa57612baa61428d565b60209081029190910181015191151591015250505050565b8184600001518481518110612bd957612bd961428d565b6020026020010151600001819052508084600001518481518110612bff57612bff61428d565b6020026020010151602001818152505050505050565b6001600160a01b031690565b604080516101208101909152606060e0820181815261010083019190915281908152602001612c63604051806040016040528060608152602001606081525090565b8152602001612c85604051806040016040528060608152602001606081525090565b8152602001612ca7604051806040016040528060608152602001606081525090565b8152602001612cc9604051806040016040528060608152602001606081525090565b8152602001612ceb604051806040016040528060608152602001606081525090565b8152602001612d0d604051806040016040528060608152602001606081525090565b905290565b6001600160a01b0381168114612d2757600080fd5b50565b80358015158114612d3a57600080fd5b919050565b60008060008060008060c08789031215612d5857600080fd5b8635612d6381612d12565b95506020870135612d7381612d12565b94506040870135612d8381612d12565b9350612d9160608801612d2a565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215612dc357600080fd5b8535612dce81612d12565b94506020860135612dde81612d12565b93506040860135612dee81612d12565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b0381118282101715612e4d57634e487b7160e01b600052604160045260246000fd5b60405290565b60006101808284031215612e6657600080fd5b612e6e612e1c565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b6000806000806000806102208789031215612f0a57600080fd5b8635612f1581612d12565b955060208701359450604087013593506060870135612f3381612d12565b9250612f428860808901612e53565b915061020087013590509295509295509295565b600080600080600080600060e0888a031215612f7157600080fd5b8735612f7c81612d12565b96506020880135612f8c81612d12565b95506040880135612f9c81612d12565b94506060880135612fac81612d12565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600060608486031215612fe257600080fd5b8335612fed81612d12565b92506020840135612ffd81612d12565b929592945050506040919091013590565b6000806000806080858703121561302457600080fd5b843561302f81612d12565b9350602085013561303f81612d12565b93969395505050506040820135916060013590565b600080600080600080600060e0888a03121561306f57600080fd5b873561307a81612d12565b9650602088013561308a81612d12565b9550604088013561309a81612d12565b94506060880135935060808801356130b181612d12565b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600060e0888a0312156130e957600080fd5b87356130f481612d12565b9650602088013561310481612d12565b9550604088013561311481612d12565b9450606088013561312481612d12565b935060808801356130b181612d12565b6000806000806080858703121561314a57600080fd5b843561315581612d12565b9350602085013561316581612d12565b9250604085013561317581612d12565b9396929550929360600135925050565b600080600080600060a0868803121561319d57600080fd5b85356131a881612d12565b945060208601356131b881612d12565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600080610100898b0312156131f357600080fd5b88356131fe81612d12565b9750602089013561320e81612d12565b9650604089013561321e81612d12565b955060608901359450608089013561323581612d12565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060c0878903121561327057600080fd5b863561327b81612d12565b9550602087013561328b81612d12565b945061329960408801612d2a565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b0312156132d757600080fd5b88356132e281612d12565b975060208901356132f281612d12565b9650604089013561330281612d12565b955060608901359450608089013561331981612d12565b935060a089013561332981612d12565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600060a0868803121561335e57600080fd5b853561336981612d12565b9450602086013561337981612d12565b9350612dee60408701612d2a565b600080600080600061020086880312156133a057600080fd5b85356133ab81612d12565b94506020860135935060408601356133c281612d12565b92506133d18760608801612e53565b949793965091946101e0013592915050565b6000815180845260005b81811015613409576020818501810151868301820152016133ed565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a5282516040815181885261346a828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b808310156134af5783516001600160a01b03168252928901926001929092019190890190613486565b509b88019b9650505091850191600101613448565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561354957898603605f1901845284518051888852613523898901826133e3565b918401516001600160a01b031697840197909752955093810193928101926001016134ff565b50808801519550888503818a0152505050506135658183613429565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a528251604081518188526135af828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b808310156135eb57835182529289019260019290920191908901906135cb565b509b88019b965050509185019160010161358d565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561366e57898603605f1901845284518051888852613651898901826133e3565b91840151978401979097529550938101939281019260010161362d565b50808801519550888503818a015250505050613565818361356e565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561366e57898603605f19018452845180518888526136db898901826133e3565b9184015197840197909752955093810193928101926001016136b7565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a52825160408151818852613739828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b8083101561377757835115158252928901926001929092019190890190613755565b509b88019b9650505091850191600101613717565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156137fc57898603605f19018452845180518888526137dd898901826133e3565b91840151151597840197909752955093810193928101926001016137b9565b50808801519550888503818a01525050505061356581836136f8565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a52825160408151818852613859828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b808310156138955783518252928901926001929092019190890190613875565b509b88019b9650505091850191600101613837565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561391857898603605f19018452845180518888526138fb898901826133e3565b9184015197840197909752955093810193928101926001016138d7565b50808801519550888503818a0152505050506135658183613818565b600081518084526020808501808196506005915083821b81018387016000805b878110156139df578484038b52825160408151818752613976828801826133e3565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b828110156139c857601f198583030184526139b68287516133e3565b958d0195938d0193915060010161399a565b509e8b019e97505050938801935050600101613954565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613a6b57898603605f1901845284518051888852613a3f898901826133e3565b9184015188830389860152919050613a5781836133e3565b975050509381019392810192600101613a1b565b50808801519550888503818a0152505050506135658183613934565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613a6b57898603605f1901845284518051888852613ad8898901826133e3565b9184015188830389860152919050613af081836133e3565b975050509381019392810192600101613ab4565b6000815160e08452613b1960e08501826134d2565b905060208301518482036020860152613b328282613600565b91505060408301518482036040860152613b4c828261368a565b91505060608301518482036060860152613b66828261378c565b91505060808301518482036080860152613b8082826138aa565b91505060a083015184820360a0860152613b9a82826139ee565b91505060c083015184820360c08601526135658282613a87565b60608152601e60608201527f46756e64696e67466565416d6f756e7450657253697a65557064617465640000608082015282602082015260a060408201526000613c0160a0830184613b04565b949350505050565b60608152601b60608201527a14ddd85c125b5c1858dd141bdbdb105b5bdd5b9d155c19185d1959602a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601660608201527513585c9ad95d141bdbdb15985b1d59555c19185d195960521b608082015282602082015260a060408201526000613c0160a0830184613b04565b606081526011606082015270141bdbdb105b5bdd5b9d155c19185d1959607a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601760608201527610db185a5b58589b19519d5b991a5b99d55c19185d1959604a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601360608201527213dc195b925b9d195c995cdd155c19185d1959606a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152600760608201526646756e64696e6760c81b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601f60608201527f546f74616c50656e64696e67496d70616374416d6f756e745570646174656400608082015282602082015260a060408201526000613c0160a0830184613b04565b606081526012606082015271155a519959519858dd1bdc955c19185d195960721b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601460608201527310dbdb1b185d195c985b14dd5b555c19185d195960621b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152602360608201527f4c656e74506f736974696f6e496d70616374506f6f6c416d6f756e74557064616080820152621d195960ea1b60a082015282602082015260c060408201526000613c0160c0830184613b04565b606081526012606082015271119d5b991a5b99d199595cd0db185a5b595960721b608082015282602082015260a060408201526000613c0160a0830184613b04565b606081526009606082015268426f72726f77696e6760b81b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601f60608201527f506f736974696f6e496d70616374506f6f6c416d6f756e745570646174656400608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601c60608201527b141bdcda5d1a5bdb925b5c1858dd141bdbdb15da5d1a191c985dd85b60221b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152602460608201527f436c61696d61626c6546756e64696e67416d6f756e7450657253697a65557064608082015263185d195960e21b60a082015282602082015260c060408201526000613c0160c0830184613b04565b60808152601f60808201527f5669727475616c506f736974696f6e496e76656e746f7279557064617465640060a082015283602082015282604082015260c06060820152600061356560c0830184613b04565b60608152601a60608201527910db185a5b58589b1950dbdb1b185d195c985b155c19185d195960321b608082015282602082015260a060408201526000613c0160a0830184613b04565b60808152601b60808201527a159a5c9d1d585b14ddd85c125b9d995b9d1bdc9e555c19185d1959602a1b60a082015283602082015282604082015260c06060820152600061356560c0830184613b04565b60608152601160608201527010dbdb1b185d195c985b10db185a5b5959607a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152602060608201527f43756d756c6174697665426f72726f77696e67466163746f7255706461746564608082015282602082015260a060408201526000613c0160a0830184613b04565b6060815260136060820152724d61726b6574506f6f6c56616c7565496e666f60681b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601b60608201527a13dc195b925b9d195c995cdd125b951bdad95b9cd55c19185d1959602a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601d60608201527f506f736974696f6e496d70616374506f6f6c4469737472696275746564000000608082015282602082015260a060408201526000613c0160a0830184613b04565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220d6b3124ccfdb69b8cf1a87c08c44494dcb6368c29cb931df83f9105740309e5a64736f6c63430008140033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061013d5760003560e01c806306103470146101425780630aa77b6a1461016457806313823111146101845780631daaefa1146101a45780631f20ad33146101c457806328d445cb146101e4578063387a0f131461020457806340bcc0791461022457806346ff7f441461024457806347bc6453146102645780634c7c4a6d146102845780634ddb3d81146102a45780634ee4c831146102c45780635375a207146102e4578063555a9979146103045780635bb3aa73146103245780636d6b20591461034457806386f48e48146103645780638983b3ff14610384578063a814bb6f146103a4578063b3d188de146103c4578063d206b705146103e4578063d52463b214610404578063d791fbb314610424578063e974c64c14610444575b600080fd5b81801561014e57600080fd5b5061016261015d366004612d3f565b610464565b005b81801561017057600080fd5b5061016261017f366004612dab565b61060c565b81801561019057600080fd5b5061016261019f366004612ef0565b610771565b8180156101b057600080fd5b506101626101bf366004612dab565b610b96565b8180156101d057600080fd5b506101626101df366004612f56565b610cc1565b8180156101f057600080fd5b506101626101ff366004612d3f565b610e93565b81801561021057600080fd5b5061016261021f366004612fcd565b611007565b81801561023057600080fd5b5061016261023f36600461300e565b611110565b81801561025057600080fd5b5061016261025f366004612fcd565b61122c565b81801561027057600080fd5b5061016261027f366004612d3f565b6112f3565b81801561029057600080fd5b5061016261029f366004613054565b611467565b8180156102b057600080fd5b506101626102bf36600461300e565b6115d9565b8180156102d057600080fd5b506101626102df3660046130ce565b6116d9565b8180156102f057600080fd5b506101626102ff366004612fcd565b611861565b81801561031057600080fd5b5061016261031f36600461300e565b611934565b81801561033057600080fd5b5061016261033f366004613134565b611a34565b81801561035057600080fd5b5061016261035f366004612d3f565b611af5565b81801561037057600080fd5b5061016261037f366004613185565b611c62565b81801561039057600080fd5b5061016261039f3660046131d6565b611d8d565b8180156103b057600080fd5b506101626103bf366004613257565b611f9b565b8180156103d057600080fd5b506101626103df3660046132ba565b612129565b8180156103f057600080fd5b506101626103ff366004613346565b6122ec565b81801561041057600080fd5b5061016261041f366004613387565b612428565b81801561043057600080fd5b5061016261043f366004612d3f565b61281a565b81801561045057600080fd5b5061016261045f36600461300e565b61298e565b61046c612c21565b8051610479906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516104a59160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516104da9160019088612b10565b60608101516104ea906001612aab565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516105199160009087612b6d565b6020810151610529906002612aab565b61056260006040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b61059b60016040518060400160405280600581526020016476616c756560d81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e46105b388612c15565b836040518363ffffffff1660e01b81526004016105d1929190613bb4565b600060405180830381600087803b1580156105eb57600080fd5b505af11580156105ff573d6000803e3d6000fd5b5050505050505050505050565b610614612c21565b8051610621906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161064d9160009088612b10565b6040805180820190915260058152643a37b5b2b760d91b602082015281516106789160019087612b10565b6040810151610688906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516106b49160009086612bc2565b60208101516106c4906001612aab565b6107016000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e461071987612c15565b836040518363ffffffff1660e01b8152600401610737929190613c09565b600060405180830381600087803b15801561075157600080fd5b505af1158015610765573d6000803e3d6000fd5b50505050505050505050565b610779612c21565b6080810151610789906002612aab565b60408051808201909152600a815269616374696f6e5479706560b01b602082015260808201516107bc9160009089612bc2565b60408051808201909152600881526774726164654b657960c01b602082015260808201516107ed9160019088612bc2565b80516107fa906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516108269160009087612b10565b6040810151610836906004612aab565b6040805180820182526009815268706f6f6c56616c756560b81b6020820152845191830151610869929091600091612bc2565b6108a86001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612bc2909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b602082015284820151918301516108dc929091600291612bc2565b60408051808201825260068152651b995d141b9b60d21b602082015260608501519183015161090f929091600391612bc2565b602081015161091f906008612aab565b61096660006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612bc2909392919063ffffffff16565b6109ae60016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612bc2909392919063ffffffff16565b6109f260026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612bc2909392919063ffffffff16565b610a3760036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612bc2909392919063ffffffff16565b610a82600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612bc2909392919063ffffffff16565b610ad16005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612bc2909392919063ffffffff16565b610b1a60066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612bc2909392919063ffffffff16565b610b606007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e4610b7886612c15565b836040518363ffffffff1660e01b81526004016105d1929190613c54565b610b9e612c21565b8051610bab906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610bd79160009088612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610c029160019087612b10565b6040810151610c12906001612aab565b604080518082018252600581526464656c746160d81b602082015290820151610c3e9160009086612bc2565b6020810151610c4e906001612aab565b610c8b6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e4610ca387612c15565b836040518363ffffffff1660e01b8152600401610737929190613c9a565b610cc9612c21565b8051610cd6906003612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610d02916000908a612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610d2d9160019089612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610d5a9160029088612b10565b6020810151610d6a906003612aab565b610da360006040518060400160405280600581526020016464656c746160d81b815250868460200151612bc2909392919063ffffffff16565b610de06001604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612bc2909392919063ffffffff16565b610e2160026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b876001600160a01b03166324de01e4610e3987612c15565b836040518363ffffffff1660e01b8152600401610e57929190613cdb565b600060405180830381600087803b158015610e7157600080fd5b505af1158015610e85573d6000803e3d6000fd5b505050505050505050505050565b610e9b612c21565b8051610ea8906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610ed49160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610f099160019088612b10565b6060810151610f19906001612aab565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151610f489160009087612b6d565b6040810151610f58906001612aab565b604080518082018252600581526464656c746160d81b602082015290820151610f849160009086612bc2565b6020810151610f94906001612aab565b610fd16000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e4610fe988612c15565b836040518363ffffffff1660e01b81526004016105d1929190613d22565b61100f612c21565b805161101c906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516110489160009086612b10565b6020810151611058906001612aab565b6110a2600060405180604001604052806016815260200175199d5b991a5b99d19858dd1bdc94195c94d958dbdb9960521b815250848460200151612bc2909392919063ffffffff16565b836001600160a01b03166324de01e46110ba85612c15565b836040518363ffffffff1660e01b81526004016110d8929190613d65565b600060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b5050505050505050565b611118612c21565b8051611125906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516111519160009087612b10565b6040810151611161906002612aab565b604080518082018252600581526464656c746160d81b60208201529082015161118d9160009086612bc2565b60408051808201825260098152686e65787456616c756560b81b6020820152908201516111bd9160019085612bc2565b846001600160a01b03166324de01e46111d586612c15565b836040518363ffffffff1660e01b81526004016111f3929190613d9c565b600060405180830381600087803b15801561120d57600080fd5b505af1158015611221573d6000803e3d6000fd5b505050505050505050565b611234612c21565b8051611241906001612aab565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161126e9160009086612b10565b602081015161127e906001612aab565b6112bd60006040518060400160405280600b81526020016a3ab4a332b2a330b1ba37b960a91b815250848460200151612bc2909392919063ffffffff16565b836001600160a01b03166324de01e46112d585612c15565b836040518363ffffffff1660e01b81526004016110d8929190613de9565b6112fb612c21565b8051611308906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516113349160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516113699160019088612b10565b6060810151611379906001612aab565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516113a89160009087612b6d565b60408101516113b8906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516113e49160009086612bc2565b60208101516113f4906001612aab565b6114316000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e461144988612c15565b836040518363ffffffff1660e01b81526004016105d1929190613e2b565b61146f612c21565b805161147c906003612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516114a8916000908a612b10565b6040805180820190915260058152643a37b5b2b760d91b602082015281516114d39160019089612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516115009160029087612b10565b6020810151611510906003612aab565b61154b60006040518060400160405280600781526020016674696d654b657960c81b815250878460200151612bc2909392919063ffffffff16565b61158460016040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b6115c16002604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b876001600160a01b03166324de01e4610e3986612c15565b6115e1612c21565b80516115ee906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161161a9160009087612b10565b604081015161162a906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516116569160009086612bc2565b6020810151611666906001612aab565b6116a36000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e46116bb86612c15565b836040518363ffffffff1660e01b81526004016111f3929190613e6f565b6116e1612c21565b80516116ee906004612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161171a916000908a612b10565b6040805180820190915260058152643a37b5b2b760d91b602082015281516117459160019089612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516117729160029088612b10565b6040805180820190915260088152673932b1b2b4bb32b960c11b602082015281516117a09160039087612b10565b60208101516117b0906002612aab565b6117ea600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612bc2909392919063ffffffff16565b61182b60016040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b876001600160a01b03166324de01e461184387612c15565b836040518363ffffffff1660e01b8152600401610e57929190613ec8565b611869612c21565b8051611876906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516118a29160009086612b10565b60208101516118b2906001612aab565b6118fe600060405180604001604052806018815260200177189bdc9c9bddda5b99d19858dd1bdc94195c94d958dbdb9960421b815250848460200151612bc2909392919063ffffffff16565b836001600160a01b03166324de01e461191685612c15565b836040518363ffffffff1660e01b81526004016110d8929190613f0a565b61193c612c21565b8051611949906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516119759160009087612b10565b6040810151611985906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516119b19160009086612bc2565b60208101516119c1906001612aab565b6119fe6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e4611a1686612c15565b836040518363ffffffff1660e01b81526004016111f3929190613f43565b611a3c612c21565b8051611a49906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611a759160009087612b10565b6020810151611a85906001612aab565b611abf600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e4611ad785612c15565b836040518363ffffffff1660e01b81526004016111f3929190613f90565b611afd612c21565b8051611b0a906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611b369160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151611b6b9160019088612b10565b6060810151611b7b906001612aab565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151611baa9160009087612b6d565b6020810151611bba906002612aab565b611bf360006040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b611c2c60016040518060400160405280600581526020016476616c756560d81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e4611c4488612c15565b836040518363ffffffff1660e01b81526004016105d1929190613fdc565b611c6a612c21565b8051611c77906001612aab565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611ca29160009088612b10565b6080810151611cb2906001612aab565b60408051808201909152600e81526d1d9a5c9d1d585b151bdad95b925960921b60208201526080820151611ce99160009087612bc2565b6040810151611cf9906002612aab565b604080518082018252600581526464656c746160d81b602082015290820151611d259160009086612bc2565b60408051808201825260098152686e65787456616c756560b81b602082015290820151611d559160019085612bc2565b856001600160a01b03166363d16363611d6d87612c15565b86846040518463ffffffff1660e01b815260040161073793929190614036565b611d95612c21565b8051611da2906003612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611dce916000908b612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611df9916001908a612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611e269160029088612b10565b6020810151611e36906004612aab565b611e7160006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612bc2909392919063ffffffff16565b611eaa60016040518060400160405280600581526020016464656c746160d81b815250868460200151612bc2909392919063ffffffff16565b611ee76002604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612bc2909392919063ffffffff16565b611f2860036040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b886001600160a01b03166324de01e4611f4087612c15565b836040518363ffffffff1660e01b8152600401611f5e929190614089565b600060405180830381600087803b158015611f7857600080fd5b505af1158015611f8c573d6000803e3d6000fd5b50505050505050505050505050565b611fa3612c21565b8051611fb0906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611fdc9160009089612b10565b6060810151611fec906001612aab565b60408051808201909152600b81526a34b9a637b733aa37b5b2b760a91b602082015260608201516120209160009088612b6d565b6080810151612030906001612aab565b60408051808201909152600f81526e1d9a5c9d1d585b13585c9ad95d1259608a1b602082015260808201516120689160009087612bc2565b6040810151612078906001612aab565b604080518082018252600581526464656c746160d81b6020820152908201516120a49160009086612bc2565b60208101516120b4906001612aab565b6120f16000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166363d1636361210988612c15565b86846040518463ffffffff1660e01b81526004016105d1939291906140d3565b612131612c21565b805161213e906004612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161216a916000908b612b10565b6040805180820190915260058152643a37b5b2b760d91b60208201528151612195916001908a612b10565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516121c29160029088612b10565b6040805180820190915260088152673932b1b2b4bb32b960c11b602082015281516121f09160039087612b10565b6020810151612200906003612aab565b61223b60006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612bc2909392919063ffffffff16565b612275600160405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612bc2909392919063ffffffff16565b6122b660026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612bc2909392919063ffffffff16565b886001600160a01b03166324de01e46122ce87612c15565b836040518363ffffffff1660e01b8152600401611f5e929190614124565b6122f4612c21565b8051612301906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161232d9160009088612b10565b606081015161233d906001612aab565b60408051808201909152600681526569734c6f6e6760d01b6020820152606082015161236c9160009087612b6d565b602081015161237c906002612aab565b6123b560006040518060400160405280600581526020016464656c746160d81b815250858460200151612bc2909392919063ffffffff16565b6123f26001604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e461240a87612c15565b836040518363ffffffff1660e01b8152600401610737929190614165565b612430612c21565b6080810151612440906001612aab565b60408051808201909152600881526774726164654b657960c01b602082015260808201516124719160009088612bc2565b805161247e906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516124aa9160009087612b10565b60408101516124ba906004612aab565b6040805180820182526009815268706f6f6c56616c756560b81b60208201528451918301516124ed929091600091612bc2565b61252c6001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612bc2909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151612560929091600291612bc2565b60408051808201825260068152651b995d141b9b60d21b6020820152606085015191830151612593929091600391612bc2565b60208101516125a3906008612aab565b6125ea60006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612bc2909392919063ffffffff16565b61263260016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612bc2909392919063ffffffff16565b61267660026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612bc2909392919063ffffffff16565b6126bb60036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612bc2909392919063ffffffff16565b612706600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612bc2909392919063ffffffff16565b6127556005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612bc2909392919063ffffffff16565b61279e60066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612bc2909392919063ffffffff16565b6127e46007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612bc2909392919063ffffffff16565b856001600160a01b03166324de01e46127fc86612c15565b836040518363ffffffff1660e01b81526004016107379291906141b2565b612822612c21565b805161282f906002612aab565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161285b9160009089612b10565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b602082015281516128909160019088612b10565b60608101516128a0906001612aab565b60408051808201909152600681526569734c6f6e6760d01b602082015260608201516128cf9160009087612b6d565b60408101516128df906001612aab565b604080518082018252600581526464656c746160d81b60208201529082015161290b9160009086612bc2565b602081015161291b906001612aab565b6129586000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612bc2909392919063ffffffff16565b866001600160a01b03166324de01e461297088612c15565b836040518363ffffffff1660e01b81526004016105d19291906141f5565b612996612c21565b80516129a3906001612aab565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516129cf9160009087612b10565b60208101516129df906002612aab565b612a25600060405180604001604052806012815260200171191a5cdd1c9a589d5d1a5bdb905b5bdd5b9d60721b815250858460200151612bc2909392919063ffffffff16565b612a7560016040518060400160405280601c81526020017b1b995e1d141bdcda5d1a5bdb925b5c1858dd141bdbdb105b5bdd5b9d60221b815250848460200151612bc2909392919063ffffffff16565b846001600160a01b03166324de01e4612a8d86612c15565b836040518363ffffffff1660e01b81526004016111f3929190614240565b806001600160401b03811115612ac357612ac3612e06565b604051908082528060200260200182016040528015612b0957816020015b604080518082019091526060815260006020820152815260200190600190039081612ae15790505b5090915250565b8184600001518481518110612b2757612b2761428d565b6020026020010151600001819052508084600001518481518110612b4d57612b4d61428d565b6020908102919091018101516001600160a01b0390921691015250505050565b8184600001518481518110612b8457612b8461428d565b6020026020010151600001819052508084600001518481518110612baa57612baa61428d565b60209081029190910181015191151591015250505050565b8184600001518481518110612bd957612bd961428d565b6020026020010151600001819052508084600001518481518110612bff57612bff61428d565b6020026020010151602001818152505050505050565b6001600160a01b031690565b604080516101208101909152606060e0820181815261010083019190915281908152602001612c63604051806040016040528060608152602001606081525090565b8152602001612c85604051806040016040528060608152602001606081525090565b8152602001612ca7604051806040016040528060608152602001606081525090565b8152602001612cc9604051806040016040528060608152602001606081525090565b8152602001612ceb604051806040016040528060608152602001606081525090565b8152602001612d0d604051806040016040528060608152602001606081525090565b905290565b6001600160a01b0381168114612d2757600080fd5b50565b80358015158114612d3a57600080fd5b919050565b60008060008060008060c08789031215612d5857600080fd5b8635612d6381612d12565b95506020870135612d7381612d12565b94506040870135612d8381612d12565b9350612d9160608801612d2a565b92506080870135915060a087013590509295509295509295565b600080600080600060a08688031215612dc357600080fd5b8535612dce81612d12565b94506020860135612dde81612d12565b93506040860135612dee81612d12565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b0381118282101715612e4d57634e487b7160e01b600052604160045260246000fd5b60405290565b60006101808284031215612e6657600080fd5b612e6e612e1c565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b6000806000806000806102208789031215612f0a57600080fd5b8635612f1581612d12565b955060208701359450604087013593506060870135612f3381612d12565b9250612f428860808901612e53565b915061020087013590509295509295509295565b600080600080600080600060e0888a031215612f7157600080fd5b8735612f7c81612d12565b96506020880135612f8c81612d12565b95506040880135612f9c81612d12565b94506060880135612fac81612d12565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600060608486031215612fe257600080fd5b8335612fed81612d12565b92506020840135612ffd81612d12565b929592945050506040919091013590565b6000806000806080858703121561302457600080fd5b843561302f81612d12565b9350602085013561303f81612d12565b93969395505050506040820135916060013590565b600080600080600080600060e0888a03121561306f57600080fd5b873561307a81612d12565b9650602088013561308a81612d12565b9550604088013561309a81612d12565b94506060880135935060808801356130b181612d12565b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600060e0888a0312156130e957600080fd5b87356130f481612d12565b9650602088013561310481612d12565b9550604088013561311481612d12565b9450606088013561312481612d12565b935060808801356130b181612d12565b6000806000806080858703121561314a57600080fd5b843561315581612d12565b9350602085013561316581612d12565b9250604085013561317581612d12565b9396929550929360600135925050565b600080600080600060a0868803121561319d57600080fd5b85356131a881612d12565b945060208601356131b881612d12565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600080610100898b0312156131f357600080fd5b88356131fe81612d12565b9750602089013561320e81612d12565b9650604089013561321e81612d12565b955060608901359450608089013561323581612d12565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060c0878903121561327057600080fd5b863561327b81612d12565b9550602087013561328b81612d12565b945061329960408801612d2a565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b0312156132d757600080fd5b88356132e281612d12565b975060208901356132f281612d12565b9650604089013561330281612d12565b955060608901359450608089013561331981612d12565b935060a089013561332981612d12565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600060a0868803121561335e57600080fd5b853561336981612d12565b9450602086013561337981612d12565b9350612dee60408701612d2a565b600080600080600061020086880312156133a057600080fd5b85356133ab81612d12565b94506020860135935060408601356133c281612d12565b92506133d18760608801612e53565b949793965091946101e0013592915050565b6000815180845260005b81811015613409576020818501810151868301820152016133ed565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a5282516040815181885261346a828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b808310156134af5783516001600160a01b03168252928901926001929092019190890190613486565b509b88019b9650505091850191600101613448565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561354957898603605f1901845284518051888852613523898901826133e3565b918401516001600160a01b031697840197909752955093810193928101926001016134ff565b50808801519550888503818a0152505050506135658183613429565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a528251604081518188526135af828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b808310156135eb57835182529289019260019290920191908901906135cb565b509b88019b965050509185019160010161358d565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561366e57898603605f1901845284518051888852613651898901826133e3565b91840151978401979097529550938101939281019260010161362d565b50808801519550888503818a015250505050613565818361356e565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561366e57898603605f19018452845180518888526136db898901826133e3565b9184015197840197909752955093810193928101926001016136b7565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a52825160408151818852613739828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b8083101561377757835115158252928901926001929092019190890190613755565b509b88019b9650505091850191600101613717565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156137fc57898603605f19018452845180518888526137dd898901826133e3565b91840151151597840197909752955093810193928101926001016137b9565b50808801519550888503818a01525050505061356581836136f8565b600081518084526020808501808196508360051b810191508286016000805b868110156134c4578385038a52825160408151818852613859828901826133e3565b92890151888403898b01528051808552908a01938693508a0191505b808310156138955783518252928901926001929092019190890190613875565b509b88019b9650505091850191600101613837565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561391857898603605f19018452845180518888526138fb898901826133e3565b9184015197840197909752955093810193928101926001016138d7565b50808801519550888503818a0152505050506135658183613818565b600081518084526020808501808196506005915083821b81018387016000805b878110156139df578484038b52825160408151818752613976828801826133e3565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b828110156139c857601f198583030184526139b68287516133e3565b958d0195938d0193915060010161399a565b509e8b019e97505050938801935050600101613954565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613a6b57898603605f1901845284518051888852613a3f898901826133e3565b9184015188830389860152919050613a5781836133e3565b975050509381019392810192600101613a1b565b50808801519550888503818a0152505050506135658183613934565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613a6b57898603605f1901845284518051888852613ad8898901826133e3565b9184015188830389860152919050613af081836133e3565b975050509381019392810192600101613ab4565b6000815160e08452613b1960e08501826134d2565b905060208301518482036020860152613b328282613600565b91505060408301518482036040860152613b4c828261368a565b91505060608301518482036060860152613b66828261378c565b91505060808301518482036080860152613b8082826138aa565b91505060a083015184820360a0860152613b9a82826139ee565b91505060c083015184820360c08601526135658282613a87565b60608152601e60608201527f46756e64696e67466565416d6f756e7450657253697a65557064617465640000608082015282602082015260a060408201526000613c0160a0830184613b04565b949350505050565b60608152601b60608201527a14ddd85c125b5c1858dd141bdbdb105b5bdd5b9d155c19185d1959602a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601660608201527513585c9ad95d141bdbdb15985b1d59555c19185d195960521b608082015282602082015260a060408201526000613c0160a0830184613b04565b606081526011606082015270141bdbdb105b5bdd5b9d155c19185d1959607a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601760608201527610db185a5b58589b19519d5b991a5b99d55c19185d1959604a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601360608201527213dc195b925b9d195c995cdd155c19185d1959606a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152600760608201526646756e64696e6760c81b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601f60608201527f546f74616c50656e64696e67496d70616374416d6f756e745570646174656400608082015282602082015260a060408201526000613c0160a0830184613b04565b606081526012606082015271155a519959519858dd1bdc955c19185d195960721b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601460608201527310dbdb1b185d195c985b14dd5b555c19185d195960621b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152602360608201527f4c656e74506f736974696f6e496d70616374506f6f6c416d6f756e74557064616080820152621d195960ea1b60a082015282602082015260c060408201526000613c0160c0830184613b04565b606081526012606082015271119d5b991a5b99d199595cd0db185a5b595960721b608082015282602082015260a060408201526000613c0160a0830184613b04565b606081526009606082015268426f72726f77696e6760b81b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601f60608201527f506f736974696f6e496d70616374506f6f6c416d6f756e745570646174656400608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601c60608201527b141bdcda5d1a5bdb925b5c1858dd141bdbdb15da5d1a191c985dd85b60221b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152602460608201527f436c61696d61626c6546756e64696e67416d6f756e7450657253697a65557064608082015263185d195960e21b60a082015282602082015260c060408201526000613c0160c0830184613b04565b60808152601f60808201527f5669727475616c506f736974696f6e496e76656e746f7279557064617465640060a082015283602082015282604082015260c06060820152600061356560c0830184613b04565b60608152601a60608201527910db185a5b58589b1950dbdb1b185d195c985b155c19185d195960321b608082015282602082015260a060408201526000613c0160a0830184613b04565b60808152601b60808201527a159a5c9d1d585b14ddd85c125b9d995b9d1bdc9e555c19185d1959602a1b60a082015283602082015282604082015260c06060820152600061356560c0830184613b04565b60608152601160608201527010dbdb1b185d195c985b10db185a5b5959607a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152602060608201527f43756d756c6174697665426f72726f77696e67466163746f7255706461746564608082015282602082015260a060408201526000613c0160a0830184613b04565b6060815260136060820152724d61726b6574506f6f6c56616c7565496e666f60681b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601b60608201527a13dc195b925b9d195c995cdd125b951bdad95b9cd55c19185d1959602a1b608082015282602082015260a060408201526000613c0160a0830184613b04565b60608152601d60608201527f506f736974696f6e496d70616374506f6f6c4469737472696275746564000000608082015282602082015260a060408201526000613c0160a0830184613b04565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220d6b3124ccfdb69b8cf1a87c08c44494dcb6368c29cb931df83f9105740309e5a64736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}