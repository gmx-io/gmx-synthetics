{
  "address": "0xBbCdA58c228Bb29B5769778181c81Ac8aC546c11",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccount",
          "type": "address"
        }
      ],
      "name": "GovSetCodeOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        }
      ],
      "name": "RegisterCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        }
      ],
      "name": "SetCodeOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevGov",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGov",
          "type": "address"
        }
      ],
      "name": "SetGov",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "SetHandler",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discountShare",
          "type": "uint256"
        }
      ],
      "name": "SetReferrerDiscountShare",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        }
      ],
      "name": "SetReferrerTier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tierId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRebate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discountShare",
          "type": "uint256"
        }
      ],
      "name": "SetTier",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "code",
          "type": "bytes32"
        }
      ],
      "name": "SetTraderReferralCode",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "codeOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getTraderReferralInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_code",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_newAccount",
          "type": "address"
        }
      ],
      "name": "govSetCodeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isHandler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerDiscountShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_code",
          "type": "bytes32"
        }
      ],
      "name": "registerCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_code",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_newAccount",
          "type": "address"
        }
      ],
      "name": "setCodeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_handler",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_discountShare",
          "type": "uint256"
        }
      ],
      "name": "setReferrerDiscountShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tierId",
          "type": "uint256"
        }
      ],
      "name": "setReferrerTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tierId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalRebate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_discountShare",
          "type": "uint256"
        }
      ],
      "name": "setTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_code",
          "type": "bytes32"
        }
      ],
      "name": "setTraderReferralCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_code",
          "type": "bytes32"
        }
      ],
      "name": "setTraderReferralCodeByUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalRebate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "traderReferralCodes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGov",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb231a8169dd68133d522c44ac975f2f3e4ffe4c2942973d81851eed7a217a1bf",
  "receipt": {
    "to": null,
    "from": "0xCD9706B6B71fdC4351091B5b1D910cEe7Fde28D0",
    "contractAddress": "0xBbCdA58c228Bb29B5769778181c81Ac8aC546c11",
    "transactionIndex": 18,
    "gasUsed": "768684",
    "logsBloom": "0x
    "blockHash": "0x8de9ee2809aedfdb9991e1561d678b8bc55dbb8f238e688c2538fe92492975eb",
    "transactionHash": "0xb231a8169dd68133d522c44ac975f2f3e4ffe4c2942973d81851eed7a217a1bf",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 151255002,
        "transactionHash": "0xb231a8169dd68133d522c44ac975f2f3e4ffe4c2942973d81851eed7a217a1bf",
        "address": "0xBbCdA58c228Bb29B5769778181c81Ac8aC546c11",
        "topics": [
          "0x53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd9706b6b71fdc4351091b5b1d910cee7fde28d0",
        "logIndex": 16,
        "blockHash": "0x8de9ee2809aedfdb9991e1561d678b8bc55dbb8f238e688c2538fe92492975eb"
      }
    ],
    "blockNumber": 151255002,
    "cumulativeGasUsed": "2172773",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "71f4ffea0231d83b1ca2bfb33fa0be6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"GovSetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"RegisterCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"SetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevGov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"name\":\"SetReferrerDiscountShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"SetReferrerTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"name\":\"SetTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"SetTraderReferralCode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTraderReferralInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"govSetCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDiscountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"registerCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"setCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setReferrerDiscountShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"setReferrerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setTraderReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setTraderReferralCodeByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderReferralCodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGov\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/ReferralStorage.sol\":\"ReferralStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error InvalidClaimableReductionFactor(uint256 value);\\n    error OracleProviderAlreadyExistsForToken(address token);\\n    error OracleProviderMinChangeDelayNotYetPassed(address token, address provider);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n    error InvalidPositionImpactPoolDistributionRate(uint256 distributionAmount, uint256 positionImpactPoolAmount);\\n    error MaxDataListLengthExceeded(uint256 dataLength, uint256 maxDataLength);\\n    error EmptyToken();\\n\\n    // ContributorHandler errors\\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\\n    error InvalidContributorToken(address token);\\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address signer);\\n    error InvalidHoldingAddress(address account);\\n    error EmptyPositionImpactWithdrawalAmount();\\n    error OraclePriceOutdated();\\n    error EmptyTarget();\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvShiftStoreUtils errors\\n    error GlvShiftNotFound(bytes32 key);\\n    // GlvWithdrawalStoreUtils errors\\n    error GlvWithdrawalNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvMarketAmount();\\n    error EmptyGlvDeposit();\\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\\n    // GlvWithdrawalUtils errors\\n    error EmptyGlvWithdrawal();\\n    error EmptyGlvWithdrawalAmount();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error EmptyGlvTokenSupply();\\n    error GlvNegativeMarketPoolValue(address glv, address market);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvEnabledMarket(address glv, address market);\\n    error GlvNonZeroMarketBalance(address glv, address market);\\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error GlvInvalidLongToken(address glv, address provided, address expected);\\n    error GlvInvalidShortToken(address glv, address provided, address expected);\\n    // GlvShiftUtils\\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\\n    // GlvFactory\\n    error GlvAlreadyExists(bytes32 salt, address glv);\\n    error GlvSymbolTooLong();\\n    error GlvNameTooLong();\\n    // GlvStoreUtils\\n    error GlvNotFound(address key);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidBuybackToken(address buybackToken);\\n    error InvalidVersion(uint256 version);\\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\\n    error EmptyClaimFeesMarket();\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForAutoCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\\n    error EmptyRelayFeeAddress();\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // MarketPositionImpactUtils errors\\n    error InsufficientImpactPoolValueForWithdrawal(uint256 withdrawalAmount, uint256 poolValue);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices(); // not used, kept for compatibility\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error UnsupportedOrderTypeForAutoCancellation(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n    error UnexpectedValidFromTime(uint256 orderType);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\\n    error SubaccountIntegrationIdDisabled(bytes32 integrationId);\\n\\n    // TokenUtils errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\\n    // some contracts with this error cannot be re-deployed so it has been left as is\\n    error EmptyTokenTranferGasLimit(address token);\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error DataListLengthExceeded();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n\\n    // Cast errors\\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\\n\\n    // ConfigSyncer errors\\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\\n    error SyncConfigUpdatesDisabledForMarket(address market);\\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\\n\\n    // Reader errors\\n    error EmptyMarketPrice(address market);\\n\\n    // Multichain errors\\n    error InvalidTransferRequestsLength();\\n    error EmptyMultichainTransferInAmount(address account, address token);\\n    error EmptyMultichainTransferOutAmount(address account, address token);\\n    error InsufficientMultichainBalance(address account, address token, uint256 balance, uint256 amount);\\n    error InvalidSrcChainId(uint256 srcChainId);\\n    error InvalidDestinationChainId(uint256 desChainId);\\n    error TokenPermitsNotAllowedForMultichain();\\n    error InvalidMultichainProvider(address provider);\\n    error InvalidMultichainEndpoint(address endpoint);\\n    error UnableToPayOrderFee();\\n    error UnableToPayOrderFeeFromCollateral();\\n    error InvalidBridgeOutToken(address token);\\n\\n    enum SignatureType {\\n        Call,\\n        SubaccountApproval\\n    }\\n\\n    // Gelato relay errors\\n    error InvalidSignature(string signatureType);\\n    // User sent incorrect fee token or incorrect swap path\\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    // Contract received unsupported fee token from Gelato relay\\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    error InvalidPermitSpender(address spender, address expectedSpender);\\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\\n    error InvalidSubaccountApprovalSubaccount();\\n    error NonEmptyExternalCallsForSubaccountOrder();\\n\\n    // EventUtils error\\n    error EventItemNotFound(string key);\\n\\n    // EdgeOracle verifier errors\\n    error InvalidTrustedSignerAddress();\\n    error InvalidEdgeSigner();\\n    error InvalidEdgeSignature(uint256 recoverError);\\n    error InvalidEdgeDataStreamBidAsk(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamPrices(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamExpo(int256 expo);\\n    error RelayEmptyBatch();\\n    error RelayCalldataTooLong(uint256 calldataLength);\\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\\n}\\n\",\"keccak256\":\"0x6286a632f9f785355a1e739ec1f0604cd8f050880258bcb93665a76aa543e9d2\",\"license\":\"BUSL-1.1\"},\"contracts/mock/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\n// @title Governable\\n// @dev Contract to allow for governance restricted functions\\ncontract Governable {\\n    address public gov;\\n    address public pendingGov;\\n\\n    event SetGov(address prevGov, address nextGov);\\n\\n    constructor() {\\n        _setGov(msg.sender);\\n    }\\n\\n    modifier onlyGov() {\\n        if (msg.sender != gov) {\\n            revert Errors.Unauthorized(msg.sender, \\\"GOV\\\");\\n        }\\n        _;\\n    }\\n\\n    function transferOwnership(address _newGov) external onlyGov {\\n        pendingGov = _newGov;\\n    }\\n\\n    function acceptOwnership() external {\\n        if (msg.sender != pendingGov) {\\n            revert Errors.Unauthorized(msg.sender, \\\"PendingGov\\\");\\n        }\\n\\n        _setGov(msg.sender);\\n    }\\n\\n    // @dev updates the gov value to the input _gov value\\n    // @param _gov the value to update to\\n    function _setGov(address _gov) internal {\\n        address prevGov = gov;\\n        gov = _gov;\\n\\n        emit SetGov(prevGov, _gov);\\n    }\\n}\\n\",\"keccak256\":\"0x0fa14ff15656ceddd8e95e290621a25de5ed7af679c8bf1bac6d07f4c26b1ce5\",\"license\":\"BUSL-1.1\"},\"contracts/mock/ReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../referral/IReferralStorage.sol\\\";\\nimport \\\"./Governable.sol\\\";\\nimport \\\"../referral/ReferralTier.sol\\\";\\n\\n// @title ReferralStorage\\n// @dev Mock referral storage for testing and testnets\\ncontract ReferralStorage is IReferralStorage, Governable {\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    // @dev mapping of affiliate to discount share for trader\\n    // this overrides the default value in the affiliate's tier\\n    mapping (address => uint256) public override referrerDiscountShares;\\n    // @dev mapping of affiliate to tier\\n    mapping (address => uint256) public override referrerTiers;\\n    // @dev mapping tier level to tier values\\n    mapping (uint256 => ReferralTier.Props) public override tiers;\\n\\n    // @dev handlers for access control\\n    mapping (address => bool) public isHandler;\\n\\n    // @dev mapping of referral code to affiliate\\n    mapping (bytes32 => address) public override codeOwners;\\n    // @dev mapping of trader to referral code\\n    mapping (address => bytes32) public override traderReferralCodes;\\n\\n    // @param handler the handler being set\\n    // @param isActive whether the handler is being set to active or inactive\\n    event SetHandler(address handler, bool isActive);\\n    // @param account address of the trader\\n    // @param code the referral code\\n    event SetTraderReferralCode(address account, bytes32 code);\\n    // @param tierId the tier level\\n    // @param totalRebate the total rebate for the tier (affiliate reward + trader discount)\\n    // @param discountShare the share of the totalRebate for traders\\n    event SetTier(uint256 tierId, uint256 totalRebate, uint256 discountShare);\\n    // @param referrer the affiliate\\n    // @param tierId the new tier level\\n    event SetReferrerTier(address referrer, uint256 tierId);\\n    // @param referrer the affiliate\\n    // @param discountShare the share of the totalRebate for traders\\n    event SetReferrerDiscountShare(address referrer, uint256 discountShare);\\n    // @param account the address of the affiliate\\n    // @param code the referral code\\n    event RegisterCode(address account, bytes32 code);\\n    // @param account the previous owner of the referral code\\n    // @param newAccount the new owner of the referral code\\n    // @param code the referral code\\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\\n    // @param newAccount the new owner of the referral code\\n    // @param code the referral code\\n    event GovSetCodeOwner(bytes32 code, address newAccount);\\n\\n    modifier onlyHandler() {\\n        require(isHandler[msg.sender], \\\"ReferralStorage: forbidden\\\");\\n        _;\\n    }\\n\\n    // @dev set an address as a handler\\n    // @param _handler address of the handler\\n    // @param _isActive whether to set the handler as active or inactive\\n    function setHandler(address _handler, bool _isActive) external onlyGov {\\n        isHandler[_handler] = _isActive;\\n        emit SetHandler(_handler, _isActive);\\n    }\\n\\n    // @dev set values for a tier\\n    // @param _tierId the ID of the tier to set\\n    // @param _totalRebate the total rebate\\n    // @param _discountShare the discount share\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external override onlyGov {\\n        require(_totalRebate <= BASIS_POINTS, \\\"ReferralStorage: invalid totalRebate\\\");\\n        require(_discountShare <= BASIS_POINTS, \\\"ReferralStorage: invalid discountShare\\\");\\n\\n        ReferralTier.Props memory tier = tiers[_tierId];\\n        tier.totalRebate = _totalRebate;\\n        tier.discountShare = _discountShare;\\n        tiers[_tierId] = tier;\\n        emit SetTier(_tierId, _totalRebate, _discountShare);\\n    }\\n\\n    // @dev set the tier for an affiliate\\n    // @param _referrer the address of the affiliate\\n    // @param _tierId the tier to set to\\n    function setReferrerTier(address _referrer, uint256 _tierId) external override onlyGov {\\n        referrerTiers[_referrer] = _tierId;\\n        emit SetReferrerTier(_referrer, _tierId);\\n    }\\n\\n    // @dev set the discount share for an affiliate\\n    // @param _discountShare the discount share to set to\\n    function setReferrerDiscountShare(uint256 _discountShare) external {\\n        require(_discountShare <= BASIS_POINTS, \\\"ReferralStorage: invalid discountShare\\\");\\n\\n        referrerDiscountShares[msg.sender] = _discountShare;\\n        emit SetReferrerDiscountShare(msg.sender, _discountShare);\\n    }\\n\\n    // @dev set the referral code for a trader\\n    // @param _account the address of the trader\\n    // @param _code the referral code to set to\\n    function setTraderReferralCode(address _account, bytes32 _code) external override onlyHandler {\\n        _setTraderReferralCode(_account, _code);\\n    }\\n\\n    // @dev set the referral code for a trader\\n    // @param _code the referral code to set to\\n    function setTraderReferralCodeByUser(bytes32 _code) external {\\n        _setTraderReferralCode(msg.sender, _code);\\n    }\\n\\n    // @dev register a referral code\\n    // @param _code the referral code to register\\n    function registerCode(bytes32 _code) external {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n        require(codeOwners[_code] == address(0), \\\"ReferralStorage: code already exists\\\");\\n\\n        codeOwners[_code] = msg.sender;\\n        emit RegisterCode(msg.sender, _code);\\n    }\\n\\n    // @dev for affiliates to set a new owner for a referral code they own\\n    // @param _code the referral code\\n    // @param _newAccount the new owner\\n    function setCodeOwner(bytes32 _code, address _newAccount) external {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n\\n        address account = codeOwners[_code];\\n        require(msg.sender == account, \\\"ReferralStorage: forbidden\\\");\\n\\n        codeOwners[_code] = _newAccount;\\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\\n    }\\n\\n    // @dev set the owner of a referral code\\n    // @param _code the referral code\\n    // @param _newAccount the new owner\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external override onlyGov {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n\\n        codeOwners[_code] = _newAccount;\\n        emit GovSetCodeOwner(_code, _newAccount);\\n    }\\n\\n    // @dev get the referral info for a trader\\n    // @param _account the address of the trader\\n    function getTraderReferralInfo(address _account) external override view returns (bytes32, address) {\\n        bytes32 code = traderReferralCodes[_account];\\n        address referrer;\\n        if (code != bytes32(0)) {\\n            referrer = codeOwners[code];\\n        }\\n        return (code, referrer);\\n    }\\n\\n    // @dev set the referral code for a trader\\n    // @param _account the address of the trader\\n    // @param _code the referral code\\n    function _setTraderReferralCode(address _account, bytes32 _code) private {\\n        traderReferralCodes[_account] = _code;\\n        emit SetTraderReferralCode(_account, _code);\\n    }\\n}\\n\",\"keccak256\":\"0x78d2a38c1b6a31196f734751c07fe101bc1079d29c442348c689b7e0a4a62db7\",\"license\":\"BUSL-1.1\"},\"contracts/referral/IReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title IReferralStorage\\n// @dev Interface for ReferralStorage\\ninterface IReferralStorage {\\n    // @dev get the owner of a referral code\\n    // @param _code the referral code\\n    // @return the owner of the referral code\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    // @dev get the referral code of a trader\\n    // @param _account the address of the trader\\n    // @return the referral code\\n    function traderReferralCodes(address _account) external view returns (bytes32);\\n    // @dev get the trader discount share for an affiliate\\n    // @param _account the address of the affiliate\\n    // @return the trader discount share\\n    function referrerDiscountShares(address _account) external view returns (uint256);\\n    // @dev get the tier level of an affiliate\\n    // @param _account the address of the affiliate\\n    // @return the tier level of the affiliate\\n    function referrerTiers(address _account) external view returns (uint256);\\n    // @dev get the referral info for a trader\\n    // @param _account the address of the trader\\n    // @return (referral code, affiliate)\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    // @dev set the referral code for a trader\\n    // @param _account the address of the trader\\n    // @param _code the referral code\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    // @dev set the values for a tier\\n    // @param _tierId the tier level\\n    // @param _totalRebate the total rebate for the tier (affiliate reward + trader discount)\\n    // @param _discountShare the share of the totalRebate for traders\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    // @dev set the tier for an affiliate\\n    // @param _tierId the tier level\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    // @dev set the owner for a referral code\\n    // @param _code the referral code\\n    // @param _newAccount the new owner\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n\\n    // @dev get the tier values for a tier level\\n    // @param _tierLevel the tier level\\n    // @return (totalRebate, discountShare)\\n    function tiers(uint256 _tierLevel) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb4730e94f2026fc942e8df90d2d94f7b8faade6e919f314f59eb1099c7064693\",\"license\":\"BUSL-1.1\"},\"contracts/referral/ReferralTier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ReferralTier\\n// @dev Struct for referral tiers\\nlibrary ReferralTier {\\n    // @param totalRebate the total rebate for the tier (affiliate reward + trader discount)\\n    // @param discountShare the share of the totalRebate for traders\\n    struct Props {\\n        uint256 totalRebate;\\n        uint256 discountShare;\\n    }\\n}\\n\",\"keccak256\":\"0xde652c7a4c1dc7935ff509b6acea68a22c80d8500ff72edf1ab51dba2f326a18\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610080565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f785910160405180910390a15050565b610c798061008f6000396000f3fe608060405234801561001057600080fd5b50600436106101075760003560e01c8063039af9eb1461010c57806312d43a511461014d5780631582a0181461017857806325240810146101a657806336def2c8146101b95780633fb8b323146101ce57806346ea87af146101e1578063534ef8831461021457806356b4b2ad1461023557806371a6a7901461024857806379ba509714610268578063836a01871461027057806385725b58146102835780639c8e2de9146102a35780639cb7de4b146102b6578063c8b3c460146102c9578063dfcfa250146102f2578063e1e01bf314610305578063e1f1c4a714610318578063ed84313414610321578063f2fde38b14610334575b600080fd5b61013361011a366004610a1e565b6004602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b600054610160906001600160a01b031681565b6040516001600160a01b039091168152602001610144565b610198610186366004610a53565b60036020526000908152604090205481565b604051908152602001610144565b600154610160906001600160a01b031681565b6101cc6101c7366004610a1e565b610347565b005b6101cc6101dc366004610a75565b61043b565b6102046101ef366004610a53565b60056020526000908152604090205460ff1681565b6040519015158152602001610144565b610227610222366004610a53565b6104c1565b604051610144929190610a9f565b6101cc610243366004610a75565b610507565b610198610256366004610a53565b60026020526000908152604090205481565b6101cc610544565b6101cc61027e366004610ab6565b61059f565b610198610291366004610a53565b60076020526000908152604090205481565b6101cc6102b1366004610a1e565b6106c8565b6101cc6102c4366004610ae2565b61072c565b6101606102d7366004610a1e565b6006602052600090815260409020546001600160a01b031681565b6101cc610300366004610b1e565b6107b5565b6101cc610313366004610a1e565b610858565b61019861271081565b6101cc61032f366004610b1e565b610865565b6101cc610342366004610a53565b610928565b8061036d5760405162461bcd60e51b815260040161036490610b4a565b60405180910390fd5b6000818152600660205260409020546001600160a01b0316156103de5760405162461bcd60e51b8152602060048201526024808201527f526566657272616c53746f726167653a20636f646520616c72656164792065786044820152636973747360e01b6064820152608401610364565b6000818152600660205260409081902080546001600160a01b0319163390811790915590517f04f82286a2a3b2ee5c8555de8304dfe2ea70991613213184b73a9e408d2d802991610430918490610b81565b60405180910390a150565b6000546001600160a01b03163314610468573360405163a35b150b60e01b81526004016103649190610b9a565b6001600160a01b03821660009081526003602052604090819020829055517f7696855cdbb94bb5a44cb0a95caff6f29173aa1cbfba193834b12b90827ce2bc906104b59084908490610b81565b60405180910390a15050565b6001600160a01b03811660009081526007602052604081205481908181156104fd57506000818152600660205260409020546001600160a01b03165b9094909350915050565b3360009081526005602052604090205460ff166105365760405162461bcd60e51b815260040161036490610bc9565b6105408282610977565b5050565b6001546001600160a01b03163314610594576040805163a35b150b60e01b81523360048201526024810191909152600a6044820152692832b73234b733a3b7bb60b11b6064820152608401610364565b61059d336109c4565b565b6000546001600160a01b031633146105cc573360405163a35b150b60e01b81526004016103649190610b9a565b61271082111561062a5760405162461bcd60e51b8152602060048201526024808201527f526566657272616c53746f726167653a20696e76616c696420746f74616c52656044820152636261746560e01b6064820152608401610364565b61271081111561064c5760405162461bcd60e51b815260040161036490610bfd565b600083815260046020818152604080842081518083018352878152808401878152958990529383528351815593516001909401939093558251868152908101859052918201839052907f4ebd23a492b2bd79586cb57cae40d7793408265f20320f68b478b971e696f4c79060600160405180910390a150505050565b6127108111156106ea5760405162461bcd60e51b815260040161036490610bfd565b3360008181526002602052604090819020839055517fbd224f3917462b0fa80805fe3ec29be3a37f664955aad6224e5ece036224c42991610430918490610b81565b6000546001600160a01b03163314610759573360405163a35b150b60e01b81526004016103649190610b9a565b6001600160a01b038216600081815260056020908152604091829020805460ff19168515159081179091558251938452908301527fd373464a39404e5f98fdb4b152b8ba9a094561e97e5c4b4ea11eb18cd9e6695e91016104b5565b6000546001600160a01b031633146107e2573360405163a35b150b60e01b81526004016103649190610b9a565b816107ff5760405162461bcd60e51b815260040161036490610b4a565b6000828152600660205260409081902080546001600160a01b0319166001600160a01b038416179055517f6431f88c655dd0e2b8d09b6405c007c515c66d67f2998e69c902873a8c8f3e97906104b59084908490610a9f565b6108623382610977565b50565b816108825760405162461bcd60e51b815260040161036490610b4a565b6000828152600660205260409020546001600160a01b03163381146108b95760405162461bcd60e51b815260040161036490610bc9565b60008381526006602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251338152918201529081018490527f5640856798d41ce9ca0a109b54c20a06eb99ba9c36ab4547115dafb8473cf3979060600160405180910390a1505050565b6000546001600160a01b03163314610955573360405163a35b150b60e01b81526004016103649190610b9a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821660009081526007602052604090819020829055517f43825f14567dda057e821be2e51a5aa79aa51f3907a647e3ed2bd486a01050f1906104b59084908490610b81565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f78591016104b5565b600060208284031215610a3057600080fd5b5035919050565b80356001600160a01b0381168114610a4e57600080fd5b919050565b600060208284031215610a6557600080fd5b610a6e82610a37565b9392505050565b60008060408385031215610a8857600080fd5b610a9183610a37565b946020939093013593505050565b9182526001600160a01b0316602082015260400190565b600080600060608486031215610acb57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610af557600080fd5b610afe83610a37565b915060208301358015158114610b1357600080fd5b809150509250929050565b60008060408385031215610b3157600080fd5b82359150610b4160208401610a37565b90509250929050565b6020808252601e908201527f526566657272616c53746f726167653a20696e76616c6964205f636f64650000604082015260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039190911681526040602082018190526003908201526223a7ab60e91b606082015260800190565b6020808252601a90820152792932b332b93930b629ba37b930b3b29d103337b93134b23232b760311b604082015260600190565b60208082526026908201527f526566657272616c53746f726167653a20696e76616c696420646973636f756e60408201526574536861726560d01b60608201526080019056fea26469706673582212207c2d889ebb5ac873e27f7c1454beb4b80473ee3353d3fb3febf3fb10d83bde4064736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101075760003560e01c8063039af9eb1461010c57806312d43a511461014d5780631582a0181461017857806325240810146101a657806336def2c8146101b95780633fb8b323146101ce57806346ea87af146101e1578063534ef8831461021457806356b4b2ad1461023557806371a6a7901461024857806379ba509714610268578063836a01871461027057806385725b58146102835780639c8e2de9146102a35780639cb7de4b146102b6578063c8b3c460146102c9578063dfcfa250146102f2578063e1e01bf314610305578063e1f1c4a714610318578063ed84313414610321578063f2fde38b14610334575b600080fd5b61013361011a366004610a1e565b6004602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b600054610160906001600160a01b031681565b6040516001600160a01b039091168152602001610144565b610198610186366004610a53565b60036020526000908152604090205481565b604051908152602001610144565b600154610160906001600160a01b031681565b6101cc6101c7366004610a1e565b610347565b005b6101cc6101dc366004610a75565b61043b565b6102046101ef366004610a53565b60056020526000908152604090205460ff1681565b6040519015158152602001610144565b610227610222366004610a53565b6104c1565b604051610144929190610a9f565b6101cc610243366004610a75565b610507565b610198610256366004610a53565b60026020526000908152604090205481565b6101cc610544565b6101cc61027e366004610ab6565b61059f565b610198610291366004610a53565b60076020526000908152604090205481565b6101cc6102b1366004610a1e565b6106c8565b6101cc6102c4366004610ae2565b61072c565b6101606102d7366004610a1e565b6006602052600090815260409020546001600160a01b031681565b6101cc610300366004610b1e565b6107b5565b6101cc610313366004610a1e565b610858565b61019861271081565b6101cc61032f366004610b1e565b610865565b6101cc610342366004610a53565b610928565b8061036d5760405162461bcd60e51b815260040161036490610b4a565b60405180910390fd5b6000818152600660205260409020546001600160a01b0316156103de5760405162461bcd60e51b8152602060048201526024808201527f526566657272616c53746f726167653a20636f646520616c72656164792065786044820152636973747360e01b6064820152608401610364565b6000818152600660205260409081902080546001600160a01b0319163390811790915590517f04f82286a2a3b2ee5c8555de8304dfe2ea70991613213184b73a9e408d2d802991610430918490610b81565b60405180910390a150565b6000546001600160a01b03163314610468573360405163a35b150b60e01b81526004016103649190610b9a565b6001600160a01b03821660009081526003602052604090819020829055517f7696855cdbb94bb5a44cb0a95caff6f29173aa1cbfba193834b12b90827ce2bc906104b59084908490610b81565b60405180910390a15050565b6001600160a01b03811660009081526007602052604081205481908181156104fd57506000818152600660205260409020546001600160a01b03165b9094909350915050565b3360009081526005602052604090205460ff166105365760405162461bcd60e51b815260040161036490610bc9565b6105408282610977565b5050565b6001546001600160a01b03163314610594576040805163a35b150b60e01b81523360048201526024810191909152600a6044820152692832b73234b733a3b7bb60b11b6064820152608401610364565b61059d336109c4565b565b6000546001600160a01b031633146105cc573360405163a35b150b60e01b81526004016103649190610b9a565b61271082111561062a5760405162461bcd60e51b8152602060048201526024808201527f526566657272616c53746f726167653a20696e76616c696420746f74616c52656044820152636261746560e01b6064820152608401610364565b61271081111561064c5760405162461bcd60e51b815260040161036490610bfd565b600083815260046020818152604080842081518083018352878152808401878152958990529383528351815593516001909401939093558251868152908101859052918201839052907f4ebd23a492b2bd79586cb57cae40d7793408265f20320f68b478b971e696f4c79060600160405180910390a150505050565b6127108111156106ea5760405162461bcd60e51b815260040161036490610bfd565b3360008181526002602052604090819020839055517fbd224f3917462b0fa80805fe3ec29be3a37f664955aad6224e5ece036224c42991610430918490610b81565b6000546001600160a01b03163314610759573360405163a35b150b60e01b81526004016103649190610b9a565b6001600160a01b038216600081815260056020908152604091829020805460ff19168515159081179091558251938452908301527fd373464a39404e5f98fdb4b152b8ba9a094561e97e5c4b4ea11eb18cd9e6695e91016104b5565b6000546001600160a01b031633146107e2573360405163a35b150b60e01b81526004016103649190610b9a565b816107ff5760405162461bcd60e51b815260040161036490610b4a565b6000828152600660205260409081902080546001600160a01b0319166001600160a01b038416179055517f6431f88c655dd0e2b8d09b6405c007c515c66d67f2998e69c902873a8c8f3e97906104b59084908490610a9f565b6108623382610977565b50565b816108825760405162461bcd60e51b815260040161036490610b4a565b6000828152600660205260409020546001600160a01b03163381146108b95760405162461bcd60e51b815260040161036490610bc9565b60008381526006602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251338152918201529081018490527f5640856798d41ce9ca0a109b54c20a06eb99ba9c36ab4547115dafb8473cf3979060600160405180910390a1505050565b6000546001600160a01b03163314610955573360405163a35b150b60e01b81526004016103649190610b9a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821660009081526007602052604090819020829055517f43825f14567dda057e821be2e51a5aa79aa51f3907a647e3ed2bd486a01050f1906104b59084908490610b81565b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f78591016104b5565b600060208284031215610a3057600080fd5b5035919050565b80356001600160a01b0381168114610a4e57600080fd5b919050565b600060208284031215610a6557600080fd5b610a6e82610a37565b9392505050565b60008060408385031215610a8857600080fd5b610a9183610a37565b946020939093013593505050565b9182526001600160a01b0316602082015260400190565b600080600060608486031215610acb57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215610af557600080fd5b610afe83610a37565b915060208301358015158114610b1357600080fd5b809150509250929050565b60008060408385031215610b3157600080fd5b82359150610b4160208401610a37565b90509250929050565b6020808252601e908201527f526566657272616c53746f726167653a20696e76616c6964205f636f64650000604082015260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039190911681526040602082018190526003908201526223a7ab60e91b606082015260800190565b6020808252601a90820152792932b332b93930b629ba37b930b3b29d103337b93134b23232b760311b604082015260600190565b60208082526026908201527f526566657272616c53746f726167653a20696e76616c696420646973636f756e60408201526574536861726560d01b60608201526080019056fea26469706673582212207c2d889ebb5ac873e27f7c1454beb4b80473ee3353d3fb3febf3fb10d83bde4064736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 76108,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "gov",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 76110,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "pendingGov",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 79091,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "referrerDiscountShares",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 79096,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "referrerTiers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 79102,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "tiers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Props)112971_storage)"
      },
      {
        "astId": 79106,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "isHandler",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 79111,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "codeOwners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 79116,
        "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
        "label": "traderReferralCodes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Props)112971_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReferralTier.Props)",
        "numberOfBytes": "32",
        "value": "t_struct(Props)112971_storage"
      },
      "t_struct(Props)112971_storage": {
        "encoding": "inplace",
        "label": "struct ReferralTier.Props",
        "members": [
          {
            "astId": 112968,
            "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
            "label": "totalRebate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 112970,
            "contract": "contracts/mock/ReferralStorage.sol:ReferralStorage",
            "label": "discountShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}