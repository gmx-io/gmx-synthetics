{
  "address": "0xF1f4dAe0660De81C944a0dFC957415D4fcF74262",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Deposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "srcChainId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Deposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Deposit.Flags",
              "name": "flags",
              "type": "tuple"
            },
            {
              "internalType": "bytes32[]",
              "name": "_dataList",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct Deposit.Props",
          "name": "deposit",
          "type": "tuple"
        },
        {
          "internalType": "enum Deposit.DepositType",
          "name": "depositType",
          "type": "Deposit.DepositType"
        }
      ],
      "name": "createEventData",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "value",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address[]",
                      "name": "value",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.AddressItems",
              "name": "addressItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EventUtils.UintKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "value",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.UintArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.UintItems",
              "name": "uintItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256",
                      "name": "value",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct EventUtils.IntKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256[]",
                      "name": "value",
                      "type": "int256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.IntArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.IntItems",
              "name": "intItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "value",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool[]",
                      "name": "value",
                      "type": "bool[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BoolItems",
              "name": "boolItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32KeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "value",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32ArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.Bytes32Items",
              "name": "bytes32Items",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "value",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes[]",
                      "name": "value",
                      "type": "bytes[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BytesItems",
              "name": "bytesItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "value",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct EventUtils.StringKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string[]",
                      "name": "value",
                      "type": "string[]"
                    }
                  ],
                  "internalType": "struct EventUtils.StringArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.StringItems",
              "name": "stringItems",
              "type": "tuple"
            }
          ],
          "internalType": "struct EventUtils.EventLogData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0459057c2861e63fa3d91c964b56b891d6b23a9c6d846206dbfef29053b94ae2",
  "receipt": {
    "to": null,
    "from": "0xCD9706B6B71fdC4351091B5b1D910cEe7Fde28D0",
    "contractAddress": "0xF1f4dAe0660De81C944a0dFC957415D4fcF74262",
    "transactionIndex": 14,
    "gasUsed": "2252844",
    "logsBloom": "0x
    "blockHash": "0xfbb670207efbf9d38e5dc130947c7eba3ee807480e48a867251c6700c0572117",
    "transactionHash": "0x0459057c2861e63fa3d91c964b56b891d6b23a9c6d846206dbfef29053b94ae2",
    "logs": [],
    "blockNumber": 145238377,
    "cumulativeGasUsed": "3312245",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "56be4a23543c966cc969a78e013c5aca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Deposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct Deposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"_dataList\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Deposit.Props\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"internalType\":\"enum Deposit.DepositType\",\"name\":\"depositType\",\"type\":\"Deposit.DepositType\"}],\"name\":\"createEventData\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"internalType\":\"struct EventUtils.AddressKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"internalType\":\"struct EventUtils.AddressArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.AddressItems\",\"name\":\"addressItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct EventUtils.UintKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EventUtils.UintArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.UintItems\",\"name\":\"uintItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct EventUtils.IntKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"internalType\":\"struct EventUtils.IntArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.IntItems\",\"name\":\"intItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct EventUtils.BoolKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"internalType\":\"struct EventUtils.BoolArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BoolItems\",\"name\":\"boolItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct EventUtils.Bytes32KeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct EventUtils.Bytes32ArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.Bytes32Items\",\"name\":\"bytes32Items\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct EventUtils.BytesKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"internalType\":\"struct EventUtils.BytesArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BytesItems\",\"name\":\"bytesItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct EventUtils.StringKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"internalType\":\"struct EventUtils.StringArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.StringItems\",\"name\":\"stringItems\",\"type\":\"tuple\"}],\"internalType\":\"struct EventUtils.EventLogData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deposit/DepositEventUtils.sol\":\"DepositEventUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/deposit/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Deposit\\n// @dev Struct for deposits\\nlibrary Deposit {\\n    enum DepositType {\\n        Normal,\\n        Shift,\\n        Glv\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x622ecf0fa075bf13ef98ef44ec9c62f7b27c5d68229e9c9d86239e398b05ed5c\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"../pricing/ISwapPricingUtils.sol\\\";\\n\\nlibrary DepositEventUtils {\\n    using Deposit for Deposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitDepositCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        Deposit.DepositType depositType\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(deposit, depositType);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCreated\\\",\\n            key,\\n            Cast.toBytes32(deposit.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 longTokenAmount,\\n        uint256 shortTokenAmount,\\n        uint256 receivedMarketTokens,\\n        ISwapPricingUtils.SwapPricingType swapPricingType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"receivedMarketTokens\\\", receivedMarketTokens);\\n        eventData.uintItems.setItem(3, \\\"swapPricingType\\\", uint256(swapPricingType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Deposit.Props memory deposit, Deposit.DepositType depositType)\\n    public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(7);\\n        eventData.addressItems.setItem(0, \\\"account\\\", deposit.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", deposit.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", deposit.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", deposit.market());\\n        eventData.addressItems.setItem(4, \\\"initialLongToken\\\", deposit.initialLongToken());\\n        eventData.addressItems.setItem(5, \\\"initialShortToken\\\", deposit.initialShortToken());\\n        eventData.addressItems.setItem(6, \\\"uiFeeReceiver\\\", deposit.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", deposit.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", deposit.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"initialLongTokenAmount\\\", deposit.initialLongTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"initialShortTokenAmount\\\", deposit.initialShortTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minMarketTokens\\\", deposit.minMarketTokens());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", deposit.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", deposit.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", deposit.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"depositType\\\", uint256(depositType));\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", deposit.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", deposit.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x287fb035022729626f8b045c680aa4551d6c05012dcd448cbe2523f84846ea91\",\"license\":\"BUSL-1.1\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n    error InvalidTransferInAmount(address token, uint256 amount);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error InvalidClaimableReductionFactor(uint256 value);\\n    error OracleProviderAlreadyExistsForToken(address token);\\n    error OracleProviderMinChangeDelayNotYetPassed(address token, address provider);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n    error InvalidPositionImpactPoolDistributionRate(uint256 distributionAmount, uint256 positionImpactPoolAmount);\\n    error MaxDataListLengthExceeded(uint256 dataLength, uint256 maxDataLength);\\n    error EmptyToken();\\n\\n    // ContributorHandler errors\\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\\n    error InvalidContributorToken(address token);\\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address signer);\\n    error InvalidHoldingAddress(address account);\\n    error EmptyPositionImpactWithdrawalAmount();\\n    error OraclePriceOutdated();\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvShiftStoreUtils errors\\n    error GlvShiftNotFound(bytes32 key);\\n    // GlvWithdrawalStoreUtils errors\\n    error GlvWithdrawalNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvMarketAmount();\\n    error EmptyGlvDeposit();\\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\\n    // GlvWithdrawalUtils errors\\n    error EmptyGlvWithdrawal();\\n    error EmptyGlvWithdrawalAmount();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error EmptyGlvTokenSupply();\\n    error GlvNegativeMarketPoolValue(address glv, address market);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvEnabledMarket(address glv, address market);\\n    error GlvNonZeroMarketBalance(address glv, address market);\\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error GlvInvalidLongToken(address glv, address provided, address expected);\\n    error GlvInvalidShortToken(address glv, address provided, address expected);\\n    // GlvShiftUtils\\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\\n    // GlvFactory\\n    error GlvAlreadyExists(bytes32 salt, address glv);\\n    error GlvSymbolTooLong();\\n    error GlvNameTooLong();\\n    // GlvStoreUtils\\n    error GlvNotFound(address key);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidBuybackToken(address buybackToken);\\n    error InvalidVersion(uint256 version);\\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\\n    error EmptyClaimFeesMarket();\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForAutoCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\\n    error EmptyRelayFeeAddress();\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // MarketPositionImpactUtils errors\\n    error InsufficientImpactPoolValueForWithdrawal(uint256 withdrawalAmount, uint256 poolValue);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices(); // not used, kept for compatibility\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error UnsupportedOrderTypeForAutoCancellation(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n    error UnexpectedValidFromTime(uint256 orderType);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\\n    error SubaccountIntegrationIdDisabled(bytes32 integrationId);\\n\\n    // TokenUtils errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\\n    // some contracts with this error cannot be re-deployed so it has been left as is\\n    error EmptyTokenTranferGasLimit(address token);\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error DataListLengthExceeded();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n\\n    // Cast errors\\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\\n\\n    // ConfigSyncer errors\\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\\n    error SyncConfigUpdatesDisabledForMarket(address market);\\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\\n\\n    // Reader errors\\n    error EmptyMarketPrice(address market);\\n\\n    // Multichain errors\\n    error InvalidTransferRequestsLength();\\n    error EmptyMultichainTransferInAmount(address account, address token);\\n    error EmptyMultichainTransferOutAmount(address account, address token);\\n    error InsufficientMultichainBalance(address account, address token, uint256 balance, uint256 amount);\\n    error InvalidSrcChainId(uint256 srcChainId);\\n    error InvalidDestinationChainId(uint256 desChainId);\\n    error TokenPermitsNotAllowedForMultichain();\\n    error InvalidMultichainProvider(address provider);\\n    error InvalidMultichainEndpoint(address endpoint);\\n    error UnableToPayOrderFee();\\n    error UnableToPayOrderFeeFromCollateral();\\n    error InvalidBridgeOutToken(address token);\\n\\n    enum SignatureType {\\n        Call,\\n        SubaccountApproval\\n    }\\n\\n    // Gelato relay errors\\n    error InvalidSignature(string signatureType);\\n    // User sent incorrect fee token or incorrect swap path\\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    // Contract received unsupported fee token from Gelato relay\\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    error InvalidPermitSpender(address spender, address expectedSpender);\\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\\n    error InvalidSubaccountApprovalSubaccount();\\n    error NonEmptyExternalCallsForSubaccountOrder();\\n\\n    // EventUtils error\\n    error EventItemNotFound(string key);\\n\\n    // EdgeOracle verifier errors\\n    error InvalidTrustedSignerAddress();\\n    error InvalidEdgeSigner();\\n    error InvalidEdgeSignature(uint256 recoverError);\\n    error InvalidEdgeDataStreamBidAsk(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamPrices(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamExpo(int256 expo);\\n    error RelayEmptyBatch();\\n    error RelayCalldataTooLong(uint256 calldataLength);\\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\\n}\\n\",\"keccak256\":\"0xf899157d263ab4bb424c2bd33f1e871ab758ce320f46e6efca90c077a5bb24ef\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n\\n\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a99c1d3590daa8030345ffb09e3f769a93e0178e4c85986dc0e08cc84e8f82c\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary EventUtils {\\n\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(AddressItems memory addresses, string memory key) external pure returns(address) {\\n        (bool found, address value) = getWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(AddressItems memory addresses, string memory key) public pure returns(bool, address) {\\n        for (uint i = 0; i < addresses.items.length; i++) {\\n            if (compareStrings(addresses.items[i].key, key)) {\\n                return (true, addresses.items[i].value);\\n            }\\n        }\\n        return (false, address(0));\\n    }\\n\\n    function getArray(AddressItems memory addresses, string memory key) external pure\\n    returns(address[] memory) {\\n        (bool found, address[] memory value) = getArrayWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(AddressItems memory addresses, string memory key) public pure\\n    returns(bool, address[] memory) {\\n        for (uint i = 0; i < addresses.arrayItems.length; i++) {\\n            if (compareStrings(addresses.arrayItems[i].key, key)) {\\n                return (true, addresses.arrayItems[i].value);\\n            }\\n        }\\n        address[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(UintItems memory items, string memory key) external pure returns(uint256) {\\n        (bool found, uint256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(UintItems memory items, string memory key) public pure returns(bool, uint256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(UintItems memory items, string memory key) external pure\\n    returns(uint256[] memory) {\\n        (bool found, uint256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(UintItems memory items, string memory key) public pure\\n    returns(bool, uint256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        uint256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(IntItems memory items, string memory key) external pure returns(int256) {\\n        (bool found, int256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(IntItems memory items, string memory key) public pure returns(bool, int256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(IntItems memory items, string memory key) external pure\\n    returns(int256[] memory) {\\n        (bool found, int256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(IntItems memory items, string memory key) public pure\\n    returns(bool, int256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        int256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BoolItems memory items, string memory key) external pure returns(bool) {\\n        (bool found, bool value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BoolItems memory items, string memory key) public pure returns(bool, bool) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, false);\\n    }\\n\\n    function getArray(BoolItems memory items, string memory key) external pure\\n    returns(bool[] memory) {\\n        (bool found, bool[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BoolItems memory items, string memory key) public pure\\n    returns(bool, bool[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bool[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(Bytes32Items memory items, string memory key) external pure returns(bytes32) {\\n        (bool found, bytes32 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(Bytes32Items memory items, string memory key) public pure returns(bool, bytes32) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(Bytes32Items memory items, string memory key) external pure\\n    returns(bytes32[] memory) {\\n        (bool found, bytes32[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(Bytes32Items memory items, string memory key) public pure\\n    returns(bool, bytes32[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes32[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BytesItems memory items, string memory key) external pure returns(bytes memory) {\\n        (bool found, bytes memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BytesItems memory items, string memory key) public pure returns(bool, bytes memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(BytesItems memory items, string memory key) external pure\\n    returns(bytes[] memory) {\\n        (bool found, bytes[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BytesItems memory items, string memory key) public pure\\n    returns(bool, bytes[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(StringItems memory items, string memory key) external pure returns(string memory) {\\n        (bool found, string memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(StringItems memory items, string memory key) public pure returns(bool, string memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(StringItems memory items, string memory key) external pure\\n    returns(string[] memory) {\\n        (bool found, string[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(StringItems memory items, string memory key) public pure\\n    returns(bool, string[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        string[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x301b8df4bd9f7cd46804d6a732e8f092b59fda0450c59ef33845eda262f5e6d5\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/ISwapPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISwapPricingUtils {\\n    enum SwapPricingType {\\n        Swap,\\n        Shift,\\n        AtomicWithdrawal,\\n        Deposit,\\n        Withdrawal,\\n        AtomicSwap\\n    }\\n}\\n\",\"keccak256\":\"0x8504d26a64dbbc21e250abe890c99b0558879617c44590285f05a62315f1b288\",\"license\":\"MIT\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_KEEPER role.\\n     * Hash: 0xfa89e7b5ea0a346d73c71d7d6a3512b9f2ea2c2e6c5fb8211ec351d35deef0f4\\n     */\\n    bytes32 public constant CONTRIBUTOR_KEEPER = keccak256(abi.encode(\\\"CONTRIBUTOR_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_DISTRIBUTOR role.\\n     * Hash: 0xcdf6da7ad30d8b9afea66fb1cb11b1b7d0b50e9b30b69561a3ca52c39251360c\\n     */\\n    bytes32 public constant CONTRIBUTOR_DISTRIBUTOR = keccak256(abi.encode(\\\"CONTRIBUTOR_DISTRIBUTOR\\\"));\\n}\\n\",\"keccak256\":\"0xf82e35db50f74b43c8598bacd2df901f3c1a292302680a1b02b076fdb387a6ef\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIMITED_CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyLimitedConfigKeeper() {\\n        _validateRole(Role.LIMITED_CONFIG_KEEPER, \\\"LIMITED_CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_KEEPER role to call the function.\\n     */\\n    modifier onlyContributorKeeper() {\\n        _validateRole(Role.CONTRIBUTOR_KEEPER, \\\"CONTRIBUTOR_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_DISTRIBUTOR role to call the function.\\n     */\\n    modifier onlyContributorDistributor() {\\n        _validateRole(Role.CONTRIBUTOR_DISTRIBUTOR, \\\"CONTRIBUTOR_DISTRIBUTOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd5f2168b69a6c70dc6aacf850491a4eb7c3eaf7b9078deaa83aee0febb9b5ab\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n\\n    function toBytes32(string memory value) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyString = bytes(value);\\n        if (tempEmptyString.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(value, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a bytes array to a uint256.\\n     * Handles cases where the uint256 stored in bytes is stored with or without padding.\\n     * @param uint256AsBytes The bytes array representing the uint256 value.\\n     * @return value The uint256 value obtained from the bytes array.\\n     */\\n    function bytesToUint256(bytes memory uint256AsBytes) internal pure returns (uint256) {\\n        uint256 length = uint256AsBytes.length;\\n\\n        if(length > 32) {\\n            revert Errors.Uint256AsBytesLengthExceeds32Bytes(length);\\n        }\\n\\n        if (length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 value;\\n\\n        assembly {\\n            value := mload(add(uint256AsBytes, 32))\\n        }\\n\\n        return value = value >> (8 * (32 - length));\\n    }\\n\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint192ToBytes(uint192 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint32ToBytes(uint32 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x75f1c33e5e28c00f2f3e49db548cc8fb97f9371cc31fc0ebcc073eb2f75af1dc\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}