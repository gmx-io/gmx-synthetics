{
  "address": "0x3CC9F8Ac048BD1fb4A4127652ba93e0B599F8d8C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        }
      ],
      "name": "MinGlvTokens",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "pnlToPoolFactor",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maxPnlFactor",
          "type": "uint256"
        }
      ],
      "name": "PnlFactorExceededForLongs",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "pnlToPoolFactor",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maxPnlFactor",
          "type": "uint256"
        }
      ],
      "name": "PnlFactorExceededForShorts",
      "type": "error"
    }
  ],
  "transactionHash": "0x803961cfc69e22fdff65593362630cf1e021be56b97e3593bc1cef3817fde496",
  "receipt": {
    "to": null,
    "from": "0xCD9706B6B71fdC4351091B5b1D910cEe7Fde28D0",
    "contractAddress": "0x3CC9F8Ac048BD1fb4A4127652ba93e0B599F8d8C",
    "transactionIndex": 40,
    "gasUsed": "3821580",
    "logsBloom": "0x
    "blockHash": "0x176ce588d440dd74d44d8cc3a06abdd7c3b8081b828865c0c51a2d9e7b42e1ef",
    "transactionHash": "0x803961cfc69e22fdff65593362630cf1e021be56b97e3593bc1cef3817fde496",
    "logs": [],
    "blockNumber": 145239737,
    "cumulativeGasUsed": "7087260",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "56be4a23543c966cc969a78e013c5aca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"MinGlvTokens\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"pnlToPoolFactor\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPnlFactor\",\"type\":\"uint256\"}],\"name\":\"PnlFactorExceededForLongs\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"pnlToPoolFactor\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPnlFactor\",\"type\":\"uint256\"}],\"name\":\"PnlFactorExceededForShorts\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/glv/glvDeposit/ExecuteGlvDepositUtils.sol\":\"ExecuteGlvDepositUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from \\\"./AggregatorInterface.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xee12d80dbdbb3cc0ec10372b9323e42fae9a6de45da5a4e9f7a75223a0b5268b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../token/TokenUtils.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\n// @title Bank\\n// @dev Contract to handle storing and transferring of tokens\\ncontract Bank is RoleModule {\\n    using SafeERC20 for IERC20;\\n\\n    DataStore public immutable dataStore;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) RoleModule(_roleStore) {\\n        dataStore = _dataStore;\\n    }\\n\\n    receive() external payable {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        if (msg.sender != wnt) {\\n            revert Errors.InvalidNativeTokenSender(msg.sender);\\n        }\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function transferOut(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external onlyController {\\n        _transferOut(token, receiver, amount);\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    // handles native token transfers as well\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\\n    // before transferring\\n    function transferOut(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        bool shouldUnwrapNativeToken\\n    ) external onlyController {\\n        address wnt = TokenUtils.wnt(dataStore);\\n\\n        if (token == wnt && shouldUnwrapNativeToken) {\\n            _transferOutNativeToken(token, receiver, amount);\\n        } else {\\n            _transferOut(token, receiver, amount);\\n        }\\n    }\\n\\n    // @dev transfer native tokens from this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\\n    // before transferring\\n    function transferOutNativeToken(\\n        address receiver,\\n        uint256 amount\\n    ) external onlyController {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        _transferOutNativeToken(wnt, receiver, amount);\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function _transferOut(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (receiver == address(this)) {\\n            revert Errors.SelfTransferNotSupported(receiver);\\n        }\\n\\n        TokenUtils.transfer(dataStore, token, receiver, amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    // @dev unwrap wrapped native tokens and transfer the native tokens from\\n    // this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function _transferOutNativeToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (receiver == address(this)) {\\n            revert Errors.SelfTransferNotSupported(receiver);\\n        }\\n\\n        TokenUtils.withdrawAndSendNativeToken(\\n            dataStore,\\n            token,\\n            receiver,\\n            amount\\n        );\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _afterTransferOut(address /* token */) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd81882fe131c1458e5da01b50190ed60daa1f20acc8a522fc23a51eee4c26f4d\",\"license\":\"BUSL-1.1\"},\"contracts/bank/StrictBank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./Bank.sol\\\";\\n\\n// @title StrictBank\\n// @dev a stricter version of Bank\\n//\\n// the Bank contract does not have functions to validate the amount of tokens\\n// transferred in\\n// the Bank contract will mainly assume that safeTransferFrom calls work correctly\\n// and that tokens were transferred into it if there was no revert\\n//\\n// the StrictBank contract keeps track of its internal token balance\\n// and uses recordTransferIn to compare its change in balance and return\\n// the amount of tokens received\\ncontract StrictBank is Bank {\\n    using SafeERC20 for IERC20;\\n\\n    // used to record token balances to evaluate amounts transferred in\\n    mapping (address => uint256) public tokenBalances;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) Bank(_roleStore, _dataStore) {}\\n\\n    // @dev records a token transfer into the contract\\n    // @param token the token to record the transfer for\\n    // @return the amount of tokens transferred in\\n    function recordTransferIn(address token) external onlyController returns (uint256) {\\n        return _recordTransferIn(token);\\n    }\\n\\n    // @dev records the amount of token transferred into the contract\\n    // @dev used by the multichain provider to record the amount of tokens bridged in from a source chain\\n    // @param token the token to record the transfer for\\n    // @param amount the amount of tokens transferred in\\n    // @return the amount of tokens transferred in\\n    function recordTransferIn(address token, uint256 amount) external onlyController returns (uint256) {\\n        return _recordTransferIn(token, amount);\\n    }\\n\\n    // @dev this can be used to update the tokenBalances in case of token burns\\n    // or similar balance changes\\n    // the prevBalance is not validated to be more than the nextBalance as this\\n    // could allow someone to block this call by transferring into the contract\\n    // @param token the token to record the burn for\\n    // @return the new balance\\n    function syncTokenBalance(address token) external onlyController returns (uint256) {\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n        return nextBalance;\\n    }\\n\\n    // @dev records a token transfer into the contract\\n    // @param token the token to record the transfer for\\n    // @return the amount of tokens transferred in\\n    function _recordTransferIn(address token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[token];\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n\\n        return nextBalance - prevBalance;\\n    }\\n\\n    // @dev records the amount of token transferred into the contract\\n    // @param token the token to record the transfer for\\n    // @param amount the amount of tokens transferred in\\n    // @return the amount of tokens transferred in\\n    function _recordTransferIn(address token, uint256 amount) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[token];\\n        uint256 nextBalance = prevBalance + amount;\\n\\n        if (IERC20(token).balanceOf(address(this)) < nextBalance) {\\n            revert Errors.InvalidTransferInAmount(token, amount);\\n        }\\n\\n        tokenBalances[token] = nextBalance;\\n\\n        return nextBalance - prevBalance;\\n    }\\n\\n    // @dev update the internal balance after tokens have been transferred out\\n    // this is called from the Bank contract\\n    // @param token the token that was transferred out\\n    function _afterTransferOut(address token) internal override {\\n        tokenBalances[token] = IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x48ed7d7aa51a677d2e10f9265c049a957e77b12e36d0250ae8281c961f8c6e22\",\"license\":\"BUSL-1.1\"},\"contracts/callback/CallbackUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"./IOrderCallbackReceiver.sol\\\";\\nimport \\\"./IDepositCallbackReceiver.sol\\\";\\nimport \\\"./IWithdrawalCallbackReceiver.sol\\\";\\nimport \\\"./IShiftCallbackReceiver.sol\\\";\\nimport \\\"./IGasFeeCallbackReceiver.sol\\\";\\nimport \\\"./IGlvDepositCallbackReceiver.sol\\\";\\nimport \\\"./IGlvWithdrawalCallbackReceiver.sol\\\";\\n\\nimport \\\"../order/OrderEventUtils.sol\\\";\\nimport \\\"../withdrawal/WithdrawalEventUtils.sol\\\";\\nimport \\\"../deposit/DepositEventUtils.sol\\\";\\nimport \\\"../shift/ShiftEventUtils.sol\\\";\\nimport \\\"../glv/glvDeposit/GlvDepositEventUtils.sol\\\";\\nimport \\\"../glv/glvWithdrawal/GlvWithdrawalEventUtils.sol\\\";\\n\\n// @title CallbackUtils\\n// @dev most features require a two step process to complete\\n// the user first sends a request transaction, then a second transaction is sent\\n// by a keeper to execute the request\\n//\\n// to allow for better composability with other contracts, a callback contract\\n// can be specified to be called after request executions or cancellations\\n//\\n// in case it is necessary to add \\\"before\\\" callbacks, extra care should be taken\\n// to ensure that important state cannot be changed during the before callback\\n// for example, if an order can be cancelled in the \\\"before\\\" callback during\\n// order execution, it may lead to an order being executed even though the user\\n// was already refunded for its cancellation\\n//\\n// the details from callback errors are not processed to avoid cases where a malicious\\n// callback contract returns a very large value to cause transactions to run out of gas\\nlibrary CallbackUtils {\\n    using Address for address;\\n    using Deposit for Deposit.Props;\\n    using Withdrawal for Withdrawal.Props;\\n    using Shift for Shift.Props;\\n    using Order for Order.Props;\\n    using GlvDeposit for GlvDeposit.Props;\\n    using GlvWithdrawal for GlvWithdrawal.Props;\\n\\n    event AfterDepositExecutionError(bytes32 key, Deposit.Props deposit);\\n    event AfterDepositCancellationError(bytes32 key, Deposit.Props deposit);\\n\\n    event AfterWithdrawalExecutionError(bytes32 key, Withdrawal.Props withdrawal);\\n    event AfterWithdrawalCancellationError(bytes32 key, Withdrawal.Props withdrawal);\\n\\n    event AfterShiftExecutionError(bytes32 key, Shift.Props shift);\\n    event AfterShiftCancellationError(bytes32 key, Shift.Props shift);\\n\\n    event AfterOrderExecutionError(bytes32 key, Order.Props order);\\n    event AfterOrderCancellationError(bytes32 key, Order.Props order);\\n    event AfterOrderFrozenError(bytes32 key, Order.Props order);\\n\\n    event AfterGlvDepositExecutionError(bytes32 key, GlvDeposit.Props glvDeposit);\\n    event AfterGlvDepositCancellationError(bytes32 key, GlvDeposit.Props glvDeposit);\\n    event AfterGlvWithdrawalExecutionError(bytes32 key, GlvWithdrawal.Props glvWithdrawal);\\n    event AfterGlvWithdrawalCancellationError(bytes32 key, GlvWithdrawal.Props glvWithdrawal);\\n\\n    // @dev validate that the callbackGasLimit is less than the max specified value\\n    // this is to prevent callback gas limits which are larger than the max gas limits per block\\n    // as this would allow for callback contracts that can consume all gas and conditionally cause\\n    // executions to fail\\n    // @param dataStore DataStore\\n    // @param callbackGasLimit the callback gas limit\\n    function validateCallbackGasLimit(DataStore dataStore, uint256 callbackGasLimit) external view {\\n        uint256 maxCallbackGasLimit = dataStore.getUint(Keys.MAX_CALLBACK_GAS_LIMIT);\\n        if (callbackGasLimit > maxCallbackGasLimit) {\\n            revert Errors.MaxCallbackGasLimitExceeded(callbackGasLimit, maxCallbackGasLimit);\\n        }\\n    }\\n\\n    function validateGasLeftForCallback(uint256 callbackGasLimit) internal view {\\n        uint256 gasToBeForwarded = gasleft() / 64 * 63;\\n        if (gasToBeForwarded < callbackGasLimit) {\\n            revert Errors.InsufficientGasLeftForCallback(gasToBeForwarded, callbackGasLimit);\\n        }\\n    }\\n\\n    function setSavedCallbackContract(DataStore dataStore, address account, address market, address callbackContract) external {\\n        dataStore.setAddress(Keys.savedCallbackContract(account, market), callbackContract);\\n    }\\n\\n    function getSavedCallbackContract(DataStore dataStore, address account, address market) external view returns (address) {\\n        return dataStore.getAddress(Keys.savedCallbackContract(account, market));\\n    }\\n\\n    function refundExecutionFee(\\n        DataStore dataStore,\\n        bytes32 key,\\n        address callbackContract,\\n        uint256 refundFeeAmount,\\n        EventUtils.EventLogData memory eventData\\n    ) internal returns (bool) {\\n        if (!isValidCallbackContract(callbackContract)) { return false; }\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.REFUND_EXECUTION_FEE_GAS_LIMIT);\\n\\n        validateGasLeftForCallback(gasLimit);\\n\\n        try IGasFeeCallbackReceiver(callbackContract).refundExecutionFee{ gas: gasLimit, value: refundFeeAmount }(\\n            key,\\n            eventData\\n        ) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(deposit.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory depositData = DepositEventUtils.createEventData(deposit, Deposit.DepositType.Normal);\\n\\n        validateGasLeftForCallback(deposit.callbackGasLimit());\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract()).afterDepositExecution{ gas: deposit.callbackGasLimit() }(\\n            key,\\n            depositData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterDepositExecutionError(key, deposit);\\n        }\\n    }\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(deposit.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory depositData = DepositEventUtils.createEventData(deposit, Deposit.DepositType.Normal);\\n\\n        validateGasLeftForCallback(deposit.callbackGasLimit());\\n\\n        try IDepositCallbackReceiver(deposit.callbackContract()).afterDepositCancellation{ gas: deposit.callbackGasLimit() }(\\n            key,\\n            depositData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterDepositCancellationError(key, deposit);\\n        }\\n    }\\n\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(\\n        bytes32 key,\\n        Withdrawal.Props memory withdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(withdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory withdrawalData = WithdrawalEventUtils.createEventData(withdrawal, Withdrawal.WithdrawalType.Normal);\\n\\n        validateGasLeftForCallback(withdrawal.callbackGasLimit());\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract()).afterWithdrawalExecution{ gas: withdrawal.callbackGasLimit() }(\\n            key,\\n            withdrawalData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterWithdrawalExecutionError(key, withdrawal);\\n        }\\n    }\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(\\n        bytes32 key,\\n        Withdrawal.Props memory withdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(withdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory withdrawalData = WithdrawalEventUtils.createEventData(withdrawal, Withdrawal.WithdrawalType.Normal);\\n\\n        validateGasLeftForCallback(withdrawal.callbackGasLimit());\\n\\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract()).afterWithdrawalCancellation{ gas: withdrawal.callbackGasLimit() }(\\n            key,\\n            withdrawalData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterWithdrawalCancellationError(key, withdrawal);\\n        }\\n    }\\n\\n    function afterShiftExecution(\\n        bytes32 key,\\n        Shift.Props memory shift,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(shift.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory shiftData = ShiftEventUtils.createEventData(shift);\\n\\n        validateGasLeftForCallback(shift.callbackGasLimit());\\n\\n        try IShiftCallbackReceiver(shift.callbackContract()).afterShiftExecution{ gas: shift.callbackGasLimit() }(\\n            key,\\n            shiftData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterShiftExecutionError(key, shift);\\n        }\\n    }\\n    function afterShiftCancellation(\\n        bytes32 key,\\n        Shift.Props memory shift,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(shift.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory shiftData = ShiftEventUtils.createEventData(shift);\\n\\n        validateGasLeftForCallback(shift.callbackGasLimit());\\n\\n        try IShiftCallbackReceiver(shift.callbackContract()).afterShiftCancellation{ gas: shift.callbackGasLimit() }(\\n            key,\\n            shiftData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterShiftCancellationError(key, shift);\\n        }\\n    }\\n\\n    // @dev called after an order execution\\n    // note that the order.size, order.initialCollateralDeltaAmount and other\\n    // properties may be updated during execution, the new values may not be\\n    // updated in the order object for the callback\\n    // @param key the key of the order\\n    // @param order the order that was executed\\n    function afterOrderExecution(\\n        bytes32 key,\\n        Order.Props memory order,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory orderData = OrderEventUtils.createEventData(order);\\n\\n        validateGasLeftForCallback(order.callbackGasLimit());\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderExecution{ gas: order.callbackGasLimit() }(\\n            key,\\n            orderData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterOrderExecutionError(key, order);\\n        }\\n    }\\n\\n    // @dev called after an order cancellation\\n    // @param key the key of the order\\n    // @param order the order that was cancelled\\n    function afterOrderCancellation(\\n        bytes32 key,\\n        Order.Props memory order,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory orderData = OrderEventUtils.createEventData(order);\\n\\n        validateGasLeftForCallback(order.callbackGasLimit());\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderCancellation{ gas: order.callbackGasLimit() }(\\n            key,\\n            orderData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterOrderCancellationError(key, order);\\n        }\\n    }\\n\\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\\n    // @param key the key of the order\\n    // @param order the order that was frozen\\n    function afterOrderFrozen(\\n        bytes32 key,\\n        Order.Props memory order,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory orderData = OrderEventUtils.createEventData(order);\\n\\n        validateGasLeftForCallback(order.callbackGasLimit());\\n\\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderFrozen{ gas: order.callbackGasLimit() }(\\n            key,\\n            orderData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterOrderFrozenError(key, order);\\n        }\\n    }\\n\\n    // @dev called after a glvDeposit execution\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was executed\\n    function afterGlvDepositExecution(\\n        bytes32 key,\\n        GlvDeposit.Props memory glvDeposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvDeposit.callbackContract())) {\\n            return;\\n        }\\n\\n        EventUtils.EventLogData memory glvData = GlvDepositEventUtils.createEventData(glvDeposit);\\n\\n        validateGasLeftForCallback(glvDeposit.callbackGasLimit());\\n\\n        try IGlvDepositCallbackReceiver(glvDeposit.callbackContract()).afterGlvDepositExecution{ gas: glvDeposit.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvDepositExecutionError(key, glvDeposit);\\n        }\\n    }\\n\\n    // @dev called after a glvDeposit cancellation\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was cancelled\\n    function afterGlvDepositCancellation(\\n        bytes32 key,\\n        GlvDeposit.Props memory glvDeposit,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvDeposit.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory glvData = GlvDepositEventUtils.createEventData(glvDeposit);\\n\\n        validateGasLeftForCallback(glvDeposit.callbackGasLimit());\\n\\n        try IGlvDepositCallbackReceiver(glvDeposit.callbackContract()).afterGlvDepositCancellation{ gas: glvDeposit.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvDepositCancellationError(key, glvDeposit);\\n        }\\n    }\\n\\n    // @dev called after a glvWithdrawal execution\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was executed\\n    function afterGlvWithdrawalExecution(\\n        bytes32 key,\\n        GlvWithdrawal.Props memory glvWithdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvWithdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory glvData = GlvWithdrawalEventUtils.createEventData(glvWithdrawal);\\n\\n        validateGasLeftForCallback(glvWithdrawal.callbackGasLimit());\\n\\n        try IGlvWithdrawalCallbackReceiver(glvWithdrawal.callbackContract()).afterGlvWithdrawalExecution{ gas: glvWithdrawal.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvWithdrawalExecutionError(key, glvWithdrawal);\\n        }\\n    }\\n\\n    // @dev called after a glvWithdrawal cancellation\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was cancelled\\n    function afterGlvWithdrawalCancellation(\\n        bytes32 key,\\n        GlvWithdrawal.Props memory glvWithdrawal,\\n        EventUtils.EventLogData memory eventData\\n    ) external {\\n        if (!isValidCallbackContract(glvWithdrawal.callbackContract())) { return; }\\n\\n        EventUtils.EventLogData memory glvData = GlvWithdrawalEventUtils.createEventData(glvWithdrawal);\\n\\n        validateGasLeftForCallback(glvWithdrawal.callbackGasLimit());\\n\\n        try IGlvWithdrawalCallbackReceiver(glvWithdrawal.callbackContract()).afterGlvWithdrawalCancellation{ gas: glvWithdrawal.callbackGasLimit() }(\\n            key,\\n            glvData,\\n            eventData\\n        ) {\\n        } catch {\\n            emit AfterGlvWithdrawalCancellationError(key, glvWithdrawal);\\n        }\\n    }\\n\\n    // @dev validates that the given address is a contract\\n    // @param callbackContract the contract to call\\n    function isValidCallbackContract(address callbackContract) public view returns (bool) {\\n        if (callbackContract == address(0)) { return false; }\\n        if (!callbackContract.isContract()) { return false; }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xec102961f11fd9afa3b96276bd556417fae2e4b28b76c419b0009d9846608700\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IDepositCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n\\n// @title IDepositCallbackReceiver\\n// @dev interface for a deposit callback contract\\ninterface IDepositCallbackReceiver {\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(bytes32 key, EventUtils.EventLogData memory depositData, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(bytes32 key, EventUtils.EventLogData memory depositData, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0x689084be91534e98f5be68704e40ed84a5a2eebb8f56921c36e2fe1a2d57158b\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IGasFeeCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\ninterface IGasFeeCallbackReceiver {\\n    function refundExecutionFee(bytes32 key, EventUtils.EventLogData memory eventData) external payable;\\n}\\n\",\"keccak256\":\"0xfe5c4e4729d117cd2559c0a6b20567ec940d02c2fad5f58a276e854bf5c1e15d\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IGlvDepositCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n// @title IGlvDepositCallbackReceiver\\n// @dev interface for a glvDeposit callback contract\\ninterface IGlvDepositCallbackReceiver {\\n    // @dev called after a glvDeposit execution\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was executed\\n    function afterGlvDepositExecution(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvDepositData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n\\n    // @dev called after a glvDeposit cancellation\\n    // @param key the key of the glvDeposit\\n    // @param glvDeposit the glvDeposit that was cancelled\\n    function afterGlvDepositCancellation(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvDepositData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0f350e9b2e6aef3eef5167bdc20d871de28da8525dd93e947e454e93adadd37b\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IGlvWithdrawalCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n\\n// @title IGlvWithdrawalCallbackReceiver\\n// @dev interface for a glvWithdrawal callback contract\\ninterface IGlvWithdrawalCallbackReceiver {\\n    // @dev called after a glvWithdrawal execution\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was executed\\n    function afterGlvWithdrawalExecution(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvWithdrawalData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n\\n    // @dev called after a glvWithdrawal cancellation\\n    // @param key the key of the glvWithdrawal\\n    // @param glvWithdrawal the glvWithdrawal that was cancelled\\n    function afterGlvWithdrawalCancellation(\\n        bytes32 key,\\n        EventUtils.EventLogData memory glvWithdrawalData,\\n        EventUtils.EventLogData memory eventData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f6d71eed3afc99cdb08b8ec6363612554593b9d589a2b70164aaee4abc575c3\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IOrderCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\n\\n// @title IOrderCallbackReceiver\\n// @dev interface for an order callback contract\\ninterface IOrderCallbackReceiver {\\n    // @dev called after an order execution\\n    // @param key the key of the order\\n    // @param order the order that was executed\\n    function afterOrderExecution(bytes32 key, EventUtils.EventLogData memory orderData, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after an order cancellation\\n    // @param key the key of the order\\n    // @param order the order that was cancelled\\n    function afterOrderCancellation(bytes32 key, EventUtils.EventLogData memory order, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\\n    // @param key the key of the order\\n    // @param order the order that was frozen\\n    function afterOrderFrozen(bytes32 key, EventUtils.EventLogData memory order, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0x7eb8395b962b6cf0dbdd5795baed6a1436f2473274265058b12ca47e5d76aa25\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IShiftCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\ninterface IShiftCallbackReceiver {\\n    function afterShiftExecution(bytes32 key, EventUtils.EventLogData memory shiftData, EventUtils.EventLogData memory eventData) external;\\n    function afterShiftCancellation(bytes32 key, EventUtils.EventLogData memory shiftData, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0xd567e87837ba0aff0955704de4d81778d05b96ab775723ca7232bda8eca7c9ab\",\"license\":\"BUSL-1.1\"},\"contracts/callback/IWithdrawalCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventUtils.sol\\\";\\n\\n// @title IWithdrawalCallbackReceiver\\n// @dev interface for a withdrawal callback contract\\ninterface IWithdrawalCallbackReceiver {\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(bytes32 key, EventUtils.EventLogData memory withdrawal, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(bytes32 key, EventUtils.EventLogData memory withdrawal, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0xb42f1929f23d01a7368b1e967417ac5f90b1e6be2d36cedc7894bd3521f5e4e5\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbGasInfo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ArbGasInfo\\ninterface ArbGasInfo {\\n    function getCurrentTxL1GasFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x48c4ffaab45cc49cf4d4014eaf92867b65f7cf5c20deca5199e746d72c197816\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ArbSys\\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\\n// value, the ArbSys interface is used to retrieve the L2 value\\ninterface ArbSys {\\n    function arbBlockNumber() external view returns (uint256);\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x97a2fcc4828af974d9e763db893b1188fec4d964ec3896611284678631dc5ffd\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArbSys.sol\\\";\\nimport \\\"./ArbGasInfo.sol\\\";\\n\\n// @title Chain\\n// @dev Wrap the calls to retrieve chain variables to handle differences\\n// between chain implementations\\nlibrary Chain {\\n    // if the ARBITRUM_CHAIN_ID changes, a new version of this library\\n    // and contracts depending on it would need to be deployed\\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\\n    uint256 public constant ARBITRUM_SEPOLIA_CHAIN_ID = 421614;\\n\\n    ArbSys public constant arbSys = ArbSys(address(100));\\n    ArbGasInfo public constant arbGasInfo = ArbGasInfo(address(108));\\n\\n    // @dev return the current block's timestamp\\n    // @return the current block's timestamp\\n    function currentTimestamp() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    // @dev return the current block's number\\n    // @return the current block's number\\n    function currentBlockNumber() internal view returns (uint256) {\\n        if (shouldUseArbPrecompiles()) {\\n            return arbSys.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    // @dev return the current block's hash\\n    // @return the current block's hash\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (shouldUseArbPrecompiles()) {\\n            return arbSys.arbBlockHash(blockNumber);\\n        }\\n\\n        return blockhash(blockNumber);\\n    }\\n\\n    function shouldUseArbPrecompiles() internal view returns (bool) {\\n        return block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_SEPOLIA_CHAIN_ID;\\n    }\\n\\n    function getCurrentTxL1GasFees() internal view returns (uint256) {\\n        if (!shouldUseArbPrecompiles()) {\\n            return 0;\\n        }\\n        return arbGasInfo.getCurrentTxL1GasFees();\\n    }\\n}\\n\",\"keccak256\":\"0x6aaf3c482b05293c1d7582182e5453a25d4e87aa7d51388865d11984daba94cd\",\"license\":\"BUSL-1.1\"},\"contracts/data/DataStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\n// @title DataStore\\n// @dev DataStore for all general state values\\ncontract DataStore is RoleModule {\\n    using SafeCast for int256;\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.UintSet;\\n\\n    // store for uint values\\n    mapping(bytes32 => uint256) public uintValues;\\n    // store for int values\\n    mapping(bytes32 => int256) public intValues;\\n    // store for address values\\n    mapping(bytes32 => address) public addressValues;\\n    // store for bool values\\n    mapping(bytes32 => bool) public boolValues;\\n    // store for string values\\n    mapping(bytes32 => string) public stringValues;\\n    // store for bytes32 values\\n    mapping(bytes32 => bytes32) public bytes32Values;\\n\\n    // store for uint[] values\\n    mapping(bytes32 => uint256[]) public uintArrayValues;\\n    // store for int[] values\\n    mapping(bytes32 => int256[]) public intArrayValues;\\n    // store for address[] values\\n    mapping(bytes32 => address[]) public addressArrayValues;\\n    // store for bool[] values\\n    mapping(bytes32 => bool[]) public boolArrayValues;\\n    // store for string[] values\\n    mapping(bytes32 => string[]) public stringArrayValues;\\n    // store for bytes32[] values\\n    mapping(bytes32 => bytes32[]) public bytes32ArrayValues;\\n\\n    // store for bytes32 sets\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) internal bytes32Sets;\\n    // store for address sets\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal addressSets;\\n    // store for uint256 sets\\n    mapping(bytes32 => EnumerableSet.UintSet) internal uintSets;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev get the uint value for the given key\\n    // @param key the key of the value\\n    // @return the uint value for the key\\n    function getUint(bytes32 key) external view returns (uint256) {\\n        return uintValues[key];\\n    }\\n\\n    // @dev set the uint value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the uint value for the key\\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uintValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the uint value for the given key\\n    // @param key the key of the value\\n    function removeUint(bytes32 key) external onlyController {\\n        delete uintValues[key];\\n    }\\n\\n    // @dev add the input int value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, int256 value, string memory errorMessage) external onlyController returns (uint256) {\\n        uint256 currValue = uintValues[key];\\n        if (value < 0 && (-value).toUint256() > currValue) {\\n            revert(errorMessage);\\n        }\\n        uint256 nextUint = Calc.sumReturnUint256(currValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 currValue = uintValues[key];\\n        uint256 nextUint = currValue + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input int value to the existing uint value, prevent the uint\\n    // value from becoming negative\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyBoundedDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\\n        uint256 uintValue = uintValues[key];\\n        if (value < 0 && (-value).toUint256() > uintValue) {\\n            uintValues[key] = 0;\\n            return 0;\\n        }\\n\\n        uint256 nextUint = Calc.sumReturnUint256(uintValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev subtract the input uint value from the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] - value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev get the int value for the given key\\n    // @param key the key of the value\\n    // @return the int value for the key\\n    function getInt(bytes32 key) external view returns (int256) {\\n        return intValues[key];\\n    }\\n\\n    // @dev set the int value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the int value for the key\\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        intValues[key] = value;\\n        return value;\\n    }\\n\\n    function removeInt(bytes32 key) external onlyController {\\n        delete intValues[key];\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev subtract the input int value from the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] - value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev get the address value for the given key\\n    // @param key the key of the value\\n    // @return the address value for the key\\n    function getAddress(bytes32 key) external view returns (address) {\\n        return addressValues[key];\\n    }\\n\\n    // @dev set the address value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the address value for the key\\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\\n        addressValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the address value for the given key\\n    // @param key the key of the value\\n    function removeAddress(bytes32 key) external onlyController {\\n        delete addressValues[key];\\n    }\\n\\n    // @dev get the bool value for the given key\\n    // @param key the key of the value\\n    // @return the bool value for the key\\n    function getBool(bytes32 key) external view returns (bool) {\\n        return boolValues[key];\\n    }\\n\\n    // @dev set the bool value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bool value for the key\\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\\n        boolValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the bool value for the given key\\n    // @param key the key of the value\\n    function removeBool(bytes32 key) external onlyController {\\n        delete boolValues[key];\\n    }\\n\\n    // @dev get the string value for the given key\\n    // @param key the key of the value\\n    // @return the string value for the key\\n    function getString(bytes32 key) external view returns (string memory) {\\n        return stringValues[key];\\n    }\\n\\n    // @dev set the string value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the string value for the key\\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\\n        stringValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the string value for the given key\\n    // @param key the key of the value\\n    function removeString(bytes32 key) external onlyController {\\n        delete stringValues[key];\\n    }\\n\\n    // @dev get the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @return the bytes32 value for the key\\n    function getBytes32(bytes32 key) external view returns (bytes32) {\\n        return bytes32Values[key];\\n    }\\n\\n    // @dev set the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bytes32 value for the key\\n    function setBytes32(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\\n        bytes32Values[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the bytes32 value for the given key\\n    // @param key the key of the value\\n    function removeBytes32(bytes32 key) external onlyController {\\n        delete bytes32Values[key];\\n    }\\n\\n    // @dev get the uint array for the given key\\n    // @param key the key of the uint array\\n    // @return the uint array for the key\\n    function getUintArray(bytes32 key) external view returns (uint256[] memory) {\\n        return uintArrayValues[key];\\n    }\\n\\n    // @dev set the uint array for the given key\\n    // @param key the key of the uint array\\n    // @param value the value of the uint array\\n    function setUintArray(bytes32 key, uint256[] memory value) external onlyController {\\n        uintArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the uint array for the given key\\n    // @param key the key of the uint array\\n    // @param value the value of the uint array\\n    function removeUintArray(bytes32 key) external onlyController {\\n        delete uintArrayValues[key];\\n    }\\n\\n    // @dev get the int array for the given key\\n    // @param key the key of the int array\\n    // @return the int array for the key\\n    function getIntArray(bytes32 key) external view returns (int256[] memory) {\\n        return intArrayValues[key];\\n    }\\n\\n    // @dev set the int array for the given key\\n    // @param key the key of the int array\\n    // @param value the value of the int array\\n    function setIntArray(bytes32 key, int256[] memory value) external onlyController {\\n        intArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the int array for the given key\\n    // @param key the key of the int array\\n    // @param value the value of the int array\\n    function removeIntArray(bytes32 key) external onlyController {\\n        delete intArrayValues[key];\\n    }\\n\\n    // @dev get the address array for the given key\\n    // @param key the key of the address array\\n    // @return the address array for the key\\n    function getAddressArray(bytes32 key) external view returns (address[] memory) {\\n        return addressArrayValues[key];\\n    }\\n\\n    // @dev set the address array for the given key\\n    // @param key the key of the address array\\n    // @param value the value of the address array\\n    function setAddressArray(bytes32 key, address[] memory value) external onlyController {\\n        addressArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the address array for the given key\\n    // @param key the key of the address array\\n    // @param value the value of the address array\\n    function removeAddressArray(bytes32 key) external onlyController {\\n        delete addressArrayValues[key];\\n    }\\n\\n    // @dev get the bool array for the given key\\n    // @param key the key of the bool array\\n    // @return the bool array for the key\\n    function getBoolArray(bytes32 key) external view returns (bool[] memory) {\\n        return boolArrayValues[key];\\n    }\\n\\n    // @dev set the bool array for the given key\\n    // @param key the key of the bool array\\n    // @param value the value of the bool array\\n    function setBoolArray(bytes32 key, bool[] memory value) external onlyController {\\n        boolArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the bool array for the given key\\n    // @param key the key of the bool array\\n    // @param value the value of the bool array\\n    function removeBoolArray(bytes32 key) external onlyController {\\n        delete boolArrayValues[key];\\n    }\\n\\n    // @dev get the string array for the given key\\n    // @param key the key of the string array\\n    // @return the string array for the key\\n    function getStringArray(bytes32 key) external view returns (string[] memory) {\\n        return stringArrayValues[key];\\n    }\\n\\n    // @dev set the string array for the given key\\n    // @param key the key of the string array\\n    // @param value the value of the string array\\n    function setStringArray(bytes32 key, string[] memory value) external onlyController {\\n        stringArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the string array for the given key\\n    // @param key the key of the string array\\n    // @param value the value of the string array\\n    function removeStringArray(bytes32 key) external onlyController {\\n        delete stringArrayValues[key];\\n    }\\n\\n    // @dev get the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @return the bytes32 array for the key\\n    function getBytes32Array(bytes32 key) external view returns (bytes32[] memory) {\\n        return bytes32ArrayValues[key];\\n    }\\n\\n    // @dev set the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @param value the value of the bytes32 array\\n    function setBytes32Array(bytes32 key, bytes32[] memory value) external onlyController {\\n        bytes32ArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @param value the value of the bytes32 array\\n    function removeBytes32Array(bytes32 key) external onlyController {\\n        delete bytes32ArrayValues[key];\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool) {\\n        return bytes32Sets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getBytes32Count(bytes32 setKey) external view returns (uint256) {\\n        return bytes32Sets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getBytes32ValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return bytes32Sets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addBytes32(bytes32 setKey, bytes32 value) external onlyController {\\n        bytes32Sets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeBytes32(bytes32 setKey, bytes32 value) external onlyController {\\n        bytes32Sets[setKey].remove(value);\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsAddress(bytes32 setKey, address value) external view returns (bool) {\\n        return addressSets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getAddressCount(bytes32 setKey) external view returns (uint256) {\\n        return addressSets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getAddressValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return addressSets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addAddress(bytes32 setKey, address value) external onlyController {\\n        addressSets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeAddress(bytes32 setKey, address value) external onlyController {\\n        addressSets[setKey].remove(value);\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsUint(bytes32 setKey, uint256 value) external view returns (bool) {\\n        return uintSets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getUintCount(bytes32 setKey) external view returns (uint256) {\\n        return uintSets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getUintValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (uint256[] memory) {\\n        return uintSets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addUint(bytes32 setKey, uint256 value) external onlyController {\\n        uintSets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeUint(bytes32 setKey, uint256 value) external onlyController {\\n        uintSets[setKey].remove(value);\\n    }\\n}\\n\",\"keccak256\":\"0x38684fbf5eaa5e5c4ae0d220b28b7ceb3ddd6be8d983f162ac4430e7479dd90c\",\"license\":\"BUSL-1.1\"},\"contracts/data/Keys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Keys\\n// @dev Keys for values in the DataStore\\nlibrary Keys {\\n    // @dev key for the address of the wrapped native token\\n    bytes32 public constant WNT = keccak256(abi.encode(\\\"WNT\\\"));\\n    // @dev key for the nonce value used in NonceUtils\\n    bytes32 public constant NONCE = keccak256(abi.encode(\\\"NONCE\\\"));\\n\\n    // @dev for sending received fees\\n    bytes32 public constant FEE_RECEIVER = keccak256(abi.encode(\\\"FEE_RECEIVER\\\"));\\n\\n    // @dev for holding tokens that could not be sent out\\n    bytes32 public constant HOLDING_ADDRESS = keccak256(abi.encode(\\\"HOLDING_ADDRESS\\\"));\\n    bytes32 public constant RELAY_FEE_ADDRESS = keccak256(abi.encode(\\\"RELAY_FEE_ADDRESS\\\"));\\n\\n    // @dev key for the minimum gas for execution error\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS\\\"));\\n\\n    // @dev key for the minimum gas that should be forwarded for execution error handling\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD\\\"));\\n\\n    // @dev key for the min additional gas for execution\\n    bytes32 public constant MIN_ADDITIONAL_GAS_FOR_EXECUTION = keccak256(abi.encode(\\\"MIN_ADDITIONAL_GAS_FOR_EXECUTION\\\"));\\n\\n    // @dev for a global reentrancy guard\\n    bytes32 public constant REENTRANCY_GUARD_STATUS = keccak256(abi.encode(\\\"REENTRANCY_GUARD_STATUS\\\"));\\n\\n    // @dev key for deposit fees\\n    bytes32 public constant DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"DEPOSIT_FEE_TYPE\\\"));\\n    // @dev key for withdrawal fees\\n    bytes32 public constant WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"WITHDRAWAL_FEE_TYPE\\\"));\\n    // @dev key for swap fees\\n    bytes32 public constant SWAP_FEE_TYPE = keccak256(abi.encode(\\\"SWAP_FEE_TYPE\\\"));\\n    bytes32 public constant ATOMIC_SWAP_FEE_TYPE = keccak256(abi.encode(\\\"ATOMIC_SWAP_FEE_TYPE\\\"));\\n    // @dev key for position fees\\n    bytes32 public constant POSITION_FEE_TYPE = keccak256(abi.encode(\\\"POSITION_FEE_TYPE\\\"));\\n    // @dev key for ui deposit fees\\n    bytes32 public constant UI_DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"UI_DEPOSIT_FEE_TYPE\\\"));\\n    // @dev key for ui withdrawal fees\\n    bytes32 public constant UI_WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"UI_WITHDRAWAL_FEE_TYPE\\\"));\\n    // @dev key for ui swap fees\\n    bytes32 public constant UI_SWAP_FEE_TYPE = keccak256(abi.encode(\\\"UI_SWAP_FEE_TYPE\\\"));\\n    // @dev key for ui position fees\\n    bytes32 public constant UI_POSITION_FEE_TYPE = keccak256(abi.encode(\\\"UI_POSITION_FEE_TYPE\\\"));\\n\\n    // @dev key for ui fee factor\\n    bytes32 public constant UI_FEE_FACTOR = keccak256(abi.encode(\\\"UI_FEE_FACTOR\\\"));\\n    // @dev key for max ui fee receiver factor\\n    bytes32 public constant MAX_UI_FEE_FACTOR = keccak256(abi.encode(\\\"MAX_UI_FEE_FACTOR\\\"));\\n\\n    // @dev key for the claimable fee amount\\n    bytes32 public constant CLAIMABLE_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FEE_AMOUNT\\\"));\\n    // @dev key for the claimable ui fee amount\\n    bytes32 public constant CLAIMABLE_UI_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_UI_FEE_AMOUNT\\\"));\\n    // @dev key for the max number of auto cancel orders\\n    bytes32 public constant MAX_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\\\"MAX_AUTO_CANCEL_ORDERS\\\"));\\n    // @dev key for the max total callback gas limit for auto cancel orders\\n    bytes32 public constant MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\\\"MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS\\\"));\\n\\n    // @dev key for the market list\\n    bytes32 public constant MARKET_LIST = keccak256(abi.encode(\\\"MARKET_LIST\\\"));\\n\\n    // @dev key for the fee batch list\\n    bytes32 public constant FEE_BATCH_LIST = keccak256(abi.encode(\\\"FEE_BATCH_LIST\\\"));\\n\\n    // @dev key for the deposit list\\n    bytes32 public constant DEPOSIT_LIST = keccak256(abi.encode(\\\"DEPOSIT_LIST\\\"));\\n    // @dev key for the account deposit list\\n    bytes32 public constant ACCOUNT_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_DEPOSIT_LIST\\\"));\\n\\n    // @dev key for the withdrawal list\\n    bytes32 public constant WITHDRAWAL_LIST = keccak256(abi.encode(\\\"WITHDRAWAL_LIST\\\"));\\n    // @dev key for the account withdrawal list\\n    bytes32 public constant ACCOUNT_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"ACCOUNT_WITHDRAWAL_LIST\\\"));\\n\\n    // @dev key for the shift list\\n    bytes32 public constant SHIFT_LIST = keccak256(abi.encode(\\\"SHIFT_LIST\\\"));\\n    // @dev key for the account shift list\\n    bytes32 public constant ACCOUNT_SHIFT_LIST = keccak256(abi.encode(\\\"ACCOUNT_SHIFT_LIST\\\"));\\n\\n    bytes32 public constant GLV_LIST = keccak256(abi.encode(\\\"GLV_LIST\\\"));\\n    bytes32 public constant GLV_DEPOSIT_LIST = keccak256(abi.encode(\\\"GLV_DEPOSIT_LIST\\\"));\\n    bytes32 public constant GLV_SHIFT_LIST = keccak256(abi.encode(\\\"GLV_SHIFT_LIST\\\"));\\n    bytes32 public constant ACCOUNT_GLV_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_GLV_DEPOSIT_LIST\\\"));\\n    bytes32 public constant GLV_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"GLV_WITHDRAWAL_LIST\\\"));\\n    bytes32 public constant ACCOUNT_GLV_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"ACCOUNT_GLV_WITHDRAWAL_LIST\\\"));\\n    bytes32 public constant GLV_SUPPORTED_MARKET_LIST = keccak256(abi.encode(\\\"GLV_SUPPORTED_MARKET_LIST\\\"));\\n\\n    // @dev key for the position list\\n    bytes32 public constant POSITION_LIST = keccak256(abi.encode(\\\"POSITION_LIST\\\"));\\n    // @dev key for the account position list\\n    bytes32 public constant ACCOUNT_POSITION_LIST = keccak256(abi.encode(\\\"ACCOUNT_POSITION_LIST\\\"));\\n\\n    // @dev key for the order list\\n    bytes32 public constant ORDER_LIST = keccak256(abi.encode(\\\"ORDER_LIST\\\"));\\n    // @dev key for the account order list\\n    bytes32 public constant ACCOUNT_ORDER_LIST = keccak256(abi.encode(\\\"ACCOUNT_ORDER_LIST\\\"));\\n\\n    // @dev key for the subaccount list\\n    bytes32 public constant SUBACCOUNT_LIST = keccak256(abi.encode(\\\"SUBACCOUNT_LIST\\\"));\\n\\n    // @dev key for the auto cancel order list\\n    bytes32 public constant AUTO_CANCEL_ORDER_LIST = keccak256(abi.encode(\\\"AUTO_CANCEL_ORDER_LIST\\\"));\\n\\n    // @dev key for is market disabled\\n    bytes32 public constant IS_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_MARKET_DISABLED\\\"));\\n\\n    // @dev key for the max swap path length allowed\\n    bytes32 public constant MAX_SWAP_PATH_LENGTH = keccak256(abi.encode(\\\"MAX_SWAP_PATH_LENGTH\\\"));\\n    // @dev key used to store markets observed in a swap path, to ensure that a swap path contains unique markets\\n    bytes32 public constant SWAP_PATH_MARKET_FLAG = keccak256(abi.encode(\\\"SWAP_PATH_MARKET_FLAG\\\"));\\n    // @dev key used to store the min market tokens for the first deposit for a market\\n    bytes32 public constant MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\\\"MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT\\\"));\\n\\n    bytes32 public constant CREATE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    bytes32 public constant CANCEL_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    bytes32 public constant EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n\\n    bytes32 public constant CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    bytes32 public constant CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    bytes32 public constant EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n\\n    bytes32 public constant CREATE_GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_SHIFT_FEATURE_DISABLED\\\"));\\n    bytes32 public constant EXECUTE_GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_SHIFT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create deposit feature is disabled\\n    bytes32 public constant CREATE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel deposit feature is disabled\\n    bytes32 public constant CANCEL_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute deposit feature is disabled\\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_DEPOSIT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create withdrawal feature is disabled\\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel withdrawal feature is disabled\\n    bytes32 public constant CANCEL_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute withdrawal feature is disabled\\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute atomic withdrawal feature is disabled\\n    bytes32 public constant EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create shift feature is disabled\\n    bytes32 public constant CREATE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_SHIFT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel shift feature is disabled\\n    bytes32 public constant CANCEL_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_SHIFT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute shift feature is disabled\\n    bytes32 public constant EXECUTE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_SHIFT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create order feature is disabled\\n    bytes32 public constant CREATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute order feature is disabled\\n    bytes32 public constant EXECUTE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute adl feature is disabled\\n    // for liquidations, it can be disabled by using the EXECUTE_ORDER_FEATURE_DISABLED key with the Liquidation\\n    // order type, ADL orders have a MarketDecrease order type, so a separate key is needed to disable it\\n    bytes32 public constant EXECUTE_ADL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ADL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the update order feature is disabled\\n    bytes32 public constant UPDATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"UPDATE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel order feature is disabled\\n    bytes32 public constant CANCEL_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_ORDER_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the claim funding fees feature is disabled\\n    bytes32 public constant CLAIM_FUNDING_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_FUNDING_FEES_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim collateral feature is disabled\\n    bytes32 public constant CLAIM_COLLATERAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_COLLATERAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim affiliate rewards feature is disabled\\n    bytes32 public constant CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim ui fees feature is disabled\\n    bytes32 public constant CLAIM_UI_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_UI_FEES_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the subaccount feature is disabled\\n    bytes32 public constant SUBACCOUNT_FEATURE_DISABLED = keccak256(abi.encode(\\\"SUBACCOUNT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the gasless feature is disabled\\n    bytes32 public constant GASLESS_FEATURE_DISABLED = keccak256(abi.encode(\\\"GASLESS_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for the minimum required oracle signers for an oracle observation\\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(abi.encode(\\\"MIN_ORACLE_SIGNERS\\\"));\\n    // @dev key for the minimum block confirmations before blockhash can be excluded for oracle signature validation\\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(abi.encode(\\\"MIN_ORACLE_BLOCK_CONFIRMATIONS\\\"));\\n    // @dev key for the maximum usable oracle price age in seconds\\n    bytes32 public constant MAX_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ORACLE_PRICE_AGE\\\"));\\n    // @dev key for the maximum usable atomic oracle price age in seconds\\n    bytes32 public constant MAX_ATOMIC_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ATOMIC_ORACLE_PRICE_AGE\\\"));\\n    // @dev key for the maximum oracle timestamp range\\n    bytes32 public constant MAX_ORACLE_TIMESTAMP_RANGE = keccak256(abi.encode(\\\"MAX_ORACLE_TIMESTAMP_RANGE\\\"));\\n    // @dev key for the maximum oracle price deviation factor from the ref price\\n    bytes32 public constant MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR = keccak256(abi.encode(\\\"MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR\\\"));\\n    // @dev key for whether an oracle provider is enabled\\n    bytes32 public constant IS_ORACLE_PROVIDER_ENABLED = keccak256(abi.encode(\\\"IS_ORACLE_PROVIDER_ENABLED\\\"));\\n    // @dev key for whether an oracle provider can be used for atomic actions\\n    bytes32 public constant IS_ATOMIC_ORACLE_PROVIDER = keccak256(abi.encode(\\\"IS_ATOMIC_ORACLE_PROVIDER\\\"));\\n    // @dev key for oracle timestamp adjustment\\n    bytes32 public constant ORACLE_TIMESTAMP_ADJUSTMENT = keccak256(abi.encode(\\\"ORACLE_TIMESTAMP_ADJUSTMENT\\\"));\\n    // @dev key for oracle provider for token\\n    bytes32 public constant ORACLE_PROVIDER_FOR_TOKEN = keccak256(abi.encode(\\\"ORACLE_PROVIDER_FOR_TOKEN\\\"));\\n    // @dev key for oracle provider updated time\\n    bytes32 public constant ORACLE_PROVIDER_UPDATED_AT = keccak256(abi.encode(\\\"ORACLE_PROVIDER_UPDATED_AT\\\"));\\n    // @dev key for oracle provider same value delay\\n    bytes32 public constant ORACLE_PROVIDER_MIN_CHANGE_DELAY = keccak256(abi.encode(\\\"ORACLE_PROVIDER_MIN_CHANGE_DELAY\\\"));\\n    // @dev key for the chainlink payment token\\n    bytes32 public constant CHAINLINK_PAYMENT_TOKEN = keccak256(abi.encode(\\\"CHAINLINK_PAYMENT_TOKEN\\\"));\\n    // @dev key for the sequencer grace duration\\n    bytes32 public constant SEQUENCER_GRACE_DURATION = keccak256(abi.encode(\\\"SEQUENCER_GRACE_DURATION\\\"));\\n\\n    // @dev key for the percentage amount of position fees to be received\\n    bytes32 public constant POSITION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of liquidation fees to be received\\n    bytes32 public constant LIQUIDATION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"LIQUIDATION_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of swap fees to be received\\n    bytes32 public constant SWAP_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of borrowing fees to be received\\n    bytes32 public constant BORROWING_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"BORROWING_FEE_RECEIVER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1\\\"));\\n    // @dev key for the gas limit used for each oracle price when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_PER_ORACLE_PRICE\\\"));\\n    // @dev key for the multiplier used when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when calculating execution fee\\n    bytes32 public constant EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1\\\"));\\n    // @dev key for the gas limit used for each oracle price\\n    bytes32 public constant EXECUTION_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_PER_ORACLE_PRICE\\\"));\\n    // @dev key for the multiplier used when calculating execution fee\\n    bytes32 public constant EXECUTION_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the max execution fee multiplier\\n    bytes32 public constant MAX_EXECUTION_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"MAX_EXECUTION_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    bytes32 public constant MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT = keccak256(abi.encode(\\\"MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT\\\"));\\n    bytes32 public constant GELATO_RELAY_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"GELATO_RELAY_FEE_MULTIPLIER_FACTOR\\\"));\\n    bytes32 public constant GELATO_RELAY_FEE_BASE_AMOUNT = keccak256(abi.encode(\\\"GELATO_RELAY_FEE_BASE_AMOUNT\\\"));\\n    // @dev key for the estimated gas limit for deposits\\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"DEPOSIT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for withdrawals\\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"WITHDRAWAL_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_DEPOSIT_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_WITHDRAWAL_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_SHIFT_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_SHIFT_GAS_LIMIT\\\"));\\n    bytes32 public constant GLV_PER_MARKET_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_PER_MARKET_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for shifts\\n    bytes32 public constant SHIFT_GAS_LIMIT = keccak256(abi.encode(\\\"SHIFT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for single swaps\\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(abi.encode(\\\"SINGLE_SWAP_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for increase orders\\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"INCREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for decrease orders\\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"DECREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for swap orders\\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"SWAP_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for token transfers\\n    bytes32 public constant TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for native token transfers\\n    bytes32 public constant NATIVE_TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"NATIVE_TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the request expiration time, after which the request will be considered expired\\n    bytes32 public constant REQUEST_EXPIRATION_TIME = keccak256(abi.encode(\\\"REQUEST_EXPIRATION_TIME\\\"));\\n\\n    bytes32 public constant MAX_CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"MAX_CALLBACK_GAS_LIMIT\\\"));\\n    bytes32 public constant REFUND_EXECUTION_FEE_GAS_LIMIT = keccak256(abi.encode(\\\"REFUND_EXECUTION_FEE_GAS_LIMIT\\\"));\\n    bytes32 public constant SAVED_CALLBACK_CONTRACT = keccak256(abi.encode(\\\"SAVED_CALLBACK_CONTRACT\\\"));\\n\\n    // @dev key for the min collateral factor\\n    bytes32 public constant MIN_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR\\\"));\\n    // @dev key for the min collateral factor for open interest multiplier\\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER\\\"));\\n    // @dev key for the min allowed collateral in USD\\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(abi.encode(\\\"MIN_COLLATERAL_USD\\\"));\\n    // @dev key for the min allowed collateral factor which is using for some new markets to limit allowed leverage\\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_LIQUIDATION = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR_FOR_LIQUIDATION\\\"));\\n    // @dev key for the min allowed position size in USD\\n    bytes32 public constant MIN_POSITION_SIZE_USD = keccak256(abi.encode(\\\"MIN_POSITION_SIZE_USD\\\"));\\n\\n    // @dev key for the virtual id of tokens\\n    bytes32 public constant VIRTUAL_TOKEN_ID = keccak256(abi.encode(\\\"VIRTUAL_TOKEN_ID\\\"));\\n    // @dev key for the virtual id of markets\\n    bytes32 public constant VIRTUAL_MARKET_ID = keccak256(abi.encode(\\\"VIRTUAL_MARKET_ID\\\"));\\n    // @dev key for the virtual inventory for swaps\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_SWAPS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_SWAPS\\\"));\\n    // @dev key for the virtual inventory for positions\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_POSITIONS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_POSITIONS\\\"));\\n\\n    // @dev key for the position impact factor\\n    bytes32 public constant POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the position impact exponent factor\\n    bytes32 public constant POSITION_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the max decrease position impact factor\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the max position impact factor for liquidations\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS\\\"));\\n    // @dev key for the position fee factor\\n    bytes32 public constant POSITION_FEE_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_FACTOR\\\"));\\n    bytes32 public constant PRO_TRADER_TIER = keccak256(abi.encode(\\\"PRO_TRADER_TIER\\\"));\\n    bytes32 public constant PRO_DISCOUNT_FACTOR = keccak256(abi.encode(\\\"PRO_DISCOUNT_FACTOR\\\"));\\n    // @dev key for the liquidation fee factor\\n    bytes32 public constant LIQUIDATION_FEE_FACTOR = keccak256(abi.encode(\\\"LIQUIDATION_FEE_FACTOR\\\"));\\n    // @dev key for the swap impact factor\\n    bytes32 public constant SWAP_IMPACT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_FACTOR\\\"));\\n    // @dev key for the swap impact exponent factor\\n    bytes32 public constant SWAP_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the swap fee factor\\n    bytes32 public constant SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_FACTOR\\\"));\\n    // @dev key for the atomic swap fee factor\\n    bytes32 public constant ATOMIC_SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"ATOMIC_SWAP_FEE_FACTOR\\\"));\\n    bytes32 public constant ATOMIC_WITHDRAWAL_FEE_FACTOR = keccak256(abi.encode(\\\"ATOMIC_WITHDRAWAL_FEE_FACTOR\\\"));\\n    bytes32 public constant DEPOSIT_FEE_FACTOR = keccak256(abi.encode(\\\"DEPOSIT_FEE_FACTOR\\\"));\\n    bytes32 public constant WITHDRAWAL_FEE_FACTOR = keccak256(abi.encode(\\\"WITHDRAWAL_FEE_FACTOR\\\"));\\n    // @dev key for the oracle type\\n    bytes32 public constant ORACLE_TYPE = keccak256(abi.encode(\\\"ORACLE_TYPE\\\"));\\n    // @dev key for open interest\\n    bytes32 public constant OPEN_INTEREST = keccak256(abi.encode(\\\"OPEN_INTEREST\\\"));\\n    // @dev key for open interest in tokens\\n    bytes32 public constant OPEN_INTEREST_IN_TOKENS = keccak256(abi.encode(\\\"OPEN_INTEREST_IN_TOKENS\\\"));\\n    // @dev key for collateral sum for a market\\n    bytes32 public constant COLLATERAL_SUM = keccak256(abi.encode(\\\"COLLATERAL_SUM\\\"));\\n    // @dev key for pool amount\\n    bytes32 public constant POOL_AMOUNT = keccak256(abi.encode(\\\"POOL_AMOUNT\\\"));\\n    // @dev key for max pool amount\\n    bytes32 public constant MAX_POOL_AMOUNT = keccak256(abi.encode(\\\"MAX_POOL_AMOUNT\\\"));\\n    // @dev key for max pool usd for deposit\\n    bytes32 public constant MAX_POOL_USD_FOR_DEPOSIT = keccak256(abi.encode(\\\"MAX_POOL_USD_FOR_DEPOSIT\\\"));\\n    // @dev key for max open interest\\n    bytes32 public constant MAX_OPEN_INTEREST = keccak256(abi.encode(\\\"MAX_OPEN_INTEREST\\\"));\\n    // @dev key for position impact pool amount\\n    bytes32 public constant POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for min position impact pool amount\\n    bytes32 public constant MIN_POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"MIN_POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for position impact pool distribution rate\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTION_RATE = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTION_RATE\\\"));\\n    // @dev key for position impact pool distributed at\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTED_AT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTED_AT\\\"));\\n    // @dev key for swap impact pool amount\\n    bytes32 public constant SWAP_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"SWAP_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for price feed\\n    bytes32 public constant PRICE_FEED = keccak256(abi.encode(\\\"PRICE_FEED\\\"));\\n    // @dev key for price feed multiplier\\n    bytes32 public constant PRICE_FEED_MULTIPLIER = keccak256(abi.encode(\\\"PRICE_FEED_MULTIPLIER\\\"));\\n    // @dev key for price feed heartbeat\\n    bytes32 public constant PRICE_FEED_HEARTBEAT_DURATION = keccak256(abi.encode(\\\"PRICE_FEED_HEARTBEAT_DURATION\\\"));\\n    // @dev key for data stream feed id\\n    bytes32 public constant DATA_STREAM_ID = keccak256(abi.encode(\\\"DATA_STREAM_ID\\\"));\\n    // @dev key for edge oracle data stream feed id\\n    bytes32 public constant EDGE_DATA_STREAM_ID = keccak256(abi.encode(\\\"EDGE_DATA_STREAM_ID\\\"));\\n    // @dev key for data stream feed multiplier\\n    bytes32 public constant DATA_STREAM_MULTIPLIER = keccak256(abi.encode(\\\"DATA_STREAM_MULTIPLIER\\\"));\\n    bytes32 public constant DATA_STREAM_SPREAD_REDUCTION_FACTOR = keccak256(abi.encode(\\\"DATA_STREAM_SPREAD_REDUCTION_FACTOR\\\"));\\n    // @dev key for stable price\\n    bytes32 public constant STABLE_PRICE = keccak256(abi.encode(\\\"STABLE_PRICE\\\"));\\n    // @dev key for reserve factor\\n    bytes32 public constant RESERVE_FACTOR = keccak256(abi.encode(\\\"RESERVE_FACTOR\\\"));\\n    // @dev key for open interest reserve factor\\n    bytes32 public constant OPEN_INTEREST_RESERVE_FACTOR = keccak256(abi.encode(\\\"OPEN_INTEREST_RESERVE_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR = keccak256(abi.encode(\\\"MAX_PNL_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_TRADERS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_TRADERS\\\"));\\n    // @dev key for max pnl factor for adl\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_ADL = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_ADL\\\"));\\n    // @dev key for min pnl factor for adl\\n    bytes32 public constant MIN_PNL_FACTOR_AFTER_ADL = keccak256(abi.encode(\\\"MIN_PNL_FACTOR_AFTER_ADL\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_DEPOSITS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_DEPOSITS\\\"));\\n    // @dev key for max pnl factor for withdrawals\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_WITHDRAWALS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_WITHDRAWALS\\\"));\\n    // @dev key for latest ADL at\\n    bytes32 public constant LATEST_ADL_AT = keccak256(abi.encode(\\\"LATEST_ADL_AT\\\"));\\n    // @dev key for whether ADL is enabled\\n    bytes32 public constant IS_ADL_ENABLED = keccak256(abi.encode(\\\"IS_ADL_ENABLED\\\"));\\n    // @dev key for funding factor\\n    bytes32 public constant FUNDING_FACTOR = keccak256(abi.encode(\\\"FUNDING_FACTOR\\\"));\\n    // @dev key for funding exponent factor\\n    bytes32 public constant FUNDING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"FUNDING_EXPONENT_FACTOR\\\"));\\n    // @dev key for saved funding factor\\n    bytes32 public constant SAVED_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"SAVED_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for funding increase factor\\n    bytes32 public constant FUNDING_INCREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_INCREASE_FACTOR_PER_SECOND\\\"));\\n    // @dev key for funding decrease factor\\n    bytes32 public constant FUNDING_DECREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_DECREASE_FACTOR_PER_SECOND\\\"));\\n    // @dev key for min funding factor\\n    bytes32 public constant MIN_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MIN_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for max funding factor\\n    bytes32 public constant MAX_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MAX_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for threshold for stable funding\\n    bytes32 public constant THRESHOLD_FOR_STABLE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_STABLE_FUNDING\\\"));\\n    // @dev key for threshold for decrease funding\\n    bytes32 public constant THRESHOLD_FOR_DECREASE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_DECREASE_FUNDING\\\"));\\n    // @dev key for funding fee amount per size\\n    bytes32 public constant FUNDING_FEE_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"FUNDING_FEE_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for claimable funding amount per size\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for when funding was last updated at\\n    bytes32 public constant FUNDING_UPDATED_AT = keccak256(abi.encode(\\\"FUNDING_UPDATED_AT\\\"));\\n    // @dev key for claimable funding amount\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT\\\"));\\n    // @dev key for claimable collateral amount\\n    bytes32 public constant CLAIMABLE_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_AMOUNT\\\"));\\n    // @dev key for claimable collateral factor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_FACTOR\\\"));\\n    // @dev key for claimable collateral reduction factor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_REDUCTION_FACTOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_REDUCTION_FACTOR\\\"));\\n    // @dev key for claimable collateral time divisor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_TIME_DIVISOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_TIME_DIVISOR\\\"));\\n    // @dev key for claimable collateral delay\\n    bytes32 public constant CLAIMABLE_COLLATERAL_DELAY = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_DELAY\\\"));\\n    // @dev key for claimed collateral amount\\n    bytes32 public constant CLAIMED_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMED_COLLATERAL_AMOUNT\\\"));\\n    // @dev key for optimal usage factor\\n    bytes32 public constant OPTIMAL_USAGE_FACTOR = keccak256(abi.encode(\\\"OPTIMAL_USAGE_FACTOR\\\"));\\n    // @dev key for base borrowing factor\\n    bytes32 public constant BASE_BORROWING_FACTOR = keccak256(abi.encode(\\\"BASE_BORROWING_FACTOR\\\"));\\n    // @dev key for above optimal usage borrowing factor\\n    bytes32 public constant ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR = keccak256(abi.encode(\\\"ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\\\"BORROWING_FACTOR\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"BORROWING_EXPONENT_FACTOR\\\"));\\n    // @dev key for skipping the borrowing factor for the smaller side\\n    bytes32 public constant SKIP_BORROWING_FEE_FOR_SMALLER_SIDE = keccak256(abi.encode(\\\"SKIP_BORROWING_FEE_FOR_SMALLER_SIDE\\\"));\\n    // @dev key for cumulative borrowing factor\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR\\\"));\\n    // @dev key for when the cumulative borrowing factor was last updated at\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\\\"));\\n    // @dev key for total borrowing amount\\n    bytes32 public constant TOTAL_BORROWING = keccak256(abi.encode(\\\"TOTAL_BORROWING\\\"));\\n    // @dev key for affiliate reward\\n    bytes32 public constant MIN_AFFILIATE_REWARD_FACTOR = keccak256(abi.encode(\\\"MIN_AFFILIATE_REWARD_FACTOR\\\"));\\n    bytes32 public constant AFFILIATE_REWARD = keccak256(abi.encode(\\\"AFFILIATE_REWARD\\\"));\\n    // @dev key for max allowed subaccount action count\\n    bytes32 public constant MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT\\\"));\\n    bytes32 public constant SUBACCOUNT_EXPIRES_AT = keccak256(abi.encode(\\\"SUBACCOUNT_EXPIRES_AT\\\"));\\n    // @dev key for subaccount action count\\n    bytes32 public constant SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"SUBACCOUNT_ACTION_COUNT\\\"));\\n    // @dev key for subaccount auto top up amount\\n    bytes32 public constant SUBACCOUNT_AUTO_TOP_UP_AMOUNT = keccak256(abi.encode(\\\"SUBACCOUNT_AUTO_TOP_UP_AMOUNT\\\"));\\n    // @dev key for subaccount order action\\n    bytes32 public constant SUBACCOUNT_ORDER_ACTION = keccak256(abi.encode(\\\"SUBACCOUNT_ORDER_ACTION\\\"));\\n    // @dev key for subaccount integration id\\n    bytes32 public constant SUBACCOUNT_INTEGRATION_ID = keccak256(abi.encode(\\\"SUBACCOUNT_INTEGRATION_ID\\\"));\\n    // @dev key for subaccount integration id disabled status\\n    bytes32 public constant SUBACCOUNT_INTEGRATION_DISABLED = keccak256(abi.encode(\\\"SUBACCOUNT_INTEGRATION_DISABLED\\\"));\\n    // @dev key for fee distributor swap order token index\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX\\\"));\\n    // @dev key for fee distributor swap fee batch\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_FEE_BATCH = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_FEE_BATCH\\\"));\\n\\n    bytes32 public constant GLV_MAX_MARKET_COUNT = keccak256(abi.encode(\\\"GLV_MAX_MARKET_COUNT\\\"));\\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_USD = keccak256(abi.encode(\\\"GLV_MAX_MARKET_TOKEN_BALANCE_USD\\\"));\\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT = keccak256(abi.encode(\\\"GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT\\\"));\\n    bytes32 public constant IS_GLV_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_GLV_MARKET_DISABLED\\\"));\\n    bytes32 public constant GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR = keccak256(abi.encode(\\\"GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR\\\"));\\n    bytes32 public constant GLV_SHIFT_LAST_EXECUTED_AT = keccak256(abi.encode(\\\"GLV_SHIFT_LAST_EXECUTED_AT\\\"));\\n    bytes32 public constant GLV_SHIFT_MIN_INTERVAL = keccak256(abi.encode(\\\"GLV_SHIFT_MIN_INTERVAL\\\"));\\n    bytes32 public constant MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\\\"MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT\\\"));\\n\\n    // @dev key for disabling automatic parameter updates via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_FEATURE_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_FEATURE_DISABLED\\\"));\\n    // @dev key for disabling all parameter updates for a specific market via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_MARKET_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_MARKET_DISABLED\\\"));\\n    // @dev key for disabling all updates for a specific parameter via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_PARAMETER_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_PARAMETER_DISABLED\\\"));\\n    // @dev key for disabling all updates for a specific market parameter via ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_MARKET_PARAMETER_DISABLED = keccak256(abi.encode(\\\"SYNC_CONFIG_MARKET_PARAMETER_DISABLED\\\"));\\n    // @dev key for tracking which updateIds have already been applied by ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_UPDATE_COMPLETED = keccak256(abi.encode(\\\"SYNC_CONFIG_UPDATE_COMPLETED\\\"));\\n    // @dev key for the latest updateId that has been applied by ConfigSyncer\\n    bytes32 public constant SYNC_CONFIG_LATEST_UPDATE_ID = keccak256(abi.encode(\\\"SYNC_CONFIG_LATEST_UPDATE_ID\\\"));\\n\\n    // @dev key for the contributor account list\\n    bytes32 public constant CONTRIBUTOR_ACCOUNT_LIST = keccak256(abi.encode(\\\"CONTRIBUTOR_ACCOUNT_LIST\\\"));\\n    // @dev key for the contributor token list\\n    bytes32 public constant CONTRIBUTOR_TOKEN_LIST = keccak256(abi.encode(\\\"CONTRIBUTOR_TOKEN_LIST\\\"));\\n    // @dev key for the contributor token amount\\n    bytes32 public constant CONTRIBUTOR_TOKEN_AMOUNT = keccak256(abi.encode(\\\"CONTRIBUTOR_TOKEN_AMOUNT\\\"));\\n    // @dev key for the max total contributor token amount\\n    bytes32 public constant MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT = keccak256(abi.encode(\\\"MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT\\\"));\\n    // @dev key for the contributor token vault\\n    bytes32 public constant CONTRIBUTOR_TOKEN_VAULT = keccak256(abi.encode(\\\"CONTRIBUTOR_TOKEN_VAULT\\\"));\\n    // @dev key for the contributor last payment at\\n    bytes32 public constant CONTRIBUTOR_LAST_PAYMENT_AT = keccak256(abi.encode(\\\"CONTRIBUTOR_LAST_PAYMENT_AT\\\"));\\n    // @dev key for the min contributor payment interval\\n    bytes32 public constant MIN_CONTRIBUTOR_PAYMENT_INTERVAL = keccak256(abi.encode(\\\"MIN_CONTRIBUTOR_PAYMENT_INTERVAL\\\"));\\n\\n    // @dev key for the buyback batch amount used when claiming and swapping fees\\n    bytes32 public constant BUYBACK_BATCH_AMOUNT = keccak256(abi.encode(\\\"BUYBACK_BATCH_AMOUNT\\\"));\\n    // @dev key for the buyback available fees\\n    bytes32 public constant BUYBACK_AVAILABLE_FEE_AMOUNT = keccak256(abi.encode(\\\"BUYBACK_AVAILABLE_FEE_AMOUNT\\\"));\\n    // @dev key for the buyback gmx fee factor used in calculating fees by GMX/WNT\\n    bytes32 public constant BUYBACK_GMX_FACTOR = keccak256(abi.encode(\\\"BUYBACK_GMX_FACTOR\\\"));\\n    // @dev key for the FeeHandler max price impact when buying back fees\\n    bytes32 public constant BUYBACK_MAX_PRICE_IMPACT_FACTOR = keccak256(abi.encode(\\\"BUYBACK_MAX_PRICE_IMPACT_FACTOR\\\"));\\n    // @dev key for the maximum price delay in seconds when buying back fees\\n    bytes32 public constant BUYBACK_MAX_PRICE_AGE = keccak256(abi.encode(\\\"BUYBACK_MAX_PRICE_AGE\\\"));\\n    // @dev key for the buyback withdrawable fees\\n    bytes32 public constant WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT = keccak256(abi.encode(\\\"WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT\\\"));\\n\\n    // @dev key for user's multichain balance\\n    bytes32 public constant MULTICHAIN_BALANCE = keccak256(abi.encode(\\\"MULTICHAIN_BALANCE\\\"));\\n    // @dev key for the flag if a multichain provider is enabled\\n    bytes32 public constant IS_MULTICHAIN_PROVIDER_ENABLED = keccak256(abi.encode(\\\"IS_MULTICHAIN_PROVIDER_ENABLED\\\"));\\n    // @dev key for the flag if a multichain endpoint is enabled\\n    bytes32 public constant IS_MULTICHAIN_ENDPOINT_ENABLED = keccak256(abi.encode(\\\"IS_MULTICHAIN_ENDPOINT_ENABLED\\\"));\\n    // @dev key for the last src chain id from which the user last managed his position\\n    bytes32 public constant POSITION_LAST_SRC_CHAIN_ID = keccak256(abi.encode(\\\"POSITION_LAST_SRC_CHAIN_ID\\\"));\\n    // @dev key for the flag if a src chain is enabled\\n    bytes32 public constant IS_SRC_CHAIN_ID_ENABLED = keccak256(abi.encode(\\\"IS_SRC_CHAIN_ID_ENABLED\\\"));\\n\\n    // @dev key for the maximum length for data list array of bytes32\\n    bytes32 public constant MAX_DATA_LENGTH = keccak256(abi.encode(\\\"MAX_DATA_LENGTH\\\"));\\n\\n    // @dev constant for user initiated cancel reason\\n    string public constant USER_INITIATED_CANCEL = \\\"USER_INITIATED_CANCEL\\\";\\n\\n    // @dev function used to calculate fullKey for a given market parameter\\n    // @param baseKey the base key for the market parameter\\n    // @param data the additional data for the market parameter\\n    function getFullKey(bytes32 baseKey, bytes memory data) internal pure returns (bytes32) {\\n        if (data.length == 0) {\\n            return baseKey;\\n        }\\n\\n        return keccak256(bytes.concat(baseKey, data));\\n    }\\n\\n    // @dev key for the account deposit list\\n    // @param account the account for the list\\n    function accountDepositListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_DEPOSIT_LIST, account));\\n    }\\n\\n    // @dev key for the account withdrawal list\\n    // @param account the account for the list\\n    function accountWithdrawalListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_WITHDRAWAL_LIST, account));\\n    }\\n\\n    // @dev key for the account shift list\\n    // @param account the account for the list\\n    function accountShiftListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_SHIFT_LIST, account));\\n    }\\n\\n    // @dev key for the account glv deposit list\\n    // @param account the account for the list\\n    function accountGlvDepositListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_GLV_DEPOSIT_LIST, account));\\n    }\\n\\n    // @dev key for the account glv deposit list\\n    // @param account the account for the list\\n    function accountGlvWithdrawalListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_GLV_WITHDRAWAL_LIST, account));\\n    }\\n\\n    // @dev key for the glv supported market list\\n    // @param glv the glv for the supported market list\\n    function glvSupportedMarketListKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_SUPPORTED_MARKET_LIST, glv));\\n    }\\n\\n    // @dev key for the account position list\\n    // @param account the account for the list\\n    function accountPositionListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_POSITION_LIST, account));\\n    }\\n\\n    // @dev key for the account order list\\n    // @param account the account for the list\\n    function accountOrderListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_ORDER_LIST, account));\\n    }\\n\\n    // @dev key for the subaccount list\\n    // @param account the account for the list\\n    function subaccountListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(SUBACCOUNT_LIST, account));\\n    }\\n\\n    // @dev key for the auto cancel order list\\n    // @param position key the position key for the list\\n    function autoCancelOrderListKey(bytes32 positionKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(AUTO_CANCEL_ORDER_LIST, positionKey));\\n    }\\n\\n    // @dev key for the claimable fee amount\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    function claimableFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_FEE_AMOUNT, market, token));\\n    }\\n\\n    // @dev key for the claimable ui fee amount\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    // @param account the account that can claim the ui fee\\n    function claimableUiFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token));\\n    }\\n\\n    // @dev key for the claimable ui fee amount for account\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    // @param account the account that can claim the ui fee\\n    function claimableUiFeeAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token, account));\\n    }\\n\\n    // @dev key for deposit gas limit\\n    // @param singleToken whether a single token or pair tokens are being deposited\\n    // @return key for deposit gas limit\\n    function depositGasLimitKey() internal pure returns (bytes32) {\\n        return DEPOSIT_GAS_LIMIT;\\n    }\\n\\n    // @dev key for withdrawal gas limit\\n    // @return key for withdrawal gas limit\\n    function withdrawalGasLimitKey() internal pure returns (bytes32) {\\n        return WITHDRAWAL_GAS_LIMIT;\\n    }\\n\\n    // @dev key for shift gas limit\\n    // @return key for shift gas limit\\n    function shiftGasLimitKey() internal pure returns (bytes32) {\\n        return SHIFT_GAS_LIMIT;\\n    }\\n\\n    function glvDepositGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_DEPOSIT_GAS_LIMIT;\\n    }\\n\\n    function glvWithdrawalGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_WITHDRAWAL_GAS_LIMIT;\\n    }\\n\\n    function glvShiftGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_SHIFT_GAS_LIMIT;\\n    }\\n\\n    function glvPerMarketGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_PER_MARKET_GAS_LIMIT;\\n    }\\n\\n    // @dev key for single swap gas limit\\n    // @return key for single swap gas limit\\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\\n        return SINGLE_SWAP_GAS_LIMIT;\\n    }\\n\\n    // @dev key for increase order gas limit\\n    // @return key for increase order gas limit\\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return INCREASE_ORDER_GAS_LIMIT;\\n    }\\n\\n    // @dev key for decrease order gas limit\\n    // @return key for decrease order gas limit\\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return DECREASE_ORDER_GAS_LIMIT;\\n    }\\n\\n    // @dev key for swap order gas limit\\n    // @return key for swap order gas limit\\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\\n        return SWAP_ORDER_GAS_LIMIT;\\n    }\\n\\n    function swapPathMarketFlagKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_PATH_MARKET_FLAG,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for whether create glv deposit is disabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is disabled\\n    function createGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel glv deposit is disabled\\n    // @param the cancel deposit module\\n    // @return key for whether cancel deposit is disabled\\n    function cancelGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute glv deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function executeGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create glv withdrawal is disabled\\n    // @param the create withdrawal module\\n    // @return key for whether create withdrawal is disabled\\n    function createGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel glv withdrawal is disabled\\n    // @param the cancel withdrawal module\\n    // @return key for whether cancel withdrawal is disabled\\n    function cancelGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute glv withdrawal is disabled\\n    // @param the execute withdrawal module\\n    // @return key for whether execute withdrawal is disabled\\n    function executeGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    function createGlvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    function executeGlvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n\\n    // @dev key for whether create deposit is disabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is disabled\\n    function createDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel deposit is disabled\\n    // @param the cancel deposit module\\n    // @return key for whether cancel deposit is disabled\\n    function cancelDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function executeDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create withdrawal is disabled\\n    // @param the create withdrawal module\\n    // @return key for whether create withdrawal is disabled\\n    function createWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel withdrawal is disabled\\n    // @param the cancel withdrawal module\\n    // @return key for whether cancel withdrawal is disabled\\n    function cancelWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute withdrawal is disabled\\n    // @param the execute withdrawal module\\n    // @return key for whether execute withdrawal is disabled\\n    function executeWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute atomic withdrawal is disabled\\n    // @param the execute atomic withdrawal module\\n    // @return key for whether execute atomic withdrawal is disabled\\n    function executeAtomicWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create shift is disabled\\n    // @param the create shift module\\n    // @return key for whether create shift is disabled\\n    function createShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel shift is disabled\\n    // @param the cancel shift module\\n    // @return key for whether cancel shift is disabled\\n    function cancelShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute shift is disabled\\n    // @param the execute shift module\\n    // @return key for whether execute shift is disabled\\n    function executeShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create order is disabled\\n    // @param the create order module\\n    // @return key for whether create order is disabled\\n    function createOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute order is disabled\\n    // @param the execute order module\\n    // @return key for whether execute order is disabled\\n    function executeOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute adl is disabled\\n    // @param the execute adl module\\n    // @return key for whether execute adl is disabled\\n    function executeAdlFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ADL_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether update order is disabled\\n    // @param the update order module\\n    // @return key for whether update order is disabled\\n    function updateOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UPDATE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether cancel order is disabled\\n    // @param the cancel order module\\n    // @return key for whether cancel order is disabled\\n    function cancelOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether claim funding fees is disabled\\n    // @param the claim funding fees module\\n    function claimFundingFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_FUNDING_FEES_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim colltareral is disabled\\n    // @param the claim funding fees module\\n    function claimCollateralFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_COLLATERAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim affiliate rewards is disabled\\n    // @param the claim affiliate rewards module\\n    function claimAffiliateRewardsFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim ui fees is disabled\\n    // @param the claim ui fees module\\n    function claimUiFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_UI_FEES_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether subaccounts are disabled\\n    // @param the subaccount module\\n    function subaccountFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether subaccounts are disabled\\n    // @param the gasless module\\n    function gaslessFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GASLESS_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for ui fee factor\\n    // @param account the fee receiver account\\n    // @return key for ui fee factor\\n    function uiFeeFactorKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UI_FEE_FACTOR,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for whether an oracle provider is enabled\\n    // @param provider the oracle provider\\n    // @return key for whether an oracle provider is enabled\\n    function isOracleProviderEnabledKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ORACLE_PROVIDER_ENABLED,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for whether an oracle provider is allowed to be used for atomic actions\\n    // @param provider the oracle provider\\n    // @return key for whether an oracle provider is allowed to be used for atomic actions\\n    function isAtomicOracleProviderKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ATOMIC_ORACLE_PROVIDER,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for oracle timestamp adjustment\\n    // @param provider the oracle provider\\n    // @param token the token\\n    // @return key for oracle timestamp adjustment\\n    function oracleTimestampAdjustmentKey(address provider, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TIMESTAMP_ADJUSTMENT,\\n            provider,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for oracle provider for token\\n    // @param token the token\\n    // @return key for oracle provider for token\\n    function oracleProviderForTokenKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_PROVIDER_FOR_TOKEN,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for oracle provider update time\\n    // @param token the token\\n    // @param provider address\\n    // @return key for oracle provider updated time\\n    function oracleProviderUpdatedAt(address token, address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_PROVIDER_UPDATED_AT,\\n            token,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for gas to forward for token transfer\\n    // @param the token to check\\n    // @return key for gas to forward for token transfer\\n    function tokenTransferGasLimit(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOKEN_TRANSFER_GAS_LIMIT,\\n            token\\n        ));\\n   }\\n\\n   // @dev the default callback contract\\n   // @param account the user's account\\n   // @param market the address of the market\\n   // @param callbackContract the callback contract\\n   function savedCallbackContract(address account, address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           SAVED_CALLBACK_CONTRACT,\\n           account,\\n           market\\n       ));\\n   }\\n\\n   // @dev the min collateral factor key\\n   // @param the market for the min collateral factor\\n   function minCollateralFactorKey(address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           MIN_COLLATERAL_FACTOR,\\n           market\\n       ));\\n   }\\n\\n   // @dev the min collateral factor for open interest multiplier key\\n   // @param the market for the factor\\n   function minCollateralFactorForOpenInterestMultiplierKey(address market, bool isLong) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER,\\n           market,\\n           isLong\\n       ));\\n   }\\n\\n    // @dev the min collateral factor for open interest multiplier key\\n    // @param the market for the factor\\n    function minCollateralFactorForLiquidationKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_COLLATERAL_FACTOR_FOR_LIQUIDATION,\\n            market\\n        ));\\n    }\\n\\n   // @dev the key for the virtual token id\\n   // @param the token to get the virtual id for\\n   function virtualTokenIdKey(address token) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_TOKEN_ID,\\n           token\\n       ));\\n   }\\n\\n   // @dev the key for the virtual market id\\n   // @param the market to get the virtual id for\\n   function virtualMarketIdKey(address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_MARKET_ID,\\n           market\\n       ));\\n   }\\n\\n   // @dev the key for the virtual inventory for positions\\n   // @param the virtualTokenId the virtual token id\\n   function virtualInventoryForPositionsKey(bytes32 virtualTokenId) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_INVENTORY_FOR_POSITIONS,\\n           virtualTokenId\\n       ));\\n   }\\n\\n   // @dev the key for the virtual inventory for swaps\\n   // @param the virtualMarketId the virtual market id\\n   // @param the token to check the inventory for\\n   function virtualInventoryForSwapsKey(bytes32 virtualMarketId, bool isLongToken) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_INVENTORY_FOR_SWAPS,\\n           virtualMarketId,\\n           isLongToken\\n       ));\\n   }\\n\\n    // @dev key for position impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for position impact factor\\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n   }\\n\\n    // @dev key for position impact exponent factor\\n    // @param market the market address to check\\n    // @return key for position impact exponent factor\\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for the max position impact factor\\n    // @param market the market address to check\\n    // @return key for the max position impact factor\\n    function maxPositionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for the max position impact factor for liquidations\\n    // @param market the market address to check\\n    // @return key for the max position impact factor\\n    function maxPositionImpactFactorForLiquidationsKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position fee factor\\n    // @param market the market address to check\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for position fee factor\\n    function positionFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for pro trader's tier\\n    function proTraderTierKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRO_TRADER_TIER,\\n            account\\n        ));\\n    }\\n\\n\\n    // @dev key for pro discount factor for specific tier\\n    function proDiscountFactorKey(uint256 proTier) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRO_DISCOUNT_FACTOR,\\n            proTier\\n        ));\\n    }\\n\\n    // @dev key for liquidation fee factor\\n    // @param market the market address to check\\n    // @return key for liquidation fee factor\\n    function liquidationFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            LIQUIDATION_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for swap impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for swap impact factor\\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for swap impact exponent factor\\n    // @param market the market address to check\\n    // @return key for swap impact exponent factor\\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n\\n    // @dev key for swap fee factor\\n    // @param market the market address to check\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for swap fee factor\\n    function swapFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for atomic swap fee factor\\n    // @param market the market address to check\\n    // @return key for atomic swap fee factor\\n    function atomicSwapFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ATOMIC_SWAP_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for atomic withdrawal fee factor\\n    // @param market the market address to check\\n    // @return key for atomic withdrawal fee factor\\n    function atomicWithdrawalFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ATOMIC_WITHDRAWAL_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for deposit fee factor\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for deposit fee factor\\n    function depositFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DEPOSIT_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for withdrawal fee factor\\n    // @param market the market address to check\\n    // @param balanceWasImproved whether the fee is for an action that has improved the balance\\n    // @return key for withdrawal fee factor\\n    function withdrawalFeeFactorKey(address market, bool balanceWasImproved) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            WITHDRAWAL_FEE_FACTOR,\\n            market,\\n            balanceWasImproved\\n        ));\\n    }\\n\\n    // @dev key for oracle type\\n    // @param token the token to check\\n    // @return key for oracle type\\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TYPE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for open interest\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest\\n    function openInterestKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest in tokens\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest in tokens\\n    function openInterestInTokensKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_IN_TOKENS,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for collateral sum for a market\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for collateral sum\\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            COLLATERAL_SUM,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's pool\\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max amount of pool tokens\\n    // @param market the market for the pool\\n    // @param token the token for the pool\\n    function maxPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max usd of pool tokens for deposits\\n    // @param market the market for the pool\\n    // @param token the token for the pool\\n    function maxPoolUsdForDepositKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POOL_USD_FOR_DEPOSIT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max open interest\\n    // @param market the market for the pool\\n    // @param isLong whether the key is for the long or short side\\n    function maxOpenInterestKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_OPEN_INTEREST,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for amount of tokens in a market's position impact pool\\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for min amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for min amount of tokens in a market's position impact pool\\n    function minPositionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position impact pool distribution rate\\n    // @param market the market to check\\n    // @return key for position impact pool distribution rate\\n    function positionImpactPoolDistributionRateKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_DISTRIBUTION_RATE,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position impact pool distributed at\\n    // @param market the market to check\\n    // @return key for position impact pool distributed at\\n    function positionImpactPoolDistributedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_DISTRIBUTED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's swap impact pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's swap impact pool\\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for reserve factor\\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for open interest reserve factor\\n    function openInterestReserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for max pnl factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for max pnl factor\\n    function maxPnlFactorKey(bytes32 pnlFactorType, address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_PNL_FACTOR,\\n            pnlFactorType,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev the key for min PnL factor after ADL\\n    // @param market the market for the pool\\n    // @param isLong whether the key is for the long or short side\\n    function minPnlFactorAfterAdlKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_PNL_FACTOR_AFTER_ADL,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for latest adl time\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for latest adl time\\n    function latestAdlAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            LATEST_ADL_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for whether adl is enabled\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for whether adl is enabled\\n    function isAdlEnabledKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ADL_ENABLED,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for funding factor\\n    // @param market the market to check\\n    // @return key for funding factor\\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding exponent\\n    // @param market the market for the pool\\n    function fundingExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for saved funding factor\\n    // @param market the market for the pool\\n    function savedFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SAVED_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding increase factor\\n    // @param market the market for the pool\\n    function fundingIncreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_INCREASE_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding decrease factor\\n    // @param market the market for the pool\\n    function fundingDecreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_DECREASE_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for min funding factor\\n    // @param market the market for the pool\\n    function minFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for max funding factor\\n    // @param market the market for the pool\\n    function maxFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for threshold for stable funding\\n    // @param market the market for the pool\\n    function thresholdForStableFundingKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            THRESHOLD_FOR_STABLE_FUNDING,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for threshold for decreasing funding\\n    // @param market the market for the pool\\n    function thresholdForDecreaseFundingKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            THRESHOLD_FOR_DECREASE_FUNDING,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for funding fee amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for funding fee amount per size\\n    function fundingFeeAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FEE_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for claimabel funding amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for claimable funding amount per size\\n    function claimableFundingAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for when funding was last updated\\n    // @param market the market to check\\n    // @return key for when funding was last updated\\n    function fundingUpdatedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_UPDATED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount by account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral amount for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor for a timeKey\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_FACTOR,\\n            market,\\n            token,\\n            timeKey\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable amount\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_FACTOR,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral reduction factor for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable factor\\n    // @param account the account to check\\n    // @return key for claimable funding factor\\n    function claimableCollateralReductionFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_REDUCTION_FACTOR,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimedCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMED_COLLATERAL_AMOUNT,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for optimal usage factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for optimal usage factor\\n    function optimalUsageFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPTIMAL_USAGE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for base borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for base borrowing factor\\n    function baseBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BASE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for above optimal usage borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for above optimal usage borrowing factor\\n    function aboveOptimalUsageBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for borrowing factor\\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev the key for borrowing exponent\\n    // @param market the market for the pool\\n    // @param isLong whether to get the key for the long or short side\\n    function borrowingExponentFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_EXPONENT_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor\\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor updated at\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor updated at\\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for total borrowing amount\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for total borrowing amount\\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOTAL_BORROWING,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    function minAffiliateRewardFactorKey(uint256 referralTierLevel) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_AFFILIATE_REWARD_FACTOR,\\n            referralTierLevel\\n        ));\\n    }\\n\\n    function maxAllowedSubaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountExpiresAtKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_EXPIRES_AT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_ACTION_COUNT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountAutoTopUpAmountKey(address account, address subaccount) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_AUTO_TOP_UP_AMOUNT,\\n            account,\\n            subaccount\\n        ));\\n    }\\n\\n    function subaccountIntegrationIdKey(address account, address subaccount) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_INTEGRATION_ID,\\n            account,\\n            subaccount\\n        ));\\n    }\\n\\n    function subaccountIntegrationDisabledKey(bytes32 integrationId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_INTEGRATION_DISABLED,\\n            integrationId\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount for an account\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for is market disabled\\n    // @param market the market to check\\n    // @return key for is market disabled\\n    function isMarketDisabledKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MARKET_DISABLED,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for min market tokens for first deposit\\n    // @param market the market to check\\n    // @return key for min market tokens for first deposit\\n    function minMarketTokensForFirstDepositKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for price feed address\\n    // @param token the token to get the key for\\n    // @return key for price feed address\\n    function priceFeedKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for data stream feed ID\\n    // @param token the token to get the key for\\n    // @return key for data stream feed ID\\n    function dataStreamIdKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_ID,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for edge oracle data stream feed ID\\n    // @param token the token to get the key for\\n    // @return key for data stream feed ID\\n    function edgeDataStreamIdKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EDGE_DATA_STREAM_ID,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for data stream feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for data stream feed multiplier\\n    function dataStreamMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    function dataStreamSpreadReductionFactorKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_SPREAD_REDUCTION_FACTOR,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for price feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for price feed multiplier\\n    function priceFeedMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    function priceFeedHeartbeatDurationKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_HEARTBEAT_DURATION,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for stable price value\\n    // @param token the token to get the key for\\n    // @return key for stable price value\\n    function stablePriceKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            STABLE_PRICE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for fee distributor swap token index\\n    // @param orderKey the swap order key\\n    // @return key for fee distributor swap token index\\n    function feeDistributorSwapTokenIndexKey(bytes32 orderKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX,\\n            orderKey\\n        ));\\n    }\\n\\n    // @dev key for fee distributor swap fee batch key\\n    // @param orderKey the swap order key\\n    // @return key for fee distributor swap fee batch key\\n    function feeDistributorSwapFeeBatchKey(bytes32 orderKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FEE_DISTRIBUTOR_SWAP_FEE_BATCH,\\n            orderKey\\n        ));\\n    }\\n\\n    // @dev key for max market token balance usd\\n    // it is used to limit amount of funds deposited into each market\\n    function glvMaxMarketTokenBalanceUsdKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_USD, glv, market));\\n    }\\n\\n    // @dev key for max market token balance amount\\n    // it is used to limit amount of funds deposited into each market\\n    function glvMaxMarketTokenBalanceAmountKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT, glv, market));\\n    }\\n\\n    // @dev key for is glv market disabled\\n    function isGlvMarketDisabledKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_GLV_MARKET_DISABLED,\\n            glv,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for max allowed price impact for glv shifts\\n    // if effective price impact exceeds max price impact then glv shift fails\\n    function glvShiftMaxPriceImpactFactorKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR,\\n            glv\\n        ));\\n    }\\n\\n    // @dev key for time when glv shift was executed last\\n    // used to validate glv shifts are not executed too frequently\\n    function glvShiftLastExecutedAtKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_LAST_EXECUTED_AT,\\n            glv\\n        ));\\n    }\\n\\n    // @dev key for min time interval between glv shifts in seconds\\n    function glvShiftMinIntervalKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_MIN_INTERVAL,\\n            glv\\n        ));\\n    }\\n\\n    function minGlvTokensForFirstGlvDepositKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT,\\n            glv\\n        ));\\n    }\\n\\n    // @dev key for whether the sync config feature is disabled\\n    // @param module the sync config module\\n    // @return key for sync config feature disabled\\n    function syncConfigFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether sync config updates are disabled for a market\\n    // @param market the market to check\\n    // @return key for sync config market disabled\\n    function syncConfigMarketDisabledKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_MARKET_DISABLED,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for whether sync config updates are disabled for a parameter\\n    // @param parameter the parameter to check\\n    // @return key for sync config parameter disabled\\n    function syncConfigParameterDisabledKey(string memory parameter) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_PARAMETER_DISABLED,\\n            parameter\\n        ));\\n    }\\n\\n    // @dev key for whether sync config updates are disabled for a market parameter\\n    // @param market the market to check\\n    // @param parameter the parameter to check\\n    // @return key for sync config market parameter disabled\\n    function syncConfigMarketParameterDisabledKey(address market, string memory parameter) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_MARKET_PARAMETER_DISABLED,\\n            market,\\n            parameter\\n        ));\\n    }\\n\\n    // @dev key for whether a sync config update is completed\\n    // @param updateId the update id to check\\n    // @return key for sync config market update completed\\n    function syncConfigUpdateCompletedKey(uint256 updateId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SYNC_CONFIG_UPDATE_COMPLETED,\\n            updateId\\n        ));\\n    }\\n\\n    // @dev key for the latest sync config update that was completed\\n    // @return key for sync config latest update id\\n    function syncConfigLatestUpdateIdKey() internal pure returns (bytes32) {\\n        return SYNC_CONFIG_LATEST_UPDATE_ID;\\n    }\\n\\n    // @dev key for the contributor token amount\\n    // @param account the contributor account\\n    // @param token the contributor token\\n    // @return key for the contributor token amount\\n    function contributorTokenAmountKey(address account, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CONTRIBUTOR_TOKEN_AMOUNT,\\n            account,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the max total contributor token amount\\n    // @param token the contributor token\\n    // @return key for the max contributor token amount\\n    function maxTotalContributorTokenAmountKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the contributor token vault\\n    // @param token the contributor token\\n    // @return key for the contributor token vault\\n    function contributorTokenVaultKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CONTRIBUTOR_TOKEN_VAULT,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the buyback batch amount\\n    // @param token the token for which to retrieve batch amount (GMX or WNT)\\n    // @return key for buyback batch amount for a given token\\n    function buybackBatchAmountKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_BATCH_AMOUNT,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for the buyback available fee amount\\n    // @param feeToken the token in which the fees are denominated\\n    // @param swapToken the token for which fees are accumulated (GMX or WNT)\\n    // @return key for buyback available fee amount for a given token and feeToken\\n    function buybackAvailableFeeAmountKey(address feeToken, address swapToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_AVAILABLE_FEE_AMOUNT,\\n            feeToken,\\n            swapToken\\n        ));\\n    }\\n\\n    // @dev key for the buyback withdrawable fee amount\\n    // @param buybackToken the token that was bought back\\n    // @return key for the buyback withdrawable fee amount\\n    function withdrawableBuybackTokenAmountKey(address buybackToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT,\\n            buybackToken\\n        ));\\n    }\\n\\n    // @dev key for the buyback gmx fee factor\\n    // @param version the version for which to retrieve the fee numerator\\n    // @return key for buyback gmx fee factor for a given version\\n    function buybackGmxFactorKey(uint256 version) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_GMX_FACTOR,\\n            version\\n        ));\\n    }\\n\\n    // @dev key for the buyback max price impact factor\\n    // @param token the token for which to retrieve the max price impact factor key\\n    // @return key for buyback max price impact factor for a given token\\n    function buybackMaxPriceImpactFactorKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BUYBACK_MAX_PRICE_IMPACT_FACTOR,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for whether a multichain provider is enabled\\n    // @param provider the multichain provider\\n    // @return key for whether a multichain provider is enabled\\n    function isMultichainProviderEnabledKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MULTICHAIN_PROVIDER_ENABLED,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for whether a multichain endpoint is enabled\\n    // @param endpoint the multichain endpoint\\n    // @return key for whether a multichain endpoint is enabled\\n    function isMultichainEndpointEnabledKey(address endpoint) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MULTICHAIN_ENDPOINT_ENABLED,\\n            endpoint\\n        ));\\n    }\\n\\n    // @dev key for whether a multichain endpoint is enabled\\n    // @param endpoint the multichain endpoint\\n    // @return key for whether a multichain endpoint is enabled\\n    function isSrcChainIdEnabledKey(uint256 srcChainId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_SRC_CHAIN_ID_ENABLED,\\n            srcChainId\\n        ));\\n    }\\n\\n    // @dev key for the last src chain id from which the user last managed his position\\n    // @param positionKey the position key for which to retreive the last src chain id\\n    // @return key for the last src chain id from which the user last managed his position\\n    function positionLastSrcChainId(bytes32 positionKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_LAST_SRC_CHAIN_ID,\\n            positionKey\\n        ));\\n    }\\n\\n    // @dev key for user's multichain balance\\n    // @param account the account for which to retreive the user balance key\\n    // @param token the token for which to retreive the user balance key\\n    // @return key for multichain balance for a given user and token\\n    function multichainBalanceKey(address account, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MULTICHAIN_BALANCE,\\n            account,\\n            token\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x57c6332974e62898951643f9178e0fdb7f79e4de08adc3762954e8335ffb117a\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Deposit\\n// @dev Struct for deposits\\nlibrary Deposit {\\n    enum DepositType {\\n        Normal,\\n        Shift,\\n        Glv\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x622ecf0fa075bf13ef98ef44ec9c62f7b27c5d68229e9c9d86239e398b05ed5c\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"../pricing/ISwapPricingUtils.sol\\\";\\n\\nlibrary DepositEventUtils {\\n    using Deposit for Deposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitDepositCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Deposit.Props memory deposit,\\n        Deposit.DepositType depositType\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(deposit, depositType);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCreated\\\",\\n            key,\\n            Cast.toBytes32(deposit.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 longTokenAmount,\\n        uint256 shortTokenAmount,\\n        uint256 receivedMarketTokens,\\n        ISwapPricingUtils.SwapPricingType swapPricingType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"receivedMarketTokens\\\", receivedMarketTokens);\\n        eventData.uintItems.setItem(3, \\\"swapPricingType\\\", uint256(swapPricingType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitDepositCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"DepositCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Deposit.Props memory deposit, Deposit.DepositType depositType)\\n    public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(7);\\n        eventData.addressItems.setItem(0, \\\"account\\\", deposit.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", deposit.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", deposit.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", deposit.market());\\n        eventData.addressItems.setItem(4, \\\"initialLongToken\\\", deposit.initialLongToken());\\n        eventData.addressItems.setItem(5, \\\"initialShortToken\\\", deposit.initialShortToken());\\n        eventData.addressItems.setItem(6, \\\"uiFeeReceiver\\\", deposit.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", deposit.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", deposit.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"initialLongTokenAmount\\\", deposit.initialLongTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"initialShortTokenAmount\\\", deposit.initialShortTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minMarketTokens\\\", deposit.minMarketTokens());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", deposit.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", deposit.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", deposit.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"depositType\\\", uint256(depositType));\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", deposit.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", deposit.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x287fb035022729626f8b045c680aa4551d6c05012dcd448cbe2523f84846ea91\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\n\\nimport \\\"./Deposit.sol\\\";\\n\\n/**\\n * @title DepositStoreUtils\\n * @dev Library for deposit storage functions\\n */\\nlibrary DepositStoreUtils {\\n    using Deposit for Deposit.Props;\\n\\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\\\"ACCOUNT\\\"));\\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\\\"RECEIVER\\\"));\\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\\\"CALLBACK_CONTRACT\\\"));\\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\\\"UI_FEE_RECEIVER\\\"));\\n    bytes32 public constant MARKET = keccak256(abi.encode(\\\"MARKET\\\"));\\n    bytes32 public constant INITIAL_LONG_TOKEN = keccak256(abi.encode(\\\"INITIAL_LONG_TOKEN\\\"));\\n    bytes32 public constant INITIAL_SHORT_TOKEN = keccak256(abi.encode(\\\"INITIAL_SHORT_TOKEN\\\"));\\n    bytes32 public constant LONG_TOKEN_SWAP_PATH = keccak256(abi.encode(\\\"LONG_TOKEN_SWAP_PATH\\\"));\\n    bytes32 public constant SHORT_TOKEN_SWAP_PATH = keccak256(abi.encode(\\\"SHORT_TOKEN_SWAP_PATH\\\"));\\n\\n    bytes32 public constant INITIAL_LONG_TOKEN_AMOUNT = keccak256(abi.encode(\\\"INITIAL_LONG_TOKEN_AMOUNT\\\"));\\n    bytes32 public constant INITIAL_SHORT_TOKEN_AMOUNT = keccak256(abi.encode(\\\"INITIAL_SHORT_TOKEN_AMOUNT\\\"));\\n    bytes32 public constant MIN_MARKET_TOKENS = keccak256(abi.encode(\\\"MIN_MARKET_TOKENS\\\"));\\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\\\"UPDATED_AT_TIME\\\"));\\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\\\"EXECUTION_FEE\\\"));\\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"CALLBACK_GAS_LIMIT\\\"));\\n    bytes32 public constant SRC_CHAIN_ID = keccak256(abi.encode(\\\"SRC_CHAIN_ID\\\"));\\n\\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\\\"SHOULD_UNWRAP_NATIVE_TOKEN\\\"));\\n\\n    bytes32 public constant DATA_LIST = keccak256(abi.encode(\\\"DATA_LIST\\\"));\\n\\n    function get(DataStore dataStore, bytes32 key) external view returns (Deposit.Props memory) {\\n        Deposit.Props memory deposit;\\n        if (!dataStore.containsBytes32(Keys.DEPOSIT_LIST, key)) {\\n            return deposit;\\n        }\\n\\n        deposit.setAccount(dataStore.getAddress(\\n            keccak256(abi.encode(key, ACCOUNT))\\n        ));\\n\\n        deposit.setReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, RECEIVER))\\n        ));\\n\\n        deposit.setCallbackContract(dataStore.getAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\n        ));\\n\\n        deposit.setUiFeeReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\n        ));\\n\\n        deposit.setMarket(dataStore.getAddress(\\n            keccak256(abi.encode(key, MARKET))\\n        ));\\n\\n        deposit.setInitialLongToken(dataStore.getAddress(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\\n        ));\\n\\n        deposit.setInitialShortToken(dataStore.getAddress(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\\n        ));\\n\\n        deposit.setLongTokenSwapPath(dataStore.getAddressArray(\\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\\n        ));\\n\\n        deposit.setShortTokenSwapPath(dataStore.getAddressArray(\\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\\n        ));\\n\\n        deposit.setInitialLongTokenAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\\n        ));\\n\\n        deposit.setInitialShortTokenAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\\n        ));\\n\\n        deposit.setMinMarketTokens(dataStore.getUint(\\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\\n        ));\\n\\n        deposit.setUpdatedAtTime(dataStore.getUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\\n        ));\\n\\n        deposit.setExecutionFee(dataStore.getUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\n        ));\\n\\n        deposit.setCallbackGasLimit(dataStore.getUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\n        ));\\n\\n        deposit.setSrcChainId(dataStore.getUint(\\n            keccak256(abi.encode(key, SRC_CHAIN_ID))\\n        ));\\n\\n        deposit.setShouldUnwrapNativeToken(dataStore.getBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\n        ));\\n\\n        deposit.setDataList(dataStore.getBytes32Array(\\n            keccak256(abi.encode(key, DATA_LIST))\\n        ));\\n\\n        return deposit;\\n    }\\n\\n    function set(DataStore dataStore, bytes32 key, Deposit.Props memory deposit) external {\\n        dataStore.addBytes32(\\n            Keys.DEPOSIT_LIST,\\n            key\\n        );\\n\\n        dataStore.addBytes32(\\n            Keys.accountDepositListKey(deposit.account()),\\n            key\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, ACCOUNT)),\\n            deposit.account()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, RECEIVER)),\\n            deposit.receiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\\n            deposit.callbackContract()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\\n            deposit.uiFeeReceiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, MARKET)),\\n            deposit.market()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN)),\\n            deposit.initialLongToken()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN)),\\n            deposit.initialShortToken()\\n        );\\n\\n        dataStore.setAddressArray(\\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH)),\\n            deposit.longTokenSwapPath()\\n        );\\n\\n        dataStore.setAddressArray(\\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH)),\\n            deposit.shortTokenSwapPath()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT)),\\n            deposit.initialLongTokenAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT)),\\n            deposit.initialShortTokenAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS)),\\n            deposit.minMarketTokens()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\\n            deposit.updatedAtTime()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE)),\\n            deposit.executionFee()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\\n            deposit.callbackGasLimit()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, SRC_CHAIN_ID)),\\n            deposit.srcChainId()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\\n            deposit.shouldUnwrapNativeToken()\\n        );\\n\\n        dataStore.setBytes32Array(\\n            keccak256(abi.encode(key, DATA_LIST)),\\n            deposit.dataList()\\n        );\\n    }\\n\\n    function remove(DataStore dataStore, bytes32 key, address account) external {\\n        if (!dataStore.containsBytes32(Keys.DEPOSIT_LIST, key)) {\\n            revert Errors.DepositNotFound(key);\\n        }\\n\\n        dataStore.removeBytes32(\\n            Keys.DEPOSIT_LIST,\\n            key\\n        );\\n\\n        dataStore.removeBytes32(\\n            Keys.accountDepositListKey(account),\\n            key\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, ACCOUNT))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, MARKET))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\\n        );\\n\\n        dataStore.removeAddressArray(\\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\\n        );\\n\\n        dataStore.removeAddressArray(\\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, SRC_CHAIN_ID))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\n        );\\n\\n        dataStore.removeBytes32Array(\\n            keccak256(abi.encode(key, DATA_LIST))\\n        );\\n    }\\n\\n    function getDepositCount(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getBytes32Count(Keys.DEPOSIT_LIST);\\n    }\\n\\n    function getDepositKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        return dataStore.getBytes32ValuesAt(Keys.DEPOSIT_LIST, start, end);\\n    }\\n\\n    function getAccountDepositCount(DataStore dataStore, address account) internal view returns (uint256) {\\n        return dataStore.getBytes32Count(Keys.accountDepositListKey(account));\\n    }\\n\\n    function getAccountDepositKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        return dataStore.getBytes32ValuesAt(Keys.accountDepositListKey(account), start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xbc702f51e50181cc5b19a770c9bb9db2b1802947d7d9c9d4745088094fb00bff\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/DepositVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title DepositVault\\n// @dev Vault for deposits\\ncontract DepositVault is StrictBank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n}\\n\",\"keccak256\":\"0x8082c6c4118b6bba1de20ce60208a16810a307674c47d6b802ddb045b7981f63\",\"license\":\"BUSL-1.1\"},\"contracts/deposit/ExecuteDepositUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\nimport \\\"./DepositVault.sol\\\";\\nimport \\\"./DepositStoreUtils.sol\\\";\\nimport \\\"./DepositEventUtils.sol\\\";\\n\\nimport \\\"../pricing/SwapPricingUtils.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../position/PositionUtils.sol\\\";\\n\\nimport \\\"../multichain/MultichainUtils.sol\\\";\\n\\nimport \\\"../gas/GasUtils.sol\\\";\\nimport \\\"../callback/CallbackUtils.sol\\\";\\n\\nimport \\\"../utils/Array.sol\\\";\\n\\n// @title DepositUtils\\n// @dev Library for deposit functions, to help with the depositing of liquidity\\n// into a market in return for market tokens\\nlibrary ExecuteDepositUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Array for uint256[];\\n\\n    using Price for Price.Props;\\n    using Deposit for Deposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // @dev ExecuteDepositParams struct used in executeDeposit to avoid stack\\n    // too deep errors\\n    struct ExecuteDepositParams {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        MultichainVault multichainVault;\\n        DepositVault depositVault;\\n        Oracle oracle;\\n        bytes32 key;\\n        address keeper;\\n        uint256 startingGas;\\n        ISwapPricingUtils.SwapPricingType swapPricingType;\\n        bool includeVirtualInventoryImpact;\\n        uint256 srcChainId;\\n    }\\n\\n    // @dev _ExecuteDepositParams struct used in executeDeposit to avoid stack\\n    // too deep errors\\n    //\\n    // @param market the market to deposit into\\n    // @param account the depositing account\\n    // @param receiver the account to send the market tokens to\\n    // @param uiFeeReceiver the ui fee receiver account\\n    // @param tokenIn the token to deposit, either the market.longToken or\\n    // market.shortToken\\n    // @param tokenOut the other token, if tokenIn is market.longToken then\\n    // tokenOut is market.shortToken and vice versa\\n    // @param tokenInPrice price of tokenIn\\n    // @param tokenOutPrice price of tokenOut\\n    // @param amount amount of tokenIn\\n    // @param priceImpactUsd price impact in USD\\n    struct _ExecuteDepositParams {\\n        Market.Props market;\\n        address account;\\n        address receiver;\\n        address uiFeeReceiver;\\n        address tokenIn;\\n        address tokenOut;\\n        Price.Props tokenInPrice;\\n        Price.Props tokenOutPrice;\\n        uint256 amount;\\n        int256 priceImpactUsd;\\n    }\\n\\n    struct ExecuteDepositCache {\\n        uint256 requestExpirationTime;\\n        uint256 maxOracleTimestamp;\\n        Market.Props market;\\n        MarketUtils.MarketPrices prices;\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 longTokenUsd;\\n        uint256 shortTokenUsd;\\n        uint256 receivedMarketTokens;\\n        int256 priceImpactUsd;\\n        bool balanceWasImproved;\\n        uint256 marketTokensSupply;\\n        EventUtils.EventLogData callbackEventData;\\n    }\\n\\n    address public constant RECEIVER_FOR_FIRST_DEPOSIT = address(1);\\n\\n    // @dev executes a deposit\\n    // @param params ExecuteDepositParams\\n    function executeDeposit(ExecuteDepositParams memory params, Deposit.Props memory deposit) external returns (uint256 receivedMarketTokens) {\\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\\n        params.startingGas -= gasleft() / 63;\\n\\n        DepositStoreUtils.remove(params.dataStore, params.key, deposit.account());\\n\\n\\n        if (deposit.account() == address(0)) {\\n            revert Errors.EmptyDeposit();\\n        }\\n\\n        if (params.oracle.minTimestamp() < deposit.updatedAtTime()) {\\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\\n                params.oracle.minTimestamp(),\\n                deposit.updatedAtTime()\\n            );\\n        }\\n\\n        ExecuteDepositCache memory cache;\\n        cache.requestExpirationTime = params.dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\\n        cache.maxOracleTimestamp = params.oracle.maxTimestamp();\\n\\n        if (cache.maxOracleTimestamp > deposit.updatedAtTime() + cache.requestExpirationTime) {\\n            revert Errors.OracleTimestampsAreLargerThanRequestExpirationTime(\\n                cache.maxOracleTimestamp,\\n                deposit.updatedAtTime(),\\n                cache.requestExpirationTime\\n            );\\n        }\\n\\n        cache.market = MarketUtils.getEnabledMarket(params.dataStore, deposit.market());\\n\\n        _validateFirstDeposit(params, deposit, cache.market);\\n\\n        cache.prices = MarketUtils.getMarketPrices(params.oracle, cache.market);\\n\\n        MarketUtils.distributePositionImpactPool(\\n            params.dataStore,\\n            params.eventEmitter,\\n            cache.market.marketToken\\n        );\\n\\n        PositionUtils.updateFundingAndBorrowingState(\\n            params.dataStore,\\n            params.eventEmitter,\\n            cache.market,\\n            cache.prices\\n        );\\n\\n        // deposits should improve the pool state but it should be checked if\\n        // the max pnl factor for deposits is exceeded as this would lead to the\\n        // price of the market token decreasing below a target minimum percentage\\n        // due to pnl\\n        // note that this is just a validation for deposits, there is no actual\\n        // minimum price for a market token\\n        MarketUtils.validateMaxPnl(\\n            params.dataStore,\\n            cache.market,\\n            cache.prices,\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS\\n        );\\n\\n        cache.longTokenAmount = swap(\\n            params,\\n            deposit.longTokenSwapPath(),\\n            deposit.initialLongToken(),\\n            deposit.initialLongTokenAmount(),\\n            cache.market.marketToken,\\n            cache.market.longToken,\\n            deposit.uiFeeReceiver()\\n        );\\n\\n        cache.shortTokenAmount = swap(\\n            params,\\n            deposit.shortTokenSwapPath(),\\n            deposit.initialShortToken(),\\n            deposit.initialShortTokenAmount(),\\n            cache.market.marketToken,\\n            cache.market.shortToken,\\n            deposit.uiFeeReceiver()\\n        );\\n\\n        if (cache.longTokenAmount == 0 && cache.shortTokenAmount == 0) {\\n            revert Errors.EmptyDepositAmountsAfterSwap();\\n        }\\n\\n        cache.longTokenUsd = cache.longTokenAmount * cache.prices.longTokenPrice.midPrice();\\n        cache.shortTokenUsd = cache.shortTokenAmount * cache.prices.shortTokenPrice.midPrice();\\n\\n        (cache.priceImpactUsd, cache.balanceWasImproved) = SwapPricingUtils.getPriceImpactUsd(\\n            SwapPricingUtils.GetPriceImpactUsdParams(\\n                params.dataStore,\\n                cache.market,\\n                cache.market.longToken,\\n                cache.market.shortToken,\\n                cache.prices.longTokenPrice.midPrice(),\\n                cache.prices.shortTokenPrice.midPrice(),\\n                cache.longTokenUsd.toInt256(),\\n                cache.shortTokenUsd.toInt256(),\\n                params.includeVirtualInventoryImpact\\n            )\\n        );\\n\\n        if (cache.longTokenAmount > 0) {\\n            _ExecuteDepositParams memory _params = _ExecuteDepositParams(\\n                cache.market,\\n                deposit.account(),\\n                deposit.receiver(),\\n                deposit.uiFeeReceiver(),\\n                cache.market.longToken,\\n                cache.market.shortToken,\\n                cache.prices.longTokenPrice,\\n                cache.prices.shortTokenPrice,\\n                cache.longTokenAmount,\\n                Precision.mulDiv(cache.priceImpactUsd, cache.longTokenUsd, cache.longTokenUsd + cache.shortTokenUsd)\\n            );\\n\\n            cache.receivedMarketTokens += _executeDeposit(params, _params, cache.balanceWasImproved);\\n        }\\n\\n        if (cache.shortTokenAmount > 0) {\\n            _ExecuteDepositParams memory _params = _ExecuteDepositParams(\\n                cache.market,\\n                deposit.account(),\\n                deposit.receiver(),\\n                deposit.uiFeeReceiver(),\\n                cache.market.shortToken,\\n                cache.market.longToken,\\n                cache.prices.shortTokenPrice,\\n                cache.prices.longTokenPrice,\\n                cache.shortTokenAmount,\\n                Precision.mulDiv(cache.priceImpactUsd, cache.shortTokenUsd, cache.longTokenUsd + cache.shortTokenUsd)\\n            );\\n\\n            cache.receivedMarketTokens += _executeDeposit(params, _params, cache.balanceWasImproved);\\n        }\\n\\n        if (cache.receivedMarketTokens < deposit.minMarketTokens()) {\\n            revert Errors.MinMarketTokens(cache.receivedMarketTokens, deposit.minMarketTokens());\\n        }\\n\\n        // validate that internal state changes are correct before calling\\n        // external callbacks\\n        MarketUtils.validateMarketTokenBalance(params.dataStore, cache.market);\\n\\n        DepositEventUtils.emitDepositExecuted(\\n            params.eventEmitter,\\n            params.key,\\n            deposit.account(),\\n            cache.longTokenAmount,\\n            cache.shortTokenAmount,\\n            cache.receivedMarketTokens,\\n            params.swapPricingType\\n        );\\n\\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\\n            params.dataStore,\\n            cache.market,\\n            cache.prices.indexTokenPrice,\\n            cache.prices.longTokenPrice,\\n            cache.prices.shortTokenPrice,\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\\n            true\\n        );\\n\\n        cache.marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(cache.market.marketToken)));\\n\\n        MarketEventUtils.emitMarketPoolValueUpdated(\\n            params.eventEmitter,\\n            keccak256(abi.encode(\\\"DEPOSIT\\\")),\\n            params.key,\\n            cache.market.marketToken,\\n            poolValueInfo,\\n            cache.marketTokensSupply\\n        );\\n\\n        cache.callbackEventData.uintItems.initItems(1);\\n        cache.callbackEventData.uintItems.setItem(0, \\\"receivedMarketTokens\\\", cache.receivedMarketTokens);\\n        CallbackUtils.afterDepositExecution(params.key, deposit, cache.callbackEventData);\\n\\n        GasUtils.payExecutionFee(\\n            GasUtils.PayExecutionFeeContracts(\\n                params.dataStore,\\n                params.eventEmitter,\\n                params.multichainVault,\\n                params.depositVault\\n            ),\\n            params.key,\\n            deposit.callbackContract(),\\n            deposit.executionFee(),\\n            params.startingGas,\\n            GasUtils.estimateDepositOraclePriceCount(deposit.longTokenSwapPath().length + deposit.shortTokenSwapPath().length),\\n            params.keeper,\\n            deposit.receiver(),\\n            deposit.srcChainId()\\n        );\\n\\n        return cache.receivedMarketTokens;\\n    }\\n\\n    // @dev executes a deposit\\n    // @param params ExecuteDepositParams\\n    // @param _params _ExecuteDepositParams\\n    function _executeDeposit(ExecuteDepositParams memory params, _ExecuteDepositParams memory _params, bool balanceWasImproved) internal returns (uint256) {\\n        // for markets where longToken == shortToken, the price impact factor should be set to zero\\n        // in which case, the priceImpactUsd would always equal zero\\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\\n            params.dataStore,\\n            _params.market.marketToken,\\n            _params.amount,\\n            balanceWasImproved,\\n            _params.uiFeeReceiver,\\n            params.swapPricingType\\n        );\\n\\n        FeeUtils.incrementClaimableFeeAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            fees.feeReceiverAmount,\\n            Keys.DEPOSIT_FEE_TYPE\\n        );\\n\\n        FeeUtils.incrementClaimableUiFeeAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.uiFeeReceiver,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            fees.uiFeeAmount,\\n            Keys.UI_DEPOSIT_FEE_TYPE\\n        );\\n\\n        SwapPricingUtils.emitSwapFeesCollected(\\n            params.eventEmitter,\\n            params.key,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            _params.tokenInPrice.min,\\n            Keys.DEPOSIT_FEE_TYPE,\\n            fees\\n         );\\n\\n        uint256 mintAmount;\\n\\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\\n            params.dataStore,\\n            _params.market,\\n            params.oracle.getPrimaryPrice(_params.market.indexToken),\\n            _params.tokenIn == _params.market.longToken ? _params.tokenInPrice : _params.tokenOutPrice,\\n            _params.tokenIn == _params.market.shortToken ? _params.tokenInPrice : _params.tokenOutPrice,\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\\n            true\\n        );\\n\\n        if (poolValueInfo.poolValue < 0) {\\n            revert Errors.InvalidPoolValueForDeposit(poolValueInfo.poolValue);\\n        }\\n\\n        uint256 poolValue = poolValueInfo.poolValue.toUint256();\\n\\n        uint256 marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(_params.market.marketToken)));\\n\\n        if (poolValueInfo.poolValue == 0 && marketTokensSupply > 0) {\\n            revert Errors.InvalidPoolValueForDeposit(poolValueInfo.poolValue);\\n        }\\n\\n        MarketEventUtils.emitMarketPoolValueInfo(\\n            params.eventEmitter,\\n            params.key,\\n            _params.market.marketToken,\\n            poolValueInfo,\\n            marketTokensSupply\\n        );\\n\\n        // the poolValue and marketTokensSupply is cached for the mintAmount calculation below\\n        // so the effect of any positive price impact on the poolValue and marketTokensSupply\\n        // would not be accounted for\\n        //\\n        // for most cases, this should not be an issue, since the poolValue and marketTokensSupply\\n        // should have been proportionately increased\\n        //\\n        // e.g. if the poolValue is $100 and marketTokensSupply is 100, and there is a positive price impact\\n        // of $10, the poolValue should have increased by $10 and the marketTokensSupply should have been increased by 10\\n        //\\n        // there is a case where this may be an issue which is when all tokens are withdrawn from an existing market\\n        // and the marketTokensSupply is reset to zero, but the poolValue is not entirely zero\\n        // the case where this happens should be very rare and during withdrawal the poolValue should be close to zero\\n        //\\n        // however, in case this occurs, the usdToMarketTokenAmount will mint an additional number of market tokens\\n        // proportional to the existing poolValue\\n        //\\n        // since the poolValue and marketTokensSupply is cached, this could occur once during positive price impact\\n        // and again when calculating the mintAmount\\n        //\\n        // to avoid this, set the priceImpactUsd to be zero for this case\\n        if (_params.priceImpactUsd > 0 && marketTokensSupply == 0) {\\n            _params.priceImpactUsd = 0;\\n        }\\n\\n        if (_params.priceImpactUsd > 0) {\\n            // when there is a positive price impact factor,\\n            // tokens from the swap impact pool are used to mint additional market tokens for the user\\n            // for example, if 50,000 USDC is deposited and there is a positive price impact\\n            // an additional 0.005 ETH may be used to mint market tokens\\n            // the swap impact pool is decreased by the used amount\\n            //\\n            // priceImpactUsd is calculated based on pricing assuming only depositAmount of tokenIn\\n            // was added to the pool\\n            // since impactAmount of tokenOut is added to the pool here, the calculation of\\n            // the price impact would not be entirely accurate\\n            //\\n            // it is possible that the addition of the positive impact amount of tokens into the pool\\n            // could increase the imbalance of the pool, for most cases this should not be a significant\\n            // change compared to the improvement of balance from the actual deposit\\n            (int256 positiveImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenOut,\\n                _params.tokenOutPrice,\\n                _params.priceImpactUsd\\n            );\\n\\n            // calculate the usd amount using positiveImpactAmount since it may\\n            // be capped by the max available amount in the impact pool\\n            // use tokenOutPrice.max to get the USD value since the positiveImpactAmount\\n            // was calculated using a USD value divided by tokenOutPrice.max\\n            //\\n            // for the initial deposit, the pool value and token supply would be zero\\n            // so the market token price is treated as 1 USD\\n            //\\n            // it is possible for the pool value to be more than zero and the token supply\\n            // to be zero, in that case, the market token price is also treated as 1 USD\\n            mintAmount += MarketUtils.usdToMarketTokenAmount(\\n                positiveImpactAmount.toUint256() * _params.tokenOutPrice.max,\\n                poolValue,\\n                marketTokensSupply\\n            );\\n\\n            // deposit the token out, that was withdrawn from the impact pool, to mint market tokens\\n            MarketUtils.applyDeltaToPoolAmount(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market,\\n                _params.tokenOut,\\n                positiveImpactAmount\\n            );\\n\\n            // MarketUtils.validatePoolUsdForDeposit is not called here\\n            // this is to prevent unnecessary reverts\\n            // for example, if the pool's long token is close to the deposit cap\\n            // but the short token is not close to the cap, depositing the short\\n            // token can lead to a positive price impact which can cause the\\n            // long token's deposit cap to be exceeded\\n            // in this case, it is preferrable that the pool can still be\\n            // rebalanced even if the deposit cap may be exceeded\\n\\n            MarketUtils.validatePoolAmount(\\n                params.dataStore,\\n                _params.market,\\n                _params.tokenOut\\n            );\\n        }\\n\\n        if (_params.priceImpactUsd < 0) {\\n            // when there is a negative price impact factor,\\n            // less of the deposit amount is used to mint market tokens\\n            // for example, if 10 ETH is deposited and there is a negative price impact\\n            // only 9.995 ETH may be used to mint market tokens\\n            // the remaining 0.005 ETH will be stored in the swap impact pool\\n            (int256 negativeImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenIn,\\n                _params.tokenInPrice,\\n                _params.priceImpactUsd\\n            );\\n\\n            fees.amountAfterFees -= (-negativeImpactAmount).toUint256();\\n        }\\n\\n        mintAmount += MarketUtils.usdToMarketTokenAmount(\\n            fees.amountAfterFees * _params.tokenInPrice.min,\\n            poolValue,\\n            marketTokensSupply\\n        );\\n\\n        MarketUtils.applyDeltaToPoolAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market,\\n            _params.tokenIn,\\n            (fees.amountAfterFees + fees.feeAmountForPool).toInt256()\\n        );\\n\\n        MarketUtils.validatePoolUsdForDeposit(\\n            params.dataStore,\\n            _params.market,\\n            _params.tokenIn,\\n            _params.tokenInPrice.max\\n        );\\n\\n        MarketUtils.validatePoolAmount(\\n            params.dataStore,\\n            _params.market,\\n            _params.tokenIn\\n        );\\n\\n        if (params.srcChainId == 0) {\\n            // mint GM tokens to receiver\\n            MarketToken(payable(_params.market.marketToken)).mint(_params.receiver, mintAmount);\\n        } else {\\n            // mint GM tokens to MultichainVault and increase receiver's multichain GM balance\\n            MarketToken(payable(_params.market.marketToken)).mint(address(params.multichainVault), mintAmount);\\n            MultichainUtils.recordTransferIn(params.dataStore, params.eventEmitter, params.multichainVault, _params.market.marketToken, _params.receiver, 0); // srcChainId is the current block.chainId\\n        }\\n\\n        return mintAmount;\\n    }\\n\\n    function swap(\\n        ExecuteDepositParams memory params,\\n        address[] memory swapPath,\\n        address initialToken,\\n        uint256 inputAmount,\\n        address market,\\n        address expectedOutputToken,\\n        address uiFeeReceiver\\n    ) internal returns (uint256) {\\n        Market.Props[] memory swapPathMarkets = MarketUtils.getSwapPathMarkets(\\n            params.dataStore,\\n            swapPath\\n        );\\n\\n        (address outputToken, uint256 outputAmount) = SwapUtils.swap(\\n            SwapUtils.SwapParams(\\n                params.dataStore, // dataStore\\n                params.eventEmitter, // eventEmitter\\n                params.oracle, // oracle\\n                params.depositVault, // bank\\n                params.key, // key\\n                initialToken, // tokenIn\\n                inputAmount, // amountIn\\n                swapPathMarkets, // swapPathMarkets\\n                0, // minOutputAmount\\n                market, // receiver\\n                uiFeeReceiver, // uiFeeReceiver\\n                false, // shouldUnwrapNativeToken\\n                ISwapPricingUtils.SwapPricingType.Swap\\n            )\\n        );\\n\\n        if (outputToken != expectedOutputToken) {\\n            revert Errors.InvalidSwapOutputToken(outputToken, expectedOutputToken);\\n        }\\n\\n        MarketUtils.validateMarketTokenBalance(params.dataStore, swapPathMarkets);\\n\\n        return outputAmount;\\n    }\\n\\n    // this method validates that a specified minimum number of market tokens are locked\\n    // this can be used to help ensure a minimum amount of liquidity for a market\\n    // this also helps to prevent manipulation of the market token price by the first depositor\\n    // since it may be possible to deposit a small amount of tokens on the first deposit\\n    // to cause a high market token price due to rounding of the amount of tokens minted\\n    function _validateFirstDeposit(\\n        ExecuteDepositParams memory params,\\n        Deposit.Props memory deposit,\\n        Market.Props memory market\\n    ) internal view {\\n        uint256 initialMarketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\\n\\n        // return if this is not the first deposit\\n        if (initialMarketTokensSupply != 0) { return; }\\n\\n        uint256 minMarketTokens = params.dataStore.getUint(Keys.minMarketTokensForFirstDepositKey(market.marketToken));\\n\\n        // return if there is no minMarketTokens requirement\\n        if (minMarketTokens == 0) { return; }\\n\\n        if (deposit.receiver() != RECEIVER_FOR_FIRST_DEPOSIT) {\\n            revert Errors.InvalidReceiverForFirstDeposit(deposit.receiver(), RECEIVER_FOR_FIRST_DEPOSIT);\\n        }\\n\\n        if (deposit.minMarketTokens() < minMarketTokens) {\\n            revert Errors.InvalidMinMarketTokensForFirstDeposit(deposit.minMarketTokens(), minMarketTokens);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1120d8add907734dcf97b7c755a384cbccf1d053618d1ead2f8765d1a07d18fe\",\"license\":\"BUSL-1.1\"},\"contracts/error/ErrorUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ErrorUtils {\\n    // To get the revert reason, referenced from https://ethereum.stackexchange.com/a/83577\\n    function getRevertMessage(bytes memory result) internal pure returns (string memory, bool) {\\n        // If the result length is less than 68, then the transaction either panicked or failed silently\\n        if (result.length < 68) {\\n            return (\\\"\\\", false);\\n        }\\n\\n        bytes4 errorSelector = getErrorSelectorFromData(result);\\n\\n        // 0x08c379a0 is the selector for Error(string)\\n        // referenced from https://blog.soliditylang.org/2021/04/21/custom-errors/\\n        if (errorSelector == bytes4(0x08c379a0)) {\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n\\n            return (abi.decode(result, (string)), true);\\n        }\\n\\n        // error may be a custom error, return an empty string for this case\\n        return (\\\"\\\", false);\\n    }\\n\\n    function getErrorSelectorFromData(bytes memory data) internal pure returns (bytes4) {\\n        bytes4 errorSelector;\\n\\n        assembly {\\n            errorSelector := mload(add(data, 0x20))\\n        }\\n\\n        return errorSelector;\\n    }\\n\\n    function revertWithParsedMessage(bytes memory result) internal pure {\\n        (string memory revertMessage, bool hasRevertMessage) = getRevertMessage(result);\\n\\n        if (hasRevertMessage) {\\n            revert(revertMessage);\\n        } else {\\n            revertWithCustomError(result);\\n        }\\n    }\\n\\n    function revertWithCustomError(bytes memory result) internal pure {\\n        // referenced from https://ethereum.stackexchange.com/a/123588\\n        uint256 length = result.length;\\n        assembly {\\n            revert(add(result, 0x20), length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8dad7020da39ccf5759e4d9cefeb8a943cab645ea96f3a27a4f6ce3168f3dcbc\",\"license\":\"BUSL-1.1\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n    error InvalidTransferInAmount(address token, uint256 amount);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error InvalidClaimableReductionFactor(uint256 value);\\n    error OracleProviderAlreadyExistsForToken(address token);\\n    error OracleProviderMinChangeDelayNotYetPassed(address token, address provider);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n    error InvalidPositionImpactPoolDistributionRate(uint256 distributionAmount, uint256 positionImpactPoolAmount);\\n    error MaxDataListLengthExceeded(uint256 dataLength, uint256 maxDataLength);\\n    error EmptyToken();\\n\\n    // ContributorHandler errors\\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\\n    error InvalidContributorToken(address token);\\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address signer);\\n    error InvalidHoldingAddress(address account);\\n    error EmptyPositionImpactWithdrawalAmount();\\n    error OraclePriceOutdated();\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvShiftStoreUtils errors\\n    error GlvShiftNotFound(bytes32 key);\\n    // GlvWithdrawalStoreUtils errors\\n    error GlvWithdrawalNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvMarketAmount();\\n    error EmptyGlvDeposit();\\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\\n    // GlvWithdrawalUtils errors\\n    error EmptyGlvWithdrawal();\\n    error EmptyGlvWithdrawalAmount();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error EmptyGlvTokenSupply();\\n    error GlvNegativeMarketPoolValue(address glv, address market);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvEnabledMarket(address glv, address market);\\n    error GlvNonZeroMarketBalance(address glv, address market);\\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error GlvInvalidLongToken(address glv, address provided, address expected);\\n    error GlvInvalidShortToken(address glv, address provided, address expected);\\n    // GlvShiftUtils\\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\\n    // GlvFactory\\n    error GlvAlreadyExists(bytes32 salt, address glv);\\n    error GlvSymbolTooLong();\\n    error GlvNameTooLong();\\n    // GlvStoreUtils\\n    error GlvNotFound(address key);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidBuybackToken(address buybackToken);\\n    error InvalidVersion(uint256 version);\\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\\n    error EmptyClaimFeesMarket();\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForAutoCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\\n    error EmptyRelayFeeAddress();\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // MarketPositionImpactUtils errors\\n    error InsufficientImpactPoolValueForWithdrawal(uint256 withdrawalAmount, uint256 poolValue);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices(); // not used, kept for compatibility\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error UnsupportedOrderTypeForAutoCancellation(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n    error UnexpectedValidFromTime(uint256 orderType);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\\n    error SubaccountIntegrationIdDisabled(bytes32 integrationId);\\n\\n    // TokenUtils errors\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\\n    // some contracts with this error cannot be re-deployed so it has been left as is\\n    error EmptyTokenTranferGasLimit(address token);\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n    error DataListLengthExceeded();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n\\n    // Cast errors\\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\\n\\n    // ConfigSyncer errors\\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\\n    error SyncConfigUpdatesDisabledForMarket(address market);\\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\\n\\n    // Reader errors\\n    error EmptyMarketPrice(address market);\\n\\n    // Multichain errors\\n    error InvalidTransferRequestsLength();\\n    error EmptyMultichainTransferInAmount(address account, address token);\\n    error EmptyMultichainTransferOutAmount(address account, address token);\\n    error InsufficientMultichainBalance(address account, address token, uint256 balance, uint256 amount);\\n    error InvalidSrcChainId(uint256 srcChainId);\\n    error InvalidDestinationChainId(uint256 desChainId);\\n    error TokenPermitsNotAllowedForMultichain();\\n    error InvalidMultichainProvider(address provider);\\n    error InvalidMultichainEndpoint(address endpoint);\\n    error UnableToPayOrderFee();\\n    error UnableToPayOrderFeeFromCollateral();\\n    error InvalidBridgeOutToken(address token);\\n\\n    enum SignatureType {\\n        Call,\\n        SubaccountApproval\\n    }\\n\\n    // Gelato relay errors\\n    error InvalidSignature(string signatureType);\\n    // User sent incorrect fee token or incorrect swap path\\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    // Contract received unsupported fee token from Gelato relay\\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\\n    error InvalidPermitSpender(address spender, address expectedSpender);\\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\\n    error InvalidSubaccountApprovalSubaccount();\\n    error NonEmptyExternalCallsForSubaccountOrder();\\n\\n    // EventUtils error\\n    error EventItemNotFound(string key);\\n\\n    // EdgeOracle verifier errors\\n    error InvalidTrustedSignerAddress();\\n    error InvalidEdgeSigner();\\n    error InvalidEdgeSignature(uint256 recoverError);\\n    error InvalidEdgeDataStreamBidAsk(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamPrices(address token, uint256 bid, uint256 ask);\\n    error InvalidEdgeDataStreamExpo(int256 expo);\\n    error RelayEmptyBatch();\\n    error RelayCalldataTooLong(uint256 calldataLength);\\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\\n}\\n\",\"keccak256\":\"0xf899157d263ab4bb424c2bd33f1e871ab758ce320f46e6efca90c077a5bb24ef\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n\\n\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a99c1d3590daa8030345ffb09e3f769a93e0178e4c85986dc0e08cc84e8f82c\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary EventUtils {\\n\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(AddressItems memory addresses, string memory key) external pure returns(address) {\\n        (bool found, address value) = getWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(AddressItems memory addresses, string memory key) public pure returns(bool, address) {\\n        for (uint i = 0; i < addresses.items.length; i++) {\\n            if (compareStrings(addresses.items[i].key, key)) {\\n                return (true, addresses.items[i].value);\\n            }\\n        }\\n        return (false, address(0));\\n    }\\n\\n    function getArray(AddressItems memory addresses, string memory key) external pure\\n    returns(address[] memory) {\\n        (bool found, address[] memory value) = getArrayWithoutRevert(addresses, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(AddressItems memory addresses, string memory key) public pure\\n    returns(bool, address[] memory) {\\n        for (uint i = 0; i < addresses.arrayItems.length; i++) {\\n            if (compareStrings(addresses.arrayItems[i].key, key)) {\\n                return (true, addresses.arrayItems[i].value);\\n            }\\n        }\\n        address[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(UintItems memory items, string memory key) external pure returns(uint256) {\\n        (bool found, uint256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(UintItems memory items, string memory key) public pure returns(bool, uint256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(UintItems memory items, string memory key) external pure\\n    returns(uint256[] memory) {\\n        (bool found, uint256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(UintItems memory items, string memory key) public pure\\n    returns(bool, uint256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        uint256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(IntItems memory items, string memory key) external pure returns(int256) {\\n        (bool found, int256 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(IntItems memory items, string memory key) public pure returns(bool, int256) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(IntItems memory items, string memory key) external pure\\n    returns(int256[] memory) {\\n        (bool found, int256[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(IntItems memory items, string memory key) public pure\\n    returns(bool, int256[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        int256[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BoolItems memory items, string memory key) external pure returns(bool) {\\n        (bool found, bool value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BoolItems memory items, string memory key) public pure returns(bool, bool) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, false);\\n    }\\n\\n    function getArray(BoolItems memory items, string memory key) external pure\\n    returns(bool[] memory) {\\n        (bool found, bool[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BoolItems memory items, string memory key) public pure\\n    returns(bool, bool[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bool[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(Bytes32Items memory items, string memory key) external pure returns(bytes32) {\\n        (bool found, bytes32 value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(Bytes32Items memory items, string memory key) public pure returns(bool, bytes32) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    function getArray(Bytes32Items memory items, string memory key) external pure\\n    returns(bytes32[] memory) {\\n        (bool found, bytes32[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(Bytes32Items memory items, string memory key) public pure\\n    returns(bool, bytes32[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes32[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(BytesItems memory items, string memory key) external pure returns(bytes memory) {\\n        (bool found, bytes memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(BytesItems memory items, string memory key) public pure returns(bool, bytes memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(BytesItems memory items, string memory key) external pure\\n    returns(bytes[] memory) {\\n        (bool found, bytes[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(BytesItems memory items, string memory key) public pure\\n    returns(bool, bytes[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        bytes[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function get(StringItems memory items, string memory key) external pure returns(string memory) {\\n        (bool found, string memory value) = getWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getWithoutRevert(StringItems memory items, string memory key) public pure returns(bool, string memory) {\\n        for (uint i = 0; i < items.items.length; i++) {\\n            if (compareStrings(items.items[i].key, key)) {\\n                return (true, items.items[i].value);\\n            }\\n        }\\n        return (false, \\\"\\\");\\n    }\\n\\n    function getArray(StringItems memory items, string memory key) external pure\\n    returns(string[] memory) {\\n        (bool found, string[] memory value) = getArrayWithoutRevert(items, key);\\n        if (!found) {\\n            revert Errors.EventItemNotFound(key);\\n        }\\n        return value;\\n    }\\n\\n    function getArrayWithoutRevert(StringItems memory items, string memory key) public pure\\n    returns(bool, string[] memory) {\\n        for (uint i = 0; i < items.arrayItems.length; i++) {\\n            if (compareStrings(items.arrayItems[i].key, key)) {\\n                return (true, items.arrayItems[i].value);\\n            }\\n        }\\n        string[] memory empty;\\n        return (false, empty);\\n    }\\n\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n}\\n\",\"keccak256\":\"0x301b8df4bd9f7cd46804d6a732e8f092b59fda0450c59ef33845eda262f5e6d5\",\"license\":\"BUSL-1.1\"},\"contracts/feature/FeatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\n\\n// @title FeatureUtils\\n// @dev Library to validate if a feature is enabled or disabled\\n// disabling a feature should only be used if it is absolutely necessary\\n// disabling of features could lead to unexpected effects, e.g. increasing / decreasing of orders\\n// could be disabled while liquidations may remain enabled\\n// this could also occur if the chain is not producing blocks and lead to liquidatable positions\\n// when block production resumes\\n// the effects of disabling features should be carefully considered\\nlibrary FeatureUtils {\\n    // @dev get whether a feature is disabled\\n    // @param dataStore DataStore\\n    // @param key the feature key\\n    // @return whether the feature is disabled\\n    function isFeatureDisabled(DataStore dataStore, bytes32 key) internal view returns (bool) {\\n        return dataStore.getBool(key);\\n    }\\n\\n    // @dev validate whether a feature is enabled, reverts if the feature is disabled\\n    // @param dataStore DataStore\\n    // @param key the feature key\\n    function validateFeature(DataStore dataStore, bytes32 key) internal view {\\n        if (isFeatureDisabled(dataStore, key)) {\\n            revert Errors.DisabledFeature(key);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x148b6e67d2d84b46006ac0b8871902bfe3d1398aae986568c989c4f3edf8d41a\",\"license\":\"BUSL-1.1\"},\"contracts/fee/FeeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\nimport \\\"../utils/AccountUtils.sol\\\";\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../market/MarketToken.sol\\\";\\n\\n// @title FeeUtils\\n// @dev Library for fee actions\\nlibrary FeeUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // @dev increment the claimable fee amount\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to increment claimable fees for\\n    // @param token the fee token\\n    // @param delta the amount to increment\\n    // @param feeType the type of the fee\\n    function incrementClaimableFeeAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 delta,\\n        bytes32 feeType\\n    ) external {\\n        if (delta == 0) {\\n            return;\\n        }\\n\\n        bytes32 key = Keys.claimableFeeAmountKey(market, token);\\n\\n        uint256 nextValue = dataStore.incrementUint(\\n            key,\\n            delta\\n        );\\n\\n        emitClaimableFeeAmountUpdated(\\n            eventEmitter,\\n            market,\\n            token,\\n            delta,\\n            nextValue,\\n            feeType\\n        );\\n    }\\n\\n    function incrementClaimableUiFeeAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address uiFeeReceiver,\\n        address market,\\n        address token,\\n        uint256 delta,\\n        bytes32 feeType\\n    ) external {\\n        if (delta == 0) {\\n            return;\\n        }\\n\\n        uint256 nextValue = dataStore.incrementUint(\\n            Keys.claimableUiFeeAmountKey(market, token, uiFeeReceiver),\\n            delta\\n        );\\n\\n        uint256 nextPoolValue = dataStore.incrementUint(\\n            Keys.claimableUiFeeAmountKey(market, token),\\n            delta\\n        );\\n\\n        emitClaimableUiFeeAmountUpdated(\\n            eventEmitter,\\n            uiFeeReceiver,\\n            market,\\n            token,\\n            delta,\\n            nextValue,\\n            nextPoolValue,\\n            feeType\\n        );\\n    }\\n\\n    function batchClaimFundingFees(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address[] memory markets,\\n        address[] memory tokens,\\n        address receiver,\\n        address account\\n    ) external returns (uint256[] memory) {\\n        if (markets.length != tokens.length) {\\n            revert Errors.InvalidClaimFundingFeesInput(markets.length, tokens.length);\\n        }\\n\\n        FeatureUtils.validateFeature(dataStore, Keys.claimFundingFeesFeatureDisabledKey(address(this)));\\n\\n        AccountUtils.validateReceiver(receiver);\\n\\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\\n\\n        for (uint256 i; i < markets.length; i++) {\\n            claimedAmounts[i] = MarketUtils.claimFundingFees(\\n                dataStore,\\n                eventEmitter,\\n                markets[i],\\n                tokens[i],\\n                account,\\n                receiver\\n            );\\n        }\\n\\n        return claimedAmounts;\\n    }\\n\\n    // @dev claim fees for the specified market\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to claim fees for\\n    // @param token the fee token\\n    // @param receiver the receiver of the claimed fees\\n    function claimFees(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address receiver\\n    ) internal returns (uint256) {\\n        AccountUtils.validateReceiver(receiver);\\n\\n        bytes32 key = Keys.claimableFeeAmountKey(market, token);\\n\\n        uint256 feeAmount = dataStore.getUint(key);\\n        dataStore.setUint(key, 0);\\n\\n        MarketToken(payable(market)).transferOut(\\n            token,\\n            receiver,\\n            feeAmount\\n        );\\n\\n        MarketUtils.validateMarketTokenBalance(dataStore, market);\\n\\n        emitFeesClaimed(\\n            eventEmitter,\\n            market,\\n            receiver,\\n            feeAmount\\n        );\\n\\n        return feeAmount;\\n    }\\n\\n    function batchClaimUiFees(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address[] memory markets,\\n        address[] memory tokens,\\n        address receiver,\\n        address uiFeeReceiver\\n    ) external returns (uint256[] memory) {\\n        if (markets.length != tokens.length) {\\n            revert Errors.InvalidClaimUiFeesInput(markets.length, tokens.length);\\n        }\\n\\n        FeatureUtils.validateFeature(dataStore, Keys.claimUiFeesFeatureDisabledKey(address(this)));\\n\\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\\n\\n        for (uint256 i; i < markets.length; i++) {\\n            claimedAmounts[i] = claimUiFees(\\n                dataStore,\\n                eventEmitter,\\n                uiFeeReceiver,\\n                markets[i],\\n                tokens[i],\\n                receiver\\n            );\\n        }\\n\\n        return claimedAmounts;\\n    }\\n\\n    function claimUiFees(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address uiFeeReceiver,\\n        address market,\\n        address token,\\n        address receiver\\n    ) public returns (uint256) {\\n        AccountUtils.validateReceiver(receiver);\\n\\n        bytes32 key = Keys.claimableUiFeeAmountKey(market, token, uiFeeReceiver);\\n\\n        uint256 feeAmount = dataStore.getUint(key);\\n        dataStore.setUint(key, 0);\\n\\n        uint256 nextPoolValue = dataStore.decrementUint(\\n            Keys.claimableUiFeeAmountKey(market, token),\\n            feeAmount\\n        );\\n\\n        MarketToken(payable(market)).transferOut(\\n            token,\\n            receiver,\\n            feeAmount\\n        );\\n\\n        MarketUtils.validateMarketTokenBalance(dataStore, market);\\n\\n        emitUiFeesClaimed(\\n            eventEmitter,\\n            uiFeeReceiver,\\n            market,\\n            receiver,\\n            feeAmount,\\n            nextPoolValue\\n        );\\n\\n        return feeAmount;\\n    }\\n\\n    function emitClaimableFeeAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 delta,\\n        uint256 nextValue,\\n        bytes32 feeType\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"feeType\\\", feeType);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ClaimableFeeAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            feeType,\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableUiFeeAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address uiFeeReceiver,\\n        address market,\\n        address token,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue,\\n        bytes32 feeType\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"uiFeeReceiver\\\", uiFeeReceiver);\\n        eventData.addressItems.setItem(1, \\\"market\\\", market);\\n        eventData.addressItems.setItem(2, \\\"token\\\", token);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"feeType\\\", feeType);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ClaimableUiFeeAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            feeType,\\n            eventData\\n        );\\n    }\\n\\n    function emitFeesClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address receiver,\\n        uint256 feeAmount\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"feeAmount\\\", feeAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FeesClaimed\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitUiFeesClaimed(\\n        EventEmitter eventEmitter,\\n        address uiFeeReceiver,\\n        address market,\\n        address receiver,\\n        uint256 feeAmount,\\n        uint256 nextPoolValue\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"uiFeeReceiver\\\", uiFeeReceiver);\\n        eventData.addressItems.setItem(1, \\\"market\\\", market);\\n        eventData.addressItems.setItem(2, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"feeAmount\\\", feeAmount);\\n        eventData.uintItems.setItem(1, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"UiFeesClaimed\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x54942731f2b9b1f183fe2d3e5f3389f255b0373265563b48343f22018e4a292e\",\"license\":\"BUSL-1.1\"},\"contracts/gas/GasUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../callback/CallbackUtils.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\nimport \\\"../deposit/Deposit.sol\\\";\\nimport \\\"../withdrawal/Withdrawal.sol\\\";\\nimport \\\"../shift/Shift.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\nimport \\\"../order/BaseOrderUtils.sol\\\";\\nimport \\\"../glv/glvWithdrawal/GlvWithdrawal.sol\\\";\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\nimport \\\"../multichain/MultichainUtils.sol\\\";\\n\\n// @title GasUtils\\n// @dev Library for execution fee estimation and payments\\nlibrary GasUtils {\\n    using SafeERC20 for IERC20;\\n\\n    using Deposit for Deposit.Props;\\n    using Withdrawal for Withdrawal.Props;\\n    using Shift for Shift.Props;\\n    using Order for Order.Props;\\n    using GlvDeposit for GlvDeposit.Props;\\n    using GlvWithdrawal for GlvWithdrawal.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // @param keeper address of the keeper\\n    // @param amount the amount of execution fee received\\n    event KeeperExecutionFee(address keeper, uint256 amount);\\n    // @param user address of the user\\n    // @param amount the amount of execution fee refunded\\n    event UserRefundFee(address user, uint256 amount);\\n\\n    function getMinHandleExecutionErrorGas(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.MIN_HANDLE_EXECUTION_ERROR_GAS);\\n    }\\n\\n    function getMinHandleExecutionErrorGasToForward(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD);\\n    }\\n\\n    function getMinAdditionalGasForExecution(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.MIN_ADDITIONAL_GAS_FOR_EXECUTION);\\n    }\\n\\n    function getExecutionGas(DataStore dataStore, uint256 startingGas) external view returns (uint256) {\\n        uint256 minHandleExecutionErrorGasToForward = getMinHandleExecutionErrorGasToForward(dataStore);\\n        if (startingGas < minHandleExecutionErrorGasToForward) {\\n            revert Errors.InsufficientExecutionGasForErrorHandling(startingGas, minHandleExecutionErrorGasToForward);\\n        }\\n\\n        return startingGas - minHandleExecutionErrorGasToForward;\\n    }\\n\\n    function validateExecutionGas(DataStore dataStore, uint256 startingGas, uint256 estimatedGasLimit) external view {\\n        uint256 minAdditionalGasForExecution = getMinAdditionalGasForExecution(dataStore);\\n        if (startingGas < estimatedGasLimit + minAdditionalGasForExecution) {\\n            revert Errors.InsufficientExecutionGas(startingGas, estimatedGasLimit, minAdditionalGasForExecution);\\n        }\\n    }\\n\\n    // a minimum amount of gas is required to be left for cancellation\\n    // to prevent potential blocking of cancellations by malicious contracts using e.g. large revert reasons\\n    //\\n    // during the estimateGas call by keepers, an insufficient amount of gas may be estimated\\n    // the amount estimated may be insufficient for execution but sufficient for cancellaton\\n    // this could lead to invalid cancellations due to insufficient gas used by keepers\\n    //\\n    // to help prevent this, out of gas errors are attempted to be caught and reverted for estimateGas calls\\n    //\\n    // a malicious user could cause the estimateGas call of a keeper to fail, in which case the keeper could\\n    // still attempt to execute the transaction with a reasonable gas limit\\n    function validateExecutionErrorGas(DataStore dataStore, bytes memory reasonBytes) external view {\\n        // skip the validation if the execution did not fail due to an out of gas error\\n        // also skip the validation if this is not invoked in an estimateGas call (tx.origin != address(0))\\n        if (reasonBytes.length != 0 || tx.origin != address(0)) {\\n            return;\\n        }\\n\\n        uint256 gas = gasleft();\\n        uint256 minHandleExecutionErrorGas = getMinHandleExecutionErrorGas(dataStore);\\n\\n        if (gas < minHandleExecutionErrorGas) {\\n            revert Errors.InsufficientHandleExecutionErrorGas(gas, minHandleExecutionErrorGas);\\n        }\\n    }\\n\\n    struct PayExecutionFeeContracts {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        MultichainVault multichainVault;\\n        StrictBank bank;\\n    }\\n\\n    struct PayExecutionFeeCache {\\n        uint256 gasUsed;\\n        uint256 executionFeeForKeeper;\\n        uint256 refundFeeAmount;\\n        bool refundWasSent;\\n        address wnt;\\n    }\\n\\n    // @dev pay the keeper the execution fee and refund any excess amount\\n    //\\n    // @param contracts the contracts to use for fee payment\\n    // @param key the key of the request\\n    // @param callbackContract the callback contract to use\\n    // @param executionFee the executionFee amount\\n    // @param startingGas the starting gas\\n    // @param oraclePriceCount number of oracle prices\\n    // @param keeper the keeper to pay\\n    // @param refundReceiver the account that should receive any excess gas refunds\\n    // @param srcChainId the source chain id\\n    function payExecutionFee(\\n        PayExecutionFeeContracts memory contracts,\\n        bytes32 key,\\n        address callbackContract,\\n        uint256 executionFee,\\n        uint256 startingGas,\\n        uint256 oraclePriceCount,\\n        address keeper,\\n        address refundReceiver,\\n        uint256 srcChainId\\n    ) external returns (uint256) {\\n        if (executionFee == 0) {\\n            return 0;\\n        }\\n\\n        PayExecutionFeeCache memory cache;\\n\\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\\n        startingGas -= gasleft() / 63;\\n        cache.gasUsed = startingGas - gasleft();\\n\\n        // each external call forwards 63/64 of the remaining gas\\n        cache.executionFeeForKeeper = adjustGasUsage(contracts.dataStore, cache.gasUsed, oraclePriceCount) * tx.gasprice;\\n\\n        if (cache.executionFeeForKeeper > executionFee) {\\n            cache.executionFeeForKeeper = executionFee;\\n        }\\n\\n        contracts.bank.transferOutNativeToken(keeper, cache.executionFeeForKeeper);\\n\\n        emitKeeperExecutionFee(contracts.eventEmitter, keeper, cache.executionFeeForKeeper);\\n\\n        cache.refundFeeAmount = executionFee - cache.executionFeeForKeeper;\\n        if (cache.refundFeeAmount == 0) {\\n            return 0;\\n        }\\n\\n        cache.wnt = contracts.dataStore.getAddress(Keys.WNT);\\n        contracts.bank.transferOut(cache.wnt, address(this), cache.refundFeeAmount);\\n\\n        IWNT(cache.wnt).withdraw(cache.refundFeeAmount);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        cache.refundWasSent = CallbackUtils.refundExecutionFee(\\n            contracts.dataStore,\\n            key,\\n            callbackContract,\\n            cache.refundFeeAmount,\\n            eventData\\n        );\\n\\n        if (cache.refundWasSent) {\\n            emitExecutionFeeRefundCallback(contracts.eventEmitter, callbackContract, cache.refundFeeAmount);\\n            return 0;\\n        } else {\\n            if (srcChainId == 0) {\\n                TokenUtils.sendNativeToken(contracts.dataStore, refundReceiver, cache.refundFeeAmount);\\n            } else {\\n                TokenUtils.depositAndSendWrappedNativeToken(contracts.dataStore, address(contracts.multichainVault), cache.refundFeeAmount);\\n                MultichainUtils.recordTransferIn(contracts.dataStore, contracts.eventEmitter, contracts.multichainVault, cache.wnt, refundReceiver, 0); // srcChainId is the current block.chainId\\n            }\\n            emitExecutionFeeRefund(contracts.eventEmitter, refundReceiver, cache.refundFeeAmount);\\n            return cache.refundFeeAmount;\\n        }\\n    }\\n\\n    // @dev validate that the provided executionFee is sufficient based on the estimatedGasLimit\\n    // @param dataStore DataStore\\n    // @param estimatedGasLimit the estimated gas limit\\n    // @param executionFee the execution fee provided\\n    // @param oraclePriceCount\\n    function validateExecutionFee(\\n        DataStore dataStore,\\n        uint256 estimatedGasLimit,\\n        uint256 executionFee,\\n        uint256 oraclePriceCount\\n    ) internal view returns (uint256, uint256) {\\n        uint256 gasLimit = adjustGasLimitForEstimate(dataStore, estimatedGasLimit, oraclePriceCount);\\n        uint256 minExecutionFee = gasLimit * tx.gasprice;\\n        if (executionFee < minExecutionFee) {\\n            revert Errors.InsufficientExecutionFee(minExecutionFee, executionFee);\\n        }\\n        return (gasLimit, minExecutionFee);\\n    }\\n\\n    // @dev validate that the provided executionFee is sufficient based on the estimatedGasLimit\\n    // @param dataStore DataStore\\n    // @param estimatedGasLimit the estimated gas limit\\n    // @param executionFee the execution fee provided\\n    // @param oraclePriceCount\\n    // @param shouldCapMaxExecutionFee whether to cap the max execution fee\\n    function validateAndCapExecutionFee(\\n        DataStore dataStore,\\n        uint256 estimatedGasLimit,\\n        uint256 executionFee,\\n        uint256 oraclePriceCount,\\n        bool shouldCapMaxExecutionFee\\n    ) internal view returns (uint256, uint256) {\\n        (uint256 gasLimit, uint256 minExecutionFee) = validateExecutionFee(\\n            dataStore,\\n            estimatedGasLimit,\\n            executionFee,\\n            oraclePriceCount\\n        );\\n\\n        if (!shouldCapMaxExecutionFee) {\\n            return (executionFee, 0);\\n        }\\n        // a malicious subaccount could provide a large executionFee\\n        // and receive most of it as a refund sent to a callbackContract\\n        // capping the max execution fee by multiplier * gasLimit * basefee should limit the potential loss\\n\\n        // this capping should be applied for subaccount orders with a callbackContract if execution fee is increased\\n        // i.e. there is no need to cap the max execution fee for previously created orders even if it's high because it has already been capped\\n\\n        // some blockchains may not support EIP-1559 and will return 0 for block.basefee\\n        // also block.basefee is 0 inside eth_call and eth_estimateGas\\n        uint256 basefee = block.basefee != 0 ? block.basefee : tx.gasprice;\\n\\n        uint256 maxExecutionFeeMultiplierFactor = dataStore.getUint(Keys.MAX_EXECUTION_FEE_MULTIPLIER_FACTOR);\\n        uint256 maxExecutionFee = Precision.applyFactor(gasLimit * basefee, maxExecutionFeeMultiplierFactor);\\n\\n        if (maxExecutionFee < minExecutionFee) {\\n            revert Errors.InvalidExecutionFee(executionFee, minExecutionFee, maxExecutionFee);\\n        }\\n\\n        if (executionFee <= maxExecutionFee) {\\n            return (executionFee, 0);\\n        }\\n\\n        uint256 executionFeeDiff = executionFee - maxExecutionFee;\\n        return (maxExecutionFee, executionFeeDiff);\\n    }\\n\\n    function transferExcessiveExecutionFee(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Bank bank,\\n        address account,\\n        uint256 executionFeeDiff\\n    ) external {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        address holdingAddress = dataStore.getAddress(Keys.HOLDING_ADDRESS);\\n\\n        if (holdingAddress == address(0)) {\\n            revert Errors.EmptyHoldingAddress();\\n        }\\n\\n        bank.transferOut(wnt, holdingAddress, executionFeeDiff);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"executionFeeDiff\\\", executionFeeDiff);\\n\\n        eventEmitter.emitEventLog1(\\\"ExcessiveExecutionFee\\\", Cast.toBytes32(account), eventData);\\n    }\\n\\n    // @dev adjust the gas usage to pay a small amount to keepers\\n    // @param dataStore DataStore\\n    // @param gasUsed the amount of gas used\\n    // @param oraclePriceCount number of oracle prices\\n    function adjustGasUsage(\\n        DataStore dataStore,\\n        uint256 gasUsed,\\n        uint256 oraclePriceCount\\n    ) internal view returns (uint256) {\\n        // gas measurements are done after the call to withOraclePrices\\n        // withOraclePrices may consume a significant amount of gas\\n        // the baseGasLimit used to calculate the execution cost\\n        // should be adjusted to account for this\\n        // additionally, a transaction could fail midway through an execution transaction\\n        // before being cancelled, the possibility of this additional gas cost should\\n        // be considered when setting the baseGasLimit\\n        uint256 baseGasLimit = dataStore.getUint(Keys.EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1);\\n        baseGasLimit += dataStore.getUint(Keys.EXECUTION_GAS_FEE_PER_ORACLE_PRICE) * oraclePriceCount;\\n        // the gas cost is estimated based on the gasprice of the request txn\\n        // the actual cost may be higher if the gasprice is higher in the execution txn\\n        // the multiplierFactor should be adjusted to account for this\\n        uint256 multiplierFactor = dataStore.getUint(Keys.EXECUTION_GAS_FEE_MULTIPLIER_FACTOR);\\n        uint256 gasLimit = baseGasLimit + Precision.applyFactor(gasUsed, multiplierFactor);\\n        return gasLimit;\\n    }\\n\\n    // @dev adjust the estimated gas limit to help ensure the execution fee is sufficient during\\n    // the actual execution\\n    // @param dataStore DataStore\\n    // @param estimatedGasLimit the estimated gas limit\\n    function adjustGasLimitForEstimate(\\n        DataStore dataStore,\\n        uint256 estimatedGasLimit,\\n        uint256 oraclePriceCount\\n    ) internal view returns (uint256) {\\n        uint256 baseGasLimit = dataStore.getUint(Keys.ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1);\\n        baseGasLimit += dataStore.getUint(Keys.ESTIMATED_GAS_FEE_PER_ORACLE_PRICE) * oraclePriceCount;\\n        uint256 multiplierFactor = dataStore.getUint(Keys.ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR);\\n        uint256 gasLimit = baseGasLimit + Precision.applyFactor(estimatedGasLimit, multiplierFactor);\\n        return gasLimit;\\n    }\\n\\n    // @dev get estimated number of oracle prices for deposit\\n    // @param swapsCount number of swaps in the deposit\\n    function estimateDepositOraclePriceCount(uint256 swapsCount) internal pure returns (uint256) {\\n        return 3 + swapsCount;\\n    }\\n\\n    // @dev get estimated number of oracle prices for withdrawal\\n    // @param swapsCount number of swaps in the withdrawal\\n    function estimateWithdrawalOraclePriceCount(uint256 swapsCount) external pure returns (uint256) {\\n        return 3 + swapsCount;\\n    }\\n\\n    // @dev get estimated number of oracle prices for order\\n    // @param swapsCount number of swaps in the order\\n    function estimateOrderOraclePriceCount(uint256 swapsCount) external pure returns (uint256) {\\n        return 3 + swapsCount;\\n    }\\n\\n    // @dev get estimated number of oracle prices for shift\\n    function estimateShiftOraclePriceCount() external pure returns (uint256) {\\n        // for single asset markets only 3 prices will be required\\n        // and keeper will slightly overpay\\n        // it should not be an issue because execution fee goes back to keeper\\n        return 4;\\n    }\\n\\n    function estimateGlvDepositOraclePriceCount(\\n        uint256 marketCount,\\n        uint256 swapsCount\\n    ) external pure returns (uint256) {\\n        // for single asset markets oracle price count will be overestimated by 1\\n        // it should not be an issue for GLV with multiple markets\\n        // because relative difference would be insignificant\\n        return 2 + marketCount + swapsCount;\\n    }\\n\\n    function estimateGlvWithdrawalOraclePriceCount(\\n        uint256 marketCount,\\n        uint256 swapsCount\\n    ) internal pure returns (uint256) {\\n        // for single asset markets oracle price count will be overestimated by 1\\n        // it should not be an issue for GLV with multiple markets\\n        // because relative difference would be insignificant\\n        return 2 + marketCount + swapsCount;\\n    }\\n\\n    // @dev the estimated gas limit for deposits\\n    // @param dataStore DataStore\\n    // @param deposit the deposit to estimate the gas limit for\\n    function estimateExecuteDepositGasLimit(\\n        DataStore dataStore,\\n        Deposit.Props memory deposit\\n    ) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        uint256 swapCount = deposit.longTokenSwapPath().length + deposit.shortTokenSwapPath().length;\\n        uint256 gasForSwaps = swapCount * gasPerSwap;\\n\\n        return dataStore.getUint(Keys.depositGasLimitKey()) + deposit.callbackGasLimit() + gasForSwaps;\\n    }\\n\\n    // @dev the estimated gas limit for withdrawals\\n    // @param dataStore DataStore\\n    // @param withdrawal the withdrawal to estimate the gas limit for\\n    function estimateExecuteWithdrawalGasLimit(\\n        DataStore dataStore,\\n        Withdrawal.Props memory withdrawal\\n    ) external view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        uint256 swapCount = withdrawal.longTokenSwapPath().length + withdrawal.shortTokenSwapPath().length;\\n        uint256 gasForSwaps = swapCount * gasPerSwap;\\n\\n        return dataStore.getUint(Keys.withdrawalGasLimitKey()) + withdrawal.callbackGasLimit() + gasForSwaps;\\n    }\\n\\n    // @dev the estimated gas limit for shifts\\n    // @param dataStore DataStore\\n    // @param shift the shift to estimate the gas limit for\\n    function estimateExecuteShiftGasLimit(\\n        DataStore dataStore,\\n        Shift.Props memory shift\\n    ) external view returns (uint256) {\\n        return dataStore.getUint(Keys.shiftGasLimitKey()) + shift.callbackGasLimit();\\n    }\\n\\n    // @dev the estimated gas limit for orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteOrderGasLimit(\\n        DataStore dataStore,\\n        Order.Props memory order\\n    ) external view returns (uint256) {\\n        if (BaseOrderUtils.isIncreaseOrder(order.orderType())) {\\n            return estimateExecuteIncreaseOrderGasLimit(dataStore, order);\\n        }\\n\\n        if (BaseOrderUtils.isDecreaseOrder(order.orderType())) {\\n            return estimateExecuteDecreaseOrderGasLimit(dataStore, order);\\n        }\\n\\n        if (BaseOrderUtils.isSwapOrder(order.orderType())) {\\n            return estimateExecuteSwapOrderGasLimit(dataStore, order);\\n        }\\n\\n        revert Errors.UnsupportedOrderType(uint256(order.orderType()));\\n    }\\n\\n    // @dev the estimated gas limit for increase orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteIncreaseOrderGasLimit(\\n        DataStore dataStore,\\n        Order.Props memory order\\n    ) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        return\\n            dataStore.getUint(Keys.increaseOrderGasLimitKey()) +\\n            gasPerSwap *\\n            order.swapPath().length +\\n            order.callbackGasLimit();\\n    }\\n\\n    // @dev the estimated gas limit for decrease orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteDecreaseOrderGasLimit(\\n        DataStore dataStore,\\n        Order.Props memory order\\n    ) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        uint256 swapCount = order.swapPath().length;\\n        if (order.decreasePositionSwapType() != Order.DecreasePositionSwapType.NoSwap) {\\n            swapCount += 1;\\n        }\\n\\n        return dataStore.getUint(Keys.decreaseOrderGasLimitKey()) + gasPerSwap * swapCount + order.callbackGasLimit();\\n    }\\n\\n    // @dev the estimated gas limit for swap orders\\n    // @param dataStore DataStore\\n    // @param order the order to estimate the gas limit for\\n    function estimateExecuteSwapOrderGasLimit(\\n        DataStore dataStore,\\n        Order.Props memory order\\n    ) internal view returns (uint256) {\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        return\\n            dataStore.getUint(Keys.swapOrderGasLimitKey()) +\\n            gasPerSwap *\\n            order.swapPath().length +\\n            order.callbackGasLimit();\\n    }\\n\\n    // @dev the estimated gas limit for glv deposits\\n    // @param dataStore DataStore\\n    // @param deposit the deposit to estimate the gas limit for\\n    function estimateExecuteGlvDepositGasLimit(\\n        DataStore dataStore,\\n        GlvDeposit.Props memory glvDeposit,\\n        uint256 marketCount\\n    ) external view returns (uint256) {\\n        // glv deposit execution gas consumption depends on the amount of markets\\n        uint256 gasPerGlvPerMarket = dataStore.getUint(Keys.glvPerMarketGasLimitKey());\\n        uint256 gasForGlvMarkets = gasPerGlvPerMarket * marketCount;\\n        uint256 glvDepositGasLimit = dataStore.getUint(Keys.glvDepositGasLimitKey());\\n\\n        uint256 gasLimit = glvDepositGasLimit + glvDeposit.callbackGasLimit() + gasForGlvMarkets;\\n\\n        if (glvDeposit.isMarketTokenDeposit()) {\\n            // user provided GM, no separate deposit will be created and executed in this case\\n            return gasLimit;\\n        }\\n\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        uint256 swapCount = glvDeposit.longTokenSwapPath().length + glvDeposit.shortTokenSwapPath().length;\\n        uint256 gasForSwaps = swapCount * gasPerSwap;\\n\\n        return gasLimit + dataStore.getUint(Keys.depositGasLimitKey()) + gasForSwaps;\\n    }\\n\\n    // @dev the estimated gas limit for glv withdrawals\\n    // @param dataStore DataStore\\n    // @param withdrawal the withdrawal to estimate the gas limit for\\n    function estimateExecuteGlvWithdrawalGasLimit(\\n        DataStore dataStore,\\n        GlvWithdrawal.Props memory glvWithdrawal,\\n        uint256 marketCount\\n    ) internal view returns (uint256) {\\n        // glv withdrawal execution gas consumption depends on the amount of markets\\n        uint256 gasPerGlvPerMarket = dataStore.getUint(Keys.glvPerMarketGasLimitKey());\\n        uint256 gasForGlvMarkets = gasPerGlvPerMarket * marketCount;\\n        uint256 glvWithdrawalGasLimit = dataStore.getUint(Keys.glvWithdrawalGasLimitKey());\\n\\n        uint256 gasLimit = glvWithdrawalGasLimit + glvWithdrawal.callbackGasLimit() + gasForGlvMarkets;\\n\\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\\n        uint256 swapCount = glvWithdrawal.longTokenSwapPath().length + glvWithdrawal.shortTokenSwapPath().length;\\n        uint256 gasForSwaps = swapCount * gasPerSwap;\\n\\n        return gasLimit + dataStore.getUint(Keys.withdrawalGasLimitKey()) + gasForSwaps;\\n    }\\n\\n    function estimateExecuteGlvShiftGasLimit(DataStore dataStore) external view returns (uint256) {\\n        return dataStore.getUint(Keys.glvShiftGasLimitKey());\\n    }\\n\\n    function emitKeeperExecutionFee(EventEmitter eventEmitter, address keeper, uint256 executionFeeAmount) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"keeper\\\", keeper);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"executionFeeAmount\\\", executionFeeAmount);\\n\\n        eventEmitter.emitEventLog1(\\\"KeeperExecutionFee\\\", Cast.toBytes32(keeper), eventData);\\n    }\\n\\n    function emitExecutionFeeRefund(EventEmitter eventEmitter, address receiver, uint256 refundFeeAmount) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"refundFeeAmount\\\", refundFeeAmount);\\n\\n        eventEmitter.emitEventLog1(\\\"ExecutionFeeRefund\\\", Cast.toBytes32(receiver), eventData);\\n    }\\n\\n    function emitExecutionFeeRefundCallback(\\n        EventEmitter eventEmitter,\\n        address callbackContract,\\n        uint256 refundFeeAmount\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"callbackContract\\\", callbackContract);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"refundFeeAmount\\\", refundFeeAmount);\\n\\n        eventEmitter.emitEventLog1(\\\"ExecutionFeeRefundCallback\\\", Cast.toBytes32(callbackContract), eventData);\\n    }\\n\\n    function payGelatoRelayFee(\\n        DataStore dataStore,\\n        address wnt,\\n        uint256 startingGas,\\n        uint256 calldataLength,\\n        uint256 availableFeeAmount\\n    ) internal returns (uint256) {\\n        address relayFeeAddress = dataStore.getAddress(Keys.RELAY_FEE_ADDRESS);\\n        if (relayFeeAddress == address(0)) {\\n            revert Errors.EmptyRelayFeeAddress();\\n        }\\n\\n        uint256 relayFeeMultiplierFactor = dataStore.getUint(Keys.GELATO_RELAY_FEE_MULTIPLIER_FACTOR);\\n        if (relayFeeMultiplierFactor == 0) {\\n            relayFeeMultiplierFactor = Precision.FLOAT_PRECISION;\\n        }\\n\\n        // relayFeeBaseAmount should include:\\n        // - 21000 base gas\\n        // - GelatoRelay contract gas\\n        // - gas for 2 token transfers: to relay fee address and residual fee to the user\\n        // - any other fixed gas costs before gasleft() and after the relay fee is calculated\\n        uint256 relayFeeBaseAmount = dataStore.getUint(Keys.GELATO_RELAY_FEE_BASE_AMOUNT);\\n\\n        // would be non-zero for Arbitrum only\\n        uint256 l1Fee = Chain.getCurrentTxL1GasFees();\\n\\n        uint256 l2Fee = (relayFeeBaseAmount + _getCalldataGas(calldataLength) + startingGas - gasleft()) * tx.gasprice;\\n\\n        uint256 relayFee = Precision.applyFactor(l1Fee + l2Fee, relayFeeMultiplierFactor);\\n\\n        if (relayFee > availableFeeAmount) {\\n            revert Errors.InsufficientRelayFee(relayFee, availableFeeAmount);\\n        }\\n\\n        IERC20(wnt).safeTransfer(relayFeeAddress, relayFee);\\n\\n        return relayFee;\\n    }\\n\\n    function _getCalldataGas(uint256 calldataLength) internal pure returns (uint256) {\\n        if (calldataLength > 50000) {\\n            // we use 10 gas cost per byte for simplicity\\n            // a malicious actor could send large calldata with non-zero bytes to force relay pay more\\n            // this is unlikely to happen because the malicious actor would have to pay for the rest and wouldn't extra any profit\\n            // but to reduce the risk we limit the calldata length\\n            revert Errors.RelayCalldataTooLong(calldataLength);\\n        }\\n\\n        // zero byte in call data costs 4 gas, non-zero byte costs 16 gas\\n        // there are more zero bytes in transactions on average, we take 10 as a relatively safe estimate\\n        // GelatoRelay contract receives calldata with a Call with fields like to, gasLimit, data, etc.\\n        // the GMX contract receives only data.call\\n        // in practice call fields are small compared to the call.data, so we only use msg.data received by GMX contract for simplicity\\n        uint256 txCalldataGasUsed = calldataLength * 10;\\n\\n        // calculate words, apply ceiling\\n        uint256 memoryWords = (calldataLength + 31) / 32;\\n\\n        // GelatoRelay contract calls GMX contract, CALL's gas depends on the calldata length\\n        // approximate formula for CALL gas consumption (excluding fixed costs e.g. 700 gas for the CALL opcode):\\n        //     memory_cost(n) = (n_words^2) / 512 + (3 * n_words)\\n        //     memory_expansion_cost = memory_cost(new) - memory_cost(previous)\\n        // we assume that previous memory_cost is 0 for simplicity\\n        uint256 gmxCallGasUsed = memoryWords ** 2 / 512 + memoryWords * 3;\\n\\n        return txCalldataGasUsed + gmxCallGasUsed;\\n    }\\n}\\n\",\"keccak256\":\"0x652282e6acda8c87b819ae1e861d75045fe6ea9c9be048dbe280741127b66450\",\"license\":\"BUSL-1.1\"},\"contracts/glv/Glv.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\nlibrary Glv {\\n    struct Props {\\n        address glvToken;\\n        address longToken;\\n        address shortToken;\\n    }\\n}\\n\",\"keccak256\":\"0x0098aab4d3fec45dfd34dc384f3c651e7a752121d2e29d3209ada13035a33b69\",\"license\":\"BUSL-1.1\"},\"contracts/glv/GlvEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nlibrary GlvEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitGlvMarketAdded(EventEmitter eventEmitter, address glv, address market) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"glv\\\", glv);\\n        eventData.addressItems.setItem(1, \\\"market\\\", market);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvMarketAdded\\\", Cast.toBytes32(glv), Cast.toBytes32(market), eventData);\\n    }\\n\\n    function emitGlvMarketRemoved(EventEmitter eventEmitter, address glv, address market) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"glv\\\", glv);\\n        eventData.addressItems.setItem(1, \\\"market\\\", market);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvMarketRemoved\\\", Cast.toBytes32(glv), Cast.toBytes32(market), eventData);\\n    }\\n\\n    function emitGlvValueUpdated(EventEmitter eventEmitter, address glv, uint256 value, uint256 supply) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"glv\\\", glv);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"value\\\", value);\\n        eventData.uintItems.setItem(1, \\\"supply\\\", supply);\\n\\n        eventEmitter.emitEventLog1(\\\"GlvValueUpdated\\\", Cast.toBytes32(glv), eventData);\\n    }\\n}\\n\",\"keccak256\":\"0xa56995c025e0042776c70a8f9df84f2063b82bac0ef0b1f1e261ef4f47bf9390\",\"license\":\"BUSL-1.1\"},\"contracts/glv/GlvStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\n\\nimport \\\"./Glv.sol\\\";\\n\\nlibrary GlvStoreUtils {\\n    using Glv for Glv.Props;\\n\\n    bytes32 public constant GLV_SALT = keccak256(abi.encode(\\\"GLV_SALT\\\"));\\n    bytes32 public constant GLV_TOKEN = keccak256(abi.encode(\\\"GLV_TOKEN\\\"));\\n    bytes32 public constant LONG_TOKEN = keccak256(abi.encode(\\\"LONG_TOKEN\\\"));\\n    bytes32 public constant SHORT_TOKEN = keccak256(abi.encode(\\\"SHORT_TOKEN\\\"));\\n\\n    function get(DataStore dataStore, address key) public view returns (Glv.Props memory) {\\n        Glv.Props memory glv;\\n        if (!dataStore.containsAddress(Keys.GLV_LIST, key)) {\\n            return glv;\\n        }\\n\\n        glv.glvToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, GLV_TOKEN))\\n        );\\n\\n        glv.longToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, LONG_TOKEN))\\n        );\\n\\n        glv.shortToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, SHORT_TOKEN))\\n        );\\n\\n        return glv;\\n    }\\n\\n    function getBySalt(DataStore dataStore, bytes32 salt) external view returns (Glv.Props memory) {\\n        address key = dataStore.getAddress(getGlvSaltHash(salt));\\n        return get(dataStore, key);\\n    }\\n\\n    function set(DataStore dataStore, address key, bytes32 salt, Glv.Props memory glv) external {\\n        dataStore.addAddress(\\n            Keys.GLV_LIST,\\n            key\\n        );\\n\\n        // the salt is based on the glv props while the key gives the glv's address\\n        // use the salt to store a reference to the key to allow the key to be retrieved\\n        // using just the salt value\\n        dataStore.setAddress(\\n            getGlvSaltHash(salt),\\n            key\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, GLV_TOKEN)),\\n            glv.glvToken\\n        );\\n\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, LONG_TOKEN)),\\n            glv.longToken\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, SHORT_TOKEN)),\\n            glv.shortToken\\n        );\\n    }\\n\\n    function remove(DataStore dataStore, address key) external {\\n        if (!dataStore.containsAddress(Keys.GLV_LIST, key)) {\\n            revert Errors.GlvNotFound(key);\\n        }\\n\\n        dataStore.removeAddress(\\n            Keys.GLV_LIST,\\n            key\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, GLV_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, LONG_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, SHORT_TOKEN))\\n        );\\n    }\\n\\n    function getGlvSaltHash(bytes32 salt) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_SALT, salt));\\n    }\\n\\n    function getGlvCount(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getAddressCount(Keys.GLV_LIST);\\n    }\\n\\n    function getGlvKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        return dataStore.getAddressValuesAt(Keys.GLV_LIST, start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x1fc879e5e5c4049f808752d32afc484baa61d8430657ee32004e6582acca6d2b\",\"license\":\"BUSL-1.1\"},\"contracts/glv/GlvToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\ncontract GlvToken is ERC20, StrictBank {\\n    constructor(\\n        RoleStore _roleStore,\\n        DataStore _dataStore,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) StrictBank(_roleStore, _dataStore) {}\\n\\n    function mint(address account, uint256 amount) external onlyController {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyController {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x3ab79c1cdddcaeef4b170f772d5de933489ebb34d925d14f91f8781bfdedfca2\",\"license\":\"BUSL-1.1\"},\"contracts/glv/GlvUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../market/Market.sol\\\";\\nimport \\\"../market/MarketUtils.sol\\\";\\nimport \\\"./GlvToken.sol\\\";\\nimport \\\"./GlvEventUtils.sol\\\";\\nimport \\\"./GlvStoreUtils.sol\\\";\\n\\nlibrary GlvUtils {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    struct GetGlvValueCache {\\n        bytes32 marketListKey;\\n        uint256 marketCount;\\n        uint256 glvValue;\\n        Price.Props indexTokenPrice;\\n        Price.Props longTokenPrice;\\n        Price.Props shortTokenPrice;\\n        Market.Props market;\\n    }\\n\\n    // @dev get the USD value of the Glv\\n    // @param dataStore DataStore\\n    // @param oracle Oracle\\n    // @param glv Glv\\n    // @param maximize\\n    // @return the USD value of the Glv\\n    function getGlvValue(\\n        DataStore dataStore,\\n        Oracle oracle,\\n        address glv,\\n        bool maximize\\n    ) public view returns (uint256) {\\n        GetGlvValueCache memory cache;\\n        cache.marketListKey = Keys.glvSupportedMarketListKey(glv);\\n        cache.marketCount = dataStore.getAddressCount(cache.marketListKey);\\n\\n        address[] memory marketAddresses = dataStore.getAddressValuesAt(cache.marketListKey, 0, cache.marketCount);\\n        for (uint256 i = 0; i < marketAddresses.length; i++) {\\n            address marketAddress = marketAddresses[i];\\n            Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n            if (i == 0) {\\n                cache.longTokenPrice = oracle.getPrimaryPrice(market.longToken);\\n                cache.shortTokenPrice = oracle.getPrimaryPrice(market.shortToken);\\n            }\\n            cache.glvValue += _getGlvMarketValue(\\n                dataStore,\\n                glv,\\n                marketAddress,\\n                oracle.getPrimaryPrice(market.indexToken),\\n                cache.longTokenPrice,\\n                cache.shortTokenPrice,\\n                maximize\\n            );\\n        }\\n\\n        return cache.glvValue;\\n    }\\n\\n    function getGlvValue(\\n        DataStore dataStore,\\n        address[] memory marketAddresses,\\n        Price.Props[] memory indexTokenPrices,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        address glv,\\n        bool maximize\\n    ) public view returns (uint256) {\\n        GetGlvValueCache memory cache;\\n\\n        for (uint256 i = 0; i < marketAddresses.length; i++) {\\n            address marketAddress = marketAddresses[i];\\n            cache.indexTokenPrice = indexTokenPrices[i];\\n\\n            cache.glvValue += _getGlvMarketValue(\\n                dataStore,\\n                glv,\\n                marketAddress,\\n                cache.indexTokenPrice,\\n                longTokenPrice,\\n                shortTokenPrice,\\n                maximize\\n            );\\n        }\\n\\n        return cache.glvValue;\\n    }\\n\\n    function _getGlvMarketValue(\\n        DataStore dataStore,\\n        address glv,\\n        address marketAddress,\\n        Price.Props memory indexTokenPrice,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n\\n        uint256 marketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(marketAddress)));\\n        uint256 balance = GlvToken(payable(glv)).tokenBalances(marketAddress);\\n\\n        if (balance == 0) {\\n            return 0;\\n        }\\n\\n        MarketPoolValueInfo.Props memory marketPoolValueInfo = MarketUtils.getPoolValueInfo(\\n            dataStore,\\n            market,\\n            indexTokenPrice,\\n            longTokenPrice,\\n            shortTokenPrice,\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\\n            maximize\\n        );\\n\\n        if (marketPoolValueInfo.poolValue < 0) {\\n            revert Errors.GlvNegativeMarketPoolValue(glv, marketAddress);\\n        }\\n\\n        return\\n            MarketUtils.marketTokenAmountToUsd(balance, marketPoolValueInfo.poolValue.toUint256(), marketTokenSupply);\\n    }\\n\\n    function getGlvTokenPrice(\\n        DataStore dataStore,\\n        Oracle oracle,\\n        address glv,\\n        bool maximize\\n    ) internal view returns (uint256, uint256, uint256) {\\n        uint256 value = getGlvValue(dataStore, oracle, glv, maximize);\\n        uint256 supply = ERC20(glv).totalSupply();\\n\\n        return _getGlvTokenPrice(value, supply);\\n    }\\n\\n    function getGlvTokenPrice(\\n        DataStore dataStore,\\n        address[] memory marketAddresses,\\n        Price.Props[] memory indexTokenPrices,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        address glv,\\n        bool maximize\\n    ) internal view returns (uint256, uint256, uint256) {\\n        uint256 value = getGlvValue(\\n            dataStore,\\n            marketAddresses,\\n            indexTokenPrices,\\n            longTokenPrice,\\n            shortTokenPrice,\\n            glv,\\n            maximize\\n        );\\n        uint256 supply = ERC20(glv).totalSupply();\\n\\n        return _getGlvTokenPrice(value, supply);\\n    }\\n\\n    function _getGlvTokenPrice(uint256 value, uint256 supply) internal pure returns (uint256, uint256, uint256) {\\n        // if the supply is zero then treat the market token price as 1 USD\\n        if (supply == 0) {\\n            return (Precision.FLOAT_PRECISION, value, supply);\\n        }\\n        if (value == 0) {\\n            return (0, value, supply);\\n        }\\n        return (Precision.mulDiv(Precision.WEI_PRECISION, value, supply), value, supply);\\n    }\\n\\n    function usdToGlvTokenAmount(\\n        uint256 usdValue,\\n        uint256 glvValue,\\n        uint256 glvSupply\\n    ) internal pure returns (uint256) {\\n        // if the supply and glvValue is zero, use 1 USD as the token price\\n        if (glvSupply == 0 && glvValue == 0) {\\n            return Precision.floatToWei(usdValue);\\n        }\\n\\n        // if the supply is zero and the glvValue is more than zero,\\n        // then include the glvValue for the amount of tokens minted so that\\n        // the market token price after mint would be 1 USD\\n        if (glvSupply == 0 && glvValue > 0) {\\n            return Precision.floatToWei(glvValue + usdValue);\\n        }\\n\\n        // round market tokens down\\n        return Precision.mulDiv(glvSupply, usdValue, glvValue);\\n    }\\n\\n    function glvTokenAmountToUsd(\\n        uint256 glvTokenAmount,\\n        uint256 glvValue,\\n        uint256 glvSupply\\n    ) internal pure returns (uint256) {\\n        if (glvSupply == 0) {\\n            revert Errors.EmptyGlvTokenSupply();\\n        }\\n\\n        return Precision.mulDiv(glvValue, glvTokenAmount, glvSupply);\\n    }\\n\\n    function validateGlvMarket(DataStore dataStore, address glv, address market, bool shouldBeEnabled) public view {\\n        if (!dataStore.containsAddress(Keys.glvSupportedMarketListKey(glv), market)) {\\n            revert Errors.GlvUnsupportedMarket(glv, market);\\n        }\\n\\n        if (shouldBeEnabled && dataStore.getBool(Keys.isGlvMarketDisabledKey(glv, market))) {\\n            revert Errors.GlvDisabledMarket(glv, market);\\n        }\\n    }\\n\\n    function validateGlv(DataStore dataStore, address glv) public view {\\n        if (!dataStore.containsAddress(Keys.GLV_LIST, glv)) {\\n            revert Errors.EmptyGlv(glv);\\n        }\\n    }\\n\\n    function getGlvMarketCount(DataStore dataStore, address glv) external view returns (uint256) {\\n        return dataStore.getAddressCount(Keys.glvSupportedMarketListKey(glv));\\n    }\\n\\n    function validateGlvMarketTokenBalance(\\n        DataStore dataStore,\\n        address glv,\\n        Market.Props memory market,\\n        uint256 marketPoolValue,\\n        uint256 marketTokenSupply\\n    ) external view {\\n        uint256 maxMarketTokenBalanceUsd = dataStore.getUint(\\n            Keys.glvMaxMarketTokenBalanceUsdKey(glv, market.marketToken)\\n        );\\n        uint256 maxMarketTokenBalanceAmount = dataStore.getUint(\\n            Keys.glvMaxMarketTokenBalanceAmountKey(glv, market.marketToken)\\n        );\\n\\n        if (maxMarketTokenBalanceAmount == 0 && maxMarketTokenBalanceUsd == 0) {\\n            return;\\n        }\\n\\n        uint256 marketTokenBalanceAmount = GlvToken(payable(glv)).tokenBalances(market.marketToken);\\n        if (maxMarketTokenBalanceAmount > 0 && marketTokenBalanceAmount > maxMarketTokenBalanceAmount) {\\n            revert Errors.GlvMaxMarketTokenBalanceAmountExceeded(\\n                glv,\\n                market.marketToken,\\n                maxMarketTokenBalanceAmount,\\n                marketTokenBalanceAmount\\n            );\\n        }\\n\\n        if (maxMarketTokenBalanceUsd > 0) {\\n            uint256 marketTokenBalanceUsd = MarketUtils.marketTokenAmountToUsd(\\n                marketTokenBalanceAmount,\\n                marketPoolValue,\\n                marketTokenSupply\\n            );\\n            if (marketTokenBalanceUsd > maxMarketTokenBalanceUsd) {\\n                revert Errors.GlvMaxMarketTokenBalanceUsdExceeded(\\n                    glv,\\n                    market.marketToken,\\n                    maxMarketTokenBalanceUsd,\\n                    marketTokenBalanceUsd\\n                );\\n            }\\n        }\\n    }\\n\\n    function addMarketToGlv(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address glvAddress,\\n        address marketAddress\\n    ) external {\\n        validateGlv(dataStore, glvAddress);\\n\\n        Market.Props memory market = MarketUtils.getEnabledMarket(dataStore, marketAddress);\\n        Glv.Props memory glv = GlvStoreUtils.get(dataStore, glvAddress);\\n        if (market.longToken != glv.longToken) {\\n            revert Errors.GlvInvalidLongToken(glvAddress, market.longToken, glv.longToken);\\n        }\\n        if (market.shortToken != glv.shortToken) {\\n            revert Errors.GlvInvalidShortToken(glvAddress, market.shortToken, glv.shortToken);\\n        }\\n\\n        bytes32 key = Keys.glvSupportedMarketListKey(glvAddress);\\n        if (dataStore.containsAddress(key, marketAddress)) {\\n            revert Errors.GlvMarketAlreadyExists(glvAddress, marketAddress);\\n        }\\n        dataStore.addAddress(key, marketAddress);\\n\\n        validateGlvMarketCount(dataStore, glvAddress);\\n\\n        GlvEventUtils.emitGlvMarketAdded(eventEmitter, glvAddress, market.marketToken);\\n    }\\n\\n    function validateGlvMarketCount(DataStore dataStore, address glvAddress) internal view {\\n        uint256 glvMaxMarketCount = dataStore.getUint(Keys.GLV_MAX_MARKET_COUNT);\\n        if (glvMaxMarketCount > 0) {\\n            bytes32 key = Keys.glvSupportedMarketListKey(glvAddress);\\n            uint256 glvMarketCount = dataStore.getAddressCount(key);\\n            if (glvMarketCount > glvMaxMarketCount) {\\n                revert Errors.GlvMaxMarketCountExceeded(glvAddress, glvMaxMarketCount);\\n            }\\n        }\\n    }\\n\\n    function removeMarketFromGlv(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address glvAddress,\\n        address marketAddress\\n    ) external {\\n        validateGlv(dataStore, glvAddress);\\n        validateGlvMarket(dataStore, glvAddress, marketAddress, false);\\n\\n        if (!dataStore.getBool(Keys.isGlvMarketDisabledKey(glvAddress, marketAddress))) {\\n            revert Errors.GlvEnabledMarket(glvAddress, marketAddress);\\n        }\\n\\n        uint256 balance = GlvToken(payable(glvAddress)).tokenBalances(marketAddress);\\n        if (balance != 0) {\\n            revert Errors.GlvNonZeroMarketBalance(glvAddress, marketAddress);\\n        }\\n\\n        bytes32 key = Keys.glvSupportedMarketListKey(glvAddress);\\n        dataStore.removeAddress(key, marketAddress);\\n\\n        GlvEventUtils.emitGlvMarketRemoved(eventEmitter, glvAddress, marketAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x198ce54d5d6f944ce3e884736d6a3931f075499c2538624bb5bb08527b41c86d\",\"license\":\"BUSL-1.1\"},\"contracts/glv/GlvVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\ncontract GlvVault is StrictBank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n}\\n\",\"keccak256\":\"0xabb380c543727ad64fcb5704682b02bfea5ef1393f11b6a13dfd92fc5258e5c1\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/ExecuteGlvDepositUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../deposit/ExecuteDepositUtils.sol\\\";\\n\\nimport \\\"../../multichain/MultichainUtils.sol\\\";\\n\\nimport \\\"../../nonce/NonceUtils.sol\\\";\\n\\nimport \\\"../GlvVault.sol\\\";\\nimport \\\"../GlvUtils.sol\\\";\\nimport \\\"./GlvDepositEventUtils.sol\\\";\\nimport \\\"./GlvDepositStoreUtils.sol\\\";\\nimport \\\"./GlvDepositCalc.sol\\\";\\n\\nlibrary ExecuteGlvDepositUtils {\\n    using GlvDeposit for GlvDeposit.Props;\\n    using Deposit for Deposit.Props;\\n    using SafeCast for int256;\\n    using EventUtils for EventUtils.UintItems;\\n\\n    struct ExecuteGlvDepositParams {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        MultichainVault multichainVault;\\n        GlvVault glvVault;\\n        Oracle oracle;\\n        bytes32 key;\\n        uint256 startingGas;\\n        address keeper;\\n    }\\n\\n    struct ExecuteGlvDepositCache {\\n        Market.Props market;\\n        MarketPoolValueInfo.Props marketPoolValueInfo;\\n        uint256 marketTokenSupply;\\n        uint256 receivedMarketTokens;\\n        uint256 mintAmount;\\n        uint256 marketCount;\\n        uint256 oraclePriceCount;\\n        uint256 glvValue;\\n        uint256 glvSupply;\\n    }\\n\\n    function executeGlvDeposit(\\n        ExecuteGlvDepositParams memory params,\\n        GlvDeposit.Props memory glvDeposit\\n    ) external returns (uint256) {\\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\\n        params.startingGas -= gasleft() / 63;\\n\\n        GlvDepositStoreUtils.remove(params.dataStore, params.key, glvDeposit.account());\\n\\n        // should be called before any tokens are minted\\n        GlvDepositCalc.validateFirstGlvDeposit(params.dataStore, glvDeposit);\\n\\n        ExecuteGlvDepositCache memory cache;\\n\\n        cache.receivedMarketTokens = _processMarketDeposit(params, glvDeposit, params.glvVault);\\n\\n        // glvValue should be calculated after funds are deposited into GM market\\n        // but before GLV syncs GM token balance for glvValue to account for\\n        // slightly increased GM market price because of paid fees\\n        cache.glvValue = GlvUtils.getGlvValue(\\n            params.dataStore,\\n            params.oracle,\\n            glvDeposit.glv(),\\n            true // maximize\\n        );\\n        GlvToken(payable(glvDeposit.glv())).syncTokenBalance(glvDeposit.market());\\n\\n        cache.glvSupply = GlvToken(payable(glvDeposit.glv())).totalSupply();\\n        cache.mintAmount = GlvDepositCalc.getMintAmount(\\n            params.dataStore,\\n            params.oracle,\\n            glvDeposit,\\n            cache.receivedMarketTokens,\\n            cache.glvValue,\\n            cache.glvSupply\\n        );\\n        if (cache.mintAmount < glvDeposit.minGlvTokens()) {\\n            revert Errors.MinGlvTokens(cache.mintAmount, glvDeposit.minGlvTokens());\\n        }\\n\\n        if (glvDeposit.srcChainId() == 0) {\\n            GlvToken(payable(glvDeposit.glv())).mint(glvDeposit.receiver(), cache.mintAmount);\\n        } else {\\n            GlvToken(payable(glvDeposit.glv())).mint(address(params.multichainVault), cache.mintAmount);\\n            MultichainUtils.recordTransferIn(params.dataStore, params.eventEmitter, params.multichainVault, glvDeposit.glv(), glvDeposit.receiver(), 0); // srcChainId is the current block.chainId\\n        }\\n\\n\\n        cache.market = MarketUtils.getEnabledMarket(params.dataStore, glvDeposit.market());\\n        cache.marketPoolValueInfo = MarketUtils.getPoolValueInfo(\\n            params.dataStore,\\n            cache.market,\\n            params.oracle.getPrimaryPrice(cache.market.indexToken),\\n            params.oracle.getPrimaryPrice(cache.market.longToken),\\n            params.oracle.getPrimaryPrice(cache.market.shortToken),\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\\n            true // maximize\\n        );\\n        cache.marketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(glvDeposit.market())));\\n\\n        GlvUtils.validateGlvMarketTokenBalance(\\n            params.dataStore,\\n            glvDeposit.glv(),\\n            cache.market,\\n            cache.marketPoolValueInfo.poolValue.toUint256(),\\n            cache.marketTokenSupply\\n        );\\n\\n        GlvDepositEventUtils.emitGlvDepositExecuted(\\n            params.eventEmitter,\\n            params.key,\\n            glvDeposit.account(),\\n            cache.mintAmount\\n        );\\n\\n        cache.glvValue = GlvUtils.getGlvValue(\\n            params.dataStore,\\n            params.oracle,\\n            glvDeposit.glv(),\\n            true // maximize\\n        );\\n        cache.glvSupply = GlvToken(payable(glvDeposit.glv())).totalSupply();\\n        GlvEventUtils.emitGlvValueUpdated(params.eventEmitter, glvDeposit.glv(), cache.glvValue, cache.glvSupply);\\n\\n        EventUtils.EventLogData memory eventData;\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"receivedGlvTokens\\\", cache.mintAmount);\\n        CallbackUtils.afterGlvDepositExecution(params.key, glvDeposit, eventData);\\n\\n        cache.marketCount = GlvUtils.getGlvMarketCount(params.dataStore, glvDeposit.glv());\\n        cache.oraclePriceCount = GasUtils.estimateGlvDepositOraclePriceCount(\\n            cache.marketCount,\\n            glvDeposit.longTokenSwapPath().length + glvDeposit.shortTokenSwapPath().length\\n        );\\n        GasUtils.payExecutionFee(\\n            GasUtils.PayExecutionFeeContracts(\\n                params.dataStore,\\n                params.eventEmitter,\\n                params.multichainVault,\\n                params.glvVault\\n            ),\\n            params.key,\\n            glvDeposit.callbackContract(),\\n            glvDeposit.executionFee(),\\n            params.startingGas,\\n            cache.oraclePriceCount,\\n            params.keeper,\\n            glvDeposit.receiver(),\\n            glvDeposit.srcChainId()\\n        );\\n\\n        return cache.mintAmount;\\n    }\\n\\n\\n    function _processMarketDeposit(\\n        ExecuteGlvDepositParams memory params,\\n        GlvDeposit.Props memory glvDeposit,\\n        GlvVault glvVault\\n    ) private returns (uint256) {\\n        if (glvDeposit.isMarketTokenDeposit()) {\\n            Market.Props memory market = MarketUtils.getEnabledMarket(params.dataStore, glvDeposit.market());\\n\\n            MarketUtils.MarketPrices memory marketPrices = MarketUtils.MarketPrices(\\n                params.oracle.getPrimaryPrice(market.indexToken),\\n                params.oracle.getPrimaryPrice(market.longToken),\\n                params.oracle.getPrimaryPrice(market.shortToken)\\n            );\\n            MarketUtils.validateMaxPnl(\\n                params.dataStore,\\n                market,\\n                marketPrices,\\n                Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\\n                Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS\\n            );\\n\\n            // user deposited GM tokens\\n            glvVault.transferOut(glvDeposit.market(), glvDeposit.glv(), glvDeposit.marketTokenAmount());\\n            return glvDeposit.marketTokenAmount();\\n        }\\n\\n        Deposit.Props memory deposit = Deposit.Props(\\n            Deposit.Addresses({\\n                account: glvDeposit.glv(),\\n                receiver: glvDeposit.glv(),\\n                callbackContract: address(0),\\n                uiFeeReceiver: glvDeposit.uiFeeReceiver(),\\n                market: glvDeposit.market(),\\n                initialLongToken: glvDeposit.initialLongToken(),\\n                initialShortToken: glvDeposit.initialShortToken(),\\n                longTokenSwapPath: glvDeposit.longTokenSwapPath(),\\n                shortTokenSwapPath: glvDeposit.shortTokenSwapPath()\\n            }),\\n            Deposit.Numbers({\\n                initialLongTokenAmount: glvDeposit.initialLongTokenAmount(),\\n                initialShortTokenAmount: glvDeposit.initialShortTokenAmount(),\\n                minMarketTokens: 0,\\n                updatedAtTime: glvDeposit.updatedAtTime(),\\n                executionFee: 0,\\n                callbackGasLimit: 0,\\n                srcChainId: 0 // srcChainId is the current block.chainId\\n            }),\\n            Deposit.Flags({shouldUnwrapNativeToken: false}),\\n            new bytes32[](0) // dataList\\n        );\\n\\n        bytes32 depositKey = NonceUtils.getNextKey(params.dataStore);\\n        params.dataStore.addBytes32(Keys.DEPOSIT_LIST, depositKey);\\n        DepositEventUtils.emitDepositCreated(params.eventEmitter, depositKey, deposit, Deposit.DepositType.Glv);\\n\\n        ExecuteDepositUtils.ExecuteDepositParams memory executeDepositParams = ExecuteDepositUtils.ExecuteDepositParams(\\n                params.dataStore,\\n                params.eventEmitter,\\n                params.multichainVault,\\n                DepositVault(payable(params.glvVault)),\\n                params.oracle,\\n                depositKey,\\n                params.keeper,\\n                params.startingGas,\\n                ISwapPricingUtils.SwapPricingType.Deposit,\\n                true, // includeVirtualInventoryImpact\\n                0 // srcChainId is the current block.chainId\\n            );\\n\\n        uint256 receivedMarketTokens = ExecuteDepositUtils.executeDeposit(executeDepositParams, deposit);\\n        return receivedMarketTokens;\\n    }\\n}\\n\",\"keccak256\":\"0x42d83465bc8a5e82f452bd4672836bd26d5444fa725e589ab1200216581191a6\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/GlvDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title GlvDeposit\\n// @dev Struct for GLV deposits\\nlibrary GlvDeposit {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // large number of fields my also cause incorrect display in Tenderly\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address glv;\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param marketTokenAmount the amount of market tokens to deposit\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minGlvTokens the minimum acceptable number of Glv tokens\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minGlvTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    // @param isMarketTokenDeposit whether to deposit market tokens or long/short tokens\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n        bool isMarketTokenDeposit;\\n    }\\n\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function glv(Props memory props) internal pure returns (address) {\\n        return props.addresses.glv;\\n    }\\n\\n    function setGlv(Props memory props, address value) internal pure {\\n        props.addresses.glv = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minGlvTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minGlvTokens;\\n    }\\n\\n    function setMinGlvTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minGlvTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function isMarketTokenDeposit(Props memory props) internal pure returns (bool) {\\n        return props.flags.isMarketTokenDeposit;\\n    }\\n\\n    function setIsMarketTokenDeposit(Props memory props, bool value) internal pure {\\n        props.flags.isMarketTokenDeposit = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x1ccb6e26de76db774ecf7db3a6d2806021eb00b14948cd374e9f6f82a23946b1\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/GlvDepositCalc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GlvDeposit.sol\\\";\\nimport \\\"../GlvUtils.sol\\\";\\n\\nlibrary GlvDepositCalc {\\n    using GlvDeposit for GlvDeposit.Props;\\n    using SafeCast for int256;\\n\\n    address public constant RECEIVER_FOR_FIRST_GLV_DEPOSIT = address(1);\\n\\n    function validateFirstGlvDeposit(\\n        DataStore dataStore,\\n        GlvDeposit.Props memory glvDeposit\\n    ) external view {\\n        address glv = glvDeposit.glv();\\n        uint256 initialGlvTokenSupply = GlvToken(payable(glv)).totalSupply();\\n\\n        // return if this is not the first glv deposit\\n        if (initialGlvTokenSupply != 0) {\\n            return;\\n        }\\n\\n        uint256 minGlvTokens = dataStore.getUint(Keys.minGlvTokensForFirstGlvDepositKey(glv));\\n\\n        // return if there is no minGlvTokens requirement\\n        if (minGlvTokens == 0) {\\n            return;\\n        }\\n\\n        if (glvDeposit.receiver() != RECEIVER_FOR_FIRST_GLV_DEPOSIT) {\\n            revert Errors.InvalidReceiverForFirstGlvDeposit(glvDeposit.receiver(), RECEIVER_FOR_FIRST_GLV_DEPOSIT);\\n        }\\n\\n        if (glvDeposit.minGlvTokens() < minGlvTokens) {\\n            revert Errors.InvalidMinGlvTokensForFirstGlvDeposit(glvDeposit.minGlvTokens(), minGlvTokens);\\n        }\\n    }\\n\\n    function getMintAmount(\\n        DataStore dataStore,\\n        Oracle oracle,\\n        GlvDeposit.Props memory glvDeposit,\\n        uint256 receivedMarketTokens,\\n        uint256 glvValue,\\n        uint256 glvSupply\\n    ) external view returns (uint256) {\\n        Market.Props memory market = MarketUtils.getEnabledMarket(dataStore, glvDeposit.market());\\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\\n            dataStore,\\n            market,\\n            oracle.getPrimaryPrice(market.indexToken),\\n            oracle.getPrimaryPrice(market.longToken),\\n            oracle.getPrimaryPrice(market.shortToken),\\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\\n            false // maximize\\n        );\\n        uint256 marketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\\n        uint256 receivedMarketTokensUsd = MarketUtils.marketTokenAmountToUsd(\\n            receivedMarketTokens,\\n            poolValueInfo.poolValue.toUint256(),\\n            marketTokenSupply\\n        );\\n        return GlvUtils.usdToGlvTokenAmount(receivedMarketTokensUsd, glvValue, glvSupply);\\n    }\\n}\\n\",\"keccak256\":\"0xf31d608d442040dd4b4467a180cb4d18bae3562bb22048370046dd48b1f12f7c\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/GlvDepositEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../event/EventEmitter.sol\\\";\\nimport \\\"../../event/EventUtils.sol\\\";\\nimport \\\"../../utils/Cast.sol\\\";\\n\\nimport \\\"./GlvDeposit.sol\\\";\\n\\nlibrary GlvDepositEventUtils {\\n    using GlvDeposit for GlvDeposit.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitGlvDepositCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        GlvDeposit.Props memory glvDeposit\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(glvDeposit);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"GlvDepositCreated\\\",\\n            key,\\n            Cast.toBytes32(glvDeposit.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitGlvDepositExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 receivedGlvTokens\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"receivedGlvTokens\\\", receivedGlvTokens);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"GlvDepositExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitGlvDepositCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"GlvDepositCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(GlvDeposit.Props memory glvDeposit) public pure\\n    returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n        eventData.addressItems.initItems(8);\\n        eventData.addressItems.setItem(0, \\\"account\\\", glvDeposit.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", glvDeposit.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", glvDeposit.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", glvDeposit.market());\\n        eventData.addressItems.setItem(4, \\\"glv\\\", glvDeposit.glv());\\n        eventData.addressItems.setItem(5, \\\"initialLongToken\\\", glvDeposit.initialLongToken());\\n        eventData.addressItems.setItem(6, \\\"initialShortToken\\\", glvDeposit.initialShortToken());\\n        eventData.addressItems.setItem(7, \\\"uiFeeReceiver\\\", glvDeposit.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", glvDeposit.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", glvDeposit.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"initialLongTokenAmount\\\", glvDeposit.initialLongTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"initialShortTokenAmount\\\", glvDeposit.initialShortTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minGlvTokens\\\", glvDeposit.minGlvTokens());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", glvDeposit.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", glvDeposit.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", glvDeposit.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"marketTokenAmount\\\", glvDeposit.marketTokenAmount());\\n\\n        eventData.boolItems.initItems(2);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", glvDeposit.shouldUnwrapNativeToken());\\n        eventData.boolItems.setItem(1, \\\"isMarketTokenDeposit\\\", glvDeposit.isMarketTokenDeposit());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", glvDeposit.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x6590ea178d1f8b7eec240cdd75df63f2b245d5a9aec0c6ac28fd4fbec06e3000\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvDeposit/GlvDepositStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../data/Keys.sol\\\";\\nimport \\\"../../data/DataStore.sol\\\";\\n\\nimport \\\"./GlvDeposit.sol\\\";\\n\\n/**\\n * @title GlvDepositStoreUtils\\n * @dev Library for deposit storage functions\\n */\\nlibrary GlvDepositStoreUtils {\\n    using GlvDeposit for GlvDeposit.Props;\\n\\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\\\"ACCOUNT\\\"));\\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\\\"RECEIVER\\\"));\\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\\\"CALLBACK_CONTRACT\\\"));\\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\\\"UI_FEE_RECEIVER\\\"));\\n    bytes32 public constant GLV = keccak256(abi.encode(\\\"GLV\\\"));\\n    bytes32 public constant MARKET = keccak256(abi.encode(\\\"MARKET\\\"));\\n    bytes32 public constant INITIAL_LONG_TOKEN = keccak256(abi.encode(\\\"INITIAL_LONG_TOKEN\\\"));\\n    bytes32 public constant INITIAL_SHORT_TOKEN = keccak256(abi.encode(\\\"INITIAL_SHORT_TOKEN\\\"));\\n    bytes32 public constant LONG_TOKEN_SWAP_PATH = keccak256(abi.encode(\\\"LONG_TOKEN_SWAP_PATH\\\"));\\n    bytes32 public constant SHORT_TOKEN_SWAP_PATH = keccak256(abi.encode(\\\"SHORT_TOKEN_SWAP_PATH\\\"));\\n\\n    bytes32 public constant MARKET_TOKEN_AMOUNT = keccak256(abi.encode(\\\"MARKET_TOKEN_AMOUNT\\\"));\\n    bytes32 public constant INITIAL_LONG_TOKEN_AMOUNT = keccak256(abi.encode(\\\"INITIAL_LONG_TOKEN_AMOUNT\\\"));\\n    bytes32 public constant INITIAL_SHORT_TOKEN_AMOUNT = keccak256(abi.encode(\\\"INITIAL_SHORT_TOKEN_AMOUNT\\\"));\\n    bytes32 public constant MIN_GLV_TOKENS = keccak256(abi.encode(\\\"MIN_GLV_TOKENS\\\"));\\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\\\"UPDATED_AT_TIME\\\"));\\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\\\"EXECUTION_FEE\\\"));\\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"CALLBACK_GAS_LIMIT\\\"));\\n\\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\\\"SHOULD_UNWRAP_NATIVE_TOKEN\\\"));\\n    bytes32 public constant IS_MARKET_TOKEN_DEPOSIT = keccak256(abi.encode(\\\"IS_MARKET_TOKEN_DEPOSIT\\\"));\\n\\n    bytes32 public constant DATA_LIST = keccak256(abi.encode(\\\"DATA_LIST\\\"));\\n\\n    bytes32 public constant SRC_CHAIN_ID = keccak256(abi.encode(\\\"SRC_CHAIN_ID\\\"));\\n\\n    function get(DataStore dataStore, bytes32 key) external view returns (GlvDeposit.Props memory) {\\n        GlvDeposit.Props memory glvDeposit;\\n        if (!dataStore.containsBytes32(Keys.GLV_DEPOSIT_LIST, key)) {\\n            return glvDeposit;\\n        }\\n\\n        glvDeposit.setAccount(dataStore.getAddress(\\n            keccak256(abi.encode(key, ACCOUNT))\\n        ));\\n\\n        glvDeposit.setReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, RECEIVER))\\n        ));\\n\\n        glvDeposit.setCallbackContract(dataStore.getAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\n        ));\\n\\n        glvDeposit.setUiFeeReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\n        ));\\n\\n        glvDeposit.setGlv(dataStore.getAddress(\\n            keccak256(abi.encode(key, GLV))\\n        ));\\n\\n        glvDeposit.setMarket(dataStore.getAddress(\\n            keccak256(abi.encode(key, MARKET))\\n        ));\\n\\n        glvDeposit.setInitialLongToken(dataStore.getAddress(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\\n        ));\\n\\n        glvDeposit.setInitialShortToken(dataStore.getAddress(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\\n        ));\\n\\n        glvDeposit.setLongTokenSwapPath(dataStore.getAddressArray(\\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\\n        ));\\n\\n        glvDeposit.setShortTokenSwapPath(dataStore.getAddressArray(\\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\\n        ));\\n\\n        glvDeposit.setMarketTokenAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\\n        ));\\n\\n        glvDeposit.setInitialLongTokenAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\\n        ));\\n\\n        glvDeposit.setInitialShortTokenAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\\n        ));\\n\\n        glvDeposit.setMinGlvTokens(dataStore.getUint(\\n            keccak256(abi.encode(key, MIN_GLV_TOKENS))\\n        ));\\n\\n        glvDeposit.setUpdatedAtTime(dataStore.getUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\\n        ));\\n\\n        glvDeposit.setExecutionFee(dataStore.getUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\n        ));\\n\\n        glvDeposit.setCallbackGasLimit(dataStore.getUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\n        ));\\n\\n        glvDeposit.setSrcChainId(dataStore.getUint(\\n            keccak256(abi.encode(key, SRC_CHAIN_ID))\\n        ));\\n\\n        glvDeposit.setShouldUnwrapNativeToken(dataStore.getBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\n        ));\\n\\n        glvDeposit.setIsMarketTokenDeposit(dataStore.getBool(\\n            keccak256(abi.encode(key, IS_MARKET_TOKEN_DEPOSIT))\\n        ));\\n\\n        glvDeposit.setDataList(dataStore.getBytes32Array(\\n            keccak256(abi.encode(key, DATA_LIST))\\n        ));\\n\\n        return glvDeposit;\\n    }\\n\\n    function set(DataStore dataStore, bytes32 key, GlvDeposit.Props memory glvDeposit) external {\\n        dataStore.addBytes32(\\n            Keys.GLV_DEPOSIT_LIST,\\n            key\\n        );\\n\\n        dataStore.addBytes32(\\n            Keys.accountGlvDepositListKey(glvDeposit.account()),\\n            key\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, ACCOUNT)),\\n            glvDeposit.account()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, RECEIVER)),\\n            glvDeposit.receiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\\n            glvDeposit.callbackContract()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\\n            glvDeposit.uiFeeReceiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, GLV)),\\n            glvDeposit.glv()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, MARKET)),\\n            glvDeposit.market()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN)),\\n            glvDeposit.initialLongToken()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN)),\\n            glvDeposit.initialShortToken()\\n        );\\n\\n        dataStore.setAddressArray(\\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH)),\\n            glvDeposit.longTokenSwapPath()\\n        );\\n\\n        dataStore.setAddressArray(\\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH)),\\n            glvDeposit.shortTokenSwapPath()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT)),\\n            glvDeposit.marketTokenAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT)),\\n            glvDeposit.initialLongTokenAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT)),\\n            glvDeposit.initialShortTokenAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, MIN_GLV_TOKENS)),\\n            glvDeposit.minGlvTokens()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\\n            glvDeposit.updatedAtTime()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE)),\\n            glvDeposit.executionFee()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\\n            glvDeposit.callbackGasLimit()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, SRC_CHAIN_ID)),\\n            glvDeposit.srcChainId()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\\n            glvDeposit.shouldUnwrapNativeToken()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, IS_MARKET_TOKEN_DEPOSIT)),\\n            glvDeposit.isMarketTokenDeposit()\\n        );\\n\\n        dataStore.setBytes32Array(\\n            keccak256(abi.encode(key, DATA_LIST)),\\n            glvDeposit.dataList()\\n        );\\n    }\\n\\n    function remove(DataStore dataStore, bytes32 key, address account) external {\\n        if (!dataStore.containsBytes32(Keys.GLV_DEPOSIT_LIST, key)) {\\n            revert Errors.GlvDepositNotFound(key);\\n        }\\n\\n        dataStore.removeBytes32(\\n            Keys.GLV_DEPOSIT_LIST,\\n            key\\n        );\\n\\n        dataStore.removeBytes32(\\n            Keys.accountGlvDepositListKey(account),\\n            key\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, ACCOUNT))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, GLV))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, MARKET))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\\n        );\\n\\n        dataStore.removeAddressArray(\\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\\n        );\\n\\n        dataStore.removeAddressArray(\\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, MIN_GLV_TOKENS))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, SRC_CHAIN_ID))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, IS_MARKET_TOKEN_DEPOSIT))\\n        );\\n\\n        dataStore.removeBytes32Array(\\n            keccak256(abi.encode(key, DATA_LIST))\\n        );\\n    }\\n\\n    function getGlvDepositCount(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getBytes32Count(Keys.GLV_DEPOSIT_LIST);\\n    }\\n\\n    function getGlvDepositKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        return dataStore.getBytes32ValuesAt(Keys.GLV_DEPOSIT_LIST, start, end);\\n    }\\n\\n    function getAccountGlvDepositCount(DataStore dataStore, address account) internal view returns (uint256) {\\n        return dataStore.getBytes32Count(Keys.accountGlvDepositListKey(account));\\n    }\\n\\n    function getAccountGlvDepositKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        return dataStore.getBytes32ValuesAt(Keys.accountGlvDepositListKey(account), start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xdd78fa6a98421edaf48c2de28320af8c99c5a9dd5d9a7853c55ab4f8de5babcc\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvWithdrawal/GlvWithdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Withdrawal\\n * @dev Struct for withdrawals\\n */\\nlibrary GlvWithdrawal {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account The account to withdraw for.\\n    // @param receiver The address that will receive the withdrawn tokens.\\n    // @param callbackContract The contract that will be called back.\\n    // @param uiFeeReceiver The ui fee receiver.\\n    // @param market The market on which the withdrawal will be executed.\\n    // @param glv\\n    struct Addresses {\\n        address glv;\\n        address market;\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param glvTokenAmount The amount of market tokens that will be withdrawn.\\n    // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\\n    // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\\n    // @param executionFee The execution fee for the withdrawal.\\n    // @param callbackGasLimit The gas limit for calling the callback contract.\\n    // @param srcChainId The source chain id.\\n    struct Numbers {\\n        uint256 glvTokenAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function glv(Props memory props) internal pure returns (address) {\\n        return props.addresses.glv;\\n    }\\n\\n    function setGlv(Props memory props, address value) internal pure {\\n        props.addresses.glv = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function glvTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.glvTokenAmount;\\n    }\\n\\n    function setGlvTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.glvTokenAmount = value;\\n    }\\n\\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minLongTokenAmount;\\n    }\\n\\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minLongTokenAmount = value;\\n    }\\n\\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minShortTokenAmount;\\n    }\\n\\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minShortTokenAmount = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x020f469ffd039179ceaed3b46135872a1f51a5f561496e2b423ac3e5e4abcd42\",\"license\":\"BUSL-1.1\"},\"contracts/glv/glvWithdrawal/GlvWithdrawalEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../event/EventEmitter.sol\\\";\\nimport \\\"../../event/EventUtils.sol\\\";\\nimport \\\"../../utils/Cast.sol\\\";\\n\\nimport \\\"./GlvWithdrawal.sol\\\";\\n\\nlibrary GlvWithdrawalEventUtils {\\n    using GlvWithdrawal for GlvWithdrawal.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitGlvWithdrawalCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        GlvWithdrawal.Props memory glvWithdrawal\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(glvWithdrawal);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvWithdrawalCreated\\\", key, Cast.toBytes32(glvWithdrawal.account()), eventData);\\n    }\\n\\n    function emitGlvWithdrawalExecuted(EventEmitter eventEmitter, bytes32 key, address account) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvWithdrawalExecuted\\\", key, Cast.toBytes32(account), eventData);\\n    }\\n\\n    function emitGlvWithdrawalCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\\"GlvWithdrawalCancelled\\\", key, Cast.toBytes32(account), eventData);\\n    }\\n\\n    function createEventData(GlvWithdrawal.Props memory glvWithdrawal) public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(6);\\n        eventData.addressItems.setItem(0, \\\"account\\\", glvWithdrawal.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", glvWithdrawal.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", glvWithdrawal.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", glvWithdrawal.market());\\n        eventData.addressItems.setItem(4, \\\"glv\\\", glvWithdrawal.glv());\\n        eventData.addressItems.setItem(5, \\\"uiFeeReceiver\\\", glvWithdrawal.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", glvWithdrawal.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", glvWithdrawal.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(6);\\n        eventData.uintItems.setItem(0, \\\"glvTokenAmount\\\", glvWithdrawal.glvTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"minLongTokenAmount\\\", glvWithdrawal.minLongTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minShortTokenAmount\\\", glvWithdrawal.minShortTokenAmount());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", glvWithdrawal.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", glvWithdrawal.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", glvWithdrawal.callbackGasLimit());\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", glvWithdrawal.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", glvWithdrawal.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x87877bae18f86d6b878442b3de8c5136f597d12ed23a65f71dab5a3fa843b5ba\",\"license\":\"BUSL-1.1\"},\"contracts/market/Market.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Market\\n// @dev Struct for markets\\n//\\n// Markets support both spot and perp trading, they are created by specifying a\\n// long collateral token, short collateral token and index token.\\n//\\n// Examples:\\n//\\n// - ETH/USD market with long collateral as ETH, short collateral as a stablecoin, index token as ETH\\n// - BTC/USD market with long collateral as WBTC, short collateral as a stablecoin, index token as BTC\\n// - SOL/USD market with long collateral as ETH, short collateral as a stablecoin, index token as SOL\\n//\\n// Liquidity providers can deposit either the long or short collateral token or\\n// both to mint liquidity tokens.\\n//\\n// The long collateral token is used to back long positions, while the short\\n// collateral token is used to back short positions.\\n//\\n// Liquidity providers take on the profits and losses of traders for the market\\n// that they provide liquidity for.\\n//\\n// Having separate markets allows for risk isolation, liquidity providers are\\n// only exposed to the markets that they deposit into, this potentially allow\\n// for permissionless listings.\\n//\\n// Traders can use either the long or short token as collateral for the market.\\nlibrary Market {\\n    // @param marketToken address of the market token for the market\\n    // @param indexToken address of the index token for the market\\n    // @param longToken address of the long token for the market\\n    // @param shortToken address of the short token for the market\\n    // @param data for any additional data\\n    struct Props {\\n        address marketToken;\\n        address indexToken;\\n        address longToken;\\n        address shortToken;\\n    }\\n}\\n\",\"keccak256\":\"0xbc17a22c0a7f183bfd6d3fe74b8de404733dee1f035923acca1d69012b7b7e28\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./MarketPoolValueInfo.sol\\\";\\n\\nlibrary MarketEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // this event is emitted before a deposit or withdrawal\\n    // it provides information of the pool state so that the amount\\n    // of market tokens minted or amount withdrawn from the pool can be checked\\n    function emitMarketPoolValueInfo(\\n        EventEmitter eventEmitter,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueInfo\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    // this event is emitted after a deposit or withdrawal\\n    // it provides information of the updated pool state\\n    // note that the pool state can change even without a deposit / withdrawal\\n    // e.g. borrowing fees can increase the pool's value with time, trader pnl\\n    // will change as index prices change\\n    function emitMarketPoolValueUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 actionType,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(2);\\n        eventData.bytes32Items.setItem(0, \\\"actionType\\\", actionType);\\n        eventData.bytes32Items.setItem(1, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitSwapImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"SwapImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolDistributed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 distributionAmount,\\n        uint256 nextPositionImpactPoolAmount\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"distributionAmount\\\", distributionAmount);\\n        eventData.uintItems.setItem(1, \\\"nextPositionImpactPoolAmount\\\", nextPositionImpactPoolAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolDistributed\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualSwapInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLongToken,\\n        bytes32 virtualMarketId,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLongToken\\\", isLongToken);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualMarketId\\\", virtualMarketId);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualSwapInventoryUpdated\\\",\\n            Cast.toBytes32(market),\\n            virtualMarketId,\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualPositionInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address token,\\n        bytes32 virtualTokenId,\\n        int256 delta,\\n        int256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualTokenId\\\", virtualTokenId);\\n\\n        eventData.intItems.initItems(2);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.intItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualPositionInventoryUpdated\\\",\\n            Cast.toBytes32(token),\\n            virtualTokenId,\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestInTokensUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestInTokensUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralSumUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralSumUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowing(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 borrowingFactorPerSecond\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"borrowingFactorPerSecond\\\", borrowingFactorPerSecond);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"Borrowing\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowingFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CumulativeBorrowingFactorUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFunding(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 fundingFactorPerSecond\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"fundingFactorPerSecond\\\", fundingFactorPerSecond);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"Funding\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeeAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeeAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeesClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeesClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableCollateralUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(3, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableCollateralUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitUiFeeFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address account,\\n        uint256 uiFeeFactor\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"uiFeeFactor\\\", uiFeeFactor);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"UiFeeFactorUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolWithdrawal(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address receiver,\\n        uint256 amount\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolWithdrawal\\\",\\n            Cast.toBytes32(receiver),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc98efc57df60a95faf43ef9bd7e0748d7159612be79f17d7ed6d7c69b4e38da\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketPoolValueInfo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title MarketPoolInfo\\nlibrary MarketPoolValueInfo {\\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\\n    // @param value the pool value\\n    // @param longTokenAmount the amount of long token in the pool\\n    // @param shortTokenAmount the amount of short token in the pool\\n    // @param longTokenUsd the USD value of the long tokens in the pool\\n    // @param shortTokenUsd the USD value of the short tokens in the pool\\n    // @param totalBorrowingFees the total pending borrowing fees for the market\\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\\n    // @param impactPoolAmount the amount of tokens in the impact pool\\n    // @param longPnl the pending pnl of long positions\\n    // @param shortPnl the pending pnl of short positions\\n    // @param netPnl the net pnl of long and short positions\\n    struct Props {\\n        int256 poolValue;\\n        int256 longPnl;\\n        int256 shortPnl;\\n        int256 netPnl;\\n\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 longTokenUsd;\\n        uint256 shortTokenUsd;\\n\\n        uint256 totalBorrowingFees;\\n        uint256 borrowingFeePoolFactor;\\n\\n        uint256 impactPoolAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xcb7e29fde7da11b634235ba9845fafcbab8a6cdd2c882221bc9e6196b5fd39a4\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\n\\nimport \\\"./Market.sol\\\";\\n\\n/**\\n * @title MarketStoreUtils\\n * @dev Library for market storage functions\\n */\\nlibrary MarketStoreUtils {\\n    using Market for Market.Props;\\n\\n    bytes32 public constant MARKET_SALT = keccak256(abi.encode(\\\"MARKET_SALT\\\"));\\n    bytes32 public constant MARKET_KEY = keccak256(abi.encode(\\\"MARKET_KEY\\\"));\\n    bytes32 public constant MARKET_TOKEN = keccak256(abi.encode(\\\"MARKET_TOKEN\\\"));\\n    bytes32 public constant INDEX_TOKEN = keccak256(abi.encode(\\\"INDEX_TOKEN\\\"));\\n    bytes32 public constant LONG_TOKEN = keccak256(abi.encode(\\\"LONG_TOKEN\\\"));\\n    bytes32 public constant SHORT_TOKEN = keccak256(abi.encode(\\\"SHORT_TOKEN\\\"));\\n\\n    function get(DataStore dataStore, address key) public view returns (Market.Props memory) {\\n        Market.Props memory market;\\n        if (!dataStore.containsAddress(Keys.MARKET_LIST, key)) {\\n            return market;\\n        }\\n\\n        market.marketToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, MARKET_TOKEN))\\n        );\\n\\n        market.indexToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, INDEX_TOKEN))\\n        );\\n\\n        market.longToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, LONG_TOKEN))\\n        );\\n\\n        market.shortToken = dataStore.getAddress(\\n            keccak256(abi.encode(key, SHORT_TOKEN))\\n        );\\n\\n        return market;\\n    }\\n\\n    function getBySalt(DataStore dataStore, bytes32 salt) external view returns (Market.Props memory) {\\n        address key = dataStore.getAddress(getMarketSaltHash(salt));\\n        return get(dataStore, key);\\n    }\\n\\n    function set(DataStore dataStore, address key, bytes32 salt, Market.Props memory market) external {\\n        dataStore.addAddress(\\n            Keys.MARKET_LIST,\\n            key\\n        );\\n\\n        // the salt is based on the market props while the key gives the market's address\\n        // use the salt to store a reference to the key to allow the key to be retrieved\\n        // using just the salt value\\n        dataStore.setAddress(\\n            getMarketSaltHash(salt),\\n            key\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, MARKET_TOKEN)),\\n            market.marketToken\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, INDEX_TOKEN)),\\n            market.indexToken\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, LONG_TOKEN)),\\n            market.longToken\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, SHORT_TOKEN)),\\n            market.shortToken\\n        );\\n    }\\n\\n    function remove(DataStore dataStore, address key, bytes32 salt) external {\\n        if (!dataStore.containsAddress(Keys.MARKET_LIST, key)) {\\n            revert Errors.MarketNotFound(key);\\n        }\\n\\n        dataStore.removeAddress(\\n            Keys.MARKET_LIST,\\n            key\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, MARKET_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, INDEX_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, LONG_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, SHORT_TOKEN))\\n        );\\n\\n        dataStore.removeAddress(\\n            getMarketSaltHash(salt)\\n        );\\n    }\\n\\n    function getMarketSaltHash(bytes32 salt) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(MARKET_SALT, salt));\\n    }\\n\\n    function getMarketCount(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getAddressCount(Keys.MARKET_LIST);\\n    }\\n\\n    function getMarketKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        return dataStore.getAddressValuesAt(Keys.MARKET_LIST, start, end);\\n    }\\n}\\n\",\"keccak256\":\"0x0926d1fa022985793085dda876fe3d6fc0c65ecbfea37ac3c1a75ded64c4aeca\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../bank/Bank.sol\\\";\\n\\n// @title MarketToken\\n// @dev The market token for a market, stores funds for the market and keeps track\\n// of the liquidity owners\\ncontract MarketToken is ERC20, Bank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) ERC20(\\\"GMX Market\\\", \\\"GM\\\") Bank(_roleStore, _dataStore) {\\n    }\\n\\n    // @dev mint market tokens to an account\\n    // @param account the account to mint to\\n    // @param amount the amount of tokens to mint\\n    function mint(address account, uint256 amount) external onlyController {\\n        _mint(account, amount);\\n    }\\n\\n    // @dev burn market tokens from an account\\n    // @param account the account to burn tokens for\\n    // @param amount the amount of tokens to burn\\n    function burn(address account, uint256 amount) external onlyController {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8a6b725d7baf6258117529a8d7627195a088b1b45d7490ec9866974c10429d6f\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\nimport \\\"./Market.sol\\\";\\nimport \\\"./MarketPoolValueInfo.sol\\\";\\nimport \\\"./MarketToken.sol\\\";\\nimport \\\"./MarketEventUtils.sol\\\";\\nimport \\\"./MarketStoreUtils.sol\\\";\\n\\nimport \\\"../position/Position.sol\\\";\\nimport \\\"../order/Order.sol\\\";\\n\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\nimport \\\"../feature/FeatureUtils.sol\\\";\\n\\n// @title MarketUtils\\n// @dev Library for market functions\\nlibrary MarketUtils {\\n    using SignedMath for int256;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    using Market for Market.Props;\\n    using Position for Position.Props;\\n    using Order for Order.Props;\\n    using Price for Price.Props;\\n\\n    enum FundingRateChangeType {\\n        NoChange,\\n        Increase,\\n        Decrease\\n    }\\n\\n    // @dev struct to store the prices of tokens of a market\\n    // @param indexTokenPrice price of the market's index token\\n    // @param longTokenPrice price of the market's long token\\n    // @param shortTokenPrice price of the market's short token\\n    struct MarketPrices {\\n        Price.Props indexTokenPrice;\\n        Price.Props longTokenPrice;\\n        Price.Props shortTokenPrice;\\n    }\\n\\n    struct CollateralType {\\n        uint256 longToken;\\n        uint256 shortToken;\\n    }\\n\\n    struct PositionType {\\n        CollateralType long;\\n        CollateralType short;\\n    }\\n\\n    // @dev struct for the result of the getNextFundingAmountPerSize call\\n    // note that abs(nextSavedFundingFactorPerSecond) may not equal the fundingFactorPerSecond\\n    // see getNextFundingFactorPerSecond for more info\\n    struct GetNextFundingAmountPerSizeResult {\\n        bool longsPayShorts;\\n        uint256 fundingFactorPerSecond;\\n        int256 nextSavedFundingFactorPerSecond;\\n\\n        PositionType fundingFeeAmountPerSizeDelta;\\n        PositionType claimableFundingAmountPerSizeDelta;\\n    }\\n\\n    struct GetNextFundingAmountPerSizeCache {\\n        PositionType openInterest;\\n\\n        uint256 longOpenInterest;\\n        uint256 shortOpenInterest;\\n\\n        uint256 durationInSeconds;\\n\\n        uint256 sizeOfPayingSide;\\n        uint256 fundingUsd;\\n\\n        uint256 fundingUsdForLongCollateral;\\n        uint256 fundingUsdForShortCollateral;\\n    }\\n\\n    struct GetNextFundingFactorPerSecondCache {\\n        uint256 diffUsd;\\n        uint256 totalOpenInterest;\\n\\n        uint256 fundingFactor;\\n        uint256 fundingExponentFactor;\\n\\n        uint256 diffUsdAfterExponent;\\n        uint256 diffUsdToOpenInterestFactor;\\n\\n        int256 savedFundingFactorPerSecond;\\n        uint256 savedFundingFactorPerSecondMagnitude;\\n\\n        int256 nextSavedFundingFactorPerSecond;\\n        int256 nextSavedFundingFactorPerSecondWithMinBound;\\n    }\\n\\n    struct FundingConfigCache {\\n        uint256 thresholdForStableFunding;\\n        uint256 thresholdForDecreaseFunding;\\n\\n        uint256 fundingIncreaseFactorPerSecond;\\n        uint256 fundingDecreaseFactorPerSecond;\\n\\n        uint256 minFundingFactorPerSecond;\\n        uint256 maxFundingFactorPerSecond;\\n    }\\n\\n    struct GetExpectedMinTokenBalanceCache {\\n        uint256 poolAmount;\\n        uint256 swapImpactPoolAmount;\\n        uint256 claimableCollateralAmount;\\n        uint256 claimableFeeAmount;\\n        uint256 claimableUiFeeAmount;\\n        uint256 affiliateRewardAmount;\\n    }\\n\\n    // @dev get the market token's price\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longTokenPrice the price of the long token\\n    // @param shortTokenPrice the price of the short token\\n    // @param indexTokenPrice the price of the index token\\n    // @param maximize whether to maximize or minimize the market token price\\n    // @return returns (the market token's price, MarketPoolValueInfo.Props)\\n    function getMarketTokenPrice(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory indexTokenPrice,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        bytes32 pnlFactorType,\\n        bool maximize\\n    ) external view returns (int256, MarketPoolValueInfo.Props memory) {\\n        uint256 supply = getMarketTokenSupply(MarketToken(payable(market.marketToken)));\\n\\n        MarketPoolValueInfo.Props memory poolValueInfo = getPoolValueInfo(\\n            dataStore,\\n            market,\\n            indexTokenPrice,\\n            longTokenPrice,\\n            shortTokenPrice,\\n            pnlFactorType,\\n            maximize\\n        );\\n\\n        // if the supply is zero then treat the market token price as 1 USD\\n        if (supply == 0) {\\n            return (Precision.FLOAT_PRECISION.toInt256(), poolValueInfo);\\n        }\\n\\n        if (poolValueInfo.poolValue == 0) { return (0, poolValueInfo); }\\n\\n        int256 marketTokenPrice = Precision.mulDiv(Precision.WEI_PRECISION, poolValueInfo.poolValue, supply);\\n        return (marketTokenPrice, poolValueInfo);\\n    }\\n\\n    // @dev get the total supply of the marketToken\\n    // @param marketToken the marketToken\\n    // @return the total supply of the marketToken\\n    function getMarketTokenSupply(MarketToken marketToken) public view returns (uint256) {\\n        return marketToken.totalSupply();\\n    }\\n\\n    // @dev get the opposite token of the market\\n    // if the inputToken is the longToken return the shortToken and vice versa\\n    // @param inputToken the input token\\n    // @param market the market values\\n    // @return the opposite token\\n    function getOppositeToken(address inputToken, Market.Props memory market) internal pure returns (address) {\\n        if (inputToken == market.longToken) {\\n            return market.shortToken;\\n        }\\n\\n        if (inputToken == market.shortToken) {\\n            return market.longToken;\\n        }\\n\\n        revert Errors.UnableToGetOppositeToken(inputToken, market.marketToken);\\n    }\\n\\n    function validateSwapMarket(DataStore dataStore, address marketAddress) internal view {\\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n        validateSwapMarket(dataStore, market);\\n    }\\n\\n    function validateSwapMarket(DataStore dataStore, Market.Props memory market) internal view {\\n        validateEnabledMarket(dataStore, market);\\n\\n        if (market.longToken == market.shortToken) {\\n            revert Errors.InvalidSwapMarket(market.marketToken);\\n        }\\n    }\\n\\n    // @dev get the token price from the stored MarketPrices\\n    // @param token the token to get the price for\\n    // @param the market values\\n    // @param the market token prices\\n    // @return the token price from the stored MarketPrices\\n    function getCachedTokenPrice(address token, Market.Props memory market, MarketPrices memory prices) internal pure returns (Price.Props memory) {\\n        if (token == market.longToken) {\\n            return prices.longTokenPrice;\\n        }\\n        if (token == market.shortToken) {\\n            return prices.shortTokenPrice;\\n        }\\n        if (token == market.indexToken) {\\n            return prices.indexTokenPrice;\\n        }\\n\\n        revert Errors.UnableToGetCachedTokenPrice(token, market.marketToken);\\n    }\\n\\n    // @dev return the primary prices for the market tokens\\n    // @param oracle Oracle\\n    // @param market the market values\\n    function getMarketPrices(Oracle oracle, Market.Props memory market) internal view returns (MarketPrices memory) {\\n        return MarketPrices(\\n            oracle.getPrimaryPrice(market.indexToken),\\n            oracle.getPrimaryPrice(market.longToken),\\n            oracle.getPrimaryPrice(market.shortToken)\\n        );\\n    }\\n\\n    // @dev get the usd value of either the long or short tokens in the pool\\n    // without accounting for the pnl of open positions\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param whether to return the value for the long or short token\\n    // @return the usd value of either the long or short tokens in the pool\\n    function getPoolUsdWithoutPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (uint256) {\\n        address token = isLong ? market.longToken : market.shortToken;\\n        // note that if it is a single token market, the poolAmount returned will be\\n        // the amount of tokens in the pool divided by 2\\n        uint256 poolAmount = getPoolAmount(dataStore, market, token);\\n        uint256 tokenPrice;\\n\\n        if (maximize) {\\n            tokenPrice = isLong ? prices.longTokenPrice.max : prices.shortTokenPrice.max;\\n        } else {\\n            tokenPrice = isLong ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\\n        }\\n\\n        return poolAmount * tokenPrice;\\n    }\\n\\n    // @dev get the USD value of a pool\\n    // the value of a pool is the worth of the liquidity provider tokens in the pool - pending trader pnl\\n    // we use the token index prices to calculate this and ignore price impact since if all positions were closed the\\n    // net price impact should be zero\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param longTokenPrice price of the long token\\n    // @param shortTokenPrice price of the short token\\n    // @param indexTokenPrice price of the index token\\n    // @param maximize whether to maximize or minimize the pool value\\n    // @return the value information of a pool\\n    function getPoolValueInfo(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory indexTokenPrice,\\n        Price.Props memory longTokenPrice,\\n        Price.Props memory shortTokenPrice,\\n        bytes32 pnlFactorType,\\n        bool maximize\\n    ) public view returns (MarketPoolValueInfo.Props memory) {\\n        MarketPoolValueInfo.Props memory result;\\n\\n        result.longTokenAmount = getPoolAmount(dataStore, market, market.longToken);\\n        result.shortTokenAmount = getPoolAmount(dataStore, market, market.shortToken);\\n\\n        result.longTokenUsd = result.longTokenAmount * longTokenPrice.pickPrice(maximize);\\n        result.shortTokenUsd = result.shortTokenAmount * shortTokenPrice.pickPrice(maximize);\\n\\n        result.poolValue = (result.longTokenUsd + result.shortTokenUsd).toInt256();\\n\\n        MarketPrices memory prices = MarketPrices(\\n            indexTokenPrice,\\n            longTokenPrice,\\n            shortTokenPrice\\n        );\\n\\n        result.totalBorrowingFees = getTotalPendingBorrowingFees(\\n            dataStore,\\n            market,\\n            prices,\\n            true\\n        );\\n\\n        result.totalBorrowingFees += getTotalPendingBorrowingFees(\\n            dataStore,\\n            market,\\n            prices,\\n            false\\n        );\\n\\n        result.borrowingFeePoolFactor = Precision.FLOAT_PRECISION - dataStore.getUint(Keys.BORROWING_FEE_RECEIVER_FACTOR);\\n        result.poolValue += Precision.applyFactor(result.totalBorrowingFees, result.borrowingFeePoolFactor).toInt256();\\n\\n        // !maximize should be used for net pnl as a larger pnl leads to a smaller pool value\\n        // and a smaller pnl leads to a larger pool value\\n        //\\n        // while positions will always be closed at the less favourable price\\n        // using the inverse of maximize for the getPnl calls would help prevent\\n        // gaming of market token values by increasing the spread\\n        //\\n        // liquidations could be triggered by manipulating a large spread but\\n        // that should be more difficult to execute\\n\\n        result.longPnl = getPnl(\\n            dataStore,\\n            market,\\n            indexTokenPrice,\\n            true, // isLong\\n            !maximize // maximize\\n        );\\n\\n        result.longPnl = getCappedPnl(\\n            dataStore,\\n            market.marketToken,\\n            true,\\n            result.longPnl,\\n            result.longTokenUsd,\\n            pnlFactorType\\n        );\\n\\n        result.shortPnl = getPnl(\\n            dataStore,\\n            market,\\n            indexTokenPrice,\\n            false, // isLong\\n            !maximize // maximize\\n        );\\n\\n        result.shortPnl = getCappedPnl(\\n            dataStore,\\n            market.marketToken,\\n            false,\\n            result.shortPnl,\\n            result.shortTokenUsd,\\n            pnlFactorType\\n        );\\n\\n        result.netPnl = result.longPnl + result.shortPnl;\\n        result.poolValue = result.poolValue - result.netPnl;\\n\\n        result.impactPoolAmount = getNextPositionImpactPoolAmount(dataStore, market.marketToken);\\n        // use !maximize for pickPrice since the impactPoolUsd is deducted from the poolValue\\n        uint256 impactPoolUsd = result.impactPoolAmount * indexTokenPrice.pickPrice(!maximize);\\n\\n        result.poolValue -= impactPoolUsd.toInt256();\\n\\n        return result;\\n    }\\n\\n    // @dev get the net pending pnl for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param maximize whether to maximize or minimize the net pnl\\n    // @return the net pending pnl for a market\\n    function getNetPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory indexTokenPrice,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        int256 longPnl = getPnl(dataStore, market, indexTokenPrice, true, maximize);\\n        int256 shortPnl = getPnl(dataStore, market, indexTokenPrice, false, maximize);\\n\\n        return longPnl + shortPnl;\\n    }\\n\\n    // @dev get the capped pending pnl for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check for the long or short side\\n    // @param pnl the uncapped pnl of the market\\n    // @param poolUsd the USD value of the pool\\n    // @param pnlFactorType the pnl factor type to use\\n    function getCappedPnl(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        int256 pnl,\\n        uint256 poolUsd,\\n        bytes32 pnlFactorType\\n    ) internal view returns (int256) {\\n        if (pnl < 0) { return pnl; }\\n\\n        uint256 maxPnlFactor = getMaxPnlFactor(dataStore, pnlFactorType, market, isLong);\\n        int256 maxPnl = Precision.applyFactor(poolUsd, maxPnlFactor).toInt256();\\n\\n        return pnl > maxPnl ? maxPnl : pnl;\\n    }\\n\\n    // @dev get the pending pnl for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param isLong whether to check for the long or short side\\n    // @param maximize whether to maximize or minimize the pnl\\n    function getPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        uint256 indexTokenPrice,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        Price.Props memory _indexTokenPrice = Price.Props(indexTokenPrice, indexTokenPrice);\\n\\n        return getPnl(\\n            dataStore,\\n            market,\\n            _indexTokenPrice,\\n            isLong,\\n            maximize\\n        );\\n    }\\n\\n    // @dev get the pending pnl for a market for either longs or shorts\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param isLong whether to get the pnl for longs or shorts\\n    // @param maximize whether to maximize or minimize the net pnl\\n    // @return the pending pnl for a market for either longs or shorts\\n    function getPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory indexTokenPrice,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        int256 openInterest = getOpenInterest(dataStore, market, isLong).toInt256();\\n        uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, isLong);\\n        if (openInterest == 0 || openInterestInTokens == 0) {\\n            return 0;\\n        }\\n\\n        uint256 price = indexTokenPrice.pickPriceForPnl(isLong, maximize);\\n\\n        // openInterest is the cost of all positions, openInterestValue is the current worth of all positions\\n        int256 openInterestValue = (openInterestInTokens * price).toInt256();\\n        int256 pnl = isLong ? openInterestValue - openInterest : openInterest - openInterestValue;\\n\\n        return pnl;\\n    }\\n\\n    // @dev get the amount of tokens in the pool\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return the amount of tokens in the pool\\n    function getPoolAmount(DataStore dataStore, Market.Props memory market, address token) internal view returns (uint256) {\\n        /* Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress); */\\n        // if the longToken and shortToken are the same, return half of the token amount, so that\\n        // calculations of pool value, etc would be correct\\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\\n        return dataStore.getUint(Keys.poolAmountKey(market.marketToken, token)) / divisor;\\n    }\\n\\n    // @dev get the max amount of tokens allowed to be in the pool\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return the max amount of tokens that are allowed in the pool\\n    function getMaxPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxPoolAmountKey(market, token));\\n    }\\n\\n    function getMaxPoolUsdForDeposit(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxPoolUsdForDepositKey(market, token));\\n    }\\n\\n    function getUsageFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        bool isLong,\\n        uint256 reservedUsd,\\n        uint256 poolUsd\\n    ) internal view returns (uint256) {\\n        uint256 reserveFactor = getOpenInterestReserveFactor(dataStore, market.marketToken, isLong);\\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\\n        uint256 reserveUsageFactor = Precision.toFactor(reservedUsd, maxReservedUsd);\\n\\n        return reserveUsageFactor;\\n    }\\n\\n    // @dev get the max open interest allowed for the market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether this is for the long or short side\\n    // @return the max open interest allowed for the market\\n    function getMaxOpenInterest(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxOpenInterestKey(market, isLong));\\n    }\\n\\n    // @dev increment the claimable collateral amount\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to increment the claimable collateral for\\n    // @param token the claimable token\\n    // @param account the account to increment the claimable collateral for\\n    // @param delta the amount to increment\\n    function incrementClaimableCollateralAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta\\n    ) internal {\\n        uint256 divisor = dataStore.getUint(Keys.CLAIMABLE_COLLATERAL_TIME_DIVISOR);\\n        uint256 timeKey = Chain.currentTimestamp() / divisor;\\n\\n        uint256 nextValue = dataStore.incrementUint(\\n            Keys.claimableCollateralAmountKey(market, token, timeKey, account),\\n            delta\\n        );\\n\\n        uint256 nextPoolValue = dataStore.incrementUint(\\n            Keys.claimableCollateralAmountKey(market, token),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitClaimableCollateralUpdated(\\n            eventEmitter,\\n            market,\\n            token,\\n            timeKey,\\n            account,\\n            delta,\\n            nextValue,\\n            nextPoolValue\\n        );\\n    }\\n\\n    // @dev increment the claimable funding amount\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the trading market\\n    // @param token the claimable token\\n    // @param account the account to increment for\\n    // @param delta the amount to increment\\n    function incrementClaimableFundingAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta\\n    ) internal {\\n        uint256 nextValue = dataStore.incrementUint(\\n            Keys.claimableFundingAmountKey(market, token, account),\\n            delta\\n        );\\n\\n        uint256 nextPoolValue = dataStore.incrementUint(\\n            Keys.claimableFundingAmountKey(market, token),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitClaimableFundingUpdated(\\n            eventEmitter,\\n            market,\\n            token,\\n            account,\\n            delta,\\n            nextValue,\\n            nextPoolValue\\n        );\\n    }\\n\\n    // @dev claim funding fees\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to claim for\\n    // @param token the token to claim\\n    // @param account the account to claim for\\n    // @param receiver the receiver to send the amount to\\n    function claimFundingFees(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver\\n    ) internal returns (uint256) {\\n        bytes32 key = Keys.claimableFundingAmountKey(market, token, account);\\n\\n        uint256 claimableAmount = dataStore.getUint(key);\\n        dataStore.setUint(key, 0);\\n\\n        uint256 nextPoolValue = dataStore.decrementUint(\\n            Keys.claimableFundingAmountKey(market, token),\\n            claimableAmount\\n        );\\n\\n        MarketToken(payable(market)).transferOut(\\n            token,\\n            receiver,\\n            claimableAmount\\n        );\\n\\n        validateMarketTokenBalance(dataStore, market);\\n\\n        MarketEventUtils.emitFundingFeesClaimed(\\n            eventEmitter,\\n            market,\\n            token,\\n            account,\\n            receiver,\\n            claimableAmount,\\n            nextPoolValue\\n        );\\n\\n        return claimableAmount;\\n    }\\n\\n    function batchClaimCollateral(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address[] memory markets,\\n        address[] memory tokens,\\n        uint256[] memory timeKeys,\\n        address receiver,\\n        address account\\n    ) internal returns (uint256[] memory) {\\n        if (markets.length != tokens.length || tokens.length != timeKeys.length) {\\n            revert Errors.InvalidClaimCollateralInput(markets.length, tokens.length, timeKeys.length);\\n        }\\n\\n        FeatureUtils.validateFeature(dataStore, Keys.claimCollateralFeatureDisabledKey(address(this)));\\n\\n        AccountUtils.validateReceiver(receiver);\\n\\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\\n\\n        for (uint256 i; i < markets.length; i++) {\\n            claimedAmounts[i] = MarketUtils.claimCollateral(\\n                dataStore,\\n                eventEmitter,\\n                markets[i],\\n                tokens[i],\\n                timeKeys[i],\\n                account,\\n                receiver\\n            );\\n        }\\n\\n        return claimedAmounts;\\n    }\\n\\n    // @dev claim collateral\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to claim for\\n    // @param token the token to claim\\n    // @param timeKey the time key\\n    // @param account the account to claim for\\n    // @param receiver the receiver to send the amount to\\n    function claimCollateral(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        address receiver\\n    ) internal returns (uint256) {\\n        uint256 claimableAmount = dataStore.getUint(Keys.claimableCollateralAmountKey(market, token, timeKey, account));\\n\\n        uint256 claimableFactor = _getClaimableFactor(dataStore, market, token, timeKey, account);\\n\\n        if (claimableFactor > Precision.FLOAT_PRECISION) {\\n            revert Errors.InvalidClaimableFactor(claimableFactor);\\n        }\\n\\n        uint256 claimedAmount = dataStore.getUint(Keys.claimedCollateralAmountKey(market, token, timeKey, account));\\n\\n        uint256 adjustedClaimableAmount = Precision.applyFactor(claimableAmount, claimableFactor);\\n        if (adjustedClaimableAmount <= claimedAmount) {\\n            revert Errors.CollateralAlreadyClaimed(adjustedClaimableAmount, claimedAmount);\\n        }\\n\\n        uint256 amountToBeClaimed = adjustedClaimableAmount - claimedAmount;\\n\\n        dataStore.setUint(\\n            Keys.claimedCollateralAmountKey(market, token, timeKey, account),\\n            adjustedClaimableAmount\\n        );\\n\\n        uint256 nextPoolValue = dataStore.decrementUint(\\n            Keys.claimableCollateralAmountKey(market, token),\\n            amountToBeClaimed\\n        );\\n\\n        MarketToken(payable(market)).transferOut(\\n            token,\\n            receiver,\\n            amountToBeClaimed\\n        );\\n\\n        validateMarketTokenBalance(dataStore, market);\\n\\n        MarketEventUtils.emitCollateralClaimed(\\n            eventEmitter,\\n            market,\\n            token,\\n            timeKey,\\n            account,\\n            receiver,\\n            amountToBeClaimed,\\n            nextPoolValue\\n        );\\n\\n        return amountToBeClaimed;\\n    }\\n\\n    function _getClaimableFactor(\\n        DataStore dataStore,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account\\n    ) internal view returns (uint256) {\\n        uint256 claimableFactorForTime = dataStore.getUint(Keys.claimableCollateralFactorKey(market, token, timeKey));\\n        uint256 claimableFactorForAccount = dataStore.getUint(Keys.claimableCollateralFactorKey(market, token, timeKey, account));\\n        uint256 claimableFactor = claimableFactorForTime > claimableFactorForAccount\\n            ? claimableFactorForTime\\n            : claimableFactorForAccount;\\n\\n        // if the divisor is changed the timeDiff calculation would no longer be accurate\\n        uint256 divisor = dataStore.getUint(Keys.CLAIMABLE_COLLATERAL_TIME_DIVISOR);\\n\\n        uint256 claimableReductionFactor = dataStore.getUint(Keys.claimableCollateralReductionFactorKey(market, token, timeKey, account));\\n        uint256 timeDiff = Chain.currentTimestamp() - timeKey * divisor;\\n        uint256 claimableCollateralDelay = dataStore.getUint(Keys.CLAIMABLE_COLLATERAL_DELAY);\\n\\n        if (claimableFactor == 0 && claimableReductionFactor == 0 && timeDiff > claimableCollateralDelay) {\\n            claimableFactor = Precision.FLOAT_PRECISION;\\n        }\\n\\n        if (claimableFactor > claimableReductionFactor) {\\n            claimableFactor -= claimableReductionFactor;\\n        } else {\\n            claimableFactor = 0;\\n        }\\n\\n        return claimableFactor;\\n    }\\n\\n    // @dev apply a delta to the pool amount\\n    // validatePoolAmount is not called in this function since applyDeltaToPoolAmount\\n    // is called when receiving fees\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param token the token to apply to\\n    // @param delta the delta amount\\n    function applyDeltaToPoolAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Market.Props memory market,\\n        address token,\\n        int256 delta\\n    ) internal returns (uint256) {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.poolAmountKey(market.marketToken, token),\\n            delta,\\n            \\\"Invalid state, negative poolAmount\\\"\\n        );\\n\\n        applyDeltaToVirtualInventoryForSwaps(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            token,\\n            delta\\n        );\\n\\n        MarketEventUtils.emitPoolAmountUpdated(eventEmitter, market.marketToken, token, delta, nextValue);\\n\\n        return nextValue;\\n    }\\n\\n    function getAdjustedSwapImpactFactor(DataStore dataStore, address market, bool isPositive) internal view returns (uint256) {\\n        (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = getAdjustedSwapImpactFactors(dataStore, market);\\n\\n        return isPositive ? positiveImpactFactor : negativeImpactFactor;\\n    }\\n\\n    function getAdjustedSwapImpactFactors(DataStore dataStore, address market) internal view returns (uint256, uint256) {\\n        uint256 positiveImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, true));\\n        uint256 negativeImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, false));\\n\\n        // if the positive impact factor is more than the negative impact factor, positions could be opened\\n        // and closed immediately for a profit if the difference is sufficient to cover the position fees\\n        if (positiveImpactFactor > negativeImpactFactor) {\\n            positiveImpactFactor = negativeImpactFactor;\\n        }\\n\\n        return (positiveImpactFactor, negativeImpactFactor);\\n    }\\n\\n    function getAdjustedPositionImpactFactor(DataStore dataStore, address market, bool isPositive) internal view returns (uint256) {\\n        (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = getAdjustedPositionImpactFactors(dataStore, market);\\n\\n        return isPositive ? positiveImpactFactor : negativeImpactFactor;\\n    }\\n\\n    function getAdjustedPositionImpactFactors(DataStore dataStore, address market) internal view returns (uint256, uint256) {\\n        uint256 positiveImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, true));\\n        uint256 negativeImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, false));\\n\\n        // if the positive impact factor is more than the negative impact factor, positions could be opened\\n        // and closed immediately for a profit if the difference is sufficient to cover the position fees\\n        if (positiveImpactFactor > negativeImpactFactor) {\\n            positiveImpactFactor = negativeImpactFactor;\\n        }\\n\\n        return (positiveImpactFactor, negativeImpactFactor);\\n    }\\n\\n    // @dev cap the input priceImpactUsd by the available amount in the position impact pool\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param indexTokenPrice the price of the token\\n    // @param priceImpactUsd the calculated USD price impact\\n    // @return the capped priceImpactUsd\\n    function capPositiveImpactUsdByPositionImpactPool(\\n        DataStore dataStore,\\n        address market,\\n        Price.Props memory indexTokenPrice,\\n        int256 priceImpactUsd\\n    ) internal view returns (int256) {\\n        if (priceImpactUsd < 0) {\\n            return priceImpactUsd;\\n        }\\n\\n        uint256 impactPoolAmount = getPositionImpactPoolAmount(dataStore, market);\\n        // use indexTokenPrice.min to maximize the position impact pool reduction\\n        int256 maxPriceImpactUsdBasedOnImpactPool = (impactPoolAmount * indexTokenPrice.min).toInt256();\\n\\n        if (priceImpactUsd > maxPriceImpactUsdBasedOnImpactPool) {\\n            priceImpactUsd = maxPriceImpactUsdBasedOnImpactPool;\\n        }\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev cap the input priceImpactUsd by the max positive position impact factor\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param priceImpactUsd the calculated USD price impact\\n    // @param sizeDeltaUsd the size by which the position is increased/decreased\\n    // @return the capped priceImpactUsd\\n    function capPositiveImpactUsdByMaxPositionImpact(\\n        DataStore dataStore,\\n        address market,\\n        int256 priceImpactUsd,\\n        uint256 sizeDeltaUsd\\n    ) internal view returns (int256) {\\n        if (priceImpactUsd < 0) {\\n            return priceImpactUsd;\\n        }\\n\\n        uint256 maxPriceImpactFactor = getMaxPositionImpactFactor(dataStore, market, true);\\n        int256 maxPriceImpactUsdBasedOnMaxPriceImpactFactor = Precision.applyFactor(sizeDeltaUsd, maxPriceImpactFactor).toInt256();\\n\\n        // capped by the positive price impact\\n        if (priceImpactUsd > maxPriceImpactUsdBasedOnMaxPriceImpactFactor) {\\n            priceImpactUsd = maxPriceImpactUsdBasedOnMaxPriceImpactFactor;\\n        }\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev get the position impact pool amount\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return the position impact pool amount\\n    function getPositionImpactPoolAmount(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.positionImpactPoolAmountKey(market));\\n    }\\n\\n    // @dev get the swap impact pool amount\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return the swap impact pool amount\\n    function getSwapImpactPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.swapImpactPoolAmountKey(market, token));\\n    }\\n\\n    // @dev apply a delta to the swap impact pool\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param token the token to apply to\\n    // @param delta the delta amount\\n    function applyDeltaToSwapImpactPool(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta\\n    ) internal returns (uint256) {\\n        uint256 nextValue = dataStore.applyBoundedDeltaToUint(\\n            Keys.swapImpactPoolAmountKey(market, token),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitSwapImpactPoolAmountUpdated(eventEmitter, market, token, delta, nextValue);\\n\\n        return nextValue;\\n    }\\n\\n    // @dev apply a delta to the position impact pool\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param delta the delta amount\\n    function applyDeltaToPositionImpactPool(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta\\n    ) internal returns (uint256) {\\n        uint256 nextValue = dataStore.applyBoundedDeltaToUint(\\n            Keys.positionImpactPoolAmountKey(market),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitPositionImpactPoolAmountUpdated(eventEmitter, market, delta, nextValue);\\n\\n        return nextValue;\\n    }\\n\\n    // @dev apply a delta to the open interest\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param collateralToken the collateralToken to apply to\\n    // @param isLong whether to apply to the long or short side\\n    // @param delta the delta amount\\n    function applyDeltaToOpenInterest(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Market.Props memory market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta\\n    ) internal returns (uint256) {\\n        if (market.indexToken == address(0)) {\\n            revert Errors.OpenInterestCannotBeUpdatedForSwapOnlyMarket(market.marketToken);\\n        }\\n\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.openInterestKey(market.marketToken, collateralToken, isLong),\\n            delta,\\n            \\\"Invalid state: negative open interest\\\"\\n        );\\n\\n        // if the open interest for longs is increased then tokens were virtually bought from the pool\\n        // so the virtual inventory should be decreased\\n        // if the open interest for longs is decreased then tokens were virtually sold to the pool\\n        // so the virtual inventory should be increased\\n        // if the open interest for shorts is increased then tokens were virtually sold to the pool\\n        // so the virtual inventory should be increased\\n        // if the open interest for shorts is decreased then tokens were virtually bought from the pool\\n        // so the virtual inventory should be decreased\\n        applyDeltaToVirtualInventoryForPositions(\\n            dataStore,\\n            eventEmitter,\\n            market.indexToken,\\n            isLong ? -delta : delta\\n        );\\n\\n        if (delta > 0) {\\n            validateOpenInterest(\\n                dataStore,\\n                market,\\n                isLong\\n            );\\n        }\\n\\n        MarketEventUtils.emitOpenInterestUpdated(eventEmitter, market.marketToken, collateralToken, isLong, delta, nextValue);\\n\\n        return nextValue;\\n    }\\n\\n    // @dev apply a delta to the open interest in tokens\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param collateralToken the collateralToken to apply to\\n    // @param isLong whether to apply to the long or short side\\n    // @param delta the delta amount\\n    function applyDeltaToOpenInterestInTokens(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta\\n    ) internal returns (uint256) {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.openInterestInTokensKey(market, collateralToken, isLong),\\n            delta,\\n            \\\"Invalid state: negative open interest in tokens\\\"\\n        );\\n\\n        MarketEventUtils.emitOpenInterestInTokensUpdated(eventEmitter, market, collateralToken, isLong, delta, nextValue);\\n\\n        return nextValue;\\n    }\\n\\n    // @dev apply a delta to the collateral sum\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param collateralToken the collateralToken to apply to\\n    // @param isLong whether to apply to the long or short side\\n    // @param delta the delta amount\\n    function applyDeltaToCollateralSum(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta\\n    ) internal returns (uint256) {\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.collateralSumKey(market, collateralToken, isLong),\\n            delta,\\n            \\\"Invalid state: negative collateralSum\\\"\\n        );\\n\\n        MarketEventUtils.emitCollateralSumUpdated(eventEmitter, market, collateralToken, isLong, delta, nextValue);\\n\\n        return nextValue;\\n    }\\n\\n    // @dev update the funding state\\n    // @param dataStore DataStore\\n    // @param market the market to update\\n    // @param prices the prices of the market tokens\\n    function updateFundingState(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Market.Props memory market,\\n        MarketPrices memory prices\\n    ) external {\\n        GetNextFundingAmountPerSizeResult memory result = getNextFundingAmountPerSize(dataStore, market, prices);\\n\\n        applyDeltaToFundingFeeAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.longToken,\\n            true,\\n            result.fundingFeeAmountPerSizeDelta.long.longToken\\n        );\\n\\n        applyDeltaToFundingFeeAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.longToken,\\n            false,\\n            result.fundingFeeAmountPerSizeDelta.short.longToken\\n        );\\n\\n        applyDeltaToFundingFeeAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.shortToken,\\n            true,\\n            result.fundingFeeAmountPerSizeDelta.long.shortToken\\n        );\\n\\n        applyDeltaToFundingFeeAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.shortToken,\\n            false,\\n            result.fundingFeeAmountPerSizeDelta.short.shortToken\\n        );\\n\\n        applyDeltaToClaimableFundingAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.longToken,\\n            true,\\n            result.claimableFundingAmountPerSizeDelta.long.longToken\\n        );\\n\\n        applyDeltaToClaimableFundingAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.longToken,\\n            false,\\n            result.claimableFundingAmountPerSizeDelta.short.longToken\\n        );\\n\\n        applyDeltaToClaimableFundingAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.shortToken,\\n            true,\\n            result.claimableFundingAmountPerSizeDelta.long.shortToken\\n        );\\n\\n        applyDeltaToClaimableFundingAmountPerSize(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            market.shortToken,\\n            false,\\n            result.claimableFundingAmountPerSizeDelta.short.shortToken\\n        );\\n\\n        setSavedFundingFactorPerSecond(dataStore, market.marketToken, result.nextSavedFundingFactorPerSecond);\\n\\n        dataStore.setUint(Keys.fundingUpdatedAtKey(market.marketToken), Chain.currentTimestamp());\\n\\n        MarketEventUtils.emitFunding(\\n            eventEmitter,\\n            market.marketToken,\\n            result.fundingFactorPerSecond\\n        );\\n    }\\n\\n    // @dev get the next funding amount per size values\\n    // @param dataStore DataStore\\n    // @param prices the prices of the market tokens\\n    // @param market the market to update\\n    // @param longToken the market's long token\\n    // @param shortToken the market's short token\\n    function getNextFundingAmountPerSize(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices\\n    ) internal view returns (GetNextFundingAmountPerSizeResult memory) {\\n        GetNextFundingAmountPerSizeResult memory result;\\n        GetNextFundingAmountPerSizeCache memory cache;\\n\\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\\n\\n        // get the open interest values by long / short and by collateral used\\n        cache.openInterest.long.longToken = getOpenInterest(dataStore, market.marketToken, market.longToken, true, divisor);\\n        cache.openInterest.long.shortToken = getOpenInterest(dataStore, market.marketToken, market.shortToken, true, divisor);\\n        cache.openInterest.short.longToken = getOpenInterest(dataStore, market.marketToken, market.longToken, false, divisor);\\n        cache.openInterest.short.shortToken = getOpenInterest(dataStore, market.marketToken, market.shortToken, false, divisor);\\n\\n        // sum the open interest values to get the total long and short open interest values\\n        cache.longOpenInterest = cache.openInterest.long.longToken + cache.openInterest.long.shortToken;\\n        cache.shortOpenInterest = cache.openInterest.short.longToken + cache.openInterest.short.shortToken;\\n\\n        // if either long or short open interest is zero, then funding should not be updated\\n        // as there would not be any user to pay the funding to\\n        if (cache.longOpenInterest == 0 || cache.shortOpenInterest == 0) {\\n            return result;\\n        }\\n\\n        // if the blockchain is not progressing / a market is disabled, funding fees\\n        // will continue to accumulate\\n        // this should be a rare occurrence so funding fees are not adjusted for this case\\n        cache.durationInSeconds = getSecondsSinceFundingUpdated(dataStore, market.marketToken);\\n\\n        (result.fundingFactorPerSecond, result.longsPayShorts, result.nextSavedFundingFactorPerSecond) = getNextFundingFactorPerSecond(\\n            dataStore,\\n            market.marketToken,\\n            cache.longOpenInterest,\\n            cache.shortOpenInterest,\\n            cache.durationInSeconds\\n        );\\n\\n        cache.sizeOfPayingSide = result.longsPayShorts ? cache.longOpenInterest : cache.shortOpenInterest;\\n\\n        // for single token markets, if there is $200,000 long open interest\\n        // and $100,000 short open interest and if the fundingUsd is $8:\\n        // fundingUsdForLongCollateral: $4\\n        // fundingUsdForShortCollateral: $4\\n        // fundingFeeAmountPerSizeDelta.long.longToken: 4 / 100,000\\n        // fundingFeeAmountPerSizeDelta.long.shortToken: 4 / 100,000\\n        // claimableFundingAmountPerSizeDelta.short.longToken: 4 / 100,000\\n        // claimableFundingAmountPerSizeDelta.short.shortToken: 4 / 100,000\\n        //\\n        // the divisor for fundingFeeAmountPerSizeDelta is 100,000 because the\\n        // cache.openInterest.long.longOpenInterest and cache.openInterest.long.shortOpenInterest is divided by 2\\n        //\\n        // when the fundingFeeAmountPerSize value is incremented, it would be incremented twice:\\n        // 4 / 100,000 + 4 / 100,000 = 8 / 100,000\\n        //\\n        // since the actual long open interest is $200,000, this would result in a total of 8 / 100,000 * 200,000 = $16 being charged\\n        //\\n        // when the claimableFundingAmountPerSize value is incremented, it would similarly be incremented twice:\\n        // 4 / 100,000 + 4 / 100,000 = 8 / 100,000\\n        //\\n        // when calculating the amount to be claimed, the longTokenClaimableFundingAmountPerSize and shortTokenClaimableFundingAmountPerSize\\n        // are compared against the market's claimableFundingAmountPerSize for the longToken and claimableFundingAmountPerSize for the shortToken\\n        //\\n        // since both these values will be duplicated, the amount claimable would be:\\n        // (8 / 100,000 + 8 / 100,000) * 100,000 = $16\\n        //\\n        // due to these, the fundingUsd should be divided by the divisor\\n\\n        cache.fundingUsd = Precision.applyFactor(cache.sizeOfPayingSide, cache.durationInSeconds * result.fundingFactorPerSecond);\\n        cache.fundingUsd = cache.fundingUsd / divisor;\\n\\n        // split the fundingUsd value by long and short collateral\\n        // e.g. if the fundingUsd value is $500, and there is $1000 of long open interest using long collateral and $4000 of long open interest\\n        // with short collateral, then $100 of funding fees should be paid from long positions using long collateral, $400 of funding fees\\n        // should be paid from long positions using short collateral\\n        // short positions should receive $100 of funding fees in long collateral and $400 of funding fees in short collateral\\n        if (result.longsPayShorts) {\\n            cache.fundingUsdForLongCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.long.longToken, cache.longOpenInterest);\\n            cache.fundingUsdForShortCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.long.shortToken, cache.longOpenInterest);\\n        } else {\\n            cache.fundingUsdForLongCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.short.longToken, cache.shortOpenInterest);\\n            cache.fundingUsdForShortCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.short.shortToken, cache.shortOpenInterest);\\n        }\\n\\n        // calculate the change in funding amount per size values\\n        // for example, if the fundingUsdForLongCollateral is $100, the longToken price is $2000, the longOpenInterest is $10,000, shortOpenInterest is $5000\\n        // if longs pay shorts then the fundingFeeAmountPerSize.long.longToken should be increased by 0.05 tokens per $10,000 or 0.000005 tokens per $1\\n        // the claimableFundingAmountPerSize.short.longToken should be increased by 0.05 tokens per $5000 or 0.00001 tokens per $1\\n        if (result.longsPayShorts) {\\n            // use the same longTokenPrice.max and shortTokenPrice.max to calculate the amount to be paid and received\\n            // positions only pay funding in the position's collateral token\\n            // so the fundingUsdForLongCollateral is divided by the total long open interest for long positions using the longToken as collateral\\n            // and the fundingUsdForShortCollateral is divided by the total long open interest for long positions using the shortToken as collateral\\n            result.fundingFeeAmountPerSizeDelta.long.longToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForLongCollateral,\\n                cache.openInterest.long.longToken,\\n                prices.longTokenPrice.max,\\n                true // roundUpMagnitude\\n            );\\n\\n            result.fundingFeeAmountPerSizeDelta.long.shortToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForShortCollateral,\\n                cache.openInterest.long.shortToken,\\n                prices.shortTokenPrice.max,\\n                true // roundUpMagnitude\\n            );\\n\\n            // positions receive funding in both the longToken and shortToken\\n            // so the fundingUsdForLongCollateral and fundingUsdForShortCollateral is divided by the total short open interest\\n            result.claimableFundingAmountPerSizeDelta.short.longToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForLongCollateral,\\n                cache.shortOpenInterest,\\n                prices.longTokenPrice.max,\\n                false // roundUpMagnitude\\n            );\\n\\n            result.claimableFundingAmountPerSizeDelta.short.shortToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForShortCollateral,\\n                cache.shortOpenInterest,\\n                prices.shortTokenPrice.max,\\n                false // roundUpMagnitude\\n            );\\n        } else {\\n            // use the same longTokenPrice.max and shortTokenPrice.max to calculate the amount to be paid and received\\n            // positions only pay funding in the position's collateral token\\n            // so the fundingUsdForLongCollateral is divided by the total short open interest for short positions using the longToken as collateral\\n            // and the fundingUsdForShortCollateral is divided by the total short open interest for short positions using the shortToken as collateral\\n            result.fundingFeeAmountPerSizeDelta.short.longToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForLongCollateral,\\n                cache.openInterest.short.longToken,\\n                prices.longTokenPrice.max,\\n                true // roundUpMagnitude\\n            );\\n\\n            result.fundingFeeAmountPerSizeDelta.short.shortToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForShortCollateral,\\n                cache.openInterest.short.shortToken,\\n                prices.shortTokenPrice.max,\\n                true // roundUpMagnitude\\n            );\\n\\n            // positions receive funding in both the longToken and shortToken\\n            // so the fundingUsdForLongCollateral and fundingUsdForShortCollateral is divided by the total long open interest\\n            result.claimableFundingAmountPerSizeDelta.long.longToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForLongCollateral,\\n                cache.longOpenInterest,\\n                prices.longTokenPrice.max,\\n                false // roundUpMagnitude\\n            );\\n\\n            result.claimableFundingAmountPerSizeDelta.long.shortToken = getFundingAmountPerSizeDelta(\\n                cache.fundingUsdForShortCollateral,\\n                cache.longOpenInterest,\\n                prices.shortTokenPrice.max,\\n                false // roundUpMagnitude\\n            );\\n        }\\n\\n        return result;\\n    }\\n\\n    // @dev get the next funding factor per second\\n    // in case the minFundingFactorPerSecond is not zero, and the long / short skew has flipped\\n    // if orders are being created frequently it is possible that the minFundingFactorPerSecond prevents\\n    // the nextSavedFundingFactorPerSecond from being decreased fast enough for the sign to eventually flip\\n    // if it is bound by minFundingFactorPerSecond\\n    // for that reason, only the nextFundingFactorPerSecond is bound by minFundingFactorPerSecond\\n    // and the nextSavedFundingFactorPerSecond is not bound by minFundingFactorPerSecond\\n    // @return nextFundingFactorPerSecond, longsPayShorts, nextSavedFundingFactorPerSecond\\n    function getNextFundingFactorPerSecond(\\n        DataStore dataStore,\\n        address market,\\n        uint256 longOpenInterest,\\n        uint256 shortOpenInterest,\\n        uint256 durationInSeconds\\n    ) internal view returns (uint256, bool, int256) {\\n        GetNextFundingFactorPerSecondCache memory cache;\\n\\n        cache.diffUsd = Calc.diff(longOpenInterest, shortOpenInterest);\\n        cache.totalOpenInterest = longOpenInterest + shortOpenInterest;\\n\\n        FundingConfigCache memory configCache;\\n        configCache.fundingIncreaseFactorPerSecond = dataStore.getUint(Keys.fundingIncreaseFactorPerSecondKey(market));\\n\\n        // if the open interest difference is zero and adaptive funding\\n        // is not enabled, then return zero as the funding factor\\n        if (cache.diffUsd == 0 && configCache.fundingIncreaseFactorPerSecond == 0) {\\n            return (0, true, 0);\\n        }\\n\\n        if (cache.totalOpenInterest == 0) {\\n            revert Errors.UnableToGetFundingFactorEmptyOpenInterest();\\n        }\\n\\n        cache.fundingExponentFactor = getFundingExponentFactor(dataStore, market);\\n\\n        cache.diffUsdAfterExponent = Precision.applyExponentFactor(cache.diffUsd, cache.fundingExponentFactor);\\n        cache.diffUsdToOpenInterestFactor = Precision.toFactor(cache.diffUsdAfterExponent, cache.totalOpenInterest);\\n\\n        if (configCache.fundingIncreaseFactorPerSecond == 0) {\\n            cache.fundingFactor = getFundingFactor(dataStore, market);\\n            uint256 maxFundingFactorPerSecond = dataStore.getUint(Keys.maxFundingFactorPerSecondKey(market));\\n\\n            // if there is no fundingIncreaseFactorPerSecond then return the static fundingFactor based on open interest difference\\n            uint256 fundingFactorPerSecond = Precision.applyFactor(cache.diffUsdToOpenInterestFactor, cache.fundingFactor);\\n\\n            if (fundingFactorPerSecond > maxFundingFactorPerSecond) {\\n                fundingFactorPerSecond = maxFundingFactorPerSecond;\\n            }\\n\\n            return (\\n                fundingFactorPerSecond,\\n                longOpenInterest > shortOpenInterest,\\n                0\\n            );\\n        }\\n\\n        // if the savedFundingFactorPerSecond is positive then longs pay shorts\\n        // if the savedFundingFactorPerSecond is negative then shorts pay longs\\n        cache.savedFundingFactorPerSecond = getSavedFundingFactorPerSecond(dataStore, market);\\n        cache.savedFundingFactorPerSecondMagnitude = cache.savedFundingFactorPerSecond.abs();\\n\\n        configCache.thresholdForStableFunding = dataStore.getUint(Keys.thresholdForStableFundingKey(market));\\n        configCache.thresholdForDecreaseFunding = dataStore.getUint(Keys.thresholdForDecreaseFundingKey(market));\\n\\n        // set the default of nextSavedFundingFactorPerSecond as the savedFundingFactorPerSecond\\n        cache.nextSavedFundingFactorPerSecond = cache.savedFundingFactorPerSecond;\\n\\n        // the default will be NoChange\\n        FundingRateChangeType fundingRateChangeType;\\n\\n        bool isSkewTheSameDirectionAsFunding = (cache.savedFundingFactorPerSecond > 0 && longOpenInterest > shortOpenInterest) || (cache.savedFundingFactorPerSecond < 0 && shortOpenInterest > longOpenInterest);\\n\\n        if (isSkewTheSameDirectionAsFunding) {\\n            if (cache.diffUsdToOpenInterestFactor > configCache.thresholdForStableFunding) {\\n                fundingRateChangeType = FundingRateChangeType.Increase;\\n            } else if (cache.diffUsdToOpenInterestFactor < configCache.thresholdForDecreaseFunding) {\\n                // if thresholdForDecreaseFunding is zero and diffUsdToOpenInterestFactor is also zero\\n                // then the fundingRateChangeType would be NoChange\\n                fundingRateChangeType = FundingRateChangeType.Decrease;\\n            }\\n        } else {\\n            // if the skew has changed, then the funding should increase in the opposite direction\\n            fundingRateChangeType = FundingRateChangeType.Increase;\\n        }\\n\\n        if (fundingRateChangeType == FundingRateChangeType.Increase) {\\n            // increase funding rate\\n            int256 increaseValue = Precision.applyFactor(cache.diffUsdToOpenInterestFactor, configCache.fundingIncreaseFactorPerSecond).toInt256() * durationInSeconds.toInt256();\\n\\n            // if there are more longs than shorts, then the savedFundingFactorPerSecond should increase\\n            // otherwise the savedFundingFactorPerSecond should increase in the opposite direction / decrease\\n            if (longOpenInterest < shortOpenInterest) {\\n                increaseValue = -increaseValue;\\n            }\\n\\n            cache.nextSavedFundingFactorPerSecond = cache.savedFundingFactorPerSecond + increaseValue;\\n        }\\n\\n        if (fundingRateChangeType == FundingRateChangeType.Decrease && cache.savedFundingFactorPerSecondMagnitude != 0) {\\n            configCache.fundingDecreaseFactorPerSecond = dataStore.getUint(Keys.fundingDecreaseFactorPerSecondKey(market));\\n            uint256 decreaseValue = configCache.fundingDecreaseFactorPerSecond * durationInSeconds;\\n\\n            if (cache.savedFundingFactorPerSecondMagnitude <= decreaseValue) {\\n                // set the funding factor to 1 or -1 depending on the original savedFundingFactorPerSecond\\n                cache.nextSavedFundingFactorPerSecond = cache.savedFundingFactorPerSecond / cache.savedFundingFactorPerSecondMagnitude.toInt256();\\n            } else {\\n                // reduce the original savedFundingFactorPerSecond while keeping the original sign of the savedFundingFactorPerSecond\\n                int256 sign = cache.savedFundingFactorPerSecond / cache.savedFundingFactorPerSecondMagnitude.toInt256();\\n                cache.nextSavedFundingFactorPerSecond = (cache.savedFundingFactorPerSecondMagnitude - decreaseValue).toInt256() * sign;\\n            }\\n        }\\n\\n        configCache.minFundingFactorPerSecond = dataStore.getUint(Keys.minFundingFactorPerSecondKey(market));\\n        configCache.maxFundingFactorPerSecond = dataStore.getUint(Keys.maxFundingFactorPerSecondKey(market));\\n\\n        cache.nextSavedFundingFactorPerSecond = Calc.boundMagnitude(\\n            cache.nextSavedFundingFactorPerSecond,\\n            0,\\n            configCache.maxFundingFactorPerSecond\\n        );\\n\\n        cache.nextSavedFundingFactorPerSecondWithMinBound = Calc.boundMagnitude(\\n            cache.nextSavedFundingFactorPerSecond,\\n            configCache.minFundingFactorPerSecond,\\n            configCache.maxFundingFactorPerSecond\\n        );\\n\\n        return (\\n            cache.nextSavedFundingFactorPerSecondWithMinBound.abs(),\\n            cache.nextSavedFundingFactorPerSecondWithMinBound > 0,\\n            cache.nextSavedFundingFactorPerSecond\\n        );\\n    }\\n\\n    // store funding values as token amount per (Precision.FLOAT_PRECISION_SQRT / Precision.FLOAT_PRECISION) of USD size\\n    function getFundingAmountPerSizeDelta(\\n        uint256 fundingUsd,\\n        uint256 openInterest,\\n        uint256 tokenPrice,\\n        bool roundUpMagnitude\\n    ) internal pure returns (uint256) {\\n        if (fundingUsd == 0 || openInterest == 0) { return 0; }\\n\\n        uint256 fundingUsdPerSize = Precision.mulDiv(\\n            fundingUsd,\\n            Precision.FLOAT_PRECISION * Precision.FLOAT_PRECISION_SQRT,\\n            openInterest,\\n            roundUpMagnitude\\n        );\\n\\n        if (roundUpMagnitude) {\\n            return Calc.roundUpDivision(fundingUsdPerSize, tokenPrice);\\n        } else {\\n            return fundingUsdPerSize / tokenPrice;\\n        }\\n    }\\n\\n    // @dev update the cumulative borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to update\\n    // @param longToken the market's long token\\n    // @param shortToken the market's short token\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to update the long or short side\\n    function updateCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) external {\\n        (/* uint256 nextCumulativeBorrowingFactor */, uint256 delta, uint256 borrowingFactorPerSecond) = getNextCumulativeBorrowingFactor(\\n            dataStore,\\n            market,\\n            prices,\\n            isLong\\n        );\\n\\n        incrementCumulativeBorrowingFactor(\\n            dataStore,\\n            eventEmitter,\\n            market.marketToken,\\n            isLong,\\n            delta\\n        );\\n\\n        dataStore.setUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market.marketToken, isLong), Chain.currentTimestamp());\\n\\n        MarketEventUtils.emitBorrowing(\\n            eventEmitter,\\n            market.marketToken,\\n            borrowingFactorPerSecond\\n        );\\n    }\\n\\n    // @dev get the ratio of pnl to pool value\\n    // @param dataStore DataStore\\n    // @param oracle Oracle\\n    // @param market the trading market\\n    // @param isLong whether to get the value for the long or short side\\n    // @param maximize whether to maximize the factor\\n    // @return (pnl of positions) / (long or short pool value)\\n    function getPnlToPoolFactor(\\n        DataStore dataStore,\\n        Oracle oracle,\\n        address market,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        Market.Props memory _market = getEnabledMarket(dataStore, market);\\n        MarketPrices memory prices = MarketPrices(\\n            oracle.getPrimaryPrice(_market.indexToken),\\n            oracle.getPrimaryPrice(_market.longToken),\\n            oracle.getPrimaryPrice(_market.shortToken)\\n        );\\n\\n        return getPnlToPoolFactor(dataStore, _market, prices, isLong, maximize);\\n    }\\n\\n    // @dev get the ratio of pnl to pool value\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to get the value for the long or short side\\n    // @param maximize whether to maximize the factor\\n    // @return (pnl of positions) / (long or short pool value)\\n    function getPnlToPoolFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, !maximize);\\n\\n        if (poolUsd == 0) {\\n            return 0;\\n        }\\n\\n        // note that this PnL does not factor in the PnL from\\n        // the pending price impact of positions\\n        int256 pnl = getPnl(\\n            dataStore,\\n            market,\\n            prices.indexTokenPrice,\\n            isLong,\\n            maximize\\n        );\\n\\n        return Precision.toFactor(pnl, poolUsd);\\n    }\\n\\n    function validateOpenInterest(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        bool isLong\\n    ) internal view {\\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\\n        uint256 maxOpenInterest = getMaxOpenInterest(dataStore, market.marketToken, isLong);\\n\\n        if (openInterest > maxOpenInterest) {\\n            revert Errors.MaxOpenInterestExceeded(openInterest, maxOpenInterest);\\n        }\\n    }\\n\\n    // @dev validate that the pool amount is within the max allowed amount\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param token the token to check\\n    function validatePoolAmount(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        address token\\n    ) internal view {\\n        uint256 poolAmount = getPoolAmount(dataStore, market, token);\\n        uint256 maxPoolAmount = getMaxPoolAmount(dataStore, market.marketToken, token);\\n\\n        if (poolAmount > maxPoolAmount) {\\n            revert Errors.MaxPoolAmountExceeded(poolAmount, maxPoolAmount);\\n        }\\n    }\\n\\n    function validatePoolUsdForDeposit(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        address token,\\n        uint256 tokenPrice\\n    ) internal view {\\n        uint256 poolAmount = getPoolAmount(dataStore, market, token);\\n        uint256 poolUsd = poolAmount * tokenPrice;\\n        uint256 maxPoolUsd = getMaxPoolUsdForDeposit(dataStore, market.marketToken, token);\\n\\n        if (poolUsd > maxPoolUsd) {\\n            revert Errors.MaxPoolUsdForDepositExceeded(poolUsd, maxPoolUsd);\\n        }\\n    }\\n\\n    // @dev validate that the amount of tokens required to be reserved\\n    // is below the configured threshold\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to check the long or short side\\n    function validateReserve(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view {\\n        // poolUsd is used instead of pool amount as the indexToken may not match the longToken\\n        // additionally, the shortToken may not be a stablecoin\\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, false);\\n        uint256 reserveFactor = getReserveFactor(dataStore, market.marketToken, isLong);\\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\\n\\n        uint256 reservedUsd = getReservedUsd(\\n            dataStore,\\n            market,\\n            prices,\\n            isLong\\n        );\\n\\n        if (reservedUsd > maxReservedUsd) {\\n            revert Errors.InsufficientReserve(reservedUsd, maxReservedUsd);\\n        }\\n    }\\n\\n    // @dev validate that the amount of tokens required to be reserved for open interest\\n    // is below the configured threshold\\n    // @param dataStore DataStore\\n    // @param market the market values\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to check the long or short side\\n    function validateOpenInterestReserve(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view {\\n        // poolUsd is used instead of pool amount as the indexToken may not match the longToken\\n        // additionally, the shortToken may not be a stablecoin\\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, false);\\n        uint256 reserveFactor = getOpenInterestReserveFactor(dataStore, market.marketToken, isLong);\\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\\n\\n        uint256 reservedUsd = getReservedUsd(\\n            dataStore,\\n            market,\\n            prices,\\n            isLong\\n        );\\n\\n        if (reservedUsd > maxReservedUsd) {\\n            revert Errors.InsufficientReserveForOpenInterest(reservedUsd, maxReservedUsd);\\n        }\\n    }\\n\\n    // @dev update the swap impact pool amount, if it is a positive impact amount\\n    // cap the impact amount to the amount available in the swap impact pool\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to apply to\\n    // @param token the token to apply to\\n    // @param tokenPrice the price of the token\\n    // @param priceImpactUsd the USD price impact\\n    function applySwapImpactWithCap(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        Price.Props memory tokenPrice,\\n        int256 priceImpactUsd\\n    ) internal returns (int256, uint256) {\\n        (int256 impactAmount, uint256 cappedDiffUsd) = getSwapImpactAmountWithCap(\\n            dataStore,\\n            market,\\n            token,\\n            tokenPrice,\\n            priceImpactUsd\\n        );\\n\\n        // if there is a positive impact, the impact pool amount should be reduced\\n        // if there is a negative impact, the impact pool amount should be increased\\n        applyDeltaToSwapImpactPool(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            token,\\n            -impactAmount\\n        );\\n\\n        return (impactAmount, cappedDiffUsd);\\n    }\\n\\n    function getSwapImpactAmountWithCap(\\n        DataStore dataStore,\\n        address market,\\n        address token,\\n        Price.Props memory tokenPrice,\\n        int256 priceImpactUsd\\n    ) internal view returns (int256, uint256) {\\n        int256 impactAmount;\\n        uint256 cappedDiffUsd;\\n\\n        if (priceImpactUsd > 0) {\\n            // positive impact: minimize impactAmount, use tokenPrice.max\\n            // round positive impactAmount down, this will be deducted from the swap impact pool for the user\\n            impactAmount = priceImpactUsd / tokenPrice.max.toInt256();\\n\\n            int256 maxImpactAmount = getSwapImpactPoolAmount(dataStore, market, token).toInt256();\\n            if (impactAmount > maxImpactAmount) {\\n                cappedDiffUsd = (impactAmount - maxImpactAmount).toUint256() * tokenPrice.max;\\n                impactAmount = maxImpactAmount;\\n            }\\n        } else {\\n            // negative impact: maximize impactAmount, use tokenPrice.min\\n            // round negative impactAmount up, this will be deducted from the user\\n            impactAmount = Calc.roundUpMagnitudeDivision(priceImpactUsd, tokenPrice.min);\\n        }\\n\\n        return (impactAmount, cappedDiffUsd);\\n    }\\n\\n    // @dev get the funding amount to be deducted or distributed\\n    //\\n    // @param latestFundingAmountPerSize the latest funding amount per size\\n    // @param positionFundingAmountPerSize the funding amount per size for the position\\n    // @param positionSizeInUsd the position size in USD\\n    // @param roundUpMagnitude whether the round up the result\\n    //\\n    // @return fundingAmount\\n    function getFundingAmount(\\n        uint256 latestFundingAmountPerSize,\\n        uint256 positionFundingAmountPerSize,\\n        uint256 positionSizeInUsd,\\n        bool roundUpMagnitude\\n    ) internal pure returns (uint256) {\\n        uint256 fundingDiffFactor = (latestFundingAmountPerSize - positionFundingAmountPerSize);\\n\\n        // a user could avoid paying funding fees by continually updating the position\\n        // before the funding fee becomes large enough to be chargeable\\n        // to avoid this, funding fee amounts should be rounded up\\n        //\\n        // this could lead to large additional charges if the token has a low number of decimals\\n        // or if the token's value is very high, so care should be taken to inform users of this\\n        //\\n        // if the calculation is for the claimable amount, the amount should be rounded down instead\\n\\n        // divide the result by Precision.FLOAT_PRECISION * Precision.FLOAT_PRECISION_SQRT as the fundingAmountPerSize values\\n        // are stored based on FLOAT_PRECISION_SQRT values\\n        return Precision.mulDiv(\\n            positionSizeInUsd,\\n            fundingDiffFactor,\\n            Precision.FLOAT_PRECISION * Precision.FLOAT_PRECISION_SQRT,\\n            roundUpMagnitude\\n        );\\n    }\\n\\n    // @dev get the borrowing fees for a position, assumes that cumulativeBorrowingFactor\\n    // has already been updated to the latest value\\n    // @param dataStore DataStore\\n    // @param position Position.Props\\n    // @return the borrowing fees for a position\\n    function getBorrowingFees(DataStore dataStore, Position.Props memory position) internal view returns (uint256) {\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, position.market(), position.isLong());\\n        if (position.borrowingFactor() > cumulativeBorrowingFactor) {\\n            revert Errors.UnexpectedBorrowingFactor(position.borrowingFactor(), cumulativeBorrowingFactor);\\n        }\\n        uint256 diffFactor = cumulativeBorrowingFactor - position.borrowingFactor();\\n        return Precision.applyFactor(position.sizeInUsd(), diffFactor);\\n    }\\n\\n    // @dev get the borrowing fees for a position by calculating the latest cumulativeBorrowingFactor\\n    // @param dataStore DataStore\\n    // @param position Position.Props\\n    // @param market the position's market\\n    // @param prices the prices of the market tokens\\n    // @return the borrowing fees for a position\\n    function getNextBorrowingFees(DataStore dataStore, Position.Props memory position, Market.Props memory market, MarketPrices memory prices) internal view returns (uint256) {\\n        (uint256 nextCumulativeBorrowingFactor, /* uint256 delta */, ) = getNextCumulativeBorrowingFactor(\\n            dataStore,\\n            market,\\n            prices,\\n            position.isLong()\\n        );\\n\\n        if (position.borrowingFactor() > nextCumulativeBorrowingFactor) {\\n            revert Errors.UnexpectedBorrowingFactor(position.borrowingFactor(), nextCumulativeBorrowingFactor);\\n        }\\n        uint256 diffFactor = nextCumulativeBorrowingFactor - position.borrowingFactor();\\n        return Precision.applyFactor(position.sizeInUsd(), diffFactor);\\n    }\\n\\n    // @dev get the total reserved USD required for positions\\n    // @param market the market to check\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to get the value for the long or short side\\n    function getReservedUsd(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 reservedUsd;\\n        if (isLong) {\\n            // for longs calculate the reserved USD based on the open interest and current indexTokenPrice\\n            // this works well for e.g. an ETH / USD market with long collateral token as WETH\\n            // the available amount to be reserved would scale with the price of ETH\\n            // this also works for e.g. a SOL / USD market with long collateral token as WETH\\n            // if the price of SOL increases more than the price of ETH, additional amounts would be\\n            // automatically reserved\\n            uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, isLong);\\n            reservedUsd = openInterestInTokens * prices.indexTokenPrice.max;\\n        } else {\\n            // for shorts use the open interest as the reserved USD value\\n            // this works well for e.g. an ETH / USD market with short collateral token as USDC\\n            // the available amount to be reserved would not change with the price of ETH\\n            reservedUsd = getOpenInterest(dataStore, market, isLong);\\n        }\\n\\n        return reservedUsd;\\n    }\\n\\n    // @dev get the virtual inventory for swaps\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return returns (has virtual inventory, virtual long token inventory, virtual short token inventory)\\n    function getVirtualInventoryForSwaps(DataStore dataStore, address market) internal view returns (bool, uint256, uint256) {\\n        bytes32 virtualMarketId = dataStore.getBytes32(Keys.virtualMarketIdKey(market));\\n        if (virtualMarketId == bytes32(0)) {\\n            return (false, 0, 0);\\n        }\\n\\n        return (\\n            true,\\n            dataStore.getUint(Keys.virtualInventoryForSwapsKey(virtualMarketId, true)),\\n            dataStore.getUint(Keys.virtualInventoryForSwapsKey(virtualMarketId, false))\\n        );\\n    }\\n\\n    function getIsLongToken(Market.Props memory market, address token) internal pure returns (bool) {\\n        if (token != market.longToken && token != market.shortToken) {\\n            revert Errors.UnexpectedTokenForVirtualInventory(token, market.marketToken);\\n        }\\n\\n        return token == market.longToken;\\n    }\\n\\n    // @dev get the virtual inventory for positions\\n    // @param dataStore DataStore\\n    // @param token the token to check\\n    function getVirtualInventoryForPositions(DataStore dataStore, address token) internal view returns (bool, int256) {\\n        bytes32 virtualTokenId = dataStore.getBytes32(Keys.virtualTokenIdKey(token));\\n        if (virtualTokenId == bytes32(0)) {\\n            return (false, 0);\\n        }\\n\\n        return (true, dataStore.getInt(Keys.virtualInventoryForPositionsKey(virtualTokenId)));\\n    }\\n\\n    // @dev update the virtual inventory for swaps\\n    // @param dataStore DataStore\\n    // @param marketAddress the market to update\\n    // @param token the token to update\\n    // @param delta the update amount\\n    function applyDeltaToVirtualInventoryForSwaps(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Market.Props memory market,\\n        address token,\\n        int256 delta\\n    ) internal returns (bool, uint256) {\\n        bytes32 virtualMarketId = dataStore.getBytes32(Keys.virtualMarketIdKey(market.marketToken));\\n        if (virtualMarketId == bytes32(0)) {\\n            return (false, 0);\\n        }\\n\\n        bool isLongToken = getIsLongToken(market, token);\\n\\n        uint256 nextValue = dataStore.applyBoundedDeltaToUint(\\n            Keys.virtualInventoryForSwapsKey(virtualMarketId, isLongToken),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitVirtualSwapInventoryUpdated(eventEmitter, market.marketToken, isLongToken, virtualMarketId, delta, nextValue);\\n\\n        return (true, nextValue);\\n    }\\n\\n    // @dev update the virtual inventory for positions\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param token the token to update\\n    // @param delta the update amount\\n    function applyDeltaToVirtualInventoryForPositions(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address token,\\n        int256 delta\\n    ) internal returns (bool, int256) {\\n        bytes32 virtualTokenId = dataStore.getBytes32(Keys.virtualTokenIdKey(token));\\n        if (virtualTokenId == bytes32(0)) {\\n            return (false, 0);\\n        }\\n\\n        int256 nextValue = dataStore.applyDeltaToInt(\\n            Keys.virtualInventoryForPositionsKey(virtualTokenId),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitVirtualPositionInventoryUpdated(eventEmitter, token, virtualTokenId, delta, nextValue);\\n\\n        return (true, nextValue);\\n    }\\n\\n    // @dev get the open interest of a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    function getOpenInterest(\\n        DataStore dataStore,\\n        Market.Props memory market\\n    ) internal view returns (uint256) {\\n        uint256 longOpenInterest = getOpenInterest(dataStore, market, true);\\n        uint256 shortOpenInterest = getOpenInterest(dataStore, market, false);\\n\\n        return longOpenInterest + shortOpenInterest;\\n    }\\n\\n    // @dev get either the long or short open interest for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to get the long or short open interest\\n    // @return the long or short open interest for a market\\n    function getOpenInterest(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\\n        uint256 openInterestUsingLongTokenAsCollateral = getOpenInterest(dataStore, market.marketToken, market.longToken, isLong, divisor);\\n        uint256 openInterestUsingShortTokenAsCollateral = getOpenInterest(dataStore, market.marketToken, market.shortToken, isLong, divisor);\\n\\n        return openInterestUsingLongTokenAsCollateral + openInterestUsingShortTokenAsCollateral;\\n    }\\n\\n    // @dev the long and short open interest for a market based on the collateral token used\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateral token to check\\n    // @param isLong whether to check the long or short side\\n    function getOpenInterest(\\n        DataStore dataStore,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 divisor\\n    ) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestKey(market, collateralToken, isLong)) / divisor;\\n    }\\n\\n    // this is used to divide the values of getPoolAmount and getOpenInterest\\n    // if the longToken and shortToken are the same, then these values have to be divided by two\\n    // to avoid double counting\\n    function getPoolDivisor(address longToken, address shortToken) internal pure returns (uint256) {\\n        return longToken == shortToken ? 2 : 1;\\n    }\\n\\n    // @dev the long and short open interest in tokens for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to check the long or short side\\n    function getOpenInterestInTokens(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\\n        uint256 openInterestUsingLongTokenAsCollateral = getOpenInterestInTokens(dataStore, market.marketToken, market.longToken, isLong, divisor);\\n        uint256 openInterestUsingShortTokenAsCollateral = getOpenInterestInTokens(dataStore, market.marketToken, market.shortToken, isLong, divisor);\\n\\n        return openInterestUsingLongTokenAsCollateral + openInterestUsingShortTokenAsCollateral;\\n    }\\n\\n    // @dev the long and short open interest in tokens for a market based on the collateral token used\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateral token to check\\n    // @param isLong whether to check the long or short side\\n    function getOpenInterestInTokens(\\n        DataStore dataStore,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 divisor\\n    ) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestInTokensKey(market, collateralToken, isLong)) / divisor;\\n    }\\n\\n    // @dev get the sum of open interest and pnl for a market\\n    // getOpenInterestInTokens * tokenPrice would not reflect pending positive pnl\\n    // for short positions, so getOpenInterestWithPnl should be used if that info is needed\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param indexTokenPrice the price of the index token\\n    // @param isLong whether to check the long or short side\\n    // @param maximize whether to maximize or minimize the value\\n    // @return the sum of open interest and pnl for a market\\n    function getOpenInterestWithPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        Price.Props memory indexTokenPrice,\\n        bool isLong,\\n        bool maximize\\n    ) internal view returns (int256) {\\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\\n        int256 pnl = getPnl(dataStore, market, indexTokenPrice, isLong, maximize);\\n        return Calc.sumReturnInt256(openInterest, pnl);\\n    }\\n\\n    // @dev get the max position impact factor for decreasing position\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isPositive whether the price impact is positive or negative\\n    function getMaxPositionImpactFactor(DataStore dataStore, address market, bool isPositive) internal view returns (uint256) {\\n        (uint256 maxPositiveImpactFactor, uint256 maxNegativeImpactFactor) = getMaxPositionImpactFactors(dataStore, market);\\n\\n        return isPositive ? maxPositiveImpactFactor : maxNegativeImpactFactor;\\n    }\\n\\n    function getMaxPositionImpactFactors(DataStore dataStore, address market) internal view returns (uint256, uint256) {\\n        uint256 maxPositiveImpactFactor = dataStore.getUint(Keys.maxPositionImpactFactorKey(market, true));\\n        uint256 maxNegativeImpactFactor = dataStore.getUint(Keys.maxPositionImpactFactorKey(market, false));\\n\\n        if (maxPositiveImpactFactor > maxNegativeImpactFactor) {\\n            maxPositiveImpactFactor = maxNegativeImpactFactor;\\n        }\\n\\n        return (maxPositiveImpactFactor, maxNegativeImpactFactor);\\n    }\\n\\n    // @dev get the max position impact factor for liquidations\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    function getMaxPositionImpactFactorForLiquidations(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxPositionImpactFactorForLiquidationsKey(market));\\n    }\\n\\n    // @dev get the min collateral factor\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    function getMinCollateralFactor(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.minCollateralFactorKey(market));\\n    }\\n\\n    // @dev get the min collateral factor for liquidation\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    function getMinCollateralFactorForLiquidation(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.minCollateralFactorForLiquidationKey(market));\\n    }\\n\\n    // @dev get the min collateral factor for open interest multiplier\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether it is for the long or short side\\n    function getMinCollateralFactorForOpenInterestMultiplier(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.minCollateralFactorForOpenInterestMultiplierKey(market, isLong));\\n    }\\n\\n    // @dev get the min collateral factor for open interest\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param openInterestDelta the change in open interest\\n    // @param isLong whether it is for the long or short side\\n    function getMinCollateralFactorForOpenInterest(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        int256 openInterestDelta,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\\n        openInterest = Calc.sumReturnUint256(openInterest, openInterestDelta);\\n        uint256 multiplierFactor = getMinCollateralFactorForOpenInterestMultiplier(dataStore, market.marketToken, isLong);\\n        return Precision.applyFactor(openInterest, multiplierFactor);\\n    }\\n\\n    // @dev get the total amount of position collateral for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the total amount of position collateral for a market\\n    function getCollateralSum(DataStore dataStore, address market, address collateralToken, bool isLong, uint256 divisor) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.collateralSumKey(market, collateralToken, isLong)) / divisor;\\n    }\\n\\n    // @dev get the reserve factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the reserve factor for a market\\n    function getReserveFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.reserveFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the open interest reserve factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the open interest reserve factor for a market\\n    function getOpenInterestReserveFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.openInterestReserveFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the max pnl factor for a market\\n    // @param dataStore DataStore\\n    // @param pnlFactorType the type of the pnl factor\\n    // @param market the market to check\\n    // @param isLong whether to get the value for longs or shorts\\n    // @return the max pnl factor for a market\\n    function getMaxPnlFactor(DataStore dataStore, bytes32 pnlFactorType, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.maxPnlFactorKey(pnlFactorType, market, isLong));\\n    }\\n\\n    // @dev get the min pnl factor after ADL\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    function getMinPnlFactorAfterAdl(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.minPnlFactorAfterAdlKey(market, isLong));\\n    }\\n\\n    // @dev get the funding factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return the funding factor for a market\\n    function getFundingFactor(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.fundingFactorKey(market));\\n    }\\n\\n    // @dev get the saved funding factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return the saved funding factor for a market\\n    function getSavedFundingFactorPerSecond(DataStore dataStore, address market) internal view returns (int256) {\\n        return dataStore.getInt(Keys.savedFundingFactorPerSecondKey(market));\\n    }\\n\\n    // @dev set the saved funding factor\\n    // @param dataStore DataStore\\n    // @param market the market to set the funding factor for\\n    function setSavedFundingFactorPerSecond(DataStore dataStore, address market, int256 value) internal returns (int256) {\\n        return dataStore.setInt(Keys.savedFundingFactorPerSecondKey(market), value);\\n    }\\n\\n    // @dev get the funding exponent factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @return the funding exponent factor for a market\\n    function getFundingExponentFactor(DataStore dataStore, address market) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.fundingExponentFactorKey(market));\\n    }\\n\\n    // @dev get the funding fee amount per size for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short size\\n    // @return the funding fee amount per size for a market based on collateralToken\\n    function getFundingFeeAmountPerSize(DataStore dataStore, address market, address collateralToken, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.fundingFeeAmountPerSizeKey(market, collateralToken, isLong));\\n    }\\n\\n    // @dev get the claimable funding amount per size for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short size\\n    // @return the claimable funding amount per size for a market based on collateralToken\\n    function getClaimableFundingAmountPerSize(DataStore dataStore, address market, address collateralToken, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.claimableFundingAmountPerSizeKey(market, collateralToken, isLong));\\n    }\\n\\n    // @dev apply delta to the funding fee amount per size for a market\\n    // @param dataStore DataStore\\n    // @param market the market to set\\n    // @param collateralToken the collateralToken to set\\n    // @param isLong whether to set it for the long or short side\\n    // @param delta the delta to increment by\\n    function applyDeltaToFundingFeeAmountPerSize(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta\\n    ) internal {\\n        if (delta == 0) { return; }\\n\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.fundingFeeAmountPerSizeKey(market, collateralToken, isLong),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitFundingFeeAmountPerSizeUpdated(\\n            eventEmitter,\\n            market,\\n            collateralToken,\\n            isLong,\\n            delta,\\n            nextValue\\n        );\\n    }\\n\\n    // @dev apply delta to the claimable funding amount per size for a market\\n    // @param dataStore DataStore\\n    // @param market the market to set\\n    // @param collateralToken the collateralToken to set\\n    // @param isLong whether to set it for the long or short side\\n    // @param delta the delta to increment by\\n    function applyDeltaToClaimableFundingAmountPerSize(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta\\n    ) internal {\\n        if (delta == 0) { return; }\\n\\n        uint256 nextValue = dataStore.applyDeltaToUint(\\n            Keys.claimableFundingAmountPerSizeKey(market, collateralToken, isLong),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitClaimableFundingAmountPerSizeUpdated(\\n            eventEmitter,\\n            market,\\n            collateralToken,\\n            isLong,\\n            delta,\\n            nextValue\\n        );\\n    }\\n\\n    // @dev get the number of seconds since funding was updated for a market\\n    // @param market the market to check\\n    // @return the number of seconds since funding was updated for a market\\n    function getSecondsSinceFundingUpdated(DataStore dataStore, address market) internal view returns (uint256) {\\n        uint256 updatedAt = dataStore.getUint(Keys.fundingUpdatedAtKey(market));\\n        if (updatedAt == 0) { return 0; }\\n        return Chain.currentTimestamp() - updatedAt;\\n    }\\n\\n    // @dev get the borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the borrowing factor for a market\\n    function getBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.borrowingFactorKey(market, isLong));\\n    }\\n\\n    function getOptimalUsageFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.optimalUsageFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the borrowing exponent factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the borrowing exponent factor for a market\\n    function getBorrowingExponentFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.borrowingExponentFactorKey(market, isLong));\\n    }\\n\\n    // @dev get the cumulative borrowing factor for a market\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the cumulative borrowing factor for a market\\n    function getCumulativeBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorKey(market, isLong));\\n    }\\n\\n    // @dev increase the cumulative borrowing factor\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param market the market to increment the borrowing factor for\\n    // @param isLong whether to increment the long or short side\\n    // @param delta the increase amount\\n    function incrementCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLong,\\n        uint256 delta\\n    ) internal {\\n        uint256 nextCumulativeBorrowingFactor = dataStore.incrementUint(\\n            Keys.cumulativeBorrowingFactorKey(market, isLong),\\n            delta\\n        );\\n\\n        MarketEventUtils.emitBorrowingFactorUpdated(\\n            eventEmitter,\\n            market,\\n            isLong,\\n            delta,\\n            nextCumulativeBorrowingFactor\\n        );\\n    }\\n\\n    // @dev get the timestamp of when the cumulative borrowing factor was last updated\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the timestamp of when the cumulative borrowing factor was last updated\\n    function getCumulativeBorrowingFactorUpdatedAt(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market, isLong));\\n    }\\n\\n    // @dev get the number of seconds since the cumulative borrowing factor was last updated\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the number of seconds since the cumulative borrowing factor was last updated\\n    function getSecondsSinceCumulativeBorrowingFactorUpdated(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        uint256 updatedAt = getCumulativeBorrowingFactorUpdatedAt(dataStore, market, isLong);\\n        if (updatedAt == 0) { return 0; }\\n        return Chain.currentTimestamp() - updatedAt;\\n    }\\n\\n    // @dev update the total borrowing amount after a position changes size\\n    // this is the sum of all position.borrowingFactor * position.sizeInUsd\\n    // @param dataStore DataStore\\n    // @param market the market to update\\n    // @param isLong whether to update the long or short side\\n    // @param prevPositionSizeInUsd the previous position size in USD\\n    // @param prevPositionBorrowingFactor the previous position borrowing factor\\n    // @param nextPositionSizeInUsd the next position size in USD\\n    // @param nextPositionBorrowingFactor the next position borrowing factor\\n    function updateTotalBorrowing(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        uint256 prevPositionSizeInUsd,\\n        uint256 prevPositionBorrowingFactor,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) external {\\n        uint256 totalBorrowing = getNextTotalBorrowing(\\n            dataStore,\\n            market,\\n            isLong,\\n            prevPositionSizeInUsd,\\n            prevPositionBorrowingFactor,\\n            nextPositionSizeInUsd,\\n            nextPositionBorrowingFactor\\n        );\\n\\n        setTotalBorrowing(dataStore, market, isLong, totalBorrowing);\\n    }\\n\\n    // @dev get the next total borrowing amount after a position changes size\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @param prevPositionSizeInUsd the previous position size in USD\\n    // @param prevPositionBorrowingFactor the previous position borrowing factor\\n    // @param nextPositionSizeInUsd the next position size in USD\\n    // @param nextPositionBorrowingFactor the next position borrowing factor\\n    function getNextTotalBorrowing(\\n        DataStore dataStore,\\n        address market,\\n        bool isLong,\\n        uint256 prevPositionSizeInUsd,\\n        uint256 prevPositionBorrowingFactor,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) internal view returns (uint256) {\\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market, isLong);\\n        totalBorrowing -= Precision.applyFactor(prevPositionSizeInUsd, prevPositionBorrowingFactor);\\n        totalBorrowing += Precision.applyFactor(nextPositionSizeInUsd, nextPositionBorrowingFactor);\\n\\n        return totalBorrowing;\\n    }\\n\\n    // @dev get the next cumulative borrowing factor\\n    // @param dataStore DataStore\\n    // @param prices the prices of the market tokens\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to check the long or short side\\n    function getNextCumulativeBorrowingFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view returns (uint256, uint256, uint256) {\\n        uint256 durationInSeconds = getSecondsSinceCumulativeBorrowingFactorUpdated(dataStore, market.marketToken, isLong);\\n        uint256 borrowingFactorPerSecond = getBorrowingFactorPerSecond(\\n            dataStore,\\n            market,\\n            prices,\\n            isLong\\n        );\\n\\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, market.marketToken, isLong);\\n\\n        uint256 delta = durationInSeconds * borrowingFactorPerSecond;\\n        uint256 nextCumulativeBorrowingFactor = cumulativeBorrowingFactor + delta;\\n        return (nextCumulativeBorrowingFactor, delta, borrowingFactorPerSecond);\\n    }\\n\\n    // @dev get the borrowing factor per second\\n    // @param dataStore DataStore\\n    // @param market the market to get the borrowing factor per second for\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to get the factor for the long or short side\\n    function getBorrowingFactorPerSecond(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 reservedUsd = getReservedUsd(\\n            dataStore,\\n            market,\\n            prices,\\n            isLong\\n        );\\n\\n        if (reservedUsd == 0) { return 0; }\\n\\n        // check if the borrowing fee for the smaller side should be skipped\\n        // if skipBorrowingFeeForSmallerSide is true, and the longOpenInterest is exactly the same as the shortOpenInterest\\n        // then the borrowing fee would be charged for both sides, this should be very rare\\n        bool skipBorrowingFeeForSmallerSide = dataStore.getBool(Keys.SKIP_BORROWING_FEE_FOR_SMALLER_SIDE);\\n        if (skipBorrowingFeeForSmallerSide) {\\n            uint256 longOpenInterest = getOpenInterest(dataStore, market, true);\\n            uint256 shortOpenInterest = getOpenInterest(dataStore, market, false);\\n\\n            // if getting the borrowing factor for longs and if the longOpenInterest\\n            // is smaller than the shortOpenInterest, then return zero\\n            if (isLong && longOpenInterest < shortOpenInterest) {\\n                return 0;\\n            }\\n\\n            // if getting the borrowing factor for shorts and if the shortOpenInterest\\n            // is smaller than the longOpenInterest, then return zero\\n            if (!isLong && shortOpenInterest < longOpenInterest) {\\n                return 0;\\n            }\\n        }\\n\\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, false);\\n\\n        if (poolUsd == 0) {\\n            revert Errors.UnableToGetBorrowingFactorEmptyPoolUsd();\\n        }\\n\\n        uint256 optimalUsageFactor = getOptimalUsageFactor(dataStore, market.marketToken, isLong);\\n\\n        if (optimalUsageFactor != 0) {\\n            return getKinkBorrowingFactor(\\n                dataStore,\\n                market,\\n                isLong,\\n                reservedUsd,\\n                poolUsd,\\n                optimalUsageFactor\\n            );\\n        }\\n\\n        uint256 borrowingExponentFactor = getBorrowingExponentFactor(dataStore, market.marketToken, isLong);\\n        uint256 reservedUsdAfterExponent = Precision.applyExponentFactor(reservedUsd, borrowingExponentFactor);\\n\\n        uint256 reservedUsdToPoolFactor = Precision.toFactor(reservedUsdAfterExponent, poolUsd);\\n        uint256 borrowingFactor = getBorrowingFactor(dataStore, market.marketToken, isLong);\\n\\n        return Precision.applyFactor(reservedUsdToPoolFactor, borrowingFactor);\\n    }\\n\\n    function getKinkBorrowingFactor(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        bool isLong,\\n        uint256 reservedUsd,\\n        uint256 poolUsd,\\n        uint256 optimalUsageFactor\\n    ) internal view returns (uint256) {\\n        uint256 usageFactor = getUsageFactor(\\n            dataStore,\\n            market,\\n            isLong,\\n            reservedUsd,\\n            poolUsd\\n        );\\n\\n        uint256 baseBorrowingFactor = dataStore.getUint(Keys.baseBorrowingFactorKey(market.marketToken, isLong));\\n\\n        uint256 borrowingFactorPerSecond = Precision.applyFactor(\\n            usageFactor,\\n            baseBorrowingFactor\\n        );\\n\\n        if (usageFactor > optimalUsageFactor && Precision.FLOAT_PRECISION > optimalUsageFactor) {\\n            uint256 diff = usageFactor - optimalUsageFactor;\\n\\n            uint256 aboveOptimalUsageBorrowingFactor = dataStore.getUint(Keys.aboveOptimalUsageBorrowingFactorKey(market.marketToken, isLong));\\n            uint256 additionalBorrowingFactorPerSecond;\\n\\n            if (aboveOptimalUsageBorrowingFactor > baseBorrowingFactor) {\\n                additionalBorrowingFactorPerSecond = aboveOptimalUsageBorrowingFactor - baseBorrowingFactor;\\n            }\\n\\n            uint256 divisor = Precision.FLOAT_PRECISION - optimalUsageFactor;\\n\\n            borrowingFactorPerSecond += additionalBorrowingFactorPerSecond * diff / divisor;\\n        }\\n\\n        return borrowingFactorPerSecond;\\n    }\\n\\n    function distributePositionImpactPool(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market\\n    ) external {\\n        (uint256 distributionAmount, uint256 nextPositionImpactPoolAmount) = getPendingPositionImpactPoolDistributionAmount(dataStore, market);\\n\\n        if (distributionAmount != 0) {\\n            applyDeltaToPositionImpactPool(\\n                dataStore,\\n                eventEmitter,\\n                market,\\n                -distributionAmount.toInt256()\\n            );\\n\\n            MarketEventUtils.emitPositionImpactPoolDistributed(\\n                eventEmitter,\\n                market,\\n                distributionAmount,\\n                nextPositionImpactPoolAmount\\n            );\\n        }\\n\\n        dataStore.setUint(Keys.positionImpactPoolDistributedAtKey(market), Chain.currentTimestamp());\\n    }\\n\\n    function getNextPositionImpactPoolAmount(\\n        DataStore dataStore,\\n        address market\\n    ) internal view returns (uint256) {\\n        (/* uint256 distributionAmount */, uint256 nextPositionImpactPoolAmount) = getPendingPositionImpactPoolDistributionAmount(dataStore, market);\\n\\n        return nextPositionImpactPoolAmount;\\n    }\\n\\n    // @return (distributionAmount, nextPositionImpactPoolAmount)\\n    function getPendingPositionImpactPoolDistributionAmount(\\n        DataStore dataStore,\\n        address market\\n    ) internal view returns (uint256, uint256) {\\n        uint256 positionImpactPoolAmount = getPositionImpactPoolAmount(dataStore, market);\\n        if (positionImpactPoolAmount == 0) { return (0, positionImpactPoolAmount); }\\n\\n        uint256 distributionRate = dataStore.getUint(Keys.positionImpactPoolDistributionRateKey(market));\\n        if (distributionRate == 0) { return (0, positionImpactPoolAmount); }\\n\\n        uint256 minPositionImpactPoolAmount = dataStore.getUint(Keys.minPositionImpactPoolAmountKey(market));\\n        if (positionImpactPoolAmount <= minPositionImpactPoolAmount) { return (0, positionImpactPoolAmount); }\\n\\n        uint256 maxDistributionAmount = positionImpactPoolAmount - minPositionImpactPoolAmount;\\n\\n        uint256 durationInSeconds = getSecondsSincePositionImpactPoolDistributed(dataStore, market);\\n        uint256 distributionAmount = Precision.applyFactor(durationInSeconds, distributionRate);\\n\\n        if (distributionAmount > maxDistributionAmount) {\\n            distributionAmount = maxDistributionAmount;\\n        }\\n\\n        return (distributionAmount, positionImpactPoolAmount - distributionAmount);\\n    }\\n\\n    function getSecondsSincePositionImpactPoolDistributed(\\n        DataStore dataStore,\\n        address market\\n    ) internal view returns (uint256) {\\n        uint256 distributedAt = dataStore.getUint(Keys.positionImpactPoolDistributedAtKey(market));\\n        if (distributedAt == 0) { return 0; }\\n        return Chain.currentTimestamp() - distributedAt;\\n    }\\n\\n    // @dev get the total pending borrowing fees\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param isLong whether to check the long or short side\\n    function getTotalPendingBorrowingFees(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong\\n    ) internal view returns (uint256) {\\n        uint256 openInterest = getOpenInterest(\\n            dataStore,\\n            market,\\n            isLong\\n        );\\n\\n        (uint256 nextCumulativeBorrowingFactor, /* uint256 delta */, ) = getNextCumulativeBorrowingFactor(\\n            dataStore,\\n            market,\\n            prices,\\n            isLong\\n        );\\n\\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market.marketToken, isLong);\\n\\n        return Precision.applyFactor(openInterest, nextCumulativeBorrowingFactor) - totalBorrowing;\\n    }\\n\\n    // @dev get the total borrowing value\\n    // the total borrowing value is the sum of position.borrowingFactor * position.size / (10 ^ 30)\\n    // for all positions of the market\\n    // if borrowing APR is 1000% for 100 years, the cumulativeBorrowingFactor could be as high as 100 * 10 * (10 ** 30)\\n    // (100% is 10 ** 30 so 1000% is 10 * (10 ** 30))\\n    // since position.size is a USD value with 30 decimals, under this scenario, there may be overflow issues\\n    // if open interest exceeds (2 ** 256) / (10 ** 30) / (100 * 10 * (10 ** 30)) => 115,792,090,000,000 USD\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @return the total borrowing value\\n    function getTotalBorrowing(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.totalBorrowingKey(market, isLong));\\n    }\\n\\n    // @dev set the total borrowing value\\n    // @param dataStore DataStore\\n    // @param market the market to set\\n    // @param isLong whether to set the long or short side\\n    // @param value the value to set to\\n    function setTotalBorrowing(DataStore dataStore, address market, bool isLong, uint256 value) internal returns (uint256) {\\n        return dataStore.setUint(Keys.totalBorrowingKey(market, isLong), value);\\n    }\\n\\n    // @dev convert a USD value to number of market tokens\\n    // @param usdValue the input USD value\\n    // @param poolValue the value of the pool\\n    // @param supply the supply of market tokens\\n    // @return the number of market tokens\\n    function usdToMarketTokenAmount(\\n        uint256 usdValue,\\n        uint256 poolValue,\\n        uint256 supply\\n    ) internal pure returns (uint256) {\\n        // if the supply and poolValue is zero, use 1 USD as the token price\\n        if (supply == 0 && poolValue == 0) {\\n            return Precision.floatToWei(usdValue);\\n        }\\n\\n        // if the supply is zero and the poolValue is more than zero,\\n        // then include the poolValue for the amount of tokens minted so that\\n        // the market token price after mint would be 1 USD\\n        if (supply == 0 && poolValue > 0) {\\n            return Precision.floatToWei(poolValue + usdValue);\\n        }\\n\\n        // round market tokens down\\n        return Precision.mulDiv(supply, usdValue, poolValue);\\n    }\\n\\n    // @dev convert a number of market tokens to its USD value\\n    // @param marketTokenAmount the input number of market tokens\\n    // @param poolValue the value of the pool\\n    // @param supply the supply of market tokens\\n    // @return the USD value of the market tokens\\n    function marketTokenAmountToUsd(\\n        uint256 marketTokenAmount,\\n        uint256 poolValue,\\n        uint256 supply\\n    ) internal pure returns (uint256) {\\n        if (supply == 0) { revert Errors.EmptyMarketTokenSupply(); }\\n\\n        return Precision.mulDiv(poolValue, marketTokenAmount, supply);\\n    }\\n\\n    // @dev validate that the specified market exists and is enabled\\n    // @param dataStore DataStore\\n    // @param marketAddress the address of the market\\n    function validateEnabledMarket(DataStore dataStore, address marketAddress) external view {\\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n        validateEnabledMarket(dataStore, market);\\n    }\\n\\n    // @dev validate that the specified market exists and is enabled\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    function validateEnabledMarket(DataStore dataStore, Market.Props memory market) public view {\\n        if (market.marketToken == address(0)) {\\n            revert Errors.EmptyMarket();\\n        }\\n\\n        bool isMarketDisabled = dataStore.getBool(Keys.isMarketDisabledKey(market.marketToken));\\n        if (isMarketDisabled) {\\n            revert Errors.DisabledMarket(market.marketToken);\\n        }\\n    }\\n\\n    // @dev validate that the positions can be opened in the given market\\n    // @param market the market to check\\n    function validatePositionMarket(DataStore dataStore, Market.Props memory market) internal view {\\n        validateEnabledMarket(dataStore, market);\\n\\n        if (isSwapOnlyMarket(market)) {\\n            revert Errors.InvalidPositionMarket(market.marketToken);\\n        }\\n    }\\n\\n    function validatePositionMarket(DataStore dataStore, address marketAddress) internal view {\\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n        validatePositionMarket(dataStore, market);\\n    }\\n\\n    // @dev check if a market only supports swaps and not positions\\n    // @param market the market to check\\n    function isSwapOnlyMarket(Market.Props memory market) internal pure returns (bool) {\\n        return market.indexToken == address(0);\\n    }\\n\\n    // @dev check if the given token is a collateral token of the market\\n    // @param market the market to check\\n    // @param token the token to check\\n    function isMarketCollateralToken(Market.Props memory market, address token) internal pure returns (bool) {\\n        return token == market.longToken || token == market.shortToken;\\n    }\\n\\n    // @dev validate if the given token is a collateral token of the market\\n    // @param market the market to check\\n    // @param token the token to check\\n    function validateMarketCollateralToken(Market.Props memory market, address token) internal pure {\\n        if (!isMarketCollateralToken(market, token)) {\\n            revert Errors.InvalidCollateralTokenForMarket(market.marketToken, token);\\n        }\\n    }\\n\\n    // @dev get the enabled market, revert if the market does not exist or is not enabled\\n    // @param dataStore DataStore\\n    // @param marketAddress the address of the market\\n    function getEnabledMarket(DataStore dataStore, address marketAddress) public view returns (Market.Props memory) {\\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n        validateEnabledMarket(dataStore, market);\\n        return market;\\n    }\\n\\n    function getSwapPathMarket(DataStore dataStore, address marketAddress) internal view returns (Market.Props memory) {\\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\\n        validateSwapMarket(dataStore, market);\\n        return market;\\n    }\\n\\n    // @dev get a list of market values based on an input array of market addresses\\n    // @param swapPath list of market addresses\\n    function getSwapPathMarkets(DataStore dataStore, address[] memory swapPath) external view returns (Market.Props[] memory) {\\n        Market.Props[] memory markets = new Market.Props[](swapPath.length);\\n\\n        for (uint256 i; i < swapPath.length; i++) {\\n            address marketAddress = swapPath[i];\\n            markets[i] = getSwapPathMarket(dataStore, marketAddress);\\n        }\\n\\n        return markets;\\n    }\\n\\n    function validateSwapPath(DataStore dataStore, address[] memory swapPath) external view {\\n        uint256 maxSwapPathLength = dataStore.getUint(Keys.MAX_SWAP_PATH_LENGTH);\\n        if (swapPath.length > maxSwapPathLength) {\\n            revert Errors.MaxSwapPathLengthExceeded(swapPath.length, maxSwapPathLength);\\n        }\\n\\n        for (uint256 i; i < swapPath.length; i++) {\\n            address marketAddress = swapPath[i];\\n            validateSwapMarket(dataStore, marketAddress);\\n        }\\n    }\\n\\n    // @dev validate that the pending pnl is below the allowed amount\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param prices the prices of the market tokens\\n    // @param pnlFactorType the pnl factor type to check\\n    function validateMaxPnl(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bytes32 pnlFactorTypeForLongs,\\n        bytes32 pnlFactorTypeForShorts\\n    ) internal view {\\n        (bool isPnlFactorExceededForLongs, int256 pnlToPoolFactorForLongs, uint256 maxPnlFactorForLongs) = isPnlFactorExceeded(\\n            dataStore,\\n            market,\\n            prices,\\n            true,\\n            pnlFactorTypeForLongs\\n        );\\n\\n        if (isPnlFactorExceededForLongs) {\\n            revert Errors.PnlFactorExceededForLongs(pnlToPoolFactorForLongs, maxPnlFactorForLongs);\\n        }\\n\\n        (bool isPnlFactorExceededForShorts, int256 pnlToPoolFactorForShorts, uint256 maxPnlFactorForShorts) = isPnlFactorExceeded(\\n            dataStore,\\n            market,\\n            prices,\\n            false,\\n            pnlFactorTypeForShorts\\n        );\\n\\n        if (isPnlFactorExceededForShorts) {\\n            revert Errors.PnlFactorExceededForShorts(pnlToPoolFactorForShorts, maxPnlFactorForShorts);\\n        }\\n    }\\n\\n    // @dev check if the pending pnl exceeds the allowed amount\\n    // @param dataStore DataStore\\n    // @param oracle Oracle\\n    // @param market the market to check\\n    // @param isLong whether to check the long or short side\\n    // @param pnlFactorType the pnl factor type to check\\n    function isPnlFactorExceeded(\\n        DataStore dataStore,\\n        Oracle oracle,\\n        address market,\\n        bool isLong,\\n        bytes32 pnlFactorType\\n    ) internal view returns (bool, int256, uint256) {\\n        Market.Props memory _market = getEnabledMarket(dataStore, market);\\n        MarketPrices memory prices = getMarketPrices(oracle, _market);\\n\\n        return isPnlFactorExceeded(\\n            dataStore,\\n            _market,\\n            prices,\\n            isLong,\\n            pnlFactorType\\n        );\\n    }\\n\\n    // @dev check if the pending pnl exceeds the allowed amount\\n    // @param dataStore DataStore\\n    // @param _market the market to check\\n    // @param prices the prices of the market tokens\\n    // @param isLong whether to check the long or short side\\n    // @param pnlFactorType the pnl factor type to check\\n    function isPnlFactorExceeded(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketPrices memory prices,\\n        bool isLong,\\n        bytes32 pnlFactorType\\n    ) internal view returns (bool, int256, uint256) {\\n        int256 pnlToPoolFactor = getPnlToPoolFactor(dataStore, market, prices, isLong, true);\\n        uint256 maxPnlFactor = getMaxPnlFactor(dataStore, pnlFactorType, market.marketToken, isLong);\\n\\n        bool isExceeded = pnlToPoolFactor > 0 && pnlToPoolFactor.toUint256() > maxPnlFactor;\\n\\n        return (isExceeded, pnlToPoolFactor, maxPnlFactor);\\n    }\\n\\n    function getUiFeeFactor(DataStore dataStore, address account) internal view returns (uint256) {\\n        uint256 maxUiFeeFactor = dataStore.getUint(Keys.MAX_UI_FEE_FACTOR);\\n        uint256 uiFeeFactor = dataStore.getUint(Keys.uiFeeFactorKey(account));\\n\\n        return uiFeeFactor < maxUiFeeFactor ? uiFeeFactor : maxUiFeeFactor;\\n    }\\n\\n    function setUiFeeFactor(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        uint256 uiFeeFactor\\n    ) internal {\\n        uint256 maxUiFeeFactor = dataStore.getUint(Keys.MAX_UI_FEE_FACTOR);\\n\\n        if (uiFeeFactor > maxUiFeeFactor) {\\n            revert Errors.InvalidUiFeeFactor(uiFeeFactor, maxUiFeeFactor);\\n        }\\n\\n        dataStore.setUint(\\n            Keys.uiFeeFactorKey(account),\\n            uiFeeFactor\\n        );\\n\\n        MarketEventUtils.emitUiFeeFactorUpdated(eventEmitter, account, uiFeeFactor);\\n    }\\n\\n    function validateMarketTokenBalance(\\n        DataStore dataStore,\\n        Market.Props[] memory markets\\n    ) public view {\\n        for (uint256 i; i < markets.length; i++) {\\n            validateMarketTokenBalance(dataStore, markets[i]);\\n        }\\n    }\\n\\n    function validateMarketTokenBalance(\\n        DataStore dataStore,\\n        address _market\\n    ) public view {\\n        Market.Props memory market = getEnabledMarket(dataStore, _market);\\n        validateMarketTokenBalance(dataStore, market);\\n    }\\n\\n    function validateMarketTokenBalance(\\n        DataStore dataStore,\\n        Market.Props memory market\\n    ) public view {\\n        validateMarketTokenBalance(dataStore, market, market.longToken);\\n\\n        if (market.longToken == market.shortToken) {\\n            return;\\n        }\\n\\n        validateMarketTokenBalance(dataStore, market, market.shortToken);\\n    }\\n\\n    function validateMarketTokenBalance(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        address token\\n    ) internal view {\\n        if (market.marketToken == address(0) || token == address(0)) {\\n            revert Errors.EmptyAddressInMarketTokenBalanceValidation(market.marketToken, token);\\n        }\\n\\n        uint256 balance = IERC20(token).balanceOf(market.marketToken);\\n        uint256 expectedMinBalance = getExpectedMinTokenBalance(dataStore, market, token);\\n\\n        if (balance < expectedMinBalance) {\\n            revert Errors.InvalidMarketTokenBalance(market.marketToken, token, balance, expectedMinBalance);\\n        }\\n\\n        // funding fees can be claimed even if the collateral for positions that should pay funding fees\\n        // hasn't been reduced yet\\n        // due to that, funding fees and collateral is excluded from the expectedMinBalance calculation\\n        // and validated separately\\n\\n        // use 1 for the getCollateralSum divisor since getCollateralSum does not sum over both the\\n        // longToken and shortToken\\n        uint256 collateralAmount = getCollateralSum(dataStore, market.marketToken, token, true, 1);\\n        collateralAmount += getCollateralSum(dataStore, market.marketToken, token, false, 1);\\n\\n        if (balance < collateralAmount) {\\n            revert Errors.InvalidMarketTokenBalanceForCollateralAmount(market.marketToken, token, balance, collateralAmount);\\n        }\\n\\n        uint256 claimableFundingFeeAmount = dataStore.getUint(Keys.claimableFundingAmountKey(market.marketToken, token));\\n\\n        // in case of late liquidations, it may be possible for the claimableFundingFeeAmount to exceed the market token balance\\n        // but this should be very rare\\n        if (balance < claimableFundingFeeAmount) {\\n            revert Errors.InvalidMarketTokenBalanceForClaimableFunding(market.marketToken, token, balance, claimableFundingFeeAmount);\\n        }\\n    }\\n\\n    function getExpectedMinTokenBalance(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        address token\\n    ) internal view returns (uint256) {\\n        GetExpectedMinTokenBalanceCache memory cache;\\n\\n        // get the pool amount directly as MarketUtils.getPoolAmount will divide the amount by 2\\n        // for markets with the same long and short token\\n        cache.poolAmount = dataStore.getUint(Keys.poolAmountKey(market.marketToken, token));\\n        cache.swapImpactPoolAmount = getSwapImpactPoolAmount(dataStore, market.marketToken, token);\\n        cache.claimableCollateralAmount = dataStore.getUint(Keys.claimableCollateralAmountKey(market.marketToken, token));\\n        cache.claimableFeeAmount = dataStore.getUint(Keys.claimableFeeAmountKey(market.marketToken, token));\\n        cache.claimableUiFeeAmount = dataStore.getUint(Keys.claimableUiFeeAmountKey(market.marketToken, token));\\n        cache.affiliateRewardAmount = dataStore.getUint(Keys.affiliateRewardKey(market.marketToken, token));\\n\\n        // funding fees are excluded from this summation as claimable funding fees\\n        // are incremented without a corresponding decrease of the collateral of\\n        // other positions, the collateral of other positions is decreased when\\n        // those positions are updated\\n        return\\n            cache.poolAmount\\n            + cache.swapImpactPoolAmount\\n            + cache.claimableCollateralAmount\\n            + cache.claimableFeeAmount\\n            + cache.claimableUiFeeAmount\\n            + cache.affiliateRewardAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x64e0aef228f8e4118aab2136b466f76609f1b00c0e48bf2c6420f98b2e096d7f\",\"license\":\"BUSL-1.1\"},\"contracts/multichain/IMultichainProvider.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IMultichainProvider\\n */\\ninterface IMultichainProvider {\\n    struct BridgeOutParams {\\n        address provider;\\n        address account;\\n        address token;\\n        uint256 amount;\\n        uint256 srcChainId;\\n        bytes data;\\n    }\\n\\n    function bridgeOut(BridgeOutParams memory params) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xbe77538986f2f16f8d0b69b04e962070bcdb4941130b3f22a271201f222a46f8\",\"license\":\"BUSL-1.1\"},\"contracts/multichain/MultichainEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport { EventEmitter } from \\\"../event/EventEmitter.sol\\\";\\nimport { EventUtils } from \\\"../event/EventUtils.sol\\\";\\nimport { Cast } from \\\"../utils/Cast.sol\\\";\\n\\n/**\\n * @title MultichainEventUtils\\n */\\nlibrary MultichainEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n\\n    function emitMultichainBridgeIn(\\n        EventEmitter eventEmitter,\\n        address provider,\\n        address token,\\n        address account,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"provider\\\", provider);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"srcChainId\\\", srcChainId);\\n\\n        eventEmitter.emitEventLog1(\\\"MultichainBridgeIn\\\", Cast.toBytes32(account), eventData);\\n    }\\n\\n    function emitMultichainTransferIn(\\n        EventEmitter eventEmitter,\\n        address token,\\n        address account,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n        eventData.addressItems.setItem(1, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"srcChainId\\\", srcChainId);\\n\\n        eventEmitter.emitEventLog1(\\\"MultichainTransferIn\\\", Cast.toBytes32(account), eventData);\\n    }\\n\\n    function emitMultichainBridgeOut(\\n        EventEmitter eventEmitter,\\n        address provider,\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"provider\\\", provider);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"srcChainId\\\", srcChainId);\\n\\n        eventEmitter.emitEventLog1(\\\"MultichainBridgeOut\\\", Cast.toBytes32(receiver), eventData);\\n    }\\n\\n    function emitMultichainTransferOut(\\n        EventEmitter eventEmitter,\\n        address token,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n        eventData.addressItems.setItem(1, \\\"account\\\", account);\\n        eventData.addressItems.setItem(2, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"srcChainId\\\", srcChainId);\\n\\n        eventEmitter.emitEventLog1(\\\"MultichainTransferOut\\\", Cast.toBytes32(account), eventData);\\n    }\\n}\\n\",\"keccak256\":\"0xc3f4851de92901f8e844c3378d52231c10910b6e01b5eb4395640696331c4522\",\"license\":\"BUSL-1.1\"},\"contracts/multichain/MultichainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\n\\nimport \\\"./MultichainVault.sol\\\";\\nimport \\\"./MultichainEventUtils.sol\\\";\\nimport \\\"./IMultichainProvider.sol\\\";\\n\\n/**\\n * @title MultichainUtils\\n */\\nlibrary MultichainUtils {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * Records a deposit from another chain. IMultichainProvider has CONTROLLER role\\n     * @param provider the multichain provider contract\\n     * @param token address of the token being deposited\\n     * @param account user address on the source chain\\n     * @param amount the amount of tokens being deposited\\n     * @param srcChainId id of the source chain\\n     */\\n    function recordBridgeIn(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        MultichainVault multichainVault,\\n        IMultichainProvider provider,\\n        address token,\\n        address account,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) external {\\n        if (amount == 0) {\\n            revert Errors.EmptyMultichainTransferInAmount(account, token);\\n        }\\n\\n        // token should have been transferred to multichainVault by IMultichainProvider\\n        multichainVault.recordTransferIn(token, amount);\\n\\n        _increaseMultichainBalance(dataStore, eventEmitter, account, token, amount, srcChainId);\\n\\n        MultichainEventUtils.emitMultichainBridgeIn(\\n            eventEmitter,\\n            address(provider),\\n            token,\\n            account,\\n            amount,\\n            srcChainId\\n        );\\n    }\\n\\n    /**\\n     * Records a transfer of tokens into the multichain vault\\n     * @param account user address on the source chain\\n     * @param token address of the token being transferred\\n     * @param srcChainId id of the source chain\\n     */\\n    function recordTransferIn(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        MultichainVault multichainVault,\\n        address token,\\n        address account,\\n        uint256 srcChainId\\n    ) external returns (uint256) {\\n        // token should have been transferred to multichainVault\\n        uint256 amount = multichainVault.recordTransferIn(token);\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        _increaseMultichainBalance(dataStore, eventEmitter, account, token, amount, srcChainId);\\n\\n        return amount;\\n    }\\n\\n    function _increaseMultichainBalance(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        address token,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) private {\\n        dataStore.incrementUint(Keys.multichainBalanceKey(account, token), amount);\\n        MultichainEventUtils.emitMultichainTransferIn(eventEmitter, token, account, amount, srcChainId);\\n    }\\n\\n    /**\\n     * @dev transfer the specified amount of tokens from user's multichain balance to receiver\\n     * @param token the token to transfer\\n     * @param account the account for which the multichain balance is decreased\\n     * @param receiver the account to transfer to\\n     * @param amount the amount of tokens to transfer\\n     * @param srcChainId the source chain id\\n     */\\n    function transferOut(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        MultichainVault multichainVault,\\n        address token,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 srcChainId\\n    ) external {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        uint256 balance = getMultichainBalanceAmount(dataStore, account, token);\\n        if (balance < amount) {\\n            revert Errors.InsufficientMultichainBalance(account, token, balance, amount);\\n        }\\n\\n        dataStore.decrementUint(Keys.multichainBalanceKey(account, token), amount);\\n        multichainVault.transferOut(token, receiver, amount);\\n        MultichainEventUtils.emitMultichainTransferOut(eventEmitter, token, account, receiver, amount, srcChainId);\\n    }\\n\\n    function getMultichainBalanceAmount(\\n        DataStore dataStore,\\n        address account,\\n        address token\\n    ) public view returns (uint256) {\\n        return dataStore.getUint(Keys.multichainBalanceKey(account, token));\\n    }\\n\\n    function validateMultichainProvider(DataStore dataStore, address provider) external view {\\n        bytes32 providerKey = Keys.isMultichainProviderEnabledKey(provider);\\n        if (!dataStore.getBool(providerKey)) {\\n            revert Errors.InvalidMultichainProvider(provider);\\n        }\\n    }\\n\\n    function validateMultichainEndpoint(DataStore dataStore, address endpoint) external view {\\n        bytes32 endpointKey = Keys.isMultichainEndpointEnabledKey(endpoint);\\n        if (!dataStore.getBool(endpointKey)) {\\n            revert Errors.InvalidMultichainEndpoint(endpoint);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x173da5a7b1e330cfdbb6f5f78ca6e9c1dca1439fc6886025dd2c9af06b18f1b3\",\"license\":\"BUSL-1.1\"},\"contracts/multichain/MultichainVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n/**\\n * @title MultichainVault\\n * @dev Vault for crosschain deposits\\n */\\ncontract MultichainVault is StrictBank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n}\\n\",\"keccak256\":\"0xf3dc92390fd6ebe2f71535aa889e5fe258d73e6a8cc8d0b74fe9f94e3aae109b\",\"license\":\"BUSL-1.1\"},\"contracts/nonce/NonceUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\n// @title NonceUtils\\n// @dev Library to keep track of an incrementing nonce value\\nlibrary NonceUtils {\\n    // @dev get the current nonce value\\n    // @param dataStore DataStore\\n    function getCurrentNonce(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getUint(Keys.NONCE);\\n    }\\n\\n    // @dev increment the current nonce value\\n    // @param dataStore DataStore\\n    // @return the new nonce value\\n    function incrementNonce(DataStore dataStore) internal returns (uint256) {\\n        return dataStore.incrementUint(Keys.NONCE, 1);\\n    }\\n\\n    // @dev convenience function to create a bytes32 hash using the next nonce\\n    // it would be possible to use the nonce directly as an ID / key\\n    // however, for positions the key is a bytes32 value based on a hash of\\n    // the position values\\n    // so bytes32 is used instead for a standard key type\\n    // @param dataStore DataStore\\n    // @return bytes32 hash using the next nonce value\\n    function getNextKey(DataStore dataStore) internal returns (bytes32) {\\n        uint256 nonce = incrementNonce(dataStore);\\n        bytes32 key = getKey(dataStore, nonce);\\n\\n        return key;\\n    }\\n\\n    function getCurrentKey(DataStore dataStore) internal view returns (bytes32) {\\n        uint256 nonce = getCurrentNonce(dataStore);\\n        bytes32 key = getKey(dataStore, nonce);\\n\\n        return key;\\n    }\\n\\n    function getKey(DataStore dataStore, uint256 nonce) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(address(dataStore), nonce));\\n    }\\n}\\n\",\"keccak256\":\"0x2c1899b96634e9c726bab2fcf47da70410475bf02ae619c6801cdea348a0f50e\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/ChainlinkPriceFeedUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\nimport \\\"./IPriceFeed.sol\\\";\\n\\n// @title ChainlinkPriceFeedProviderUtils\\n// @dev Library for Chainlink price feed\\nlibrary ChainlinkPriceFeedUtils {\\n    // there is a small risk of stale pricing due to latency in price updates or if the chain is down\\n    // this is meant to be for temporary use until low latency price feeds are supported for all tokens\\n    function getPriceFeedPrice(DataStore dataStore, address token) internal view returns (bool, uint256) {\\n        address priceFeedAddress = dataStore.getAddress(Keys.priceFeedKey(token));\\n        if (priceFeedAddress == address(0)) {\\n            return (false, 0);\\n        }\\n\\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\\n\\n        (\\n            /* uint80 roundID */,\\n            int256 _price,\\n            /* uint256 startedAt */,\\n            uint256 timestamp,\\n            /* uint80 answeredInRound */\\n        ) = priceFeed.latestRoundData();\\n\\n        if (_price <= 0) {\\n            revert Errors.InvalidFeedPrice(token, _price);\\n        }\\n\\n        uint256 heartbeatDuration = dataStore.getUint(Keys.priceFeedHeartbeatDurationKey(token));\\n        if (Chain.currentTimestamp() > timestamp && Chain.currentTimestamp() - timestamp > heartbeatDuration) {\\n            revert Errors.ChainlinkPriceFeedNotUpdated(token, timestamp, heartbeatDuration);\\n        }\\n\\n        uint256 price = SafeCast.toUint256(_price);\\n        uint256 precision = getPriceFeedMultiplier(dataStore, token);\\n\\n        uint256 adjustedPrice = Precision.mulDiv(price, precision, Precision.FLOAT_PRECISION);\\n\\n        return (true, adjustedPrice);\\n    }\\n\\n    // @dev get the multiplier value to convert the external price feed price to the price of 1 unit of the token\\n    // represented with 30 decimals\\n    // for example, if USDC has 6 decimals and a price of 1 USD, one unit of USDC would have a price of\\n    // 1 / (10 ^ 6) * (10 ^ 30) => 1 * (10 ^ 24)\\n    // if the external price feed has 8 decimals, the price feed price would be 1 * (10 ^ 8)\\n    // in this case the priceFeedMultiplier should be 10 ^ 46\\n    // the conversion of the price feed price would be 1 * (10 ^ 8) * (10 ^ 46) / (10 ^ 30) => 1 * (10 ^ 24)\\n    // formula for decimals for price feed multiplier: 60 - (external price feed decimals) - (token decimals)\\n    //\\n    // @param dataStore DataStore\\n    // @param token the token to get the price feed multiplier for\\n    // @return the price feed multipler\\n    function getPriceFeedMultiplier(DataStore dataStore, address token) internal view returns (uint256) {\\n        uint256 multiplier = dataStore.getUint(Keys.priceFeedMultiplierKey(token));\\n\\n        if (multiplier == 0) {\\n            revert Errors.EmptyChainlinkPriceFeedMultiplier(token);\\n        }\\n\\n        return multiplier;\\n    }\\n}\\n\",\"keccak256\":\"0xf2abeec57d21410a8306356562077b0aedb77f15be6a5d1451c915c0c20b2fe6\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleUtils.sol\\\";\\n\\n// @title IOracleProvider\\n// @dev Interface for an oracle provider\\ninterface IOracleProvider {\\n    function getOraclePrice(\\n        address token,\\n        bytes memory data\\n    ) external returns (OracleUtils.ValidatedPrice memory);\\n}\\n\",\"keccak256\":\"0xf74dbcd2dc47ac64178cecd78724c87083533b3d0ba1a7b1150c31fc5fc591c4\",\"license\":\"MIT\"},\"contracts/oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// @title IPriceFeed\\n// @dev Interface for a price feed\\ninterface IPriceFeed {\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xe85508440a7b9fc8b60b2594cc6d3bbc547d62bba1097ee85740faa84a4aae46\",\"license\":\"MIT\"},\"contracts/oracle/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { AggregatorV2V3Interface } from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\nimport \\\"./OracleUtils.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"./ChainlinkPriceFeedUtils.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\nimport \\\"../chain/Chain.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\nimport \\\"../utils/Uint256Mask.sol\\\";\\n\\n// @title Oracle\\n// @dev Contract to validate and store signed values\\n// Some calculations e.g. calculating the size in tokens for a position\\n// may not work with zero / negative prices\\n// as a result, zero / negative prices are considered empty / invalid\\n// A market may need to be manually settled in this case\\ncontract Oracle is RoleModule {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using Price for Price.Props;\\n    using Uint256Mask for Uint256Mask.Mask;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    DataStore public immutable dataStore;\\n    EventEmitter public immutable eventEmitter;\\n    AggregatorV2V3Interface public immutable sequencerUptimeFeed;\\n\\n    // tokensWithPrices stores the tokens with prices that have been set\\n    // this is used in clearAllPrices to help ensure that all token prices\\n    // set in setPrices are cleared after use\\n    EnumerableSet.AddressSet internal tokensWithPrices;\\n    mapping(address => Price.Props) public primaryPrices;\\n\\n    uint256 public minTimestamp;\\n    uint256 public maxTimestamp;\\n\\n    constructor(\\n        RoleStore _roleStore,\\n        DataStore _dataStore,\\n        EventEmitter _eventEmitter,\\n        AggregatorV2V3Interface _sequencerUptimeFeed\\n    ) RoleModule(_roleStore) {\\n        dataStore = _dataStore;\\n        eventEmitter = _eventEmitter;\\n        sequencerUptimeFeed = _sequencerUptimeFeed;\\n    }\\n\\n    // this can be used to help ensure that on-chain prices are updated\\n    // before actions dependent on those on-chain prices are allowed\\n    // additionally, this can also be used to provide a grace period for\\n    // users to top up collateral before liquidations occur\\n    function validateSequencerUp() external view {\\n        if (address(sequencerUptimeFeed) == address(0)) {\\n            return;\\n        }\\n\\n        (\\n            /*uint80 roundID*/,\\n            int256 answer,\\n            uint256 startedAt,\\n            /*uint256 updatedAt*/,\\n            /*uint80 answeredInRound*/\\n        ) = sequencerUptimeFeed.latestRoundData();\\n\\n        // answer == 0: sequencer is up\\n        // answer == 1: sequencer is down\\n        bool isSequencerUp = answer == 0;\\n        if (!isSequencerUp) {\\n            revert Errors.SequencerDown();\\n        }\\n\\n        uint256 sequencerGraceDuration = dataStore.getUint(Keys.SEQUENCER_GRACE_DURATION);\\n\\n        // ensure the grace duration has passed after the\\n        // sequencer is back up.\\n        uint256 timeSinceUp = block.timestamp - startedAt;\\n        if (timeSinceUp <= sequencerGraceDuration) {\\n            revert Errors.SequencerGraceDurationNotYetPassed(timeSinceUp, sequencerGraceDuration);\\n        }\\n    }\\n\\n    function setPrices(\\n        OracleUtils.SetPricesParams memory params\\n    ) external onlyController {\\n        OracleUtils.ValidatedPrice[] memory prices = _validatePrices(params, false);\\n\\n        _setPrices(prices);\\n    }\\n\\n    function setPricesForAtomicAction(\\n        OracleUtils.SetPricesParams memory params\\n    ) external onlyController {\\n        OracleUtils.ValidatedPrice[] memory prices = _validatePrices(params, true);\\n\\n        _setPrices(prices);\\n    }\\n\\n    // @dev set the primary price\\n    // @param token the token to set the price for\\n    // @param price the price value to set to\\n    function setPrimaryPrice(address token, Price.Props memory price) external onlyController {\\n        _setPrimaryPrice(token, price);\\n    }\\n\\n    function setTimestamps(uint256 _minTimestamp, uint256 _maxTimestamp) external onlyController {\\n        minTimestamp = _minTimestamp;\\n        maxTimestamp = _maxTimestamp;\\n    }\\n\\n    // @dev clear all prices\\n    function clearAllPrices() external onlyController {\\n        uint256 length = tokensWithPrices.length();\\n        for (uint256 i; i < length; i++) {\\n            address token = tokensWithPrices.at(0);\\n            _removePrimaryPrice(token);\\n        }\\n\\n        minTimestamp = 0;\\n        maxTimestamp = 0;\\n    }\\n\\n    // @dev get the length of tokensWithPrices\\n    // @return the length of tokensWithPrices\\n    function getTokensWithPricesCount() external view returns (uint256) {\\n        return tokensWithPrices.length();\\n    }\\n\\n    // @dev get the tokens of tokensWithPrices for the specified indexes\\n    // @param start the start index, the value for this index will be included\\n    // @param end the end index, the value for this index will not be included\\n    // @return the tokens of tokensWithPrices for the specified indexes\\n    function getTokensWithPrices(uint256 start, uint256 end) external view returns (address[] memory) {\\n        return tokensWithPrices.valuesAt(start, end);\\n    }\\n\\n    // @dev get the primary price of a token\\n    // @param token the token to get the price for\\n    // @return the primary price of a token\\n    function getPrimaryPrice(address token) external view returns (Price.Props memory) {\\n        if (token == address(0)) { return Price.Props(0, 0); }\\n\\n        Price.Props memory price = primaryPrices[token];\\n        if (price.isEmpty()) {\\n            revert Errors.EmptyPrimaryPrice(token);\\n        }\\n\\n        return price;\\n    }\\n\\n    function validatePrices(\\n        OracleUtils.SetPricesParams memory params,\\n        bool forAtomicAction\\n    ) external onlyController returns (OracleUtils.ValidatedPrice[] memory) {\\n        return _validatePrices(params, forAtomicAction);\\n    }\\n\\n    // @dev validate and set prices\\n    // @param params OracleUtils.SetPricesParams\\n    function _setPrices(\\n        OracleUtils.ValidatedPrice[] memory prices\\n    ) internal {\\n        // in case of gasless relay the prices are not required if there is no need to swap fee tokens\\n        if (prices.length == 0) {\\n            return;\\n        }\\n\\n        if (tokensWithPrices.length() != 0) {\\n            revert Errors.NonEmptyTokensWithPrices(tokensWithPrices.length());\\n        }\\n\\n        uint256 _minTimestamp = prices[0].timestamp;\\n        uint256 _maxTimestamp = prices[0].timestamp;\\n\\n        for (uint256 i; i < prices.length; i++) {\\n            OracleUtils.ValidatedPrice memory validatedPrice = prices[i];\\n\\n            _setPrimaryPrice(validatedPrice.token, Price.Props(\\n                validatedPrice.min,\\n                validatedPrice.max\\n            ));\\n\\n            if (validatedPrice.timestamp < _minTimestamp) {\\n                _minTimestamp = validatedPrice.timestamp;\\n            }\\n\\n            if (validatedPrice.timestamp > _maxTimestamp) {\\n                _maxTimestamp = validatedPrice.timestamp;\\n            }\\n\\n            _emitOraclePriceUpdated(\\n                validatedPrice.token,\\n                validatedPrice.min,\\n                validatedPrice.max,\\n                validatedPrice.timestamp,\\n                validatedPrice.provider\\n            );\\n        }\\n\\n        uint256 maxRange = dataStore.getUint(Keys.MAX_ORACLE_TIMESTAMP_RANGE);\\n        if (_maxTimestamp - _minTimestamp > maxRange) {\\n            revert Errors.MaxOracleTimestampRangeExceeded(_maxTimestamp - _minTimestamp, maxRange);\\n        }\\n\\n        minTimestamp = _minTimestamp;\\n        maxTimestamp = _maxTimestamp;\\n    }\\n\\n    function _validatePrices(\\n        OracleUtils.SetPricesParams memory params,\\n        bool forAtomicAction\\n    ) internal returns (OracleUtils.ValidatedPrice[] memory) {\\n        if (params.tokens.length != params.providers.length) {\\n            revert Errors.InvalidOracleSetPricesProvidersParam(params.tokens.length, params.providers.length);\\n        }\\n\\n        if (params.tokens.length != params.data.length) {\\n            revert Errors.InvalidOracleSetPricesDataParam(params.tokens.length, params.data.length);\\n        }\\n\\n        OracleUtils.ValidatedPrice[] memory prices = new OracleUtils.ValidatedPrice[](params.tokens.length);\\n\\n        if (params.tokens.length == 0) {\\n            return prices;\\n        }\\n\\n        uint256 maxPriceAge = forAtomicAction ? dataStore.getUint(Keys.MAX_ATOMIC_ORACLE_PRICE_AGE) : dataStore.getUint(Keys.MAX_ORACLE_PRICE_AGE);\\n        uint256 maxRefPriceDeviationFactor = dataStore.getUint(Keys.MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR);\\n\\n        for (uint256 i; i < params.tokens.length; i++) {\\n            address provider = params.providers[i];\\n\\n            if (!dataStore.getBool(Keys.isOracleProviderEnabledKey(provider))) {\\n                revert Errors.InvalidOracleProvider(provider);\\n            }\\n\\n            address token = params.tokens[i];\\n\\n            bool isAtomicProvider = dataStore.getBool(Keys.isAtomicOracleProviderKey(provider));\\n\\n            // if the action is atomic then only validate that the provider is an\\n            // atomic provider\\n            // else, validate that the provider matches the oracleProviderForToken\\n            //\\n            // since for atomic actions, any atomic provider can be used, it is\\n            // recommended that only one atomic provider is configured per token\\n            // otherwise there is a risk that if there is a difference in pricing\\n            // between atomic oracle providers for a token, a user could use that\\n            // to gain a profit by alternating actions between the two atomic\\n            // providers\\n            if (forAtomicAction) {\\n                if (!isAtomicProvider) {\\n                    revert Errors.NonAtomicOracleProvider(provider);\\n                }\\n            } else {\\n                address expectedProvider = dataStore.getAddress(Keys.oracleProviderForTokenKey(token));\\n                if (provider != expectedProvider) {\\n                    revert Errors.InvalidOracleProviderForToken(provider, expectedProvider);\\n                }\\n            }\\n\\n            bytes memory data = params.data[i];\\n\\n            OracleUtils.ValidatedPrice memory validatedPrice = IOracleProvider(provider).getOraclePrice(\\n                token,\\n                data\\n            );\\n\\n            // for atomic providers, the timestamp will be the current block's timestamp\\n            // the timestamp should not be adjusted\\n            if (!isAtomicProvider) {\\n                uint256 timestampAdjustment = dataStore.getUint(Keys.oracleTimestampAdjustmentKey(provider, token));\\n                validatedPrice.timestamp -= timestampAdjustment;\\n            }\\n\\n            if (validatedPrice.timestamp + maxPriceAge < Chain.currentTimestamp()) {\\n                revert Errors.MaxPriceAgeExceeded(validatedPrice.timestamp, Chain.currentTimestamp());\\n            }\\n\\n            // for atomic providers, assume that Chainlink would be the main provider\\n            // so it would be redundant to re-fetch the Chainlink price for validation\\n            if (!isAtomicProvider) {\\n                (bool hasRefPrice, uint256 refPrice) = ChainlinkPriceFeedUtils.getPriceFeedPrice(dataStore, token);\\n\\n                if (hasRefPrice) {\\n                    _validateRefPrice(\\n                        token,\\n                        validatedPrice.min,\\n                        refPrice,\\n                        maxRefPriceDeviationFactor\\n                    );\\n\\n                    _validateRefPrice(\\n                        token,\\n                        validatedPrice.max,\\n                        refPrice,\\n                        maxRefPriceDeviationFactor\\n                    );\\n                }\\n            }\\n\\n            prices[i] = validatedPrice;\\n        }\\n\\n        return prices;\\n    }\\n\\n    function _validateRefPrice(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    ) internal pure {\\n        uint256 diff = Calc.diff(price, refPrice);\\n        uint256 diffFactor = Precision.toFactor(diff, refPrice);\\n\\n        if (diffFactor > maxRefPriceDeviationFactor) {\\n            revert Errors.MaxRefPriceDeviationExceeded(\\n                token,\\n                price,\\n                refPrice,\\n                maxRefPriceDeviationFactor\\n            );\\n        }\\n    }\\n\\n    function _setPrimaryPrice(address token, Price.Props memory price) internal {\\n        if (price.min > price.max) {\\n            revert Errors.InvalidMinMaxForPrice(token, price.min, price.max);\\n        }\\n\\n        Price.Props memory existingPrice = primaryPrices[token];\\n\\n        if (!existingPrice.isEmpty()) {\\n            revert Errors.PriceAlreadySet(token, existingPrice.min, existingPrice.max);\\n        }\\n\\n        primaryPrices[token] = price;\\n        tokensWithPrices.add(token);\\n    }\\n\\n    function _removePrimaryPrice(address token) internal {\\n        delete primaryPrices[token];\\n        tokensWithPrices.remove(token);\\n    }\\n\\n    function _emitOraclePriceUpdated(\\n        address token,\\n        uint256 minPrice,\\n        uint256 maxPrice,\\n        uint256 timestamp,\\n        address provider\\n    ) internal {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n        eventData.addressItems.setItem(1, \\\"provider\\\", provider);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"minPrice\\\", minPrice);\\n        eventData.uintItems.setItem(1, \\\"maxPrice\\\", maxPrice);\\n        eventData.uintItems.setItem(2, \\\"timestamp\\\", timestamp);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OraclePriceUpdate\\\",\\n            Cast.toBytes32(token),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x814b0ec9e4c530bbf798eb9a93490ed72ddd59416bf331fedc8a296e6762b437\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\n\\n// @title OracleUtils\\n// @dev Library for oracle functions\\nlibrary OracleUtils {\\n    using Array for uint256[];\\n\\n    struct SetPricesParams {\\n        address[] tokens;\\n        address[] providers;\\n        bytes[] data;\\n    }\\n\\n    struct ValidatedPrice {\\n        address token;\\n        uint256 min;\\n        uint256 max;\\n        uint256 timestamp;\\n        address provider;\\n    }\\n\\n    struct SimulatePricesParams {\\n        address[] primaryTokens;\\n        Price.Props[] primaryPrices;\\n        uint256 minTimestamp;\\n        uint256 maxTimestamp;\\n    }\\n\\n    function isOracleError(bytes4 errorSelector) internal pure returns (bool) {\\n        if (isOracleTimestampError(errorSelector)) {\\n            return true;\\n        }\\n\\n        if (isEmptyPriceError(errorSelector)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function isEmptyPriceError(bytes4 errorSelector) internal pure returns (bool) {\\n        if (errorSelector == Errors.EmptyPrimaryPrice.selector) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function isOracleTimestampError(bytes4 errorSelector) internal pure returns (bool) {\\n        if (errorSelector == Errors.OracleTimestampsAreLargerThanRequestExpirationTime.selector) {\\n            return true;\\n        }\\n\\n        if (errorSelector == Errors.OracleTimestampsAreSmallerThanRequired.selector) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x76cec78707c742efd9b6f8e50a3ab441fd588ac226d5ae7a707ea8fdff0da09c\",\"license\":\"BUSL-1.1\"},\"contracts/order/BaseOrderUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Order.sol\\\";\\nimport \\\"../market/Market.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../referral/IReferralStorage.sol\\\";\\n\\nimport \\\"../order/OrderVault.sol\\\";\\n\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../swap/SwapHandler.sol\\\";\\n\\nimport \\\"../multichain/MultichainVault.sol\\\";\\n\\n// @title Order\\n// @dev Library for common order functions used in OrderUtils, IncreaseOrderUtils\\n// DecreaseOrderUtils, SwapOrderUtils\\nlibrary BaseOrderUtils {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n\\n    using Order for Order.Props;\\n    using Price for Price.Props;\\n\\n    // @dev ExecuteOrderParams struct used in executeOrder to avoid stack\\n    // too deep errors\\n    //\\n    // @param contracts ExecuteOrderParamsContracts\\n    // @param key the key of the order to execute\\n    // @param order the order to execute\\n    // @param swapPathMarkets the market values of the markets in the swapPath\\n    // @param minOracleTimestamp the min oracle timestamp\\n    // @param maxOracleTimestamp the max oracle timestamp\\n    // @param market market values of the trading market\\n    // @param keeper the keeper sending the transaction\\n    // @param startingGas the starting gas\\n    // @param secondaryOrderType the secondary order type\\n    struct ExecuteOrderParams {\\n        ExecuteOrderParamsContracts contracts;\\n        bytes32 key;\\n        Order.Props order;\\n        Market.Props[] swapPathMarkets;\\n        uint256 minOracleTimestamp;\\n        uint256 maxOracleTimestamp;\\n        Market.Props market;\\n        address keeper;\\n        uint256 startingGas;\\n        Order.SecondaryOrderType secondaryOrderType;\\n    }\\n\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param orderVault OrderVault\\n    // @param oracle Oracle\\n    // @param swapHandler SwapHandler\\n    // @param referralStorage IReferralStorage\\n    struct ExecuteOrderParamsContracts {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        MultichainVault multichainVault;\\n        OrderVault orderVault;\\n        Oracle oracle;\\n        SwapHandler swapHandler;\\n        IReferralStorage referralStorage;\\n    }\\n\\n    struct GetExecutionPriceCache {\\n        uint256 price;\\n        uint256 executionPrice;\\n        int256 adjustedPriceImpactUsd;\\n    }\\n\\n    function isSupportedOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketSwap ||\\n               orderType == Order.OrderType.LimitSwap ||\\n               orderType == Order.OrderType.MarketIncrease ||\\n               orderType == Order.OrderType.MarketDecrease ||\\n               orderType == Order.OrderType.LimitIncrease ||\\n               orderType == Order.OrderType.LimitDecrease ||\\n               orderType == Order.OrderType.StopIncrease ||\\n               orderType == Order.OrderType.StopLossDecrease ||\\n               orderType == Order.OrderType.Liquidation;\\n    }\\n\\n    // @dev check if an orderType is a market order\\n    // @param orderType the order type\\n    // @return whether an orderType is a market order\\n    function isMarketOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        // a liquidation order is not considered as a market order\\n        return orderType == Order.OrderType.MarketSwap ||\\n               orderType == Order.OrderType.MarketIncrease ||\\n               orderType == Order.OrderType.MarketDecrease;\\n    }\\n\\n    // @dev check if an orderType is a swap order\\n    // @param orderType the order type\\n    // @return whether an orderType is a swap order\\n    function isSwapOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketSwap ||\\n               orderType == Order.OrderType.LimitSwap;\\n    }\\n\\n    // @dev check if an orderType is a position order\\n    // @param orderType the order type\\n    // @return whether an orderType is a position order\\n    function isPositionOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return isIncreaseOrder(orderType) || isDecreaseOrder(orderType);\\n    }\\n\\n    // @dev check if an orderType is an increase order\\n    // @param orderType the order type\\n    // @return whether an orderType is an increase order\\n    function isIncreaseOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketIncrease ||\\n               orderType == Order.OrderType.LimitIncrease ||\\n               orderType == Order.OrderType.StopIncrease;\\n    }\\n\\n    // @dev check if an orderType is a decrease order\\n    // @param orderType the order type\\n    // @return whether an orderType is a decrease order\\n    function isDecreaseOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.MarketDecrease ||\\n               orderType == Order.OrderType.LimitDecrease ||\\n               orderType == Order.OrderType.StopLossDecrease ||\\n               orderType == Order.OrderType.Liquidation;\\n    }\\n\\n    // @dev check if an orderType is a liquidation order\\n    // @param orderType the order type\\n    // @return whether an orderType is a liquidation order\\n    function isLiquidationOrder(Order.OrderType orderType) internal pure returns (bool) {\\n        return orderType == Order.OrderType.Liquidation;\\n    }\\n\\n    // @dev validate the price for increase / decrease orders based on the triggerPrice\\n    // the acceptablePrice for increase / decrease orders is validated in getExecutionPrice\\n    //\\n    // it is possible to update the oracle to support a primaryPrice and a secondaryPrice\\n    // which would allow for stop-loss orders to be executed at exactly the triggerPrice\\n    //\\n    // however, this may lead to gaming issues, an example:\\n    // - the current price is $2020\\n    // - a user has a long position and creates a stop-loss decrease order for < $2010\\n    // - if the order has a swap from ETH to USDC and the user is able to cause the order\\n    // to be frozen / unexecutable by manipulating state or otherwise\\n    // - then if price decreases to $2000, and the user is able to manipulate state such that\\n    // the order becomes executable with $2010 being used as the price instead\\n    // - then the user would be able to perform the swap at a higher price than should possible\\n    //\\n    // additionally, using the exact order's triggerPrice could lead to gaming issues during times\\n    // of volatility due to users setting tight stop-losses to minimize loss while betting on a\\n    // directional price movement, fees and price impact should help a bit with this, but there\\n    // still may be some probability of success\\n    //\\n    // the order keepers can use the closest oracle price to the triggerPrice for execution, which\\n    // should lead to similar order execution prices with reduced gaming risks\\n    //\\n    // if an order is frozen, the frozen order keepers should use the most recent price for order\\n    // execution instead\\n    //\\n    // @param oracle Oracle\\n    // @param indexToken the index token\\n    // @param orderType the order type\\n    // @param triggerPrice the order's triggerPrice\\n    // @param isLong whether the order is for a long or short\\n    function validateOrderTriggerPrice(\\n        Oracle oracle,\\n        address indexToken,\\n        Order.OrderType orderType,\\n        uint256 triggerPrice,\\n        bool isLong\\n    ) internal view {\\n        if (\\n            isSwapOrder(orderType) ||\\n            isMarketOrder(orderType) ||\\n            isLiquidationOrder(orderType)\\n        ) {\\n            return;\\n        }\\n\\n        Price.Props memory primaryPrice = oracle.getPrimaryPrice(indexToken);\\n\\n        // for limit increase long positions:\\n        //      - the order should be executed when the oracle price is <= triggerPrice\\n        //      - primaryPrice.max should be used for the oracle price\\n        // for limit increase short positions:\\n        //      - the order should be executed when the oracle price is >= triggerPrice\\n        //      - primaryPrice.min should be used for the oracle price\\n        if (orderType == Order.OrderType.LimitIncrease) {\\n            bool ok = isLong ? primaryPrice.max <= triggerPrice : primaryPrice.min >= triggerPrice;\\n\\n            if (!ok) {\\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\\n            }\\n\\n            return;\\n        }\\n\\n        // for stop increase long positions:\\n        //      - the order should be executed when the oracle price is >= triggerPrice\\n        //      - primaryPrice.max should be used for the oracle price\\n        // for stop increase short positions:\\n        //      - the order should be executed when the oracle price is <= triggerPrice\\n        //      - primaryPrice.min should be used for the oracle price\\n        if (orderType == Order.OrderType.StopIncrease) {\\n            bool ok = isLong ? primaryPrice.max >= triggerPrice : primaryPrice.min <= triggerPrice;\\n\\n            if (!ok) {\\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\\n            }\\n\\n            return;\\n        }\\n\\n        // for limit decrease long positions:\\n        //      - the order should be executed when the oracle price is >= triggerPrice\\n        //      - primaryPrice.min should be used for the oracle price\\n        // for limit decrease short positions:\\n        //      - the order should be executed when the oracle price is <= triggerPrice\\n        //      - primaryPrice.max should be used for the oracle price\\n        if (orderType == Order.OrderType.LimitDecrease) {\\n            bool ok = isLong ? primaryPrice.min >= triggerPrice : primaryPrice.max <= triggerPrice;\\n\\n            if (!ok) {\\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\\n            }\\n\\n            return;\\n        }\\n\\n        // for stop-loss decrease long positions:\\n        //      - the order should be executed when the oracle price is <= triggerPrice\\n        //      - primaryPrice.min should be used for the oracle price\\n        // for stop-loss decrease short positions:\\n        //      - the order should be executed when the oracle price is >= triggerPrice\\n        //      - primaryPrice.max should be used for the oracle price\\n        if (orderType == Order.OrderType.StopLossDecrease) {\\n            bool ok = isLong ? primaryPrice.min <= triggerPrice : primaryPrice.max >= triggerPrice;\\n\\n            if (!ok) {\\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\\n            }\\n\\n            return;\\n        }\\n\\n        revert Errors.UnsupportedOrderType(uint256(orderType));\\n    }\\n\\n    function validateOrderValidFromTime(\\n        Order.OrderType orderType,\\n        uint256 validFromTime\\n    ) internal view {\\n        if (isMarketOrder(orderType)) {\\n            return;\\n        }\\n\\n        uint256 currentTimestamp = Chain.currentTimestamp();\\n        if (validFromTime > currentTimestamp) {\\n            revert Errors.OrderValidFromTimeNotReached(validFromTime, currentTimestamp);\\n        }\\n    }\\n\\n    function getExecutionPriceForIncrease(\\n        uint256 sizeDeltaUsd,\\n        uint256 sizeDeltaInTokens,\\n        uint256 acceptablePrice,\\n        bool isLong\\n    ) internal pure returns (uint256) {\\n        if (sizeDeltaInTokens == 0) {\\n            revert Errors.EmptySizeDeltaInTokens();\\n        }\\n\\n        uint256 executionPrice = sizeDeltaUsd / sizeDeltaInTokens;\\n\\n        // increase order:\\n        //     - long: executionPrice should be smaller than acceptablePrice\\n        //     - short: executionPrice should be larger than acceptablePrice\\n        if (\\n            (isLong && executionPrice <= acceptablePrice)  ||\\n            (!isLong && executionPrice >= acceptablePrice)\\n        ) {\\n            return executionPrice;\\n        }\\n\\n        // the validateOrderTriggerPrice function should have validated if the price fulfills\\n        // the order's trigger price\\n        //\\n        // for increase orders, the negative price impact is not capped\\n        //\\n        // for both increase and decrease orders, if it is due to price impact that the\\n        // order cannot be fulfilled then the order should be frozen\\n        //\\n        // this is to prevent gaming by manipulation of the price impact value\\n        //\\n        // usually it should be costly to game the price impact value\\n        // however, for certain cases, e.g. a user already has a large position opened\\n        // the user may create limit orders that would only trigger after they close\\n        // their position, this gives the user the option to cancel the pending order if\\n        // prices do not move in their favour or to close their position and let the order\\n        // execute if prices move in their favour\\n        //\\n        // it may also be possible for users to prevent the execution of orders from other users\\n        // by manipulating the price impact, though this should be costly\\n        revert Errors.OrderNotFulfillableAtAcceptablePrice(executionPrice, acceptablePrice);\\n    }\\n\\n    function getExecutionPriceForDecrease(\\n        Price.Props memory indexTokenPrice,\\n        uint256 positionSizeInUsd,\\n        uint256 positionSizeInTokens,\\n        uint256 sizeDeltaUsd,\\n        int256 priceImpactUsd,\\n        uint256 acceptablePrice,\\n        bool isLong\\n    ) internal pure returns (uint256) {\\n        GetExecutionPriceCache memory cache;\\n\\n        // decrease order:\\n        //     - long: use the smaller price\\n        //     - short: use the larger price\\n        cache.price = indexTokenPrice.pickPrice(!isLong);\\n        cache.executionPrice = cache.price;\\n\\n        // using closing of long positions as an example\\n        // realized pnl is calculated as totalPositionPnl * sizeDeltaInTokens / position.sizeInTokens\\n        // totalPositionPnl: position.sizeInTokens * executionPrice - position.sizeInUsd\\n        // sizeDeltaInTokens: position.sizeInTokens * sizeDeltaUsd / position.sizeInUsd\\n        // realized pnl: (position.sizeInTokens * executionPrice - position.sizeInUsd) * (position.sizeInTokens * sizeDeltaUsd / position.sizeInUsd) / position.sizeInTokens\\n        // realized pnl: (position.sizeInTokens * executionPrice - position.sizeInUsd) * (sizeDeltaUsd / position.sizeInUsd)\\n        // priceImpactUsd should adjust the execution price such that:\\n        // [(position.sizeInTokens * executionPrice - position.sizeInUsd) * (sizeDeltaUsd / position.sizeInUsd)] -\\n        // [(position.sizeInTokens * price - position.sizeInUsd) * (sizeDeltaUsd / position.sizeInUsd)] = priceImpactUsd\\n        //\\n        // (position.sizeInTokens * executionPrice - position.sizeInUsd) - (position.sizeInTokens * price - position.sizeInUsd)\\n        // = priceImpactUsd / (sizeDeltaUsd / position.sizeInUsd)\\n        // = priceImpactUsd * position.sizeInUsd / sizeDeltaUsd\\n        //\\n        // position.sizeInTokens * executionPrice - position.sizeInTokens * price = priceImpactUsd * position.sizeInUsd / sizeDeltaUsd\\n        // position.sizeInTokens * (executionPrice - price) = priceImpactUsd * position.sizeInUsd / sizeDeltaUsd\\n        // executionPrice - price = (priceImpactUsd * position.sizeInUsd) / (sizeDeltaUsd * position.sizeInTokens)\\n        // executionPrice = price + (priceImpactUsd * position.sizeInUsd) / (sizeDeltaUsd * position.sizeInTokens)\\n        // executionPrice = price + (priceImpactUsd / sizeDeltaUsd) * (position.sizeInUsd / position.sizeInTokens)\\n        // executionPrice = price + (priceImpactUsd * position.sizeInUsd / position.sizeInTokens) / sizeDeltaUsd\\n        //\\n        // e.g. if price is $2000, sizeDeltaUsd is $5000, priceImpactUsd is -$1000, position.sizeInUsd is $10,000, position.sizeInTokens is 5\\n        // executionPrice = 2000 + (-1000 * 10,000 / 5) / 5000 = 1600\\n        // realizedPnl based on price, without price impact: 0\\n        // realizedPnl based on executionPrice, with price impact: (5 * 1600 - 10,000) * (5 * 5000 / 10,000) / 5 => -1000\\n\\n        // a positive adjustedPriceImpactUsd would decrease the executionPrice\\n        // a negative adjustedPriceImpactUsd would increase the executionPrice\\n\\n        // for increase orders, the adjustedPriceImpactUsd is added to the divisor\\n        // a positive adjustedPriceImpactUsd would increase the divisor and decrease the executionPrice\\n        // increase long order:\\n        //      - if price impact is positive, adjustedPriceImpactUsd should be positive, to decrease the executionPrice\\n        //      - if price impact is negative, adjustedPriceImpactUsd should be negative, to increase the executionPrice\\n        // increase short order:\\n        //      - if price impact is positive, adjustedPriceImpactUsd should be negative, to increase the executionPrice\\n        //      - if price impact is negative, adjustedPriceImpactUsd should be positive, to decrease the executionPrice\\n\\n        // for decrease orders, the adjustedPriceImpactUsd adjusts the numerator\\n        // a positive adjustedPriceImpactUsd would increase the divisor and increase the executionPrice\\n        // decrease long order:\\n        //      - if price impact is positive, adjustedPriceImpactUsd should be positive, to increase the executionPrice\\n        //      - if price impact is negative, adjustedPriceImpactUsd should be negative, to decrease the executionPrice\\n        // decrease short order:\\n        //      - if price impact is positive, adjustedPriceImpactUsd should be negative, to decrease the executionPrice\\n        //      - if price impact is negative, adjustedPriceImpactUsd should be positive, to increase the executionPrice\\n        // adjust price by price impact\\n        if (sizeDeltaUsd > 0 && positionSizeInTokens > 0) {\\n            cache.adjustedPriceImpactUsd = isLong ? priceImpactUsd : -priceImpactUsd;\\n\\n            if (cache.adjustedPriceImpactUsd < 0 && (-cache.adjustedPriceImpactUsd).toUint256() > sizeDeltaUsd) {\\n                revert Errors.PriceImpactLargerThanOrderSize(cache.adjustedPriceImpactUsd, sizeDeltaUsd);\\n            }\\n\\n            int256 adjustment = Precision.mulDiv(positionSizeInUsd, cache.adjustedPriceImpactUsd, positionSizeInTokens) / sizeDeltaUsd.toInt256();\\n            int256 _executionPrice = cache.price.toInt256() + adjustment;\\n\\n            if (_executionPrice < 0) {\\n                revert Errors.NegativeExecutionPrice(_executionPrice, cache.price, positionSizeInUsd, cache.adjustedPriceImpactUsd, sizeDeltaUsd);\\n            }\\n\\n            cache.executionPrice = _executionPrice.toUint256();\\n        }\\n\\n        // decrease order:\\n        //     - long: executionPrice should be larger than acceptablePrice\\n        //     - short: executionPrice should be smaller than acceptablePrice\\n        if (\\n            (isLong && cache.executionPrice >= acceptablePrice) ||\\n            (!isLong && cache.executionPrice <= acceptablePrice)\\n        ) {\\n            return cache.executionPrice;\\n        }\\n\\n        // the validateOrderTriggerPrice function should have validated if the price fulfills\\n        // the order's trigger price\\n        //\\n        // for decrease orders, the price impact should already be capped, so if the user\\n        // had set an acceptable price within the range of the capped price impact, then\\n        // the order should be fulfillable at the acceptable price\\n        //\\n        // for increase orders, the negative price impact is not capped\\n        //\\n        // for both increase and decrease orders, if it is due to price impact that the\\n        // order cannot be fulfilled then the order should be frozen\\n        //\\n        // this is to prevent gaming by manipulation of the price impact value\\n        //\\n        // usually it should be costly to game the price impact value\\n        // however, for certain cases, e.g. a user already has a large position opened\\n        // the user may create limit orders that would only trigger after they close\\n        // their position, this gives the user the option to cancel the pending order if\\n        // prices do not move in their favour or to close their position and let the order\\n        // execute if prices move in their favour\\n        //\\n        // it may also be possible for users to prevent the execution of orders from other users\\n        // by manipulating the price impact, though this should be costly\\n        revert Errors.OrderNotFulfillableAtAcceptablePrice(cache.executionPrice, acceptablePrice);\\n    }\\n\\n    // @dev validate that an order exists\\n    // @param order the order to check\\n    function validateNonEmptyOrder(Order.Props memory order) internal pure {\\n        if (order.account() == address(0)) {\\n            revert Errors.EmptyOrder();\\n        }\\n\\n        if (order.sizeDeltaUsd() == 0 && order.initialCollateralDeltaAmount() == 0) {\\n            revert Errors.EmptyOrder();\\n        }\\n    }\\n\\n    function getPositionKey(Order.Props memory order) internal pure returns (bytes32) {\\n        if (isDecreaseOrder(order.orderType())) {\\n            return Position.getPositionKey(\\n                order.account(),\\n                order.market(),\\n                order.initialCollateralToken(),\\n                order.isLong()\\n            );\\n        }\\n\\n        revert Errors.UnsupportedOrderType(uint256(order.orderType()));\\n    }\\n}\\n\",\"keccak256\":\"0xce70cc877cd89f59514115b46679e70b42cd9ceba114bd4440695f3a17efd800\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\n\\n// @title Order\\n// @dev Struct for orders\\nlibrary Order {\\n    using Order for Props;\\n\\n    enum OrderType {\\n        // @dev MarketSwap: swap token A to token B at the current market price\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\n        MarketSwap,\\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\n        LimitSwap,\\n        // @dev MarketIncrease: increase position at the current market price\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\n        MarketIncrease,\\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitIncrease,\\n        // @dev MarketDecrease: decrease position at the current market price\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\n        MarketDecrease,\\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitDecrease,\\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopLossDecrease,\\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\\n        Liquidation,\\n        // @dev StopIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopIncrease\\n    }\\n\\n    // to help further differentiate orders\\n    enum SecondaryOrderType {\\n        None,\\n        Adl\\n    }\\n\\n    enum DecreasePositionSwapType {\\n        NoSwap,\\n        SwapPnlTokenToCollateralToken,\\n        SwapCollateralTokenToPnlToken\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account the account of the order\\n    // @param receiver the receiver for any token transfers\\n    // this field is meant to allow the output of an order to be\\n    // received by an address that is different from the creator of the\\n    // order whether this is for swaps or whether the account is the owner\\n    // of a position\\n    // for funding fees and claimable collateral, the funds are still\\n    // credited to the owner of the position indicated by order.account\\n    // @param callbackContract the contract to call for callbacks\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the trading market\\n    // @param initialCollateralToken for increase orders, initialCollateralToken\\n    // is the token sent in by the user, the token will be swapped through the\\n    // specified swapPath, before being deposited into the position as collateral\\n    // for decrease orders, initialCollateralToken is the collateral token of the position\\n    // withdrawn collateral from the decrease of the position will be swapped\\n    // through the specified swapPath\\n    // for swaps, initialCollateralToken is the initial token sent for the swap\\n    // @param swapPath an array of market addresses to swap through\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address cancellationReceiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialCollateralToken;\\n        address[] swapPath;\\n    }\\n\\n    // @param sizeDeltaUsd the requested change in position size\\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\\n    // is the amount of the initialCollateralToken sent in by the user\\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\\n    // collateralToken to withdraw\\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\\n    // in for the swap\\n    // @param orderType the order type\\n    // @param triggerPrice the trigger price for non-market orders\\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\\n    // note that for decrease orders, multiple tokens could be received, for this reason, the\\n    // minOutputAmount value is treated as a USD value for validation in decrease orders\\n    // @param srcChainId the source chain id\\n    struct Numbers {\\n        OrderType orderType;\\n        DecreasePositionSwapType decreasePositionSwapType;\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n        uint256 updatedAtTime;\\n        uint256 validFromTime;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param isLong whether the order is for a long or short\\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\\n    // transferring to the user\\n    // @param isFrozen whether the order is frozen\\n    struct Flags {\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n        bool isFrozen;\\n        bool autoCancel;\\n    }\\n\\n    // @dev the order account\\n    // @param props Props\\n    // @return the order account\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    // @dev set the order account\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    // @dev the order receiver\\n    // @param props Props\\n    // @return the order receiver\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    // @dev set the order receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function cancellationReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.cancellationReceiver;\\n    }\\n\\n    function setCancellationReceiver(Props memory props, address value) internal pure {\\n        props.addresses.cancellationReceiver = value;\\n    }\\n\\n    // @dev the order callbackContract\\n    // @param props Props\\n    // @return the order callbackContract\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    // @dev set the order callbackContract\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    // @dev the order market\\n    // @param props Props\\n    // @return the order market\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    // @dev set the order market\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    // @dev the order initialCollateralToken\\n    // @param props Props\\n    // @return the order initialCollateralToken\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialCollateralToken;\\n    }\\n\\n    // @dev set the order initialCollateralToken\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\\n        props.addresses.initialCollateralToken = value;\\n    }\\n\\n    // @dev the order uiFeeReceiver\\n    // @param props Props\\n    // @return the order uiFeeReceiver\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    // @dev set the order uiFeeReceiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    // @dev the order swapPath\\n    // @param props Props\\n    // @return the order swapPath\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.swapPath;\\n    }\\n\\n    // @dev set the order swapPath\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.swapPath = value;\\n    }\\n\\n    // @dev the order type\\n    // @param props Props\\n    // @return the order type\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\n        return props.numbers.orderType;\\n    }\\n\\n    // @dev set the order type\\n    // @param props Props\\n    // @param value the value to set to\\n    function setOrderType(Props memory props, OrderType value) internal pure {\\n        props.numbers.orderType = value;\\n    }\\n\\n    function decreasePositionSwapType(Props memory props) internal pure returns (DecreasePositionSwapType) {\\n        return props.numbers.decreasePositionSwapType;\\n    }\\n\\n    function setDecreasePositionSwapType(Props memory props, DecreasePositionSwapType value) internal pure {\\n        props.numbers.decreasePositionSwapType = value;\\n    }\\n\\n    // @dev the order sizeDeltaUsd\\n    // @param props Props\\n    // @return the order sizeDeltaUsd\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeDeltaUsd;\\n    }\\n\\n    // @dev set the order sizeDeltaUsd\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\\n        props.numbers.sizeDeltaUsd = value;\\n    }\\n\\n    // @dev the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @return the order initialCollateralDeltaAmount\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialCollateralDeltaAmount;\\n    }\\n\\n    // @dev set the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialCollateralDeltaAmount = value;\\n    }\\n\\n    // @dev the order triggerPrice\\n    // @param props Props\\n    // @return the order triggerPrice\\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.triggerPrice;\\n    }\\n\\n    // @dev set the order triggerPrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.triggerPrice = value;\\n    }\\n\\n    // @dev the order acceptablePrice\\n    // @param props Props\\n    // @return the order acceptablePrice\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.acceptablePrice;\\n    }\\n\\n    // @dev set the order acceptablePrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.acceptablePrice = value;\\n    }\\n\\n    // @dev set the order executionFee\\n    // @param props Props\\n    // @param value the value to set to\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    // @dev the order executionFee\\n    // @param props Props\\n    // @return the order executionFee\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    // @dev the order callbackGasLimit\\n    // @param props Props\\n    // @return the order callbackGasLimit\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    // @dev set the order callbackGasLimit\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    // @dev the order minOutputAmount\\n    // @param props Props\\n    // @return the order minOutputAmount\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minOutputAmount;\\n    }\\n\\n    // @dev set the order minOutputAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minOutputAmount = value;\\n    }\\n\\n    // @dev the order updatedAtTime\\n    // @param props Props\\n    // @return the order updatedAtTime\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    // @dev set the order updatedAtTime\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function validFromTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.validFromTime;\\n    }\\n    function setValidFromTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.validFromTime = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    // @dev whether the order is for a long or short\\n    // @param props Props\\n    // @return whether the order is for a long or short\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    // @dev set whether the order is for a long or short\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsLong(Props memory props, bool value) internal pure {\\n        props.flags.isLong = value;\\n    }\\n\\n    // @dev whether to unwrap the native token before transfers to the user\\n    // @param props Props\\n    // @return whether to unwrap the native token before transfers to the user\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    // @dev set whether the native token should be unwrapped before being\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    // @dev whether the order is frozen\\n    // @param props Props\\n    // @return whether the order is frozen\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\n        return props.flags.isFrozen;\\n    }\\n\\n    // @dev set whether the order is frozen\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsFrozen(Props memory props, bool value) internal pure {\\n        props.flags.isFrozen = value;\\n    }\\n\\n    function autoCancel(Props memory props) internal pure returns (bool) {\\n        return props.flags.autoCancel;\\n    }\\n\\n    function setAutoCancel(Props memory props, bool value) internal pure {\\n        props.flags.autoCancel = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n\\n    // @param props Props\\n    function touch(Props memory props) internal view {\\n        props.setUpdatedAtTime(Chain.currentTimestamp());\\n    }\\n}\\n\",\"keccak256\":\"0x356d6e3d8ec086d94aae20e81da9ab5c0f46789ef57ede76e15a1491d6fe1d18\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Order.sol\\\";\\n\\nlibrary OrderEventUtils {\\n    using Order for Order.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitOrderCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Order.Props memory order\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(order);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderCreated\\\",\\n            key,\\n            Cast.toBytes32(order.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        Order.SecondaryOrderType secondaryOrderType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"secondaryOrderType\\\", uint256(secondaryOrderType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Order.Props memory order\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", order.account());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"sizeDeltaUsd\\\", order.sizeDeltaUsd());\\n        eventData.uintItems.setItem(1, \\\"acceptablePrice\\\", order.acceptablePrice());\\n        eventData.uintItems.setItem(2, \\\"triggerPrice\\\", order.triggerPrice());\\n        eventData.uintItems.setItem(3, \\\"minOutputAmount\\\", order.minOutputAmount());\\n        eventData.uintItems.setItem(4, \\\"updatedAtTime\\\", order.updatedAtTime());\\n        eventData.uintItems.setItem(5, \\\"validFromTime\\\", order.validFromTime());\\n        eventData.uintItems.setItem(6, \\\"srcChainId\\\", order.srcChainId());\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"autoCancel\\\", order.autoCancel());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", order.dataList());\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderUpdated\\\",\\n            key,\\n            Cast.toBytes32(order.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderSizeDeltaAutoUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 nextSizeDeltaUsd\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"sizeDeltaUsd\\\", sizeDeltaUsd);\\n        eventData.uintItems.setItem(1, \\\"nextSizeDeltaUsd\\\", nextSizeDeltaUsd);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OrderSizeDeltaAutoUpdated\\\",\\n            key,\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderCollateralDeltaAmountAutoUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        uint256 collateralDeltaAmount,\\n        uint256 nextCollateralDeltaAmount\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"collateralDeltaAmount\\\", collateralDeltaAmount);\\n        eventData.uintItems.setItem(1, \\\"nextCollateralDeltaAmount\\\", nextCollateralDeltaAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OrderCollateralDeltaAmountAutoUpdated\\\",\\n            key,\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitOrderFrozen(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"OrderFrozen\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Order.Props memory order) public pure returns (EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n        eventData.addressItems.initItems(7);\\n        eventData.addressItems.setItem(0, \\\"account\\\", order.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", order.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", order.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"uiFeeReceiver\\\", order.uiFeeReceiver());\\n        eventData.addressItems.setItem(4, \\\"market\\\", order.market());\\n        eventData.addressItems.setItem(5, \\\"initialCollateralToken\\\", order.initialCollateralToken());\\n        eventData.addressItems.setItem(6, \\\"cancellationReceiver\\\", order.cancellationReceiver());\\n\\n        eventData.addressItems.initArrayItems(1);\\n        eventData.addressItems.setItem(0, \\\"swapPath\\\", order.swapPath());\\n\\n        eventData.uintItems.initItems(11);\\n        eventData.uintItems.setItem(0, \\\"orderType\\\", uint256(order.orderType()));\\n        eventData.uintItems.setItem(1, \\\"decreasePositionSwapType\\\", uint256(order.decreasePositionSwapType()));\\n        eventData.uintItems.setItem(2, \\\"sizeDeltaUsd\\\", order.sizeDeltaUsd());\\n        eventData.uintItems.setItem(3, \\\"initialCollateralDeltaAmount\\\", order.initialCollateralDeltaAmount());\\n        eventData.uintItems.setItem(4, \\\"triggerPrice\\\", order.triggerPrice());\\n        eventData.uintItems.setItem(5, \\\"acceptablePrice\\\", order.acceptablePrice());\\n        eventData.uintItems.setItem(6, \\\"executionFee\\\", order.executionFee());\\n        eventData.uintItems.setItem(7, \\\"callbackGasLimit\\\", order.callbackGasLimit());\\n        eventData.uintItems.setItem(8, \\\"minOutputAmount\\\", order.minOutputAmount());\\n        eventData.uintItems.setItem(9, \\\"updatedAtTime\\\", order.updatedAtTime());\\n        eventData.uintItems.setItem(10, \\\"validFromTime\\\", order.validFromTime());\\n\\n        eventData.boolItems.initItems(3);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", order.isLong());\\n        eventData.boolItems.setItem(1, \\\"shouldUnwrapNativeToken\\\", order.shouldUnwrapNativeToken());\\n        eventData.boolItems.setItem(2, \\\"autoCancel\\\", order.autoCancel());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", order.dataList());\\n        return eventData;\\n    }\\n\\n    function emitPositionCollateralUsedForExecutionFee(\\n        EventEmitter eventEmitter,\\n        bytes32 orderKey,\\n        address feeToken,\\n        uint256 positionCollateralAmountUsed\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", orderKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"feeToken\\\", feeToken);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"positionCollateralAmountUsed\\\", positionCollateralAmountUsed);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionCollateralUsedForExecutionFee\\\",\\n            orderKey,\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9886192b6636ec4eeaec21cd5cb566fb59788fc999c157fe6451ba95cf8a76dd\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title OrderVault\\n// @dev Vault for orders\\ncontract OrderVault is StrictBank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n}\\n\",\"keccak256\":\"0x5c4378e51db582baa867cf83627f8d567a5724f9c52d684c3db31535424fa4a2\",\"license\":\"BUSL-1.1\"},\"contracts/position/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Position\\n// @dev Stuct for positions\\n//\\n// borrowing fees for position require only a borrowingFactor to track\\n// an example on how this works is if the global cumulativeBorrowingFactor is 10020%\\n// a position would be opened with borrowingFactor as 10020%\\n// after some time, if the cumulativeBorrowingFactor is updated to 10025% the position would\\n// owe 5% of the position size as borrowing fees\\n// the total pending borrowing fees of all positions is factored into the calculation of the pool value for LPs\\n// when a position is increased or decreased, the pending borrowing fees for the position is deducted from the position's\\n// collateral and transferred into the LP pool\\n//\\n// the same borrowing fee factor tracking cannot be applied for funding fees as those calculations consider pending funding fees\\n// based on the fiat value of the position sizes\\n//\\n// for example, if the price of the longToken is $2000 and a long position owes $200 in funding fees, the opposing short position\\n// claims the funding fees of 0.1 longToken ($200), if the price of the longToken changes to $4000 later, the long position would\\n// only owe 0.05 longToken ($200)\\n// this would result in differences between the amounts deducted and amounts paid out, for this reason, the actual token amounts\\n// to be deducted and to be paid out need to be tracked instead\\n//\\n// for funding fees, there are four values to consider:\\n// 1. long positions with market.longToken as collateral\\n// 2. long positions with market.shortToken as collateral\\n// 3. short positions with market.longToken as collateral\\n// 4. short positions with market.shortToken as collateral\\nlibrary Position {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n    }\\n\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    struct Addresses {\\n        address account;\\n        address market;\\n        address collateralToken;\\n    }\\n\\n    // @param sizeInUsd the position's size in USD\\n    // @param sizeInTokens the position's size in tokens\\n    // @param collateralAmount the amount of collateralToken for collateral\\n    // @param pendingImpactAmount the amount of pending impact for the position\\n    // @param pendingImpactUsd the amount of pending impact in USD for the position\\n    // @param borrowingFactor the position's borrowing factor\\n    // @param fundingFeeAmountPerSize the position's funding fee per size\\n    // @param longTokenClaimableFundingAmountPerSize the position's claimable funding amount per size\\n    // for the market.longToken\\n    // @param shortTokenClaimableFundingAmountPerSize the position's claimable funding amount per size\\n    // for the market.shortToken\\n    // @param increasedAtTime the time at which this position was increased\\n    // @param decreasedAtTime the time at which this position was decreased\\n    struct Numbers {\\n        uint256 sizeInUsd;\\n        uint256 sizeInTokens;\\n        uint256 collateralAmount;\\n        int256 pendingImpactAmount;\\n        int256 pendingImpactUsd;\\n        uint256 borrowingFactor;\\n        uint256 fundingFeeAmountPerSize;\\n        uint256 longTokenClaimableFundingAmountPerSize;\\n        uint256 shortTokenClaimableFundingAmountPerSize;\\n        uint256 increasedAtTime;\\n        uint256 decreasedAtTime;\\n    }\\n\\n    // @param isLong whether the position is a long or short\\n    struct Flags {\\n        bool isLong;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function collateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.collateralToken;\\n    }\\n\\n    function setCollateralToken(Props memory props, address value) internal pure {\\n        props.addresses.collateralToken = value;\\n    }\\n\\n    function sizeInUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeInUsd;\\n    }\\n\\n    function setSizeInUsd(Props memory props, uint256 value) internal pure {\\n        props.numbers.sizeInUsd = value;\\n    }\\n\\n    function sizeInTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeInTokens;\\n    }\\n\\n    function setSizeInTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.sizeInTokens = value;\\n    }\\n\\n    function collateralAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.collateralAmount;\\n    }\\n\\n    function setCollateralAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.collateralAmount = value;\\n    }\\n\\n    function pendingImpactAmount(Props memory props) internal pure returns (int256) {\\n        return props.numbers.pendingImpactAmount;\\n    }\\n\\n    function setPendingImpactAmount(Props memory props, int256 value) internal pure {\\n        props.numbers.pendingImpactAmount = value;\\n    }\\n\\n    function pendingImpactUsd(Props memory props) internal pure returns (int256) {\\n        return props.numbers.pendingImpactUsd;\\n    }\\n\\n    function setPendingImpactUsd(Props memory props, int256 value) internal pure {\\n        props.numbers.pendingImpactUsd = value;\\n    }\\n\\n    function borrowingFactor(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.borrowingFactor;\\n    }\\n\\n    function setBorrowingFactor(Props memory props, uint256 value) internal pure {\\n        props.numbers.borrowingFactor = value;\\n    }\\n\\n    function fundingFeeAmountPerSize(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.fundingFeeAmountPerSize;\\n    }\\n\\n    function setFundingFeeAmountPerSize(Props memory props, uint256 value) internal pure {\\n        props.numbers.fundingFeeAmountPerSize = value;\\n    }\\n\\n    function longTokenClaimableFundingAmountPerSize(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.longTokenClaimableFundingAmountPerSize;\\n    }\\n\\n    function setLongTokenClaimableFundingAmountPerSize(Props memory props, uint256 value) internal pure {\\n        props.numbers.longTokenClaimableFundingAmountPerSize = value;\\n    }\\n\\n    function shortTokenClaimableFundingAmountPerSize(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.shortTokenClaimableFundingAmountPerSize;\\n    }\\n\\n    function setShortTokenClaimableFundingAmountPerSize(Props memory props, uint256 value) internal pure {\\n        props.numbers.shortTokenClaimableFundingAmountPerSize = value;\\n    }\\n\\n    function increasedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.increasedAtTime;\\n    }\\n\\n    function setIncreasedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.increasedAtTime = value;\\n    }\\n\\n    function decreasedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.decreasedAtTime;\\n    }\\n\\n    function setDecreasedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.decreasedAtTime = value;\\n    }\\n\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    function setIsLong(Props memory props, bool value) internal pure {\\n        props.flags.isLong = value;\\n    }\\n\\n    // @dev get the key for a position\\n    // @param account the position's account\\n    // @param market the position's market\\n    // @param collateralToken the position's collateralToken\\n    // @param isLong whether the position is long or short\\n    // @return the position key\\n    function getPositionKey(address _account, address _market, address _collateralToken, bool _isLong) internal pure returns (bytes32) {\\n        bytes32 _key = keccak256(abi.encode(_account, _market, _collateralToken, _isLong));\\n\\n        return _key;\\n    }\\n}\\n\",\"keccak256\":\"0x5b26e750baed5bededf249171184432d0c87c29fc365ffbdd6692e3743970a0b\",\"license\":\"BUSL-1.1\"},\"contracts/position/PositionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\n\\nimport \\\"./Position.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"../pricing/PositionPricingUtils.sol\\\";\\nimport \\\"../order/BaseOrderUtils.sol\\\";\\n\\n// @title PositionUtils\\n// @dev Library for position functions\\nlibrary PositionUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Price for Price.Props;\\n    using Position for Position.Props;\\n    using Order for Order.Props;\\n\\n    // @dev UpdatePositionParams struct used in increasePosition and decreasePosition\\n    // to avoid stack too deep errors\\n    //\\n    // @param contracts BaseOrderUtils.ExecuteOrderParamsContracts\\n    // @param market the values of the trading market\\n    // @param order the decrease position order\\n    // @param orderKey the key of the order\\n    // @param position the order's position\\n    // @param positionKey the key of the order's position\\n    struct UpdatePositionParams {\\n        BaseOrderUtils.ExecuteOrderParamsContracts contracts;\\n        Market.Props market;\\n        Order.Props order;\\n        bytes32 orderKey;\\n        Position.Props position;\\n        bytes32 positionKey;\\n        Order.SecondaryOrderType secondaryOrderType;\\n    }\\n\\n    // @param dataStore DataStore\\n    // @param eventEmitter EventEmitter\\n    // @param oracle Oracle\\n    // @param referralStorage IReferralStorage\\n    struct UpdatePositionParamsContracts {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        Oracle oracle;\\n        SwapHandler swapHandler;\\n        IReferralStorage referralStorage;\\n    }\\n\\n    struct WillPositionCollateralBeSufficientValues {\\n        uint256 positionSizeInUsd;\\n        uint256 positionCollateralAmount;\\n        int256 realizedPnlUsd;\\n        int256 openInterestDelta;\\n    }\\n\\n    struct DecreasePositionCollateralValuesOutput {\\n        address outputToken;\\n        uint256 outputAmount;\\n        address secondaryOutputToken;\\n        uint256 secondaryOutputAmount;\\n    }\\n\\n    // @dev ProcessCollateralValues struct used to contain the values in processCollateral\\n    // @param executionPrice the order execution price\\n    // @param remainingCollateralAmount the remaining collateral amount of the position\\n    // @param positionPnlUsd the pnl of the position in USD\\n    // @param sizeDeltaInTokens the change in position size in tokens\\n    // @param priceImpactAmount the price impact in tokens\\n    // @param priceImpactDiffUsd the price impact difference in USD\\n    // @param pendingCollateralDeduction the pending collateral deduction\\n    // @param output DecreasePositionCollateralValuesOutput\\n    struct DecreasePositionCollateralValues {\\n        uint256 executionPrice;\\n        uint256 remainingCollateralAmount;\\n        int256 basePnlUsd;\\n        int256 uncappedBasePnlUsd;\\n        uint256 sizeDeltaInTokens;\\n        int256 priceImpactUsd;\\n        int256 proportionalPendingImpactAmount;\\n        int256 proportionalPendingImpactUsd;\\n        uint256 priceImpactDiffUsd;\\n        DecreasePositionCollateralValuesOutput output;\\n    }\\n\\n    // @dev DecreasePositionCache struct used in decreasePosition to\\n    // avoid stack too deep errors\\n    // @param prices the prices of the tokens in the market\\n    // @param pnlToken the token that the pnl for the user is in, for long positions\\n    // this is the market.longToken, for short positions this is the market.shortToken\\n    // @param pnlTokenPrice the price of the pnlToken\\n    // @param initialCollateralAmount the initial collateral amount\\n    // @param nextPositionSizeInUsd the new position size in USD\\n    // @param nextPositionBorrowingFactor the new position borrowing factor\\n    struct DecreasePositionCache {\\n        MarketUtils.MarketPrices prices;\\n        int256 estimatedPositionPnlUsd;\\n        int256 estimatedRealizedPnlUsd;\\n        int256 estimatedRemainingPnlUsd;\\n        address pnlToken;\\n        Price.Props pnlTokenPrice;\\n        Price.Props collateralTokenPrice;\\n        uint256 initialCollateralAmount;\\n        uint256 nextPositionSizeInUsd;\\n        uint256 nextPositionBorrowingFactor;\\n    }\\n\\n\\n    struct GetPositionPnlUsdCache {\\n        int256 positionValue;\\n        int256 totalPositionPnl;\\n        int256 uncappedTotalPositionPnl;\\n        address pnlToken;\\n        uint256 poolTokenAmount;\\n        uint256 poolTokenPrice;\\n        uint256 poolTokenUsd;\\n        int256 poolPnl;\\n        int256 cappedPoolPnl;\\n        uint256 sizeDeltaInTokens;\\n        int256 positionPnlUsd;\\n        int256 uncappedPositionPnlUsd;\\n    }\\n\\n    struct IsPositionLiquidatableInfo {\\n        int256 remainingCollateralUsd;\\n        int256 minCollateralUsd;\\n        int256 minCollateralUsdForLeverage;\\n    }\\n\\n    // @dev IsPositionLiquidatableCache struct used in isPositionLiquidatable\\n    // to avoid stack too deep errors\\n    // @param positionPnlUsd the position's pnl in USD\\n    // @param minCollateralFactor the min collateral factor\\n    // @param collateralTokenPrice the collateral token price\\n    // @param collateralUsd the position's collateral in USD\\n    // @param usdDeltaForPriceImpact the usdDelta value for the price impact calculation\\n    // @param priceImpactUsd the price impact of closing the position in USD\\n    struct IsPositionLiquidatableCache {\\n        int256 positionPnlUsd;\\n        uint256 minCollateralFactor;\\n        Price.Props collateralTokenPrice;\\n        uint256 collateralUsd;\\n        int256 usdDeltaForPriceImpact;\\n        int256 priceImpactUsd;\\n        bool balanceWasImproved;\\n    }\\n\\n    struct GetExecutionPriceForIncreaseCache {\\n        int256 priceImpactUsd;\\n        int256 priceImpactAmount;\\n        uint256 baseSizeDeltaInTokens;\\n        bool balanceWasImproved;\\n        uint256 executionPrice;\\n    }\\n\\n    struct GetExecutionPriceForDecreaseCache {\\n        int256 priceImpactUsd;\\n        bool balanceWasImproved;\\n        uint256 executionPrice;\\n    }\\n\\n    // @dev get the position pnl in USD\\n    //\\n    // for long positions, pnl is calculated as:\\n    // (position.sizeInTokens * indexTokenPrice) - position.sizeInUsd\\n    // if position.sizeInTokens is larger for long positions, the position will have\\n    // larger profits and smaller losses for the same changes in token price\\n    //\\n    // for short positions, pnl is calculated as:\\n    // position.sizeInUsd -  (position.sizeInTokens * indexTokenPrice)\\n    // if position.sizeInTokens is smaller for long positions, the position will have\\n    // larger profits and smaller losses for the same changes in token price\\n    //\\n    // @param position the position values\\n    // @param sizeDeltaUsd the change in position size\\n    // @param indexTokenPrice the price of the index token\\n    //\\n    // @return (positionPnlUsd, uncappedPositionPnlUsd, sizeDeltaInTokens)\\n    function getPositionPnlUsd(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketUtils.MarketPrices memory prices,\\n        Position.Props memory position,\\n        uint256 sizeDeltaUsd\\n    ) public view returns (int256, int256, uint256) {\\n        GetPositionPnlUsdCache memory cache;\\n\\n        uint256 executionPrice = prices.indexTokenPrice.pickPriceForPnl(position.isLong(), false);\\n\\n        // position.sizeInUsd is the cost of the tokens, positionValue is the current worth of the tokens\\n        cache.positionValue = (position.sizeInTokens() * executionPrice).toInt256();\\n        cache.totalPositionPnl = position.isLong() ? cache.positionValue - position.sizeInUsd().toInt256() : position.sizeInUsd().toInt256() - cache.positionValue;\\n        cache.uncappedTotalPositionPnl = cache.totalPositionPnl;\\n\\n        if (cache.totalPositionPnl > 0) {\\n            cache.pnlToken = position.isLong() ? market.longToken : market.shortToken;\\n            cache.poolTokenAmount = MarketUtils.getPoolAmount(dataStore, market, cache.pnlToken);\\n            cache.poolTokenPrice = position.isLong() ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\\n            cache.poolTokenUsd = cache.poolTokenAmount * cache.poolTokenPrice;\\n            cache.poolPnl = MarketUtils.getPnl(\\n                dataStore,\\n                market,\\n                prices.indexTokenPrice,\\n                position.isLong(),\\n                true\\n            );\\n\\n            cache.cappedPoolPnl = MarketUtils.getCappedPnl(\\n                dataStore,\\n                market.marketToken,\\n                position.isLong(),\\n                cache.poolPnl,\\n                cache.poolTokenUsd,\\n                Keys.MAX_PNL_FACTOR_FOR_TRADERS\\n            );\\n\\n            if (cache.cappedPoolPnl != cache.poolPnl && cache.cappedPoolPnl > 0 && cache.poolPnl > 0) {\\n                cache.totalPositionPnl = Precision.mulDiv(cache.totalPositionPnl.toUint256(), cache.cappedPoolPnl, cache.poolPnl.toUint256());\\n            }\\n        }\\n\\n        if (position.sizeInUsd() == sizeDeltaUsd) {\\n            cache.sizeDeltaInTokens = position.sizeInTokens();\\n        } else {\\n            if (position.isLong()) {\\n                cache.sizeDeltaInTokens = Calc.roundUpDivision(position.sizeInTokens() * sizeDeltaUsd, position.sizeInUsd());\\n            } else {\\n                cache.sizeDeltaInTokens = position.sizeInTokens() * sizeDeltaUsd / position.sizeInUsd();\\n            }\\n        }\\n\\n        cache.positionPnlUsd = Precision.mulDiv(cache.totalPositionPnl, cache.sizeDeltaInTokens, position.sizeInTokens());\\n        cache.uncappedPositionPnlUsd = Precision.mulDiv(cache.uncappedTotalPositionPnl, cache.sizeDeltaInTokens, position.sizeInTokens());\\n\\n        return (cache.positionPnlUsd, cache.uncappedPositionPnlUsd, cache.sizeDeltaInTokens);\\n    }\\n\\n    // @dev validate that a position is not empty\\n    // @param position the position values\\n    function validateNonEmptyPosition(Position.Props memory position) internal pure {\\n        if (position.sizeInUsd() == 0 && position.sizeInTokens() == 0 && position.collateralAmount() == 0) {\\n            revert Errors.EmptyPosition();\\n        }\\n    }\\n\\n    // @dev check if a position is valid\\n    // @param dataStore DataStore\\n    // @param referralStorage IReferralStorage\\n    // @param position the position values\\n    // @param market the market values\\n    // @param prices the prices of the tokens in the market\\n    // @param shouldValidateMinCollateralUsd whether min collateral usd needs to be validated\\n    // validation is skipped for decrease position to prevent reverts in case the order size\\n    // is just slightly smaller than the position size\\n    // in decrease position, the remaining collateral is estimated at the start, and the order\\n    // size is updated to match the position size if the remaining collateral will be less than\\n    // the min collateral usd\\n    // since this is an estimate, there may be edge cases where there is a small remaining position size\\n    // and small amount of collateral remaining\\n    // validation is skipped for this case as it is preferred for the order to be executed\\n    // since the small amount of collateral remaining only impacts the potential payment of liquidation\\n    // keepers\\n    function validatePosition(\\n        DataStore dataStore,\\n        IReferralStorage referralStorage,\\n        Position.Props memory position,\\n        Market.Props memory market,\\n        MarketUtils.MarketPrices memory prices,\\n        bool shouldValidateMinPositionSize,\\n        bool shouldValidateMinCollateralUsd\\n    ) public view {\\n        if (position.sizeInUsd() == 0 || position.sizeInTokens() == 0) {\\n            revert Errors.InvalidPositionSizeValues(position.sizeInUsd(), position.sizeInTokens());\\n        }\\n\\n        MarketUtils.validateEnabledMarket(dataStore, market.marketToken);\\n        MarketUtils.validateMarketCollateralToken(market, position.collateralToken());\\n\\n        if (shouldValidateMinPositionSize) {\\n            uint256 minPositionSizeUsd = dataStore.getUint(Keys.MIN_POSITION_SIZE_USD);\\n            if (position.sizeInUsd() < minPositionSizeUsd) {\\n                revert Errors.MinPositionSize(position.sizeInUsd(), minPositionSizeUsd);\\n            }\\n        }\\n\\n        (bool isLiquidatable, string memory reason, IsPositionLiquidatableInfo memory info) = isPositionLiquidatable(\\n            dataStore,\\n            referralStorage,\\n            position,\\n            market,\\n            prices,\\n            shouldValidateMinCollateralUsd,\\n            false // forLiquidation\\n        );\\n\\n        if (isLiquidatable) {\\n            revert Errors.LiquidatablePosition(\\n                reason,\\n                info.remainingCollateralUsd,\\n                info.minCollateralUsd,\\n                info.minCollateralUsdForLeverage\\n            );\\n        }\\n    }\\n\\n    // @dev check if a position is liquidatable\\n    // @param dataStore DataStore\\n    // @param referralStorage IReferralStorage\\n    // @param position the position values\\n    // @param market the market values\\n    // @param prices the prices of the tokens in the market\\n    function isPositionLiquidatable(\\n        DataStore dataStore,\\n        IReferralStorage referralStorage,\\n        Position.Props memory position,\\n        Market.Props memory market,\\n        MarketUtils.MarketPrices memory prices,\\n        bool shouldValidateMinCollateralUsd,\\n        bool forLiquidation\\n    ) public view returns (bool, string memory, IsPositionLiquidatableInfo memory) {\\n        IsPositionLiquidatableCache memory cache;\\n        IsPositionLiquidatableInfo memory info;\\n\\n        (cache.positionPnlUsd, /* int256 uncappedBasePnlUsd */,  /* uint256 sizeDeltaInTokens */) = getPositionPnlUsd(\\n            dataStore,\\n            market,\\n            prices,\\n            position,\\n            position.sizeInUsd()\\n        );\\n\\n        cache.collateralTokenPrice = MarketUtils.getCachedTokenPrice(\\n            position.collateralToken(),\\n            market,\\n            prices\\n        );\\n\\n        cache.collateralUsd = position.collateralAmount() * cache.collateralTokenPrice.min;\\n\\n        // calculate the usdDeltaForPriceImpact for fully closing the position\\n        cache.usdDeltaForPriceImpact = -position.sizeInUsd().toInt256();\\n\\n        (cache.priceImpactUsd, cache.balanceWasImproved) = PositionPricingUtils.getPriceImpactUsd(\\n            PositionPricingUtils.GetPriceImpactUsdParams(\\n                dataStore,\\n                market,\\n                cache.usdDeltaForPriceImpact,\\n                position.isLong()\\n            )\\n        );\\n\\n        cache.priceImpactUsd += position.pendingImpactUsd();\\n\\n        // even if there is a large positive price impact, positions that would be liquidated\\n        // if the positive price impact is reduced should not be allowed to be created\\n        // as they would be easily liquidated if the price impact changes\\n        // cap the priceImpactUsd to zero to prevent these positions from being created\\n        if (cache.priceImpactUsd >= 0) {\\n            cache.priceImpactUsd = 0;\\n        } else {\\n            uint256 maxPriceImpactFactor = MarketUtils.getMaxPositionImpactFactorForLiquidations(\\n                dataStore,\\n                market.marketToken\\n            );\\n\\n            // if there is a large build up of open interest and a sudden large price movement\\n            // it may result in a large imbalance between longs and shorts\\n            // this could result in very large price impact temporarily\\n            // cap the max negative price impact to prevent cascading liquidations\\n            int256 maxNegativePriceImpactUsd = -Precision.applyFactor(position.sizeInUsd(), maxPriceImpactFactor).toInt256();\\n            if (cache.priceImpactUsd < maxNegativePriceImpactUsd) {\\n                cache.priceImpactUsd = maxNegativePriceImpactUsd;\\n            }\\n        }\\n\\n        PositionPricingUtils.GetPositionFeesParams memory getPositionFeesParams = PositionPricingUtils.GetPositionFeesParams(\\n            dataStore, // dataStore\\n            referralStorage, // referralStorage\\n            position, // position\\n            cache.collateralTokenPrice, //collateralTokenPrice\\n            cache.balanceWasImproved, // balanceWasImproved\\n            market.longToken, // longToken\\n            market.shortToken, // shortToken\\n            position.sizeInUsd(), // sizeDeltaUsd\\n            address(0), // uiFeeReceiver\\n\\n            // should not account for liquidation fees to determine if position should be liquidated\\n            false // isLiquidation\\n        );\\n\\n        PositionPricingUtils.PositionFees memory fees = PositionPricingUtils.getPositionFees(getPositionFeesParams);\\n\\n        // the totalCostAmount is in tokens, use collateralTokenPrice.min to calculate the cost in USD\\n        // since in PositionPricingUtils.getPositionFees the totalCostAmount in tokens was calculated\\n        // using collateralTokenPrice.min\\n        uint256 collateralCostUsd = fees.totalCostAmount * cache.collateralTokenPrice.min;\\n\\n        // the position's pnl is counted as collateral for the liquidation check\\n        // as a position in profit should not be liquidated if the pnl is sufficient\\n        // to cover the position's fees\\n        info.remainingCollateralUsd =\\n            cache.collateralUsd.toInt256()\\n            + cache.positionPnlUsd\\n            + cache.priceImpactUsd\\n            - collateralCostUsd.toInt256();\\n\\n        if (forLiquidation) {\\n            cache.minCollateralFactor = MarketUtils.getMinCollateralFactorForLiquidation(dataStore, market.marketToken);\\n        } else {\\n            cache.minCollateralFactor = MarketUtils.getMinCollateralFactor(dataStore, market.marketToken);\\n        }\\n\\n        // validate if (remaining collateral) / position.size is less than the min collateral factor (max leverage exceeded)\\n        // this validation includes the position fee to be paid when closing the position\\n        // i.e. if the position does not have sufficient collateral after closing fees it is considered a liquidatable position\\n        info.minCollateralUsdForLeverage = Precision.applyFactor(position.sizeInUsd(), cache.minCollateralFactor).toInt256();\\n\\n        if (shouldValidateMinCollateralUsd) {\\n            info.minCollateralUsd = dataStore.getUint(Keys.MIN_COLLATERAL_USD).toInt256();\\n            if (info.remainingCollateralUsd < info.minCollateralUsd) {\\n                return (true, \\\"min collateral\\\", info);\\n            }\\n        }\\n\\n        if (info.remainingCollateralUsd <= 0) {\\n            return (true, \\\"< 0\\\", info);\\n        }\\n\\n        if (info.remainingCollateralUsd < info.minCollateralUsdForLeverage) {\\n            return (true, \\\"min collateral for leverage\\\", info);\\n        }\\n\\n        return (false, \\\"\\\", info);\\n    }\\n\\n    // fees and price impact are not included for the willPositionCollateralBeSufficient validation\\n    // this is because this validation is meant to guard against a specific scenario of price impact\\n    // gaming\\n    //\\n    // price impact could be gamed by opening high leverage positions, if the price impact\\n    // that should be charged is higher than the amount of collateral in the position\\n    // then a user could pay less price impact than what is required, and there is a risk that\\n    // price manipulation could be profitable if the price impact cost is less than it should be\\n    //\\n    // this check should be sufficient even without factoring in fees as fees should have a minimal impact\\n    // it may be possible that funding or borrowing fees are accumulated and need to be deducted which could\\n    // lead to a user paying less price impact than they should, however gaming of this form should be difficult\\n    // since the funding and borrowing fees would still add up for the user's cost\\n    //\\n    // another possibility would be if a user opens a large amount of both long and short positions, and\\n    // funding fees are paid from one side to the other, but since most of the open interest is owned by the\\n    // user the user earns most of the paid cost, in this scenario the borrowing fees should still be significant\\n    // since some time would be required for the funding fees to accumulate\\n    //\\n    // fees and price impact are validated in the validatePosition check\\n    function willPositionCollateralBeSufficient(\\n        DataStore dataStore,\\n        Market.Props memory market,\\n        MarketUtils.MarketPrices memory prices,\\n        address collateralToken,\\n        bool isLong,\\n        WillPositionCollateralBeSufficientValues memory values\\n    ) public view returns (bool, int256) {\\n        Price.Props memory collateralTokenPrice = MarketUtils.getCachedTokenPrice(\\n            collateralToken,\\n            market,\\n            prices\\n        );\\n\\n        int256 remainingCollateralUsd = values.positionCollateralAmount.toInt256() * collateralTokenPrice.min.toInt256();\\n\\n        // deduct realized pnl if it is negative since this would be paid from\\n        // the position's collateral\\n        if (values.realizedPnlUsd < 0) {\\n            remainingCollateralUsd = remainingCollateralUsd + values.realizedPnlUsd;\\n        }\\n\\n        if (remainingCollateralUsd < 0) {\\n            return (false, remainingCollateralUsd);\\n        }\\n\\n        // the min collateral factor will increase as the open interest for a market increases\\n        // this may lead to previously created limit increase orders not being executable\\n        //\\n        // the position's pnl is not factored into the remainingCollateralUsd value, since\\n        // factoring in a positive pnl may allow the user to manipulate price and bypass this check\\n        // it may be useful to factor in a negative pnl for this check, this can be added if required\\n        uint256 minCollateralFactor = MarketUtils.getMinCollateralFactorForOpenInterest(\\n            dataStore,\\n            market,\\n            values.openInterestDelta,\\n            isLong\\n        );\\n\\n        uint256 minCollateralFactorForMarket = MarketUtils.getMinCollateralFactor(dataStore, market.marketToken);\\n        // use the minCollateralFactor for the market if it is larger\\n        if (minCollateralFactorForMarket > minCollateralFactor) {\\n            minCollateralFactor = minCollateralFactorForMarket;\\n        }\\n\\n        int256 minCollateralUsdForLeverage = Precision.applyFactor(values.positionSizeInUsd, minCollateralFactor).toInt256();\\n        bool willBeSufficient = remainingCollateralUsd >= minCollateralUsdForLeverage;\\n\\n        return (willBeSufficient, remainingCollateralUsd);\\n    }\\n\\n    function updateFundingAndBorrowingState(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        Market.Props memory market,\\n        MarketUtils.MarketPrices memory prices\\n    ) external {\\n        // update the funding amount per size for the market\\n        MarketUtils.updateFundingState(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            prices\\n        );\\n\\n        // update the cumulative borrowing factor for longs\\n        MarketUtils.updateCumulativeBorrowingFactor(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            prices,\\n            true // isLong\\n        );\\n\\n        // update the cumulative borrowing factor for shorts\\n        MarketUtils.updateCumulativeBorrowingFactor(\\n            dataStore,\\n            eventEmitter,\\n            market,\\n            prices,\\n            false // isLong\\n        );\\n    }\\n\\n    function updateTotalBorrowing(\\n        PositionUtils.UpdatePositionParams memory params,\\n        uint256 nextPositionSizeInUsd,\\n        uint256 nextPositionBorrowingFactor\\n    ) internal {\\n        MarketUtils.updateTotalBorrowing(\\n            params.contracts.dataStore, // dataStore\\n            params.market.marketToken, // market\\n            params.position.isLong(), // isLong\\n            params.position.sizeInUsd(), // prevPositionSizeInUsd\\n            params.position.borrowingFactor(), // prevPositionBorrowingFactor\\n            nextPositionSizeInUsd, // nextPositionSizeInUsd\\n            nextPositionBorrowingFactor // nextPositionBorrowingFactor\\n        );\\n    }\\n\\n    // the order.receiver is meant to allow the output of an order to be\\n    // received by an address that is different from the position.account\\n    // address\\n    // for funding fees, the funds are still credited to the owner\\n    // of the position indicated by order.account\\n    function incrementClaimableFundingAmount(\\n        PositionUtils.UpdatePositionParams memory params,\\n        PositionPricingUtils.PositionFees memory fees\\n    ) internal {\\n        // if the position has negative funding fees, distribute it to allow it to be claimable\\n        if (fees.funding.claimableLongTokenAmount > 0) {\\n            MarketUtils.incrementClaimableFundingAmount(\\n                params.contracts.dataStore,\\n                params.contracts.eventEmitter,\\n                params.market.marketToken,\\n                params.market.longToken,\\n                params.order.account(),\\n                fees.funding.claimableLongTokenAmount\\n            );\\n        }\\n\\n        if (fees.funding.claimableShortTokenAmount > 0) {\\n            MarketUtils.incrementClaimableFundingAmount(\\n                params.contracts.dataStore,\\n                params.contracts.eventEmitter,\\n                params.market.marketToken,\\n                params.market.shortToken,\\n                params.order.account(),\\n                fees.funding.claimableShortTokenAmount\\n            );\\n        }\\n    }\\n\\n    function updateOpenInterest(\\n        PositionUtils.UpdatePositionParams memory params,\\n        int256 sizeDeltaUsd,\\n        int256 sizeDeltaInTokens\\n    ) internal {\\n        if (sizeDeltaUsd != 0) {\\n            MarketUtils.applyDeltaToOpenInterest(\\n                params.contracts.dataStore,\\n                params.contracts.eventEmitter,\\n                params.market,\\n                params.position.collateralToken(),\\n                params.position.isLong(),\\n                sizeDeltaUsd\\n            );\\n\\n            MarketUtils.applyDeltaToOpenInterestInTokens(\\n                params.contracts.dataStore,\\n                params.contracts.eventEmitter,\\n                params.position.market(),\\n                params.position.collateralToken(),\\n                params.position.isLong(),\\n                sizeDeltaInTokens\\n            );\\n        }\\n    }\\n\\n    function handleReferral(\\n        PositionUtils.UpdatePositionParams memory params,\\n        PositionPricingUtils.PositionFees memory fees\\n    ) internal {\\n        ReferralUtils.incrementAffiliateReward(\\n            params.contracts.dataStore,\\n            params.contracts.eventEmitter,\\n            params.position.market(),\\n            params.position.collateralToken(),\\n            fees.referral.affiliate,\\n            fees.referral.affiliateRewardAmount\\n        );\\n    }\\n\\n    // returns priceImpactUsd, priceImpactAmount, baseSizeDeltaInTokens, executionPrice, balanceWasImproved\\n    function getExecutionPriceForIncrease(\\n        UpdatePositionParams memory params,\\n        Price.Props memory indexTokenPrice\\n    ) external view returns (int256, int256, uint256, uint256, bool) {\\n        // note that the executionPrice is not validated against the order.acceptablePrice value\\n        // if the sizeDeltaUsd is zero\\n        // for limit orders the order.triggerPrice should still have been validated\\n        if (params.order.sizeDeltaUsd() == 0) {\\n            // increase order:\\n            //     - long: use the larger price\\n            //     - short: use the smaller price\\n            return (0, 0, 0, indexTokenPrice.pickPrice(params.position.isLong()), false);\\n        }\\n\\n        GetExecutionPriceForIncreaseCache memory cache;\\n\\n        (cache.priceImpactUsd, cache.balanceWasImproved) = PositionPricingUtils.getPriceImpactUsd(\\n            PositionPricingUtils.GetPriceImpactUsdParams(\\n                params.contracts.dataStore,\\n                params.market,\\n                params.order.sizeDeltaUsd().toInt256(),\\n                params.order.isLong()\\n            )\\n        );\\n\\n        // cap positive priceImpactUsd based on the max positive position impact factor\\n        // note that the positive priceImpactUsd is not capped by the position impact pool here\\n        // this is to prevent cases where for new markets, user A opens a position with negative\\n        // price impact and user B does not have any incentive to open a position to balance the pool\\n        // because the price impact pool is empty until user A closes\\n        // the positive price impact will still be capped during position decrease when the positive\\n        // price impact is actually paid out\\n        cache.priceImpactUsd = MarketUtils.capPositiveImpactUsdByMaxPositionImpact(\\n            params.contracts.dataStore,\\n            params.market.marketToken,\\n            cache.priceImpactUsd,\\n            params.order.sizeDeltaUsd()\\n        );\\n\\n        // for long positions\\n        //\\n        // if price impact is positive, the sizeDeltaInTokens would be increased by the priceImpactAmount\\n        // the priceImpactAmount should be minimized\\n        //\\n        // if price impact is negative, the sizeDeltaInTokens would be decreased by the priceImpactAmount\\n        // the priceImpactAmount should be maximized\\n\\n        // for short positions\\n        //\\n        // if price impact is positive, the sizeDeltaInTokens would be decreased by the priceImpactAmount\\n        // the priceImpactAmount should be minimized\\n        //\\n        // if price impact is negative, the sizeDeltaInTokens would be increased by the priceImpactAmount\\n        // the priceImpactAmount should be maximized\\n\\n        if (cache.priceImpactUsd > 0) {\\n            // use indexTokenPrice.max and round down to minimize the priceImpactAmount\\n            cache.priceImpactAmount = cache.priceImpactUsd / indexTokenPrice.max.toInt256();\\n        } else {\\n            // use indexTokenPrice.min and round up to maximize the priceImpactAmount\\n            cache.priceImpactAmount = Calc.roundUpMagnitudeDivision(cache.priceImpactUsd, indexTokenPrice.min);\\n        }\\n\\n        if (params.position.isLong()) {\\n            // round the number of tokens for long positions down\\n            cache.baseSizeDeltaInTokens = params.order.sizeDeltaUsd() / indexTokenPrice.max;\\n        } else {\\n            // round the number of tokens for short positions up\\n            cache.baseSizeDeltaInTokens = Calc.roundUpDivision(params.order.sizeDeltaUsd(), indexTokenPrice.min);\\n        }\\n\\n        int256 sizeDeltaInTokens;\\n        if (params.position.isLong()) {\\n            sizeDeltaInTokens = cache.baseSizeDeltaInTokens.toInt256() + cache.priceImpactAmount;\\n        } else {\\n            sizeDeltaInTokens = cache.baseSizeDeltaInTokens.toInt256() - cache.priceImpactAmount;\\n        }\\n\\n        if (sizeDeltaInTokens < 0) {\\n            revert Errors.PriceImpactLargerThanOrderSize(cache.priceImpactUsd, params.order.sizeDeltaUsd());\\n        }\\n\\n        // using increase of long positions as an example\\n        // if price is $2000, sizeDeltaUsd is $5000, priceImpactUsd is -$1000\\n        // priceImpactAmount = -1000 / 2000 = -0.5\\n        // baseSizeDeltaInTokens = 5000 / 2000 = 2.5\\n        // sizeDeltaInTokens = 2.5 - 0.5 = 2\\n        // executionPrice = 5000 / 2 = $2500\\n        cache.executionPrice = BaseOrderUtils.getExecutionPriceForIncrease(\\n            params.order.sizeDeltaUsd(),\\n            sizeDeltaInTokens.toUint256(),\\n            params.order.acceptablePrice(),\\n            params.position.isLong()\\n        );\\n\\n        return (cache.priceImpactUsd, cache.priceImpactAmount, cache.baseSizeDeltaInTokens, cache.executionPrice, cache.balanceWasImproved);\\n    }\\n\\n    // returns priceImpactUsd, executionPrice, balanceWasImproved\\n    function getExecutionPriceForDecrease(\\n        UpdatePositionParams memory params,\\n        Price.Props memory indexTokenPrice\\n    ) external view returns (int256, uint256, bool) {\\n        uint256 sizeDeltaUsd = params.order.sizeDeltaUsd();\\n\\n        // note that the executionPrice is not validated against the order.acceptablePrice value\\n        // if the sizeDeltaUsd is zero\\n        // for limit orders the order.triggerPrice should still have been validated\\n        if (sizeDeltaUsd == 0) {\\n            // decrease order:\\n            //     - long: use the smaller price\\n            //     - short: use the larger price\\n            return (0, indexTokenPrice.pickPrice(!params.position.isLong()), false);\\n        }\\n\\n        GetExecutionPriceForDecreaseCache memory cache;\\n\\n        (cache.priceImpactUsd, cache.balanceWasImproved) = PositionPricingUtils.getPriceImpactUsd(\\n            PositionPricingUtils.GetPriceImpactUsdParams(\\n                params.contracts.dataStore,\\n                params.market,\\n                -sizeDeltaUsd.toInt256(),\\n                params.order.isLong()\\n            )\\n        );\\n\\n        // cap positive priceImpactUsd based on the max positive position impact factor\\n        cache.priceImpactUsd = MarketUtils.capPositiveImpactUsdByMaxPositionImpact(\\n            params.contracts.dataStore,\\n            params.market.marketToken,\\n            cache.priceImpactUsd,\\n            params.order.sizeDeltaUsd()\\n        );\\n\\n        cache.executionPrice = BaseOrderUtils.getExecutionPriceForDecrease(\\n            indexTokenPrice,\\n            params.position.sizeInUsd(),\\n            params.position.sizeInTokens(),\\n            sizeDeltaUsd,\\n            cache.priceImpactUsd,\\n            params.order.acceptablePrice(),\\n            params.position.isLong()\\n        );\\n\\n        return (cache.priceImpactUsd, cache.executionPrice, cache.balanceWasImproved);\\n    }\\n\\n    function updatePositionLastSrcChainId(DataStore dataStore, bytes32 positionKey, uint256 srcChainId) internal {\\n        dataStore.setUint(Keys.positionLastSrcChainId(positionKey), srcChainId);\\n    }\\n}\\n\",\"keccak256\":\"0x9ed298e8950cea9a3033a6c19978f092f4160fe5cb5ea990875a125f64036f7d\",\"license\":\"BUSL-1.1\"},\"contracts/price/Price.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Price\\n// @dev Struct for prices\\nlibrary Price {\\n    // @param min the min price\\n    // @param max the max price\\n    struct Props {\\n        uint256 min;\\n        uint256 max;\\n    }\\n\\n    // @dev check if a price is empty\\n    // @param props Props\\n    // @return whether a price is empty\\n    function isEmpty(Props memory props) internal pure returns (bool) {\\n        return props.min == 0 || props.max == 0;\\n    }\\n\\n    // @dev get the average of the min and max values\\n    // @param props Props\\n    // @return the average of the min and max values\\n    function midPrice(Props memory props) internal pure returns (uint256) {\\n        return (props.max + props.min) / 2;\\n    }\\n\\n    // @dev pick either the min or max value\\n    // @param props Props\\n    // @param maximize whether to pick the min or max value\\n    // @return either the min or max value\\n    function pickPrice(Props memory props, bool maximize) internal pure returns (uint256) {\\n        return maximize ? props.max : props.min;\\n    }\\n\\n    // @dev pick the min or max price depending on whether it is for a long or short position\\n    // and whether the pending pnl should be maximized or not\\n    // @param props Props\\n    // @param isLong whether it is for a long or short position\\n    // @param maximize whether the pnl should be maximized or not\\n    // @return the min or max price\\n    function pickPriceForPnl(Props memory props, bool isLong, bool maximize) internal pure returns (uint256) {\\n        // for long positions, pick the larger price to maximize pnl\\n        // for short positions, pick the smaller price to maximize pnl\\n        if (isLong) {\\n            return maximize ? props.max : props.min;\\n        }\\n\\n        return maximize ? props.min : props.max;\\n    }\\n}\\n\",\"keccak256\":\"0x39783950d37d565ee3fbff5023206cfb6993bb49523e7fe37f367393cb54bedd\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/ISwapPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISwapPricingUtils {\\n    enum SwapPricingType {\\n        Swap,\\n        Shift,\\n        AtomicWithdrawal,\\n        Deposit,\\n        Withdrawal,\\n        AtomicSwap\\n    }\\n}\\n\",\"keccak256\":\"0x8504d26a64dbbc21e250abe890c99b0558879617c44590285f05a62315f1b288\",\"license\":\"MIT\"},\"contracts/pricing/PositionPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\nimport \\\"./PricingUtils.sol\\\";\\n\\nimport \\\"../referral/IReferralStorage.sol\\\";\\nimport \\\"../referral/ReferralUtils.sol\\\";\\n\\n// @title PositionPricingUtils\\n// @dev Library for position pricing functions\\nlibrary PositionPricingUtils {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Position for Position.Props;\\n    using Price for Price.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    struct GetPositionFeesParams {\\n        DataStore dataStore;\\n        IReferralStorage referralStorage;\\n        Position.Props position;\\n        Price.Props collateralTokenPrice;\\n        bool balanceWasImproved;\\n        address longToken;\\n        address shortToken;\\n        uint256 sizeDeltaUsd;\\n        address uiFeeReceiver;\\n        bool isLiquidation;\\n    }\\n\\n    // @dev GetPriceImpactUsdParams struct used in getPriceImpactUsd to avoid stack\\n    // too deep errors\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param usdDelta the change in position size in USD\\n    // @param isLong whether the position is long or short\\n    struct GetPriceImpactUsdParams {\\n        DataStore dataStore;\\n        Market.Props market;\\n        int256 usdDelta;\\n        bool isLong;\\n    }\\n\\n    // @dev OpenInterestParams struct to contain open interest values\\n    // @param longOpenInterest the amount of long open interest\\n    // @param shortOpenInterest the amount of short open interest\\n    // @param nextLongOpenInterest the updated amount of long open interest\\n    // @param nextShortOpenInterest the updated amount of short open interest\\n    struct OpenInterestParams {\\n        uint256 longOpenInterest;\\n        uint256 shortOpenInterest;\\n        uint256 nextLongOpenInterest;\\n        uint256 nextShortOpenInterest;\\n    }\\n\\n    // @dev PositionFees struct to contain fee values\\n    // @param feeReceiverAmount the amount for the fee receiver\\n    // @param feeAmountForPool the amount of fees for the pool\\n    // @param positionFeeAmountForPool the position fee amount for the pool\\n    // @param positionFeeAmount the fee amount for increasing / decreasing the position\\n    // @param borrowingFeeAmount the borrowing fee amount\\n    // @param totalCostAmount the total cost amount in tokens\\n    struct PositionFees {\\n        PositionReferralFees referral;\\n        PositionProFees pro;\\n        PositionFundingFees funding;\\n        PositionBorrowingFees borrowing;\\n        PositionUiFees ui;\\n        PositionLiquidationFees liquidation;\\n        Price.Props collateralTokenPrice;\\n        uint256 positionFeeFactor;\\n        uint256 protocolFeeAmount;\\n        uint256 positionFeeReceiverFactor;\\n        uint256 feeReceiverAmount;\\n        uint256 feeAmountForPool;\\n        uint256 positionFeeAmountForPool;\\n        uint256 positionFeeAmount;\\n        uint256 totalCostAmountExcludingFunding;\\n        uint256 totalCostAmount;\\n        uint256 totalDiscountAmount;\\n    }\\n\\n    struct PositionProFees {\\n        uint256 traderTier;\\n        uint256 traderDiscountFactor;\\n        uint256 traderDiscountAmount;\\n    }\\n\\n    struct PositionLiquidationFees {\\n        uint256 liquidationFeeUsd;\\n        uint256 liquidationFeeAmount;\\n        uint256 liquidationFeeReceiverFactor;\\n        uint256 liquidationFeeAmountForFeeReceiver;\\n    }\\n\\n    // @param affiliate the referral affiliate of the trader\\n    // @param traderDiscountAmount the discount amount for the trader\\n    // @param affiliateRewardAmount the affiliate reward amount\\n    struct PositionReferralFees {\\n        bytes32 referralCode;\\n        address affiliate;\\n        address trader;\\n        uint256 totalRebateFactor;\\n        uint256 affiliateRewardFactor;\\n        uint256 adjustedAffiliateRewardFactor;\\n        uint256 traderDiscountFactor;\\n        uint256 totalRebateAmount;\\n        uint256 traderDiscountAmount;\\n        uint256 affiliateRewardAmount;\\n    }\\n\\n    struct PositionBorrowingFees {\\n        uint256 borrowingFeeUsd;\\n        uint256 borrowingFeeAmount;\\n        uint256 borrowingFeeReceiverFactor;\\n        uint256 borrowingFeeAmountForFeeReceiver;\\n    }\\n\\n    // @param fundingFeeAmount the position's funding fee amount\\n    // @param claimableLongTokenAmount the negative funding fee in long token that is claimable\\n    // @param claimableShortTokenAmount the negative funding fee in short token that is claimable\\n    // @param latestLongTokenFundingAmountPerSize the latest long token funding\\n    // amount per size for the market\\n    // @param latestShortTokenFundingAmountPerSize the latest short token funding\\n    // amount per size for the market\\n    struct PositionFundingFees {\\n        uint256 fundingFeeAmount;\\n        uint256 claimableLongTokenAmount;\\n        uint256 claimableShortTokenAmount;\\n        uint256 latestFundingFeeAmountPerSize;\\n        uint256 latestLongTokenClaimableFundingAmountPerSize;\\n        uint256 latestShortTokenClaimableFundingAmountPerSize;\\n    }\\n\\n    struct PositionUiFees {\\n        address uiFeeReceiver;\\n        uint256 uiFeeReceiverFactor;\\n        uint256 uiFeeAmount;\\n    }\\n\\n    // @dev get the price impact in USD for a position increase / decrease and whether the balance was improved\\n    // @param params GetPriceImpactUsdParams and the balanceWasImproved boolean\\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) internal view returns (int256, bool) {\\n        OpenInterestParams memory openInterestParams = getNextOpenInterest(params);\\n\\n        (int256 priceImpactUsd, bool balanceWasImproved) = _getPriceImpactUsd(params.dataStore, params.market.marketToken, openInterestParams);\\n\\n        // the virtual price impact calculation is skipped if the price impact\\n        // is positive since the action is helping to balance the pool\\n        //\\n        // in case two virtual pools are unbalanced in a different direction\\n        // e.g. pool0 has more longs than shorts while pool1 has less longs\\n        // than shorts\\n        // not skipping the virtual price impact calculation would lead to\\n        // a negative price impact for any trade on either pools and would\\n        // disincentivise the balancing of pools\\n        if (priceImpactUsd >= 0) { return (priceImpactUsd, balanceWasImproved); }\\n\\n        (bool hasVirtualInventory, int256 virtualInventory) = MarketUtils.getVirtualInventoryForPositions(params.dataStore, params.market.indexToken);\\n        if (!hasVirtualInventory) { return (priceImpactUsd, balanceWasImproved); }\\n\\n        OpenInterestParams memory openInterestParamsForVirtualInventory = getNextOpenInterestForVirtualInventory(params, virtualInventory);\\n        (int256 priceImpactUsdForVirtualInventory, bool balanceWasImprovedForVirtualInventory) = _getPriceImpactUsd(params.dataStore, params.market.marketToken, openInterestParamsForVirtualInventory);\\n\\n        return priceImpactUsdForVirtualInventory < priceImpactUsd ? (priceImpactUsdForVirtualInventory, balanceWasImprovedForVirtualInventory) : (priceImpactUsd, balanceWasImproved);\\n    }\\n\\n    // @dev get the price impact in USD for a position increase / decrease and whether the balance was improved\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param openInterestParams OpenInterestParams and the balanceWasImproved boolean\\n    function _getPriceImpactUsd(DataStore dataStore, address market, OpenInterestParams memory openInterestParams) internal view returns (int256, bool) {\\n        uint256 initialDiffUsd = Calc.diff(openInterestParams.longOpenInterest, openInterestParams.shortOpenInterest);\\n        uint256 nextDiffUsd = Calc.diff(openInterestParams.nextLongOpenInterest, openInterestParams.nextShortOpenInterest);\\n\\n        // check whether an improvement in balance comes from causing the balance to switch sides\\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\\n        bool isSameSideRebalance = openInterestParams.longOpenInterest <= openInterestParams.shortOpenInterest == openInterestParams.nextLongOpenInterest <= openInterestParams.nextShortOpenInterest;\\n        uint256 impactExponentFactor = dataStore.getUint(Keys.positionImpactExponentFactorKey(market));\\n\\n        bool balanceWasImproved = nextDiffUsd < initialDiffUsd;\\n        if (isSameSideRebalance) {\\n            uint256 impactFactor = MarketUtils.getAdjustedPositionImpactFactor(dataStore, market, balanceWasImproved);\\n\\n            return (\\n                PricingUtils.getPriceImpactUsdForSameSideRebalance(\\n                    initialDiffUsd,\\n                    nextDiffUsd,\\n                    impactFactor,\\n                    impactExponentFactor\\n                ),\\n                balanceWasImproved\\n            );\\n        } else {\\n            (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = MarketUtils.getAdjustedPositionImpactFactors(dataStore, market);\\n\\n            return (\\n                PricingUtils.getPriceImpactUsdForCrossoverRebalance(\\n                    initialDiffUsd,\\n                    nextDiffUsd,\\n                    positiveImpactFactor,\\n                    negativeImpactFactor,\\n                    impactExponentFactor\\n                ),\\n                balanceWasImproved\\n            );\\n        }\\n    }\\n\\n    // @dev get the next open interest values\\n    // @param params GetPriceImpactUsdParams\\n    // @return OpenInterestParams\\n    function getNextOpenInterest(\\n        GetPriceImpactUsdParams memory params\\n    ) internal view returns (OpenInterestParams memory) {\\n        uint256 longOpenInterest = MarketUtils.getOpenInterest(\\n            params.dataStore,\\n            params.market,\\n            true\\n        );\\n\\n        uint256 shortOpenInterest = MarketUtils.getOpenInterest(\\n            params.dataStore,\\n            params.market,\\n            false\\n        );\\n\\n        return getNextOpenInterestParams(params, longOpenInterest, shortOpenInterest);\\n    }\\n\\n    function getNextOpenInterestForVirtualInventory(\\n        GetPriceImpactUsdParams memory params,\\n        int256 virtualInventory\\n    ) internal pure returns (OpenInterestParams memory) {\\n        uint256 longOpenInterest;\\n        uint256 shortOpenInterest;\\n\\n        // if virtualInventory is more than zero it means that\\n        // tokens were virtually sold to the pool, so set shortOpenInterest\\n        // to the virtualInventory value\\n        // if virtualInventory is less than zero it means that\\n        // tokens were virtually bought from the pool, so set longOpenInterest\\n        // to the virtualInventory value\\n        if (virtualInventory > 0) {\\n            shortOpenInterest = virtualInventory.toUint256();\\n        } else {\\n            longOpenInterest = (-virtualInventory).toUint256();\\n        }\\n\\n        // the virtual long and short open interest is adjusted by the usdDelta\\n        // to prevent an underflow in getNextOpenInterestParams\\n        // price impact depends on the change in USD balance, so offsetting both\\n        // values equally should not change the price impact calculation\\n        if (params.usdDelta < 0) {\\n            uint256 offset = (-params.usdDelta).toUint256();\\n            longOpenInterest += offset;\\n            shortOpenInterest += offset;\\n        }\\n\\n        return getNextOpenInterestParams(params, longOpenInterest, shortOpenInterest);\\n    }\\n\\n    function getNextOpenInterestParams(\\n        GetPriceImpactUsdParams memory params,\\n        uint256 longOpenInterest,\\n        uint256 shortOpenInterest\\n    ) internal pure returns (OpenInterestParams memory) {\\n        uint256 nextLongOpenInterest = longOpenInterest;\\n        uint256 nextShortOpenInterest = shortOpenInterest;\\n\\n        if (params.isLong) {\\n            if (params.usdDelta < 0 && (-params.usdDelta).toUint256() > longOpenInterest) {\\n                revert Errors.UsdDeltaExceedsLongOpenInterest(params.usdDelta, longOpenInterest);\\n            }\\n\\n            nextLongOpenInterest = Calc.sumReturnUint256(longOpenInterest, params.usdDelta);\\n        } else {\\n            if (params.usdDelta < 0 && (-params.usdDelta).toUint256() > shortOpenInterest) {\\n                revert Errors.UsdDeltaExceedsShortOpenInterest(params.usdDelta, shortOpenInterest);\\n            }\\n\\n            nextShortOpenInterest = Calc.sumReturnUint256(shortOpenInterest, params.usdDelta);\\n        }\\n\\n        OpenInterestParams memory openInterestParams = OpenInterestParams(\\n            longOpenInterest,\\n            shortOpenInterest,\\n            nextLongOpenInterest,\\n            nextShortOpenInterest\\n        );\\n\\n        return openInterestParams;\\n    }\\n\\n    // @dev get position fees\\n    // @param dataStore DataStore\\n    // @param referralStorage IReferralStorage\\n    // @param position the position values\\n    // @param collateralTokenPrice the price of the position's collateralToken\\n    // @param longToken the long token of the market\\n    // @param shortToken the short token of the market\\n    // @param sizeDeltaUsd the change in position size\\n    // @return PositionFees\\n    function getPositionFees(\\n        GetPositionFeesParams memory params\\n    ) internal view returns (PositionFees memory) {\\n        PositionFees memory fees = getPositionFeesAfterReferral(\\n            params.dataStore,\\n            params.referralStorage,\\n            params.collateralTokenPrice,\\n            params.balanceWasImproved,\\n            params.position.account(),\\n            params.position.market(),\\n            params.sizeDeltaUsd\\n        );\\n\\n        uint256 borrowingFeeUsd = MarketUtils.getBorrowingFees(params.dataStore, params.position);\\n\\n        fees.borrowing = getBorrowingFees(\\n            params.dataStore,\\n            params.collateralTokenPrice,\\n            borrowingFeeUsd\\n        );\\n\\n        if (params.isLiquidation) {\\n            fees.liquidation = getLiquidationFees(params.dataStore, params.position.market(), params.sizeDeltaUsd, params.collateralTokenPrice);\\n        }\\n\\n        fees.feeAmountForPool =\\n            fees.positionFeeAmountForPool +\\n            fees.borrowing.borrowingFeeAmount -\\n            fees.borrowing.borrowingFeeAmountForFeeReceiver +\\n            fees.liquidation.liquidationFeeAmount -\\n            fees.liquidation.liquidationFeeAmountForFeeReceiver;\\n\\n        fees.feeReceiverAmount +=\\n            fees.borrowing.borrowingFeeAmountForFeeReceiver +\\n            fees.liquidation.liquidationFeeAmountForFeeReceiver;\\n\\n        fees.funding.latestFundingFeeAmountPerSize = MarketUtils.getFundingFeeAmountPerSize(\\n            params.dataStore,\\n            params.position.market(),\\n            params.position.collateralToken(),\\n            params.position.isLong()\\n        );\\n\\n        fees.funding.latestLongTokenClaimableFundingAmountPerSize = MarketUtils.getClaimableFundingAmountPerSize(\\n            params.dataStore,\\n            params.position.market(),\\n            params.longToken,\\n            params.position.isLong()\\n        );\\n\\n        fees.funding.latestShortTokenClaimableFundingAmountPerSize = MarketUtils.getClaimableFundingAmountPerSize(\\n            params.dataStore,\\n            params.position.market(),\\n            params.shortToken,\\n            params.position.isLong()\\n        );\\n\\n        fees.funding = getFundingFees(\\n            fees.funding,\\n            params.position\\n        );\\n\\n        fees.ui = getUiFees(\\n            params.dataStore,\\n            params.collateralTokenPrice,\\n            params.sizeDeltaUsd,\\n            params.uiFeeReceiver\\n        );\\n\\n        fees.totalCostAmountExcludingFunding =\\n            fees.positionFeeAmount\\n            + fees.borrowing.borrowingFeeAmount\\n            + fees.liquidation.liquidationFeeAmount\\n            + fees.ui.uiFeeAmount\\n            - fees.totalDiscountAmount;\\n\\n        fees.totalCostAmount =\\n            fees.totalCostAmountExcludingFunding\\n            + fees.funding.fundingFeeAmount;\\n\\n        return fees;\\n    }\\n\\n    function getBorrowingFees(\\n        DataStore dataStore,\\n        Price.Props memory collateralTokenPrice,\\n        uint256 borrowingFeeUsd\\n    ) internal view returns (PositionBorrowingFees memory) {\\n        PositionBorrowingFees memory borrowingFees;\\n\\n        borrowingFees.borrowingFeeUsd = borrowingFeeUsd;\\n        borrowingFees.borrowingFeeAmount = borrowingFeeUsd / collateralTokenPrice.min;\\n        borrowingFees.borrowingFeeReceiverFactor = dataStore.getUint(Keys.BORROWING_FEE_RECEIVER_FACTOR);\\n        borrowingFees.borrowingFeeAmountForFeeReceiver = Precision.applyFactor(borrowingFees.borrowingFeeAmount, borrowingFees.borrowingFeeReceiverFactor);\\n\\n        return borrowingFees;\\n    }\\n\\n    function getFundingFees(\\n        PositionFundingFees memory fundingFees,\\n        Position.Props memory position\\n    ) internal pure returns (PositionFundingFees memory) {\\n        fundingFees.fundingFeeAmount = MarketUtils.getFundingAmount(\\n            fundingFees.latestFundingFeeAmountPerSize,\\n            position.fundingFeeAmountPerSize(),\\n            position.sizeInUsd(),\\n            true // roundUpMagnitude\\n        );\\n\\n        fundingFees.claimableLongTokenAmount = MarketUtils.getFundingAmount(\\n            fundingFees.latestLongTokenClaimableFundingAmountPerSize,\\n            position.longTokenClaimableFundingAmountPerSize(),\\n            position.sizeInUsd(),\\n            false // roundUpMagnitude\\n        );\\n\\n        fundingFees.claimableShortTokenAmount = MarketUtils.getFundingAmount(\\n            fundingFees.latestShortTokenClaimableFundingAmountPerSize,\\n            position.shortTokenClaimableFundingAmountPerSize(),\\n            position.sizeInUsd(),\\n            false // roundUpMagnitude\\n        );\\n\\n        return fundingFees;\\n    }\\n\\n    function getUiFees(\\n        DataStore dataStore,\\n        Price.Props memory collateralTokenPrice,\\n        uint256 sizeDeltaUsd,\\n        address uiFeeReceiver\\n    ) internal view returns (PositionUiFees memory) {\\n        PositionUiFees memory uiFees;\\n\\n        if (uiFeeReceiver == address(0)) {\\n            return uiFees;\\n        }\\n\\n        uiFees.uiFeeReceiver = uiFeeReceiver;\\n        uiFees.uiFeeReceiverFactor = MarketUtils.getUiFeeFactor(dataStore, uiFeeReceiver);\\n        uiFees.uiFeeAmount = Precision.applyFactor(sizeDeltaUsd, uiFees.uiFeeReceiverFactor) / collateralTokenPrice.min;\\n\\n        return uiFees;\\n    }\\n\\n    // @dev get position fees after applying referral rebates / discounts\\n    // @param dataStore DataStore\\n    // @param referralStorage IReferralStorage\\n    // @param collateralTokenPrice the price of the position's collateralToken\\n    // @param the position's account\\n    // @param market the position's market\\n    // @param sizeDeltaUsd the change in position size\\n    // @return (affiliate, traderDiscountAmount, affiliateRewardAmount, feeReceiverAmount, positionFeeAmountForPool)\\n    function getPositionFeesAfterReferral(\\n        DataStore dataStore,\\n        IReferralStorage referralStorage,\\n        Price.Props memory collateralTokenPrice,\\n        bool balanceWasImproved,\\n        address account,\\n        address market,\\n        uint256 sizeDeltaUsd\\n    ) internal view returns (PositionFees memory) {\\n        PositionFees memory fees;\\n\\n        fees.collateralTokenPrice = collateralTokenPrice;\\n\\n        fees.referral.trader = account;\\n        uint256 minAffiliateRewardFactor;\\n        (\\n            fees.referral.referralCode,\\n            fees.referral.affiliate,\\n            fees.referral.affiliateRewardFactor,\\n            fees.referral.traderDiscountFactor,\\n            minAffiliateRewardFactor\\n        ) = ReferralUtils.getReferralInfo(dataStore, referralStorage, account);\\n\\n        // note that since it is possible to incur both positive and negative price impact values\\n        // and the negative price impact factor may be larger than the positive impact factor\\n        // it is possible for the balance to be improved overall but for the price impact to still be negative\\n        // in this case the fee factor for the **positive** price impact would be charged for the case when priceImpactUsd is negative and balanceWasImproved\\n        // a user could split the order into two, to incur a smaller fee, reducing the fee through this should not be a large issue\\n        fees.positionFeeFactor = dataStore.getUint(Keys.positionFeeFactorKey(market, balanceWasImproved));\\n        fees.positionFeeAmount = Precision.applyFactor(sizeDeltaUsd, fees.positionFeeFactor) / collateralTokenPrice.min;\\n\\n        // pro tiers are provided as a flexible option to allow for custom criteria based discounts,\\n        // the exact criteria and usage of this feature should be decided by the DAO\\n        fees.pro.traderTier = dataStore.getUint(Keys.proTraderTierKey(account));\\n        if (fees.pro.traderTier > 0) {\\n            fees.pro.traderDiscountFactor = dataStore.getUint(Keys.proDiscountFactorKey(fees.pro.traderTier));\\n\\n            if (fees.pro.traderDiscountFactor > 0) {\\n                fees.pro.traderDiscountAmount = Precision.applyFactor(fees.positionFeeAmount, fees.pro.traderDiscountFactor);\\n            }\\n        }\\n\\n        // if pro discount is higher than referral discount then affiliate reward is capped at (total referral rebate - pro discount)\\n        // but can not be lower than configured min affiliate reward\\n        //\\n        // example 1:\\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 5%\\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 5%, 5%) = 15%\\n        // trader gets 10% discount, affiliate reward is capped at 15%, affiliate gets full 10% reward\\n        // protocol gets 80%\\n        //\\n        // example 2:\\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 13%\\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 13%, 5%) = 7%\\n        // trader gets 13% discount, affiliate reward is capped at 7%, affiliate gets capped 7% reward\\n        // protocol gets 80%\\n        //\\n        // example 3:\\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 18%\\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 18%, 5%) = 5%\\n        // trader gets 18% discount, affiliate reward is capped at 5%, affiliate gets capped 5% reward\\n        // protocol gets 77%\\n        //\\n        // example 4:\\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 25%\\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 25%, 5%) = 5%\\n        // trader gets 25% discount, affiliate reward is capped at 5%, affiliate gets capped 5% reward\\n        // protocol gets 70%\\n\\n        if (fees.referral.referralCode != bytes32(0)) {\\n            fees.referral.adjustedAffiliateRewardFactor = fees.referral.affiliateRewardFactor;\\n            fees.referral.totalRebateFactor = fees.referral.affiliateRewardFactor + fees.referral.traderDiscountFactor;\\n            // if pro discount is higher than referral discount then affiliate reward should be capped\\n            // at max of (min affiliate reward, total referral rebate - pro discount)\\n            if (fees.pro.traderDiscountFactor > fees.referral.traderDiscountFactor) {\\n                fees.referral.adjustedAffiliateRewardFactor = fees.pro.traderDiscountFactor > fees.referral.totalRebateFactor\\n                    ? minAffiliateRewardFactor\\n                    : fees.referral.totalRebateFactor - fees.pro.traderDiscountFactor;\\n                if (fees.referral.adjustedAffiliateRewardFactor < minAffiliateRewardFactor) {\\n                    fees.referral.adjustedAffiliateRewardFactor = minAffiliateRewardFactor;\\n                }\\n            }\\n\\n            fees.referral.affiliateRewardAmount = Precision.applyFactor(fees.positionFeeAmount, fees.referral.adjustedAffiliateRewardFactor);\\n            fees.referral.traderDiscountAmount = Precision.applyFactor(fees.positionFeeAmount, fees.referral.traderDiscountFactor);\\n            fees.referral.totalRebateAmount = fees.referral.affiliateRewardAmount + fees.referral.traderDiscountAmount;\\n        }\\n\\n        fees.totalDiscountAmount = fees.pro.traderDiscountAmount > fees.referral.traderDiscountAmount\\n            ? fees.pro.traderDiscountAmount\\n            : fees.referral.traderDiscountAmount;\\n        fees.protocolFeeAmount = fees.positionFeeAmount - fees.referral.affiliateRewardAmount - fees.totalDiscountAmount;\\n\\n        fees.positionFeeReceiverFactor = dataStore.getUint(Keys.POSITION_FEE_RECEIVER_FACTOR);\\n        fees.feeReceiverAmount = Precision.applyFactor(fees.protocolFeeAmount, fees.positionFeeReceiverFactor);\\n        fees.positionFeeAmountForPool = fees.protocolFeeAmount - fees.feeReceiverAmount;\\n\\n        return fees;\\n    }\\n\\n    function getLiquidationFees(DataStore dataStore, address market, uint256 sizeInUsd, Price.Props memory collateralTokenPrice) internal view returns (PositionLiquidationFees memory) {\\n        PositionLiquidationFees memory liquidationFees;\\n        uint256 liquidationFeeFactor = dataStore.getUint(Keys.liquidationFeeFactorKey(market));\\n        if (liquidationFeeFactor == 0) {\\n            return liquidationFees;\\n        }\\n\\n        liquidationFees.liquidationFeeUsd = Precision.applyFactor(sizeInUsd, liquidationFeeFactor);\\n        liquidationFees.liquidationFeeAmount = Calc.roundUpDivision(liquidationFees.liquidationFeeUsd, collateralTokenPrice.min);\\n        liquidationFees.liquidationFeeReceiverFactor = dataStore.getUint(Keys.LIQUIDATION_FEE_RECEIVER_FACTOR);\\n        liquidationFees.liquidationFeeAmountForFeeReceiver = Precision.applyFactor(liquidationFees.liquidationFeeAmount, liquidationFees.liquidationFeeReceiverFactor);\\n        return liquidationFees;\\n    }\\n}\\n\",\"keccak256\":\"0xcc13189a45a45dd9e0b415ca0526dfd3fd1f661a5ef8e1c1b6a1f3e5190b1d37\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/PricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Precision.sol\\\";\\n\\n// @title PricingUtils\\n// @dev Library for pricing functions\\n//\\n// Price impact is calculated as:\\n//\\n// ```\\n// (initial imbalance) ^ (price impact exponent) * (price impact factor / 2) - (next imbalance) ^ (price impact exponent) * (price impact factor / 2)\\n// ```\\n//\\n// For spot actions (deposits, withdrawals, swaps), imbalance is calculated as the\\n// difference in the worth of the long tokens and short tokens.\\n//\\n// For example:\\n//\\n// - A pool has 10 long tokens, each long token is worth $5000\\n// - The pool also has 50,000 short tokens, each short token is worth $1\\n// - The `price impact exponent` is set to 2 and `price impact factor` is set\\n// to `0.01 / 50,000`\\n// - The pool is equally balanced with $50,000 of long tokens and $50,000 of\\n// short tokens\\n// - If a user deposits 10 long tokens, the pool would now have $100,000 of long\\n// tokens and $50,000 of short tokens\\n// - The change in imbalance would be from $0 to -$50,000\\n// - There would be negative price impact charged on the user's deposit,\\n// calculated as `0 ^ 2 * (0.01 / 50,000) - 50,000 ^ 2 * (0.01 / 50,000) => -$500`\\n// - If the user now withdraws 5 long tokens, the balance would change\\n// from -$50,000 to -$25,000, a net change of +$25,000\\n// - There would be a positive price impact rebated to the user in the form of\\n// additional long tokens, calculated as `50,000 ^ 2 * (0.01 / 50,000) - 25,000 ^ 2 * (0.01 / 50,000) => $375`\\n//\\n// For position actions (increase / decrease position), imbalance is calculated\\n// as the difference in the long and short open interest.\\n//\\n// `price impact exponents` and `price impact factors` are configured per market\\n// and can differ for spot and position actions.\\n//\\n// The purpose of the price impact is to help reduce the risk of price manipulation,\\n// since the contracts use an oracle price which would be an average or median price\\n// of multiple reference exchanges. Without a price impact, it may be profitable to\\n//  manipulate the prices on reference exchanges while executing orders on the contracts.\\n//\\n// This risk will also be present if the positive and negative price impact values\\n// are similar, for that reason the positive price impact should be set to a low\\n// value in times of volatility or irregular price movements.\\nlibrary PricingUtils {\\n    // @dev get the price impact USD if there is no crossover in balance\\n    // a crossover in balance is for example if the long open interest is larger\\n    // than the short open interest, and a short position is opened such that the\\n    // short open interest becomes larger than the long open interest\\n    // @param initialDiffUsd the initial difference in USD\\n    // @param nextDiffUsd the next difference in USD\\n    // @param impactFactor the impact factor\\n    // @param impactExponentFactor the impact exponent factor\\n    function getPriceImpactUsdForSameSideRebalance(\\n        uint256 initialDiffUsd,\\n        uint256 nextDiffUsd,\\n        uint256 impactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (int256) {\\n        bool balanceWasImproved = nextDiffUsd < initialDiffUsd;\\n\\n        uint256 deltaDiffUsd = Calc.diff(\\n            applyImpactFactor(initialDiffUsd, impactFactor, impactExponentFactor),\\n            applyImpactFactor(nextDiffUsd, impactFactor, impactExponentFactor)\\n        );\\n\\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, balanceWasImproved);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev get the price impact USD if there is a crossover in balance\\n    // a crossover in balance is for example if the long open interest is larger\\n    // than the short open interest, and a short position is opened such that the\\n    // short open interest becomes larger than the long open interest\\n    // @param initialDiffUsd the initial difference in USD\\n    // @param nextDiffUsd the next difference in USD\\n    // @param impactFactor the impact factor\\n    // @param impactExponentFactor the impact exponent factor\\n    function getPriceImpactUsdForCrossoverRebalance(\\n        uint256 initialDiffUsd,\\n        uint256 nextDiffUsd,\\n        uint256 positiveImpactFactor,\\n        uint256 negativeImpactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (int256) {\\n        uint256 positiveImpactUsd = applyImpactFactor(initialDiffUsd, positiveImpactFactor, impactExponentFactor);\\n        uint256 negativeImpactUsd = applyImpactFactor(nextDiffUsd, negativeImpactFactor, impactExponentFactor);\\n        uint256 deltaDiffUsd = Calc.diff(positiveImpactUsd, negativeImpactUsd);\\n\\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, positiveImpactUsd > negativeImpactUsd);\\n\\n        return priceImpactUsd;\\n    }\\n\\n    // @dev apply the impact factor calculation to a USD diff value\\n    // @param diffUsd the difference in USD\\n    // @param impactFactor the impact factor\\n    // @param impactExponentFactor the impact exponent factor\\n    function applyImpactFactor(\\n        uint256 diffUsd,\\n        uint256 impactFactor,\\n        uint256 impactExponentFactor\\n    ) internal pure returns (uint256) {\\n        uint256 exponentValue = Precision.applyExponentFactor(diffUsd, impactExponentFactor);\\n        return Precision.applyFactor(exponentValue, impactFactor);\\n    }\\n}\\n\",\"keccak256\":\"0x9b20499c3d2c3e7dd9082682f2b511ca1e4ac8f74b90b987e225bc80b039e291\",\"license\":\"BUSL-1.1\"},\"contracts/pricing/SwapPricingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\n\\nimport \\\"./PricingUtils.sol\\\";\\nimport \\\"./ISwapPricingUtils.sol\\\";\\n\\n// @title SwapPricingUtils\\n// @dev Library for pricing functions\\nlibrary SwapPricingUtils {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // @dev GetPriceImpactUsdParams struct used in getPriceImpactUsd to\\n    // avoid stack too deep errors\\n    // @param dataStore DataStore\\n    // @param market the market to check\\n    // @param tokenA the token to check balance for\\n    // @param tokenB the token to check balance for\\n    // @param priceForTokenA the price for tokenA\\n    // @param priceForTokenB the price for tokenB\\n    // @param usdDeltaForTokenA the USD change in amount of tokenA\\n    // @param usdDeltaForTokenB the USD change in amount of tokenB\\n    struct GetPriceImpactUsdParams {\\n        DataStore dataStore;\\n        Market.Props market;\\n        address tokenA;\\n        address tokenB;\\n        uint256 priceForTokenA;\\n        uint256 priceForTokenB;\\n        int256 usdDeltaForTokenA;\\n        int256 usdDeltaForTokenB;\\n        bool includeVirtualInventoryImpact;\\n    }\\n\\n    struct EmitSwapInfoParams {\\n        bytes32 orderKey;\\n        address market;\\n        address receiver;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 tokenInPrice;\\n        uint256 tokenOutPrice;\\n        uint256 amountIn;\\n        uint256 amountInAfterFees;\\n        uint256 amountOut;\\n        int256 priceImpactUsd;\\n        int256 priceImpactAmount;\\n        int256 tokenInPriceImpactAmount;\\n    }\\n\\n    // @dev PoolParams struct to contain pool values\\n    // @param poolUsdForTokenA the USD value of tokenA in the pool\\n    // @param poolUsdForTokenB the USD value of tokenB in the pool\\n    // @param nextPoolUsdForTokenA the next USD value of tokenA in the pool\\n    // @param nextPoolUsdForTokenB the next USD value of tokenB in the pool\\n    struct PoolParams {\\n        uint256 poolUsdForTokenA;\\n        uint256 poolUsdForTokenB;\\n        uint256 nextPoolUsdForTokenA;\\n        uint256 nextPoolUsdForTokenB;\\n    }\\n\\n    // @dev SwapFees struct to contain swap fee values\\n    // @param feeReceiverAmount the fee amount for the fee receiver\\n    // @param feeAmountForPool the fee amount for the pool\\n    // @param amountAfterFees the output amount after fees\\n    struct SwapFees {\\n        uint256 feeReceiverAmount;\\n        uint256 feeAmountForPool;\\n        uint256 amountAfterFees;\\n\\n        address uiFeeReceiver;\\n        uint256 uiFeeReceiverFactor;\\n        uint256 uiFeeAmount;\\n    }\\n\\n    // @dev get the price impact in USD\\n    //\\n    // note that there will be some difference between the pool amounts used for\\n    // calculating the price impact and fees vs the actual pool amounts after the\\n    // swap is done, since the pool amounts will be increased / decreased by an amount\\n    // after factoring in the calculated price impact and fees\\n    //\\n    // since the calculations are based on the real-time prices values of the tokens\\n    // if a token price increases, the pool will incentivise swapping out more of that token\\n    // this is useful if prices are ranging, if prices are strongly directional, the pool may\\n    // be selling tokens as the token price increases\\n    //\\n    // @param params GetPriceImpactUsdParams\\n    //\\n    // @return the price impact in USD and the balanceWasImproved boolean\\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) external view returns (int256, bool) {\\n        PoolParams memory poolParams = getNextPoolAmountsUsd(params);\\n\\n        (int256 priceImpactUsd, bool balanceWasImproved) = _getPriceImpactUsd(params.dataStore, params.market, poolParams);\\n\\n        // the virtual price impact calculation is skipped if the price impact\\n        // is positive since the action is helping to balance the pool\\n        //\\n        // in case two virtual pools are unbalanced in a different direction\\n        // e.g. pool0 has more WNT than USDC while pool1 has less WNT\\n        // than USDT\\n        // not skipping the virtual price impact calculation would lead to\\n        // a negative price impact for any trade on either pools and would\\n        // disincentivise the balancing of pools\\n        if (priceImpactUsd >= 0) { return (priceImpactUsd, balanceWasImproved); }\\n\\n        if (!params.includeVirtualInventoryImpact) {\\n            return (priceImpactUsd, balanceWasImproved);\\n        }\\n\\n        // note that the virtual pool for the long token / short token may be different across pools\\n        // e.g. ETH/USDC, ETH/USDT would have USDC and USDT as the short tokens\\n        // the short token amount is multiplied by the price of the token in the current pool, e.g. if the swap\\n        // is for the ETH/USDC pool, the combined USDC and USDT short token amounts is multiplied by the price of\\n        // USDC to calculate the price impact, this should be reasonable most of the time unless there is a\\n        // large depeg of one of the tokens, in which case it may be necessary to remove that market from being a virtual\\n        // market, removal of virtual markets may lead to incorrect virtual token accounting, the feature to correct for\\n        // this can be added if needed\\n        (bool hasVirtualInventory, uint256 virtualPoolAmountForLongToken, uint256 virtualPoolAmountForShortToken) = MarketUtils.getVirtualInventoryForSwaps(\\n            params.dataStore,\\n            params.market.marketToken\\n        );\\n\\n        if (!hasVirtualInventory) {\\n            return (priceImpactUsd, balanceWasImproved);\\n        }\\n\\n        uint256 virtualPoolAmountForTokenA;\\n        uint256 virtualPoolAmountForTokenB;\\n\\n        if (params.tokenA == params.market.longToken) {\\n            virtualPoolAmountForTokenA = virtualPoolAmountForLongToken;\\n            virtualPoolAmountForTokenB = virtualPoolAmountForShortToken;\\n        } else {\\n            virtualPoolAmountForTokenA = virtualPoolAmountForShortToken;\\n            virtualPoolAmountForTokenB = virtualPoolAmountForLongToken;\\n        }\\n\\n        PoolParams memory poolParamsForVirtualInventory = getNextPoolAmountsParams(\\n            params,\\n            virtualPoolAmountForTokenA,\\n            virtualPoolAmountForTokenB\\n        );\\n\\n        (int256 priceImpactUsdForVirtualInventory, bool balanceWasImprovedForVirtualInventory) = _getPriceImpactUsd(params.dataStore, params.market, poolParamsForVirtualInventory);\\n\\n        return priceImpactUsdForVirtualInventory < priceImpactUsd ? (priceImpactUsdForVirtualInventory, balanceWasImprovedForVirtualInventory) : (priceImpactUsd, balanceWasImproved);\\n    }\\n\\n    // @dev get the price impact in USD and whether the balance was improved\\n    // @param dataStore DataStore\\n    // @param market the trading market\\n    // @param poolParams PoolParams\\n    // @return the price impact in USD and the balanceWasImproved boolean\\n    function _getPriceImpactUsd(DataStore dataStore, Market.Props memory market, PoolParams memory poolParams) internal view returns (int256, bool) {\\n        uint256 initialDiffUsd = Calc.diff(poolParams.poolUsdForTokenA, poolParams.poolUsdForTokenB);\\n        uint256 nextDiffUsd = Calc.diff(poolParams.nextPoolUsdForTokenA, poolParams.nextPoolUsdForTokenB);\\n\\n        // check whether an improvement in balance comes from causing the balance to switch sides\\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\\n        bool isSameSideRebalance = (poolParams.poolUsdForTokenA <= poolParams.poolUsdForTokenB) == (poolParams.nextPoolUsdForTokenA <= poolParams.nextPoolUsdForTokenB);\\n        uint256 impactExponentFactor = dataStore.getUint(Keys.swapImpactExponentFactorKey(market.marketToken));\\n\\n        bool balanceWasImproved = nextDiffUsd < initialDiffUsd;\\n        if (isSameSideRebalance) {\\n            uint256 impactFactor = MarketUtils.getAdjustedSwapImpactFactor(dataStore, market.marketToken, balanceWasImproved);\\n\\n            return (\\n                PricingUtils.getPriceImpactUsdForSameSideRebalance(\\n                    initialDiffUsd,\\n                    nextDiffUsd,\\n                    impactFactor,\\n                    impactExponentFactor\\n                ),\\n                balanceWasImproved\\n            );\\n        } else {\\n            (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = MarketUtils.getAdjustedSwapImpactFactors(dataStore, market.marketToken);\\n\\n            return (\\n                PricingUtils.getPriceImpactUsdForCrossoverRebalance(\\n                    initialDiffUsd,\\n                    nextDiffUsd,\\n                    positiveImpactFactor,\\n                    negativeImpactFactor,\\n                    impactExponentFactor\\n                ),\\n                balanceWasImproved\\n            );\\n        }\\n    }\\n\\n    // @dev get the next pool amounts in USD\\n    // @param params GetPriceImpactUsdParams\\n    // @return PoolParams\\n    function getNextPoolAmountsUsd(\\n        GetPriceImpactUsdParams memory params\\n    ) internal view returns (PoolParams memory) {\\n        uint256 poolAmountForTokenA = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenA);\\n        uint256 poolAmountForTokenB = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenB);\\n\\n        return getNextPoolAmountsParams(\\n            params,\\n            poolAmountForTokenA,\\n            poolAmountForTokenB\\n        );\\n    }\\n\\n    function getNextPoolAmountsParams(\\n        GetPriceImpactUsdParams memory params,\\n        uint256 poolAmountForTokenA,\\n        uint256 poolAmountForTokenB\\n    ) internal pure returns (PoolParams memory) {\\n        uint256 poolUsdForTokenA = poolAmountForTokenA * params.priceForTokenA;\\n        uint256 poolUsdForTokenB = poolAmountForTokenB * params.priceForTokenB;\\n\\n        if (params.usdDeltaForTokenA < 0 && (-params.usdDeltaForTokenA).toUint256() > poolUsdForTokenA) {\\n            revert Errors.UsdDeltaExceedsPoolValue(params.usdDeltaForTokenA, poolUsdForTokenA);\\n        }\\n\\n        if (params.usdDeltaForTokenB < 0 && (-params.usdDeltaForTokenB).toUint256() > poolUsdForTokenB) {\\n            revert Errors.UsdDeltaExceedsPoolValue(params.usdDeltaForTokenB, poolUsdForTokenB);\\n        }\\n\\n        uint256 nextPoolUsdForTokenA = Calc.sumReturnUint256(poolUsdForTokenA, params.usdDeltaForTokenA);\\n        uint256 nextPoolUsdForTokenB = Calc.sumReturnUint256(poolUsdForTokenB, params.usdDeltaForTokenB);\\n\\n        PoolParams memory poolParams = PoolParams(\\n            poolUsdForTokenA,\\n            poolUsdForTokenB,\\n            nextPoolUsdForTokenA,\\n            nextPoolUsdForTokenB\\n        );\\n\\n        return poolParams;\\n    }\\n\\n    // @dev get the swap fees\\n    // @param dataStore DataStore\\n    // @param marketToken the address of the market token\\n    // @param amount the total swap fee amount\\n    function getSwapFees(\\n        DataStore dataStore,\\n        address marketToken,\\n        uint256 amount,\\n        bool balanceWasImproved,\\n        address uiFeeReceiver,\\n        ISwapPricingUtils.SwapPricingType swapPricingType\\n    ) external view returns (SwapFees memory) {\\n        SwapFees memory fees;\\n\\n        // note that since it is possible to incur both positive and negative price impact values\\n        // and the negative price impact factor may be larger than the positive impact factor\\n        // it is possible for the balance to be improved overall but for the price impact to still be negative\\n        // in this case the fee factor for the **positive** price impact would be charged for the case when priceImpactUsd is negative and balanceWasImproved\\n        // a user could split the order into two, to incur a smaller fee, reducing the fee through this should not be a large issue\\n        uint256 feeFactor;\\n\\n        if (swapPricingType == ISwapPricingUtils.SwapPricingType.Swap) {\\n            feeFactor = dataStore.getUint(Keys.swapFeeFactorKey(marketToken, balanceWasImproved));\\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.Shift) {\\n            // empty branch as feeFactor is already zero\\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.AtomicSwap) {\\n            feeFactor = dataStore.getUint(Keys.atomicSwapFeeFactorKey(marketToken));\\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.Deposit) {\\n            feeFactor = dataStore.getUint(Keys.depositFeeFactorKey(marketToken, balanceWasImproved));\\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.Withdrawal) {\\n            feeFactor = dataStore.getUint(Keys.withdrawalFeeFactorKey(marketToken, balanceWasImproved));\\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.AtomicWithdrawal) {\\n            feeFactor = dataStore.getUint(Keys.atomicWithdrawalFeeFactorKey(marketToken));\\n        }\\n\\n        uint256 swapFeeReceiverFactor = dataStore.getUint(Keys.SWAP_FEE_RECEIVER_FACTOR);\\n\\n        uint256 feeAmount = Precision.applyFactor(amount, feeFactor);\\n\\n        fees.feeReceiverAmount = Precision.applyFactor(feeAmount, swapFeeReceiverFactor);\\n        fees.feeAmountForPool = feeAmount - fees.feeReceiverAmount;\\n\\n        fees.uiFeeReceiver = uiFeeReceiver;\\n        fees.uiFeeReceiverFactor = MarketUtils.getUiFeeFactor(dataStore, uiFeeReceiver);\\n        fees.uiFeeAmount = Precision.applyFactor(amount, fees.uiFeeReceiverFactor);\\n\\n        fees.amountAfterFees = amount - feeAmount - fees.uiFeeAmount;\\n\\n        return fees;\\n    }\\n\\n    // note that the priceImpactUsd may not be entirely accurate since it is the\\n    // base calculation and the actual price impact may be capped by the available\\n    // amount in the swap impact pool\\n    function emitSwapInfo(\\n        EventEmitter eventEmitter,\\n        EmitSwapInfoParams memory params\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        // orderKey is zero bytes32 for Gelato Relay fee swaps\\n        eventData.bytes32Items.setItem(0, \\\"orderKey\\\", params.orderKey);\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", params.market);\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", params.receiver);\\n        eventData.addressItems.setItem(2, \\\"tokenIn\\\", params.tokenIn);\\n        eventData.addressItems.setItem(3, \\\"tokenOut\\\", params.tokenOut);\\n\\n        eventData.uintItems.initItems(5);\\n        eventData.uintItems.setItem(0, \\\"tokenInPrice\\\", params.tokenInPrice);\\n        eventData.uintItems.setItem(1, \\\"tokenOutPrice\\\", params.tokenOutPrice);\\n        eventData.uintItems.setItem(2, \\\"amountIn\\\", params.amountIn);\\n        // note that amountInAfterFees includes negative price impact\\n        eventData.uintItems.setItem(3, \\\"amountInAfterFees\\\", params.amountInAfterFees);\\n        eventData.uintItems.setItem(4, \\\"amountOut\\\", params.amountOut);\\n\\n        eventData.intItems.initItems(3);\\n        eventData.intItems.setItem(0, \\\"priceImpactUsd\\\", params.priceImpactUsd);\\n        eventData.intItems.setItem(1, \\\"priceImpactAmount\\\", params.priceImpactAmount);\\n        eventData.intItems.setItem(2, \\\"tokenInPriceImpactAmount\\\", params.tokenInPriceImpactAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"SwapInfo\\\",\\n            Cast.toBytes32(params.market),\\n            eventData\\n        );\\n    }\\n\\n    function emitSwapFeesCollected(\\n        EventEmitter eventEmitter,\\n        bytes32 tradeKey,\\n        address market,\\n        address token,\\n        uint256 tokenPrice,\\n        bytes32 swapFeeType,\\n        SwapFees memory fees\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(2);\\n        eventData.bytes32Items.setItem(0, \\\"tradeKey\\\", tradeKey);\\n        eventData.bytes32Items.setItem(1, \\\"swapFeeType\\\", swapFeeType);\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"uiFeeReceiver\\\", fees.uiFeeReceiver);\\n        eventData.addressItems.setItem(1, \\\"market\\\", market);\\n        eventData.addressItems.setItem(2, \\\"token\\\", token);\\n\\n        eventData.uintItems.initItems(6);\\n        eventData.uintItems.setItem(0, \\\"tokenPrice\\\", tokenPrice);\\n        eventData.uintItems.setItem(1, \\\"feeReceiverAmount\\\", fees.feeReceiverAmount);\\n        eventData.uintItems.setItem(2, \\\"feeAmountForPool\\\", fees.feeAmountForPool);\\n        eventData.uintItems.setItem(3, \\\"amountAfterFees\\\", fees.amountAfterFees);\\n        eventData.uintItems.setItem(4, \\\"uiFeeReceiverFactor\\\", fees.uiFeeReceiverFactor);\\n        eventData.uintItems.setItem(5, \\\"uiFeeAmount\\\", fees.uiFeeAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"SwapFeesCollected\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5bb9cb1d5d2c12d27eb05c98bdbc715e88758577e06318d476797cf27a56e5c0\",\"license\":\"BUSL-1.1\"},\"contracts/referral/IReferralStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title IReferralStorage\\n// @dev Interface for ReferralStorage\\ninterface IReferralStorage {\\n    // @dev get the owner of a referral code\\n    // @param _code the referral code\\n    // @return the owner of the referral code\\n    function codeOwners(bytes32 _code) external view returns (address);\\n    // @dev get the referral code of a trader\\n    // @param _account the address of the trader\\n    // @return the referral code\\n    function traderReferralCodes(address _account) external view returns (bytes32);\\n    // @dev get the trader discount share for an affiliate\\n    // @param _account the address of the affiliate\\n    // @return the trader discount share\\n    function referrerDiscountShares(address _account) external view returns (uint256);\\n    // @dev get the tier level of an affiliate\\n    // @param _account the address of the affiliate\\n    // @return the tier level of the affiliate\\n    function referrerTiers(address _account) external view returns (uint256);\\n    // @dev get the referral info for a trader\\n    // @param _account the address of the trader\\n    // @return (referral code, affiliate)\\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\\n    // @dev set the referral code for a trader\\n    // @param _account the address of the trader\\n    // @param _code the referral code\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n    // @dev set the values for a tier\\n    // @param _tierId the tier level\\n    // @param _totalRebate the total rebate for the tier (affiliate reward + trader discount)\\n    // @param _discountShare the share of the totalRebate for traders\\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\\n    // @dev set the tier for an affiliate\\n    // @param _tierId the tier level\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n    // @dev set the owner for a referral code\\n    // @param _code the referral code\\n    // @param _newAccount the new owner\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n\\n    // @dev get the tier values for a tier level\\n    // @param _tierLevel the tier level\\n    // @return (totalRebate, discountShare)\\n    function tiers(uint256 _tierLevel) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xb4730e94f2026fc942e8df90d2d94f7b8faade6e919f314f59eb1099c7064693\",\"license\":\"BUSL-1.1\"},\"contracts/referral/ReferralEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nlibrary ReferralEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitAffiliateRewardUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address affiliate,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"affiliate\\\", affiliate);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"AffiliateRewardUpdated\\\",\\n            Cast.toBytes32(market),\\n            Cast.toBytes32(affiliate),\\n            eventData\\n        );\\n    }\\n\\n    function emitAffiliateRewardClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address affiliate,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"affiliate\\\", affiliate);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"AffiliateRewardClaimed\\\",\\n            Cast.toBytes32(affiliate),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcbf2a21b4051e6857835cb6e2025695cd9664c8e875be4583a3c642442f2ea71\",\"license\":\"BUSL-1.1\"},\"contracts/referral/ReferralUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../market/MarketToken.sol\\\";\\nimport \\\"../market/MarketUtils.sol\\\";\\n\\nimport \\\"./IReferralStorage.sol\\\";\\nimport \\\"./ReferralEventUtils.sol\\\";\\n\\nimport \\\"../utils/Precision.sol\\\";\\n\\n// @title ReferralUtils\\n// @dev Library for referral functions\\nlibrary ReferralUtils {\\n    // @dev set the referral code for a trader\\n    // @param referralStorage The referral storage instance to use.\\n    // @param account The account of the trader.\\n    // @param referralCode The referral code.\\n    function setTraderReferralCode(\\n        IReferralStorage referralStorage,\\n        address account,\\n        bytes32 referralCode\\n    ) internal {\\n        if (referralCode == bytes32(0)) { return; }\\n\\n        // skip setting of the referral code if the user already has a referral code\\n        if (referralStorage.traderReferralCodes(account) != bytes32(0)) { return; }\\n\\n        referralStorage.setTraderReferralCode(account, referralCode);\\n    }\\n\\n    // @dev Increments the affiliate's reward balance by the specified delta.\\n    // @param dataStore The data store instance to use.\\n    // @param eventEmitter The event emitter instance to use.\\n    // @param market The market address.\\n    // @param token The token address.\\n    // @param affiliate The affiliate's address.\\n    // @param trader The trader's address.\\n    // @param delta The amount to increment the reward balance by.\\n    function incrementAffiliateReward(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address affiliate,\\n        uint256 delta\\n    ) internal {\\n        if (delta == 0) { return; }\\n\\n        uint256 nextValue = dataStore.incrementUint(Keys.affiliateRewardKey(market, token, affiliate), delta);\\n        uint256 nextPoolValue = dataStore.incrementUint(Keys.affiliateRewardKey(market, token), delta);\\n\\n        ReferralEventUtils.emitAffiliateRewardUpdated(\\n            eventEmitter,\\n            market,\\n            token,\\n            affiliate,\\n            delta,\\n            nextValue,\\n            nextPoolValue\\n        );\\n    }\\n\\n    // @dev Gets the referral information for the specified trader.\\n    // @param referralStorage The referral storage instance to use.\\n    // @param trader The trader's address.\\n    // @return The affiliate's address, the total rebate, and the discount share.\\n    function getReferralInfo(\\n        DataStore dataStore,\\n        IReferralStorage referralStorage,\\n        address trader\\n    ) internal view returns (bytes32, address, uint256, uint256, uint256) {\\n        bytes32 code = referralStorage.traderReferralCodes(trader);\\n        address affiliate;\\n        uint256 totalRebate;\\n        uint256 discountShare;\\n        uint256 minAffiliateRewardFactor;\\n\\n        if (code != bytes32(0)) {\\n            affiliate = referralStorage.codeOwners(code);\\n            uint256 referralTierLevel = referralStorage.referrerTiers(affiliate);\\n            (totalRebate, discountShare) = referralStorage.tiers(referralTierLevel);\\n            minAffiliateRewardFactor = dataStore.getUint(Keys.minAffiliateRewardFactorKey(referralTierLevel));\\n\\n            uint256 customDiscountShare = referralStorage.referrerDiscountShares(affiliate);\\n            if (customDiscountShare != 0) {\\n                discountShare = customDiscountShare;\\n            }\\n        }\\n\\n        uint256 traderDiscountFactor = Precision.basisPointsToFloat(totalRebate * discountShare / Precision.BASIS_POINTS_DIVISOR);\\n        uint256 totalRebateFactor = Precision.basisPointsToFloat(totalRebate);\\n        uint256 affiliateRewardFactor = totalRebateFactor - traderDiscountFactor;\\n\\n        return (\\n            code,\\n            affiliate,\\n            affiliateRewardFactor,\\n            traderDiscountFactor,\\n            minAffiliateRewardFactor\\n        );\\n    }\\n\\n    // @dev Claims affiliate rewards for the given markets and tokens and sends the rewards to the specified receiver.\\n    // @param dataStore The data store instance to use.\\n    // @param eventEmitter The event emitter instance to use.\\n    // @param markets An array of market addresses\\n    // @param tokens An array of token addresses, corresponding to the given markets\\n    // @param receiver The address to which the claimed rewards should be sent\\n    // @param account The affiliate's address.\\n    function batchClaimAffiliateRewards(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address[] memory markets,\\n        address[] memory tokens,\\n        address receiver,\\n        address account\\n    ) external returns (uint256[] memory) {\\n        if (markets.length != tokens.length) {\\n            revert Errors.InvalidClaimAffiliateRewardsInput(markets.length, tokens.length);\\n        }\\n\\n        FeatureUtils.validateFeature(dataStore, Keys.claimAffiliateRewardsFeatureDisabledKey(address(this)));\\n\\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\\n\\n        for (uint256 i; i < markets.length; i++) {\\n            claimedAmounts[i] = claimAffiliateReward(\\n                dataStore,\\n                eventEmitter,\\n                markets[i],\\n                tokens[i],\\n                account,\\n                receiver\\n            );\\n        }\\n\\n        return claimedAmounts;\\n    }\\n\\n    // @dev Claims the affiliate's reward balance and transfers it to the specified receiver.\\n    // @param dataStore The data store instance to use.\\n    // @param eventEmitter The event emitter instance to use.\\n    // @param market The market address.\\n    // @param token The token address.\\n    // @param account The affiliate's address.\\n    // @param receiver The address to receive the reward.\\n    function claimAffiliateReward(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver\\n    ) public returns (uint256) {\\n        bytes32 key = Keys.affiliateRewardKey(market, token, account);\\n\\n        uint256 rewardAmount = dataStore.getUint(key);\\n        dataStore.setUint(key, 0);\\n\\n        uint256 nextPoolValue = dataStore.decrementUint(Keys.affiliateRewardKey(market, token), rewardAmount);\\n\\n        MarketToken(payable(market)).transferOut(\\n            token,\\n            receiver,\\n            rewardAmount\\n        );\\n\\n        MarketUtils.validateMarketTokenBalance(dataStore, market);\\n\\n        ReferralEventUtils.emitAffiliateRewardClaimed(\\n            eventEmitter,\\n            market,\\n            token,\\n            account,\\n            receiver,\\n            rewardAmount,\\n            nextPoolValue\\n        );\\n\\n        return rewardAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x0d56a04c6921d50d7fb33ef914457c0ed88cead2a0ad1eaa83c4b6ce09c595b1\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_KEEPER role.\\n     * Hash: 0xfa89e7b5ea0a346d73c71d7d6a3512b9f2ea2c2e6c5fb8211ec351d35deef0f4\\n     */\\n    bytes32 public constant CONTRIBUTOR_KEEPER = keccak256(abi.encode(\\\"CONTRIBUTOR_KEEPER\\\"));\\n    /**\\n     * @dev The CONTRIBUTOR_DISTRIBUTOR role.\\n     * Hash: 0xcdf6da7ad30d8b9afea66fb1cb11b1b7d0b50e9b30b69561a3ca52c39251360c\\n     */\\n    bytes32 public constant CONTRIBUTOR_DISTRIBUTOR = keccak256(abi.encode(\\\"CONTRIBUTOR_DISTRIBUTOR\\\"));\\n}\\n\",\"keccak256\":\"0xf82e35db50f74b43c8598bacd2df901f3c1a292302680a1b02b076fdb387a6ef\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIMITED_CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyLimitedConfigKeeper() {\\n        _validateRole(Role.LIMITED_CONFIG_KEEPER, \\\"LIMITED_CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_KEEPER role to call the function.\\n     */\\n    modifier onlyContributorKeeper() {\\n        _validateRole(Role.CONTRIBUTOR_KEEPER, \\\"CONTRIBUTOR_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTRIBUTOR_DISTRIBUTOR role to call the function.\\n     */\\n    modifier onlyContributorDistributor() {\\n        _validateRole(Role.CONTRIBUTOR_DISTRIBUTOR, \\\"CONTRIBUTOR_DISTRIBUTOR\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd5f2168b69a6c70dc6aacf850491a4eb7c3eaf7b9078deaa83aee0febb9b5ab\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/shift/Shift.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Shift {\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        bytes32[] _dataList;\\n    }\\n\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address fromMarket;\\n        address toMarket;\\n    }\\n\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function fromMarket(Props memory props) internal pure returns (address) {\\n        return props.addresses.fromMarket;\\n    }\\n\\n    function setFromMarket(Props memory props, address value) internal pure {\\n        props.addresses.fromMarket = value;\\n    }\\n\\n    function toMarket(Props memory props) internal pure returns (address) {\\n        return props.addresses.toMarket;\\n    }\\n\\n    function setToMarket(Props memory props, address value) internal pure {\\n        props.addresses.toMarket = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0xe99c93879ffd1027252d42d1e0edb8f178d0cc4926b5de81fbd439651e324935\",\"license\":\"BUSL-1.1\"},\"contracts/shift/ShiftEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Shift.sol\\\";\\n\\nlibrary ShiftEventUtils {\\n    using Shift for Shift.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitShiftCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Shift.Props memory shift\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(shift);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ShiftCreated\\\",\\n            key,\\n            Cast.toBytes32(shift.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitShiftExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        uint256 receivedMarketTokens\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"receivedMarketTokens\\\", receivedMarketTokens);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ShiftExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitShiftCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"ShiftCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Shift.Props memory shift) public pure returns(EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(6);\\n        eventData.addressItems.setItem(0, \\\"account\\\", shift.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", shift.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", shift.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"fromMarket\\\", shift.fromMarket());\\n        eventData.addressItems.setItem(4, \\\"toMarket\\\", shift.toMarket());\\n        eventData.addressItems.setItem(5, \\\"uiFeeReceiver\\\", shift.uiFeeReceiver());\\n\\n        eventData.uintItems.initItems(5);\\n        eventData.uintItems.setItem(0, \\\"marketTokenAmount\\\", shift.marketTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"minMarketTokens\\\", shift.minMarketTokens());\\n        eventData.uintItems.setItem(2, \\\"updatedAtTime\\\", shift.updatedAtTime());\\n        eventData.uintItems.setItem(3, \\\"executionFee\\\", shift.executionFee());\\n        eventData.uintItems.setItem(4, \\\"callbackGasLimit\\\", shift.callbackGasLimit());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", shift.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0xdb201f7e0a5f4ed6fd4e732e2abea81a388c7eff64455ab9ba1b024a1843c6a8\",\"license\":\"BUSL-1.1\"},\"contracts/swap/SwapHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./SwapUtils.sol\\\";\\n\\n/**\\n * @title SwapHandler\\n * @dev A contract to help with swap functions\\n */\\ncontract SwapHandler is ReentrancyGuard, RoleModule {\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    /**\\n     * @dev perform a swap based on the given params\\n     * @param params SwapUtils.SwapParams\\n     * @return (outputToken, outputAmount)\\n     */\\n    function swap(\\n        SwapUtils.SwapParams memory params\\n    )\\n        external\\n        nonReentrant\\n        onlyController\\n        returns (address, uint256)\\n    {\\n        return SwapUtils.swap(params);\\n    }\\n}\\n\",\"keccak256\":\"0x8a840acd9a14caaea2a7aa6d62df72275f6ccbcad4d75edff8df48304ad6e8f3\",\"license\":\"BUSL-1.1\"},\"contracts/swap/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../oracle/Oracle.sol\\\";\\nimport \\\"../pricing/SwapPricingUtils.sol\\\";\\nimport \\\"../fee/FeeUtils.sol\\\";\\n\\n/**\\n * @title SwapUtils\\n * @dev Library for swap functions\\n */\\nlibrary SwapUtils {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using Price for Price.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    /**\\n     * @param dataStore The contract that provides access to data stored on-chain.\\n     * @param eventEmitter The contract that emits events.\\n     * @param oracle The contract that provides access to price data from oracles.\\n     * @param bank The contract providing the funds for the swap.\\n     * @param key An identifying key for the swap.\\n     * @param tokenIn The address of the token that is being swapped.\\n     * @param amountIn The amount of the token that is being swapped.\\n     * @param swapPathMarkets An array of market properties, specifying the markets in which the swap should be executed.\\n     * @param minOutputAmount The minimum amount of tokens that should be received as part of the swap.\\n     * @param receiver The address to which the swapped tokens should be sent.\\n     * @param uiFeeReceiver The address of the ui fee receiver.\\n     * @param shouldUnwrapNativeToken A boolean indicating whether the received tokens should be unwrapped from the wrapped native token (WNT) if they are wrapped.\\n     */\\n    struct SwapParams {\\n        DataStore dataStore;\\n        EventEmitter eventEmitter;\\n        Oracle oracle;\\n        Bank bank;\\n        bytes32 key;\\n        address tokenIn;\\n        uint256 amountIn;\\n        Market.Props[] swapPathMarkets;\\n        uint256 minOutputAmount;\\n        address receiver;\\n        address uiFeeReceiver;\\n        bool shouldUnwrapNativeToken;\\n        ISwapPricingUtils.SwapPricingType swapPricingType;\\n    }\\n\\n    /**\\n     * @param market The market in which the swap should be executed.\\n     * @param tokenIn The address of the token that is being swapped.\\n     * @param amountIn The amount of the token that is being swapped.\\n     * @param receiver The address to which the swapped tokens should be sent.\\n     * @param shouldUnwrapNativeToken A boolean indicating whether the received tokens should be unwrapped from the wrapped native token (WNT) if they are wrapped.\\n     */\\n    struct _SwapParams {\\n        Market.Props market;\\n        address tokenIn;\\n        uint256 amountIn;\\n        address receiver;\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    /**\\n     * @param tokenOut The address of the token that is being received as part of the swap.\\n     * @param tokenInPrice The price of the token that is being swapped.\\n     * @param tokenOutPrice The price of the token that is being received as part of the swap.\\n     * @param amountIn The amount of the token that is being swapped.\\n     * @param amountOut The amount of the token that is being received as part of the swap.\\n     * @param poolAmountOut The total amount of the token that is being received by all users in the swap pool.\\n     */\\n    struct SwapCache {\\n        address tokenOut;\\n        Price.Props tokenInPrice;\\n        Price.Props tokenOutPrice;\\n        uint256 amountIn;\\n        uint256 amountInAfterFees;\\n        uint256 amountOut;\\n        uint256 poolAmountOut;\\n        int256 priceImpactUsd;\\n        int256 priceImpactAmount;\\n        bool balanceWasImproved;\\n        uint256 cappedDiffUsd;\\n        int256 tokenInPriceImpactAmount;\\n    }\\n\\n    event SwapReverted(string reason, bytes reasonBytes);\\n\\n    /**\\n     * @dev Swaps a given amount of a given token for another token based on a\\n     * specified swap path.\\n     * @param params The parameters for the swap.\\n     * @return A tuple containing the address of the token that was received as\\n     * part of the swap and the amount of the received token.\\n     */\\n    function swap(SwapParams memory params) external returns (address, uint256) {\\n        if (params.amountIn == 0) {\\n            return (params.tokenIn, params.amountIn);\\n        }\\n\\n        if (params.swapPathMarkets.length == 0) {\\n            if (params.amountIn < params.minOutputAmount) {\\n                revert Errors.InsufficientOutputAmount(params.amountIn, params.minOutputAmount);\\n            }\\n\\n            if (address(params.bank) != params.receiver) {\\n                params.bank.transferOut(\\n                    params.tokenIn,\\n                    params.receiver,\\n                    params.amountIn,\\n                    params.shouldUnwrapNativeToken\\n                );\\n            }\\n\\n            return (params.tokenIn, params.amountIn);\\n        }\\n\\n        if (address(params.bank) != params.swapPathMarkets[0].marketToken) {\\n            params.bank.transferOut(params.tokenIn, params.swapPathMarkets[0].marketToken, params.amountIn, false);\\n        }\\n\\n        address tokenOut = params.tokenIn;\\n        uint256 outputAmount = params.amountIn;\\n\\n        for (uint256 i; i < params.swapPathMarkets.length; i++) {\\n            Market.Props memory market = params.swapPathMarkets[i];\\n\\n            bool flagExists = params.dataStore.getBool(Keys.swapPathMarketFlagKey(market.marketToken));\\n            if (flagExists) {\\n                revert Errors.DuplicatedMarketInSwapPath(market.marketToken);\\n            }\\n\\n            params.dataStore.setBool(Keys.swapPathMarketFlagKey(market.marketToken), true);\\n\\n            uint256 nextIndex = i + 1;\\n            address receiver;\\n            if (nextIndex < params.swapPathMarkets.length) {\\n                receiver = params.swapPathMarkets[nextIndex].marketToken;\\n            } else {\\n                receiver = params.receiver;\\n            }\\n\\n            _SwapParams memory _params = _SwapParams(\\n                market,\\n                tokenOut,\\n                outputAmount,\\n                receiver,\\n                i == params.swapPathMarkets.length - 1 ? params.shouldUnwrapNativeToken : false // only convert ETH on the last swap if needed\\n            );\\n\\n            (tokenOut, outputAmount) = _swap(params, _params);\\n        }\\n\\n        for (uint256 i; i < params.swapPathMarkets.length; i++) {\\n            Market.Props memory market = params.swapPathMarkets[i];\\n            params.dataStore.setBool(Keys.swapPathMarketFlagKey(market.marketToken), false);\\n        }\\n\\n        if (outputAmount < params.minOutputAmount) {\\n            revert Errors.InsufficientSwapOutputAmount(outputAmount, params.minOutputAmount);\\n        }\\n\\n        return (tokenOut, outputAmount);\\n    }\\n\\n    function validateSwapOutputToken(\\n        DataStore dataStore,\\n        address[] memory swapPath,\\n        address inputToken,\\n        address expectedOutputToken\\n    ) external view {\\n        address outputToken = getOutputToken(dataStore, swapPath, inputToken);\\n        if (outputToken != expectedOutputToken) {\\n            revert Errors.InvalidSwapOutputToken(outputToken, expectedOutputToken);\\n        }\\n    }\\n\\n    function getOutputToken(\\n        DataStore dataStore,\\n        address[] memory swapPath,\\n        address inputToken\\n    ) public view returns (address) {\\n        address outputToken = inputToken;\\n        Market.Props[] memory markets = MarketUtils.getSwapPathMarkets(dataStore, swapPath);\\n        uint256 marketCount = markets.length;\\n\\n        for (uint256 i; i < marketCount; i++) {\\n            Market.Props memory market = markets[i];\\n            outputToken = MarketUtils.getOppositeToken(outputToken, market);\\n        }\\n\\n        return outputToken;\\n    }\\n\\n    /**\\n     * Performs a swap on a single market.\\n     *\\n     * @param params  The parameters for the swap.\\n     * @param _params The parameters for the swap on this specific market.\\n     * @return The token and amount that was swapped.\\n     */\\n    function _swap(SwapParams memory params, _SwapParams memory _params) internal returns (address, uint256) {\\n        SwapCache memory cache;\\n\\n        if (_params.tokenIn != _params.market.longToken && _params.tokenIn != _params.market.shortToken) {\\n            revert Errors.InvalidTokenIn(_params.tokenIn, _params.market.marketToken);\\n        }\\n\\n        MarketUtils.validateSwapMarket(params.dataStore, _params.market);\\n\\n        cache.tokenOut = MarketUtils.getOppositeToken(_params.tokenIn, _params.market);\\n        cache.tokenInPrice = params.oracle.getPrimaryPrice(_params.tokenIn);\\n        cache.tokenOutPrice = params.oracle.getPrimaryPrice(cache.tokenOut);\\n\\n        // note that this may not be entirely accurate since the effect of the\\n        // swap fees are not accounted for\\n        (cache.priceImpactUsd, cache.balanceWasImproved) = SwapPricingUtils.getPriceImpactUsd(\\n            SwapPricingUtils.GetPriceImpactUsdParams(\\n                params.dataStore,\\n                _params.market,\\n                _params.tokenIn,\\n                cache.tokenOut,\\n                cache.tokenInPrice.midPrice(),\\n                cache.tokenOutPrice.midPrice(),\\n                (_params.amountIn * cache.tokenInPrice.midPrice()).toInt256(),\\n                -(_params.amountIn * cache.tokenInPrice.midPrice()).toInt256(),\\n                true // includeVirtualInventoryImpact\\n            )\\n        );\\n\\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\\n            params.dataStore,\\n            _params.market.marketToken,\\n            _params.amountIn,\\n            cache.balanceWasImproved,\\n            params.uiFeeReceiver,\\n            params.swapPricingType\\n        );\\n\\n        bytes32 swapFeeType = params.swapPricingType == ISwapPricingUtils.SwapPricingType.AtomicSwap\\n            ? Keys.ATOMIC_SWAP_FEE_TYPE\\n            : Keys.SWAP_FEE_TYPE;\\n\\n        FeeUtils.incrementClaimableFeeAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            fees.feeReceiverAmount,\\n            swapFeeType\\n        );\\n\\n        FeeUtils.incrementClaimableUiFeeAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            params.uiFeeReceiver,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            fees.uiFeeAmount,\\n            Keys.UI_SWAP_FEE_TYPE\\n        );\\n\\n        if (cache.priceImpactUsd > 0) {\\n            // when there is a positive price impact factor, additional tokens from the swap impact pool\\n            // are withdrawn for the user\\n            // for example, if 50,000 USDC is swapped out and there is a positive price impact\\n            // an additional 100 USDC may be sent to the user\\n            // the swap impact pool is decreased by the used amount\\n\\n            cache.amountIn = fees.amountAfterFees;\\n\\n            (cache.priceImpactAmount, cache.cappedDiffUsd) = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                cache.tokenOut,\\n                cache.tokenOutPrice,\\n                cache.priceImpactUsd\\n            );\\n\\n            // if the positive price impact was capped, use the tokenIn swap\\n            // impact pool to pay for the positive price impact\\n            if (cache.cappedDiffUsd != 0) {\\n                (cache.tokenInPriceImpactAmount /* uint256 cappedDiffUsd */, ) = MarketUtils.applySwapImpactWithCap(\\n                    params.dataStore,\\n                    params.eventEmitter,\\n                    _params.market.marketToken,\\n                    _params.tokenIn,\\n                    cache.tokenInPrice,\\n                    cache.cappedDiffUsd.toInt256()\\n                );\\n\\n                // this additional amountIn is already in the Market\\n                // it is subtracted from the swap impact pool amount\\n                // and the market pool amount is increased by the updated\\n                // amountIn below\\n                cache.amountIn += cache.tokenInPriceImpactAmount.toUint256();\\n            }\\n\\n            // round amountOut down\\n            cache.amountOut = (cache.amountIn * cache.tokenInPrice.min) / cache.tokenOutPrice.max;\\n            cache.poolAmountOut = cache.amountOut;\\n\\n            // the below amount is subtracted from the swap impact pool instead of the market pool amount\\n            cache.amountOut += cache.priceImpactAmount.toUint256();\\n        } else {\\n            // when there is a negative price impact factor,\\n            // less of the input amount is sent to the pool\\n            // for example, if 10 ETH is swapped in and there is a negative price impact\\n            // only 9.995 ETH may be swapped in\\n            // the remaining 0.005 ETH will be stored in the swap impact pool\\n\\n            (cache.priceImpactAmount /* uint256 cappedDiffUsd */, ) = MarketUtils.applySwapImpactWithCap(\\n                params.dataStore,\\n                params.eventEmitter,\\n                _params.market.marketToken,\\n                _params.tokenIn,\\n                cache.tokenInPrice,\\n                cache.priceImpactUsd\\n            );\\n\\n            if (fees.amountAfterFees <= (-cache.priceImpactAmount).toUint256()) {\\n                revert Errors.SwapPriceImpactExceedsAmountIn(fees.amountAfterFees, cache.priceImpactAmount);\\n            }\\n\\n            cache.amountIn = fees.amountAfterFees - (-cache.priceImpactAmount).toUint256();\\n            cache.amountOut = (cache.amountIn * cache.tokenInPrice.min) / cache.tokenOutPrice.max;\\n            cache.poolAmountOut = cache.amountOut;\\n        }\\n\\n        // the amountOut value includes the positive price impact amount\\n        if (_params.receiver != _params.market.marketToken) {\\n            MarketToken(payable(_params.market.marketToken)).transferOut(\\n                cache.tokenOut,\\n                _params.receiver,\\n                cache.amountOut,\\n                _params.shouldUnwrapNativeToken\\n            );\\n        }\\n\\n        MarketUtils.applyDeltaToPoolAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market,\\n            _params.tokenIn,\\n            (cache.amountIn + fees.feeAmountForPool).toInt256()\\n        );\\n\\n        // the poolAmountOut excludes the positive price impact amount\\n        // as that is deducted from the swap impact pool instead\\n        MarketUtils.applyDeltaToPoolAmount(\\n            params.dataStore,\\n            params.eventEmitter,\\n            _params.market,\\n            cache.tokenOut,\\n            -cache.poolAmountOut.toInt256()\\n        );\\n\\n        MarketUtils.MarketPrices memory prices = MarketUtils.MarketPrices(\\n            params.oracle.getPrimaryPrice(_params.market.indexToken),\\n            _params.tokenIn == _params.market.longToken ? cache.tokenInPrice : cache.tokenOutPrice,\\n            _params.tokenIn == _params.market.shortToken ? cache.tokenInPrice : cache.tokenOutPrice\\n        );\\n\\n        MarketUtils.validatePoolAmount(params.dataStore, _params.market, _params.tokenIn);\\n\\n        // for single token markets cache.tokenOut will always equal _params.market.longToken\\n        // so only the reserve for longs will be validated\\n        // swaps should be disabled for single token markets so this should not be an issue\\n        MarketUtils.validateReserve(\\n            params.dataStore,\\n            _params.market,\\n            prices,\\n            cache.tokenOut == _params.market.longToken\\n        );\\n\\n        MarketUtils.validateMaxPnl(\\n            params.dataStore,\\n            _params.market,\\n            prices,\\n            _params.tokenIn == _params.market.longToken\\n                ? Keys.MAX_PNL_FACTOR_FOR_DEPOSITS\\n                : Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\\n            cache.tokenOut == _params.market.shortToken\\n                ? Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS\\n                : Keys.MAX_PNL_FACTOR_FOR_DEPOSITS\\n        );\\n\\n        SwapPricingUtils.EmitSwapInfoParams memory emitSwapInfoParams;\\n\\n        emitSwapInfoParams.orderKey = params.key;\\n        emitSwapInfoParams.market = _params.market.marketToken;\\n        emitSwapInfoParams.receiver = _params.receiver;\\n        emitSwapInfoParams.tokenIn = _params.tokenIn;\\n        emitSwapInfoParams.tokenOut = cache.tokenOut;\\n        emitSwapInfoParams.tokenInPrice = cache.tokenInPrice.min;\\n        emitSwapInfoParams.tokenOutPrice = cache.tokenOutPrice.max;\\n        emitSwapInfoParams.amountIn = _params.amountIn;\\n        emitSwapInfoParams.amountInAfterFees = fees.amountAfterFees;\\n        emitSwapInfoParams.amountOut = cache.amountOut;\\n        emitSwapInfoParams.priceImpactUsd = cache.priceImpactUsd;\\n        emitSwapInfoParams.priceImpactAmount = cache.priceImpactAmount;\\n        emitSwapInfoParams.tokenInPriceImpactAmount = cache.tokenInPriceImpactAmount;\\n\\n        SwapPricingUtils.emitSwapInfo(params.eventEmitter, emitSwapInfoParams);\\n\\n        SwapPricingUtils.emitSwapFeesCollected(\\n            params.eventEmitter,\\n            params.key,\\n            _params.market.marketToken,\\n            _params.tokenIn,\\n            cache.tokenInPrice.min,\\n            swapFeeType,\\n            fees\\n        );\\n\\n        return (cache.tokenOut, cache.amountOut);\\n    }\\n}\\n\",\"keccak256\":\"0x4accda80def60ca705342ca3daee559652d8bfcac4156dcb4e54f0a4fd344c51\",\"license\":\"BUSL-1.1\"},\"contracts/token/IWNT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IWNT\\n * @dev Interface for Wrapped Native Tokens, e.g. WETH\\n * The contract is named WNT instead of WETH for a more general reference name\\n * that can be used on any blockchain\\n */\\ninterface IWNT {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x366f887cceea33dba2247278d3827366cdcc3a3d7a2e3559fae430644ccbee02\",\"license\":\"BUSL-1.1\"},\"contracts/token/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../error/ErrorUtils.sol\\\";\\nimport \\\"../utils/AccountUtils.sol\\\";\\n\\nimport \\\"./IWNT.sol\\\";\\n\\n/**\\n * @title TokenUtils\\n * @dev Library for token functions, helps with transferring of tokens and\\n * native token functions\\n */\\nlibrary TokenUtils {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event TokenTransferReverted(string reason, bytes returndata);\\n    event NativeTokenTransferReverted(string reason);\\n\\n    /**\\n     * @dev Returns the address of the WNT token.\\n     * @param dataStore DataStore contract instance where the address of the WNT token is stored.\\n     * @return The address of the WNT token.\\n     */\\n    function wnt(DataStore dataStore) internal view returns (address) {\\n        return dataStore.getAddress(Keys.WNT);\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of `token` from the caller to `receiver`.\\n     * limit the amount of gas forwarded so that a user cannot intentionally\\n     * construct a token call that would consume all gas and prevent necessary\\n     * actions like request cancellation from being executed\\n     *\\n     * @param dataStore The data store that contains the `tokenTransferGasLimit` for the specified `token`.\\n     * @param token The address of the ERC20 token that is being transferred.\\n     * @param receiver The address of the recipient of the `token` transfer.\\n     * @param amount The amount of `token` to transfer.\\n     */\\n    function transfer(\\n        DataStore dataStore,\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n        AccountUtils.validateReceiver(receiver);\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.tokenTransferGasLimit(token));\\n        if (gasLimit == 0) {\\n            revert Errors.EmptyTokenTranferGasLimit(token);\\n        }\\n\\n        (bool success0, /* bytes memory returndata */) = nonRevertingTransferWithGasLimit(\\n            IERC20(token),\\n            receiver,\\n            amount,\\n            gasLimit\\n        );\\n\\n        if (success0) { return; }\\n\\n        address holdingAddress = dataStore.getAddress(Keys.HOLDING_ADDRESS);\\n\\n        if (holdingAddress == address(0)) {\\n            revert Errors.EmptyHoldingAddress();\\n        }\\n\\n        // in case transfers to the receiver fail due to blacklisting or other reasons\\n        // send the tokens to a holding address to avoid possible gaming through reverting\\n        // transfers\\n        (bool success1, bytes memory returndata) = nonRevertingTransferWithGasLimit(\\n            IERC20(token),\\n            holdingAddress,\\n            amount,\\n            gasLimit\\n        );\\n\\n        if (success1) { return; }\\n\\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(returndata);\\n        emit TokenTransferReverted(reason, returndata);\\n\\n        // throw custom errors to prevent spoofing of errors\\n        // this is necessary because contracts like DepositHandler, WithdrawalHandler, OrderHandler\\n        // do not cancel requests for specific errors\\n        revert Errors.TokenTransferError(token, receiver, amount);\\n    }\\n\\n    function sendNativeToken(\\n        DataStore dataStore,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n\\n        AccountUtils.validateReceiver(receiver);\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\\n\\n        bool success;\\n        // use an assembly call to avoid loading large data into memory\\n        // input mem[in\\u2026(in+insize)]\\n        // output area mem[out\\u2026(out+outsize))]\\n        assembly {\\n            success := call(\\n                gasLimit, // gas limit\\n                receiver, // receiver\\n                amount, // value\\n                0, // in\\n                0, // insize\\n                0, // out\\n                0 // outsize\\n            )\\n        }\\n\\n        if (success) { return; }\\n\\n        // if the transfer failed, re-wrap the token and send it to the receiver\\n        depositAndSendWrappedNativeToken(\\n            dataStore,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * Deposits the specified amount of native token and sends the specified\\n     * amount of wrapped native token to the specified receiver address.\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param receiver the address of the recipient of the wrapped native token transfer\\n     * @param amount the amount of native token to deposit and the amount of wrapped native token to send\\n     */\\n    function depositAndSendWrappedNativeToken(\\n        DataStore dataStore,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n        AccountUtils.validateReceiver(receiver);\\n\\n        address _wnt = wnt(dataStore);\\n        IWNT(_wnt).deposit{value: amount}();\\n\\n        transfer(\\n            dataStore,\\n            _wnt,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraws the specified amount of wrapped native token and sends the\\n     * corresponding amount of native token to the specified receiver address.\\n     *\\n     * limit the amount of gas forwarded so that a user cannot intentionally\\n     * construct a token call that would consume all gas and prevent necessary\\n     * actions like request cancellation from being executed\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param _wnt the address of the WNT contract to withdraw the wrapped native token from\\n     * @param receiver the address of the recipient of the native token transfer\\n     * @param amount the amount of wrapped native token to withdraw and the amount of native token to send\\n     */\\n    function withdrawAndSendNativeToken(\\n        DataStore dataStore,\\n        address _wnt,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n        AccountUtils.validateReceiver(receiver);\\n\\n        IWNT(_wnt).withdraw(amount);\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\\n\\n        bool success;\\n        // use an assembly call to avoid loading large data into memory\\n        // input mem[in\\u2026(in+insize)]\\n        // output area mem[out\\u2026(out+outsize))]\\n        assembly {\\n            success := call(\\n                gasLimit, // gas limit\\n                receiver, // receiver\\n                amount, // value\\n                0, // in\\n                0, // insize\\n                0, // out\\n                0 // outsize\\n            )\\n        }\\n\\n        if (success) { return; }\\n\\n        // if the transfer failed, re-wrap the token and send it to the receiver\\n        depositAndSendWrappedNativeToken(\\n            dataStore,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of ERC20 token to the specified receiver\\n     * address, with a gas limit to prevent the transfer from consuming all available gas.\\n     * adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\\n     *\\n     * @param token the ERC20 contract to transfer the tokens from\\n     * @param to the address of the recipient of the token transfer\\n     * @param amount the amount of tokens to transfer\\n     * @param gasLimit the maximum amount of gas that the token transfer can consume\\n     * @return a tuple containing a boolean indicating the success or failure of the\\n     * token transfer, and a bytes value containing the return data from the token transfer\\n     */\\n    function nonRevertingTransferWithGasLimit(\\n        IERC20 token,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) internal returns (bool, bytes memory) {\\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n        (bool success, bytes memory returndata) = address(token).call{ gas: gasLimit }(data);\\n\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (!address(token).isContract()) {\\n                    return (false, \\\"Call to non-contract\\\");\\n                }\\n            }\\n\\n            // some tokens do not revert on a failed transfer, they will return a boolean instead\\n            // validate that the returned boolean is true, otherwise indicate that the token transfer failed\\n            if (returndata.length > 0 && !abi.decode(returndata, (bool))) {\\n                return (false, returndata);\\n            }\\n\\n            // transfers on some tokens do not return a boolean value, they will just revert if a transfer fails\\n            // for these tokens, if success is true then the transfer should have completed\\n            return (true, returndata);\\n        }\\n\\n        return (false, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0xc9583947413e24886ca4c77406471a606614dada46e0aacb9f7962f629171810\",\"license\":\"BUSL-1.1\"},\"contracts/utils/AccountUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary AccountUtils {\\n    function validateAccount(address account) internal pure {\\n        if (account == address(0)) {\\n            revert Errors.EmptyAccount();\\n        }\\n    }\\n\\n    function validateReceiver(address receiver) internal pure {\\n        if (receiver == address(0)) {\\n            revert Errors.EmptyReceiver();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bbf2f55ff5f2de96cd5c060b87e60f598244c5c7bcb16c1b0be12e044ab07f5\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Array\\n * @dev Library for array functions\\n */\\nlibrary Array {\\n    using SafeCast for int256;\\n\\n    /**\\n     * @dev Gets the value of the element at the specified index in the given array. If the index is out of bounds, returns 0.\\n     *\\n     * @param arr the array to get the value from\\n     * @param index the index of the element in the array\\n     * @return the value of the element at the specified index in the array\\n     */\\n    function get(bytes32[] memory arr, uint256 index) internal pure returns (bytes32) {\\n        if (index < arr.length) {\\n            return arr[index];\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are equal to the specified value, false otherwise\\n     */\\n    function areEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] != value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are greater than the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are greater than the specified value, false otherwise\\n     */\\n    function areGreaterThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] <= value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are greater than or equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are greater than or equal to the specified value, false otherwise\\n     */\\n    function areGreaterThanOrEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] < value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are less than the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are less than the specified value, false otherwise\\n     */\\n    function areLessThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] >= value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are less than or equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are less than or equal to the specified value, false otherwise\\n     */\\n    function areLessThanOrEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] > value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the median value of the elements in the given array. For arrays with an odd number of elements, returns the element at the middle index. For arrays with an even number of elements, returns the average of the two middle elements.\\n     *\\n     * @param arr the array to get the median value from\\n     * @return the median value of the elements in the given array\\n     */\\n    function getMedian(uint256[] memory arr) internal pure returns (uint256) {\\n        if (arr.length % 2 == 1) {\\n            return arr[arr.length / 2];\\n        }\\n\\n        return (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;\\n    }\\n\\n    /**\\n     * @dev Gets the uncompacted value at the specified index in the given array of compacted values.\\n     *\\n     * @param compactedValues the array of compacted values to get the uncompacted value from\\n     * @param index the index of the uncompacted value in the array\\n     * @param compactedValueBitLength the length of each compacted value, in bits\\n     * @param bitmask the bitmask to use to extract the uncompacted value from the compacted value\\n     * @return the uncompacted value at the specified index in the array of compacted values\\n     */\\n    function getUncompactedValue(\\n        uint256[] memory compactedValues,\\n        uint256 index,\\n        uint256 compactedValueBitLength,\\n        uint256 bitmask,\\n        string memory label\\n    ) internal pure returns (uint256) {\\n        uint256 compactedValuesPerSlot = 256 / compactedValueBitLength;\\n\\n        uint256 slotIndex = index / compactedValuesPerSlot;\\n        if (slotIndex >= compactedValues.length) {\\n            revert Errors.CompactedArrayOutOfBounds(compactedValues, index, slotIndex, label);\\n        }\\n\\n        uint256 slotBits = compactedValues[slotIndex];\\n        uint256 offset = (index - slotIndex * compactedValuesPerSlot) * compactedValueBitLength;\\n\\n        uint256 value = (slotBits >> offset) & bitmask;\\n\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x83f525e9f489a37296d890e334ffa4f9e4a52e5194efd94d43b2a5ddaadf2ff1\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title Calc\\n * @dev Library for math functions\\n */\\nlibrary Calc {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    // this method assumes that min is less than max\\n    function boundMagnitude(int256 value, uint256 min, uint256 max) internal pure returns (int256) {\\n        uint256 magnitude = value.abs();\\n\\n        if (magnitude < min) {\\n            magnitude = min;\\n        }\\n\\n        if (magnitude > max) {\\n            magnitude = max;\\n        }\\n\\n        int256 sign = value == 0 ? int256(1) : value / value.abs().toInt256();\\n\\n        return magnitude.toInt256() * sign;\\n    }\\n\\n    /**\\n     * @dev Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    /**\\n     * Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     * The rounding is purely on the magnitude of a, if a is negative the result\\n     * is a larger magnitude negative\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpMagnitudeDivision(int256 a, uint256 b) internal pure returns (int256) {\\n        if (a < 0) {\\n            return (a - b.toInt256() + 1) / b.toInt256();\\n        }\\n\\n        return (a + b.toInt256() - 1) / b.toInt256();\\n    }\\n\\n    /**\\n     * Adds two numbers together and return a uint256 value, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sumReturnUint256(uint256 a, int256 b) internal pure returns (uint256) {\\n        if (b > 0) {\\n            return a + b.abs();\\n        }\\n\\n        return a - b.abs();\\n    }\\n\\n    /**\\n     * Adds two numbers together and return an int256 value, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sumReturnInt256(uint256 a, int256 b) internal pure returns (int256) {\\n        return a.toInt256() + b;\\n    }\\n\\n    /**\\n     * @dev Calculates the absolute difference between two numbers.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the absolute difference between the two numbers\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n    /**\\n     * Adds two numbers together, the result is bounded to prevent overflows.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function boundedAdd(int256 a, int256 b) internal pure returns (int256) {\\n        // if either a or b is zero or if the signs are different there should not be any overflows\\n        if (a == 0 || b == 0 || (a < 0 && b > 0) || (a > 0 && b < 0)) {\\n            return a + b;\\n        }\\n\\n        // if adding `b` to `a` would result in a value less than the min int256 value\\n        // then return the min int256 value\\n        if (a < 0 && b <= type(int256).min - a) {\\n            return type(int256).min;\\n        }\\n\\n        // if adding `b` to `a` would result in a value more than the max int256 value\\n        // then return the max int256 value\\n        if (a > 0 && b >= type(int256).max - a) {\\n            return type(int256).max;\\n        }\\n\\n        return a + b;\\n    }\\n\\n    /**\\n     * Returns a - b, the result is bounded to prevent overflows.\\n     * Note that this will revert if b is type(int256).min because of the usage of \\\"-b\\\".\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the bounded result of a - b\\n     */\\n    function boundedSub(int256 a, int256 b) internal pure returns (int256) {\\n        // if either a or b is zero or the signs are the same there should not be any overflow\\n        if (a == 0 || b == 0 || (a > 0 && b > 0) || (a < 0 && b < 0)) {\\n            return a - b;\\n        }\\n\\n        // if adding `-b` to `a` would result in a value greater than the max int256 value\\n        // then return the max int256 value\\n        if (a > 0 && -b >= type(int256).max - a) {\\n            return type(int256).max;\\n        }\\n\\n        // if subtracting `b` from `a` would result in a value less than the min int256 value\\n        // then return the min int256 value\\n        if (a < 0 && -b <= type(int256).min - a) {\\n            return type(int256).min;\\n        }\\n\\n        return a - b;\\n    }\\n\\n\\n    /**\\n     * Converts the given unsigned integer to a signed integer, using the given\\n     * flag to determine whether the result should be positive or negative.\\n     *\\n     * @param a the unsigned integer to convert\\n     * @param isPositive whether the result should be positive (if true) or negative (if false)\\n     * @return the signed integer representation of the given unsigned integer\\n     */\\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\\n        if (isPositive) {\\n            return a.toInt256();\\n        } else {\\n            return -a.toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3848e1c51a6c77a1d6ec30bb052e97f6c39437110c773ebc06956ce5e4a54370\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n\\n    function toBytes32(string memory value) internal pure returns (bytes32 result) {\\n        bytes memory tempEmptyString = bytes(value);\\n        if (tempEmptyString.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(value, 32))\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a bytes array to a uint256.\\n     * Handles cases where the uint256 stored in bytes is stored with or without padding.\\n     * @param uint256AsBytes The bytes array representing the uint256 value.\\n     * @return value The uint256 value obtained from the bytes array.\\n     */\\n    function bytesToUint256(bytes memory uint256AsBytes) internal pure returns (uint256) {\\n        uint256 length = uint256AsBytes.length;\\n\\n        if(length > 32) {\\n            revert Errors.Uint256AsBytesLengthExceeds32Bytes(length);\\n        }\\n\\n        if (length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 value;\\n\\n        assembly {\\n            value := mload(add(uint256AsBytes, 32))\\n        }\\n\\n        return value = value >> (8 * (32 - length));\\n    }\\n\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint192ToBytes(uint192 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n\\n    function uint32ToBytes(uint32 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x75f1c33e5e28c00f2f3e49db548cc8fb97f9371cc31fc0ebcc073eb2f75af1dc\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Precision.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// there is a known issue with prb-math v3.x releases\\n// https://github.com/PaulRBerg/prb-math/issues/178\\n// due to this, either prb-math v2.x or v4.x versions should be used instead\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title Precision\\n * @dev Library for precision values and conversions\\n */\\nlibrary Precision {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using SignedMath for int256;\\n\\n    uint256 public constant FLOAT_PRECISION = 10 ** 30;\\n    uint256 public constant FLOAT_PRECISION_SQRT = 10 ** 15;\\n\\n    uint256 public constant WEI_PRECISION = 10 ** 18;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    uint256 public constant FLOAT_TO_WEI_DIVISOR = 10 ** 12;\\n\\n    /**\\n     * Applies the given factor to the given value and returns the result.\\n     *\\n     * @param value The value to apply the factor to.\\n     * @param factor The factor to apply.\\n     * @return The result of applying the factor to the value.\\n     */\\n    function applyFactor(uint256 value, uint256 factor) internal pure returns (uint256) {\\n        return mulDiv(value, factor, FLOAT_PRECISION);\\n    }\\n\\n    /**\\n     * Applies the given factor to the given value and returns the result.\\n     *\\n     * @param value The value to apply the factor to.\\n     * @param factor The factor to apply.\\n     * @return The result of applying the factor to the value.\\n     */\\n    function applyFactor(uint256 value, int256 factor) internal pure returns (int256) {\\n        return mulDiv(value, factor, FLOAT_PRECISION);\\n    }\\n\\n    function applyFactor(uint256 value, int256 factor, bool roundUpMagnitude) internal pure returns (int256) {\\n        return mulDiv(value, factor, FLOAT_PRECISION, roundUpMagnitude);\\n    }\\n\\n    function mulDiv(uint256 value, uint256 numerator, uint256 denominator) internal pure returns (uint256) {\\n        return Math.mulDiv(value, numerator, denominator);\\n    }\\n\\n    function mulDiv(int256 value, uint256 numerator, uint256 denominator) internal pure returns (int256) {\\n        return mulDiv(numerator, value, denominator);\\n    }\\n\\n    function mulDiv(uint256 value, int256 numerator, uint256 denominator) internal pure returns (int256) {\\n        uint256 result = mulDiv(value, numerator.abs(), denominator);\\n        return numerator > 0 ? result.toInt256() : -result.toInt256();\\n    }\\n\\n    function mulDiv(uint256 value, int256 numerator, uint256 denominator, bool roundUpMagnitude) internal pure returns (int256) {\\n        uint256 result = mulDiv(value, numerator.abs(), denominator, roundUpMagnitude);\\n        return numerator > 0 ? result.toInt256() : -result.toInt256();\\n    }\\n\\n    function mulDiv(uint256 value, uint256 numerator, uint256 denominator, bool roundUpMagnitude) internal pure returns (uint256) {\\n        if (roundUpMagnitude) {\\n            return Math.mulDiv(value, numerator, denominator, Math.Rounding.Up);\\n        }\\n\\n        return Math.mulDiv(value, numerator, denominator);\\n    }\\n\\n    function mulDiv(int256 value, uint256 numerator, uint256 denominator, bool roundUpMagnitude) internal pure returns (int256) {\\n        uint256 result = mulDiv(value.abs(), numerator, denominator, roundUpMagnitude);\\n        return value > 0 ? result.toInt256() : -result.toInt256();\\n    }\\n\\n    function applyExponentFactor(\\n        uint256 floatValue,\\n        uint256 exponentFactor\\n    ) internal pure returns (uint256) {\\n        // `PRBMathUD60x18.pow` doesn't work for `x` less than one\\n        if (floatValue < FLOAT_PRECISION) {\\n            return 0;\\n        }\\n\\n        if (exponentFactor == FLOAT_PRECISION) {\\n            return floatValue;\\n        }\\n\\n        // `PRBMathUD60x18.pow` accepts 2 fixed point numbers 60x18\\n        // we need to convert float (30 decimals) to 60x18 (18 decimals) and then back to 30 decimals\\n        uint256 weiValue = PRBMathUD60x18.pow(\\n            floatToWei(floatValue),\\n            floatToWei(exponentFactor)\\n        );\\n\\n        return weiToFloat(weiValue);\\n    }\\n\\n    function toFactor(uint256 value, uint256 divisor, bool roundUpMagnitude) internal pure returns (uint256) {\\n        if (value == 0) { return 0; }\\n\\n        if (roundUpMagnitude) {\\n            return Math.mulDiv(value, FLOAT_PRECISION, divisor, Math.Rounding.Up);\\n        }\\n\\n        return Math.mulDiv(value, FLOAT_PRECISION, divisor);\\n    }\\n\\n    function toFactor(uint256 value, uint256 divisor) internal pure returns (uint256) {\\n        return toFactor(value, divisor, false);\\n    }\\n\\n    function toFactor(int256 value, uint256 divisor) internal pure returns (int256) {\\n        uint256 result = toFactor(value.abs(), divisor);\\n        return value > 0 ? result.toInt256() : -result.toInt256();\\n    }\\n\\n    /**\\n     * Converts the given value from float to wei.\\n     *\\n     * @param value The value to convert.\\n     * @return The converted value in wei.\\n     */\\n    function floatToWei(uint256 value) internal pure returns (uint256) {\\n        return value / FLOAT_TO_WEI_DIVISOR;\\n    }\\n\\n    /**\\n     * Converts the given value from wei to float.\\n     *\\n     * @param value The value to convert.\\n     * @return The converted value in float.\\n     */\\n    function weiToFloat(uint256 value) internal pure returns (uint256) {\\n        return value * FLOAT_TO_WEI_DIVISOR;\\n    }\\n\\n    /**\\n     * Converts the given number of basis points to float.\\n     *\\n     * @param basisPoints The number of basis points to convert.\\n     * @return The converted value in float.\\n     */\\n    function basisPointsToFloat(uint256 basisPoints) internal pure returns (uint256) {\\n        return basisPoints * FLOAT_PRECISION / BASIS_POINTS_DIVISOR;\\n    }\\n}\\n\",\"keccak256\":\"0x061037475955fce184c335c269f030db585bbffddf00e4a0eff7b34da8a64029\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Uint256Mask.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary Uint256Mask {\\n    struct Mask {\\n        uint256 bits;\\n    }\\n\\n    function validateUniqueAndSetIndex(\\n        Mask memory mask,\\n        uint256 index,\\n        string memory label\\n    ) internal pure {\\n        if (index >= 256) {\\n            revert Errors.MaskIndexOutOfBounds(index, label);\\n        }\\n\\n        uint256 bit = 1 << index;\\n\\n        if (mask.bits & bit != 0) {\\n            revert Errors.DuplicatedIndex(index, label);\\n        }\\n\\n        mask.bits = mask.bits | bit;\\n    }\\n}\\n\",\"keccak256\":\"0x96aaf43efa3a092b2d8d1e88addab6c31f5a7f526b84a290b9ba43e803592e01\",\"license\":\"BUSL-1.1\"},\"contracts/withdrawal/Withdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Withdrawal\\n * @dev Struct for withdrawals\\n */\\nlibrary Withdrawal {\\n    enum WithdrawalType {\\n        Normal,\\n        Shift,\\n        Glv\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    // @param _dataList a list of bytes32 values that can be used for additional data\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n        bytes32[] _dataList;\\n    }\\n\\n    // @param account The account to withdraw for.\\n    // @param receiver The address that will receive the withdrawn tokens.\\n    // @param callbackContract The contract that will be called back.\\n    // @param uiFeeReceiver The ui fee receiver.\\n    // @param market The market on which the withdrawal will be executed.\\n    // @param longTokenSwapPath The path for swapping long tokens.\\n    // @param shortTokenSwapPath The path for swapping short tokens.\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param marketTokenAmount The amount of market tokens that will be withdrawn.\\n    // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\\n    // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\\n    // @param executionFee The execution fee for the withdrawal.\\n    // @param callbackGasLimit The gas limit for calling the callback contract.\\n    // @param srcChainId The source chain id.\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtTime;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 srcChainId;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minLongTokenAmount;\\n    }\\n\\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minLongTokenAmount = value;\\n    }\\n\\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minShortTokenAmount;\\n    }\\n\\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minShortTokenAmount = value;\\n    }\\n\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function srcChainId(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.srcChainId;\\n    }\\n\\n    function setSrcChainId(Props memory props, uint256 value) internal pure {\\n        props.numbers.srcChainId = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    function dataList(Props memory props) internal pure returns (bytes32[] memory) {\\n        return props._dataList;\\n    }\\n\\n    function setDataList(Props memory props, bytes32[] memory value) internal pure {\\n        props._dataList = value;\\n    }\\n}\\n\",\"keccak256\":\"0x852668dd57383f864c6b9b1de53e1391fff8336602661d6808a81522f6309b9b\",\"license\":\"BUSL-1.1\"},\"contracts/withdrawal/WithdrawalEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./Withdrawal.sol\\\";\\nimport \\\"../pricing/ISwapPricingUtils.sol\\\";\\n\\nlibrary WithdrawalEventUtils {\\n    using Withdrawal for Withdrawal.Props;\\n\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function emitWithdrawalCreated(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        Withdrawal.Props memory withdrawal,\\n        Withdrawal.WithdrawalType withdrawalType\\n    ) external {\\n        EventUtils.EventLogData memory eventData = createEventData(withdrawal, withdrawalType);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"WithdrawalCreated\\\",\\n            key,\\n            Cast.toBytes32(withdrawal.account()),\\n            eventData\\n        );\\n    }\\n\\n    function emitWithdrawalExecuted(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        ISwapPricingUtils.SwapPricingType swapPricingType\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"swapPricingType\\\", uint256(swapPricingType));\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"WithdrawalExecuted\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitWithdrawalCancelled(\\n        EventEmitter eventEmitter,\\n        bytes32 key,\\n        address account,\\n        string memory reason,\\n        bytes memory reasonBytes\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"key\\\", key);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.stringItems.initItems(1);\\n        eventData.stringItems.setItem(0, \\\"reason\\\", reason);\\n\\n        eventData.bytesItems.initItems(1);\\n        eventData.bytesItems.setItem(0, \\\"reasonBytes\\\", reasonBytes);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"WithdrawalCancelled\\\",\\n            key,\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function createEventData(Withdrawal.Props memory withdrawal, Withdrawal.WithdrawalType withdrawalType)\\n    public pure returns(EventUtils.EventLogData memory) {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(5);\\n        eventData.addressItems.setItem(0, \\\"account\\\", withdrawal.account());\\n        eventData.addressItems.setItem(1, \\\"receiver\\\", withdrawal.receiver());\\n        eventData.addressItems.setItem(2, \\\"callbackContract\\\", withdrawal.callbackContract());\\n        eventData.addressItems.setItem(3, \\\"market\\\", withdrawal.market());\\n        eventData.addressItems.setItem(4, \\\"uiFeeReceiver\\\", withdrawal.uiFeeReceiver());\\n\\n        eventData.addressItems.initArrayItems(2);\\n        eventData.addressItems.setItem(0, \\\"longTokenSwapPath\\\", withdrawal.longTokenSwapPath());\\n        eventData.addressItems.setItem(1, \\\"shortTokenSwapPath\\\", withdrawal.shortTokenSwapPath());\\n\\n        eventData.uintItems.initItems(7);\\n        eventData.uintItems.setItem(0, \\\"marketTokenAmount\\\", withdrawal.marketTokenAmount());\\n        eventData.uintItems.setItem(1, \\\"minLongTokenAmount\\\", withdrawal.minLongTokenAmount());\\n        eventData.uintItems.setItem(2, \\\"minShortTokenAmount\\\", withdrawal.minShortTokenAmount());\\n        eventData.uintItems.setItem(3, \\\"updatedAtTime\\\", withdrawal.updatedAtTime());\\n        eventData.uintItems.setItem(4, \\\"executionFee\\\", withdrawal.executionFee());\\n        eventData.uintItems.setItem(5, \\\"callbackGasLimit\\\", withdrawal.callbackGasLimit());\\n        eventData.uintItems.setItem(6, \\\"withdrawalType\\\", uint256(withdrawalType));\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"shouldUnwrapNativeToken\\\", withdrawal.shouldUnwrapNativeToken());\\n\\n        eventData.bytes32Items.initArrayItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"dataList\\\", withdrawal.dataList());\\n        return eventData;\\n    }\\n}\\n\",\"keccak256\":\"0x8fc4fb80111bce4477f294b120ccb5d183c4433b70c3f7a8fca9828ec5e95950\",\"license\":\"BUSL-1.1\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x61442261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063481bddaf1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004612828565b61006c565b60405190815260200160405180910390f35b6000603f5a61007b9190612929565b8360c00181815161008c919061294b565b905250825160a084015173F6BFA2A58C506bF4d2cd42FF79d87905C64c2db9916374b6fe13916100be86516020015190565b60405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260640160006040518083038186803b15801561010d57600080fd5b505af4158015610121573d6000803e3d6000fd5b50508451604051631c09a7e960e11b8152736ef8108E1E775466Cd95E83F225aE170662C20F393506338134fd2925061015f91908690600401612b65565b60006040518083038186803b15801561017757600080fd5b505af415801561018b573d6000803e3d6000fd5b5050505061019761222b565b6101a684848660600151610e50565b60608201528351608085015173B10bF164e0d80ff848c862Ea6c1E28813953ee049163b18e9433916101d787515190565b60016040518563ffffffff1660e01b81526004016101f89493929190612b89565b602060405180830381865af4158015610215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102399190612bb3565b60e08201528251516001600160a01b031663eb40133f61025b855160a0015190565b6040518263ffffffff1660e01b81526004016102779190612bcc565b6020604051808303816000875af1158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190612bb3565b508251516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190612bb3565b610100820181905284516080860151606084015160e0850151604051631d0296ef60e31b8152736ef8108E1E775466Cd95E83F225aE170662C20F39563e814b7789561037795909490938b9391929091600401612be0565b602060405180830381865af4158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b89190612bb3565b608082018190526020840151606001511115610400576080810151602084015160600151604051630966fea160e41b81526004016103f7929190612c2a565b60405180910390fd5b602083015160e00151600003610486578251516001600160a01b03166340c10f1961042d85516040015190565b83608001516040518363ffffffff1660e01b815260040161044f929190612c38565b600060405180830381600087803b15801561046957600080fd5b505af115801561047d573d6000803e3d6000fd5b505050506105b1565b8251516001600160a01b03166340c10f19856040015183608001516040518363ffffffff1660e01b81526004016104be929190612c38565b600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b505085516020870151604088015187515173843F921839c09d07529121d29aeA5934D28D68D295506315ff6d2d945088516040015160405160e087901b6001600160e01b03191681526001600160a01b03958616600482015293851660248501529184166044840152831660648301529091166084820152600060a482015260c401602060405180830381865af415801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af9190612bb3565b505b8351835160a00151604051632ecad23f60e11b815273f481e979eFc086755674f7A21A1281c4212c59f592635d95a47e926105ee92600401612c51565b608060405180830381865af415801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190612c6b565b808252845160808601516020830151604051631773dc6560e21b815273f481e979eFc086755674f7A21A1281c4212c59f59463f2e2a4f5949390926001600160a01b0390911691635dcf71949161068891600401612bcc565b6040805180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190612cd2565b608089015186516040908101519051631773dc6560e21b81526001600160a01b0390921691635dcf7194916106ff91600401612bcc565b6040805180830381865afa15801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190612cd2565b60808a0151875160600151604051631773dc6560e21b81526001600160a01b0390921691635dcf71949161077591600401612bcc565b6040805180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b59190612cd2565b6040516020016107f4906020808252601b908201527a4d41585f504e4c5f464143544f525f464f525f4445504f5349545360281b604082015260600190565b6040516020818303038152906040528051906020012060016040518863ffffffff1660e01b815260040161082e9796959493929190612d37565b61016060405180830381865af415801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190612da4565b602082015273f481e979eFc086755674f7A21A1281c4212c59f56316ba208961089b855160a0015190565b6040518263ffffffff1660e01b81526004016108b79190612bcc565b602060405180830381865af41580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190612bb3565b6040820152835183515173B10bF164e0d80ff848c862Ea6c1E28813953ee04916391f0f18391845160208601515161092f9061156e565b86604001516040518663ffffffff1660e01b8152600401610954959493929190612e37565b60006040518083038186803b15801561096c57600080fd5b505af4158015610980573d6000803e3d6000fd5b50505050730dCc8a2415206aaa3453442979f004069F45E3a5631fa7df6685602001518660a001516109b487516020015190565b60808601516040516001600160e01b031960e087901b1681526001600160a01b039485166004820152602481019390935292166044820152606481019190915260840160006040518083038186803b158015610a0f57600080fd5b505af4158015610a23573d6000803e3d6000fd5b50508551608087015186515160405163b18e943360e01b815273B10bF164e0d80ff848c862Ea6c1E28813953ee04955063b18e94339450610a6c93929190600190600401612b89565b602060405180830381865af4158015610a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aad9190612bb3565b60e08201528251516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190612bb3565b6101008201526020840151610b3e90610b2e85515190565b8360e001518461010001516115c4565b610b466122f5565b6020810151610b569060016116fb565b610b9f6000604051806040016040528060118152602001707265636569766564476c76546f6b656e7360781b81525084608001518460200151611760909392919063ffffffff16565b60a0850151604051632802574760e11b8152736644F2a4a862e367a3DB6683F421e47C296F899391635004ae8e91610bde91908890869060040161360b565b60006040518083038186803b158015610bf657600080fd5b505af4158015610c0a573d6000803e3d6000fd5b50508651865151604051630c61cf9960e41b815273B10bF164e0d80ff848c862Ea6c1E28813953ee04945063c61cf9909350610c4a929190600401612c51565b602060405180830381865af4158015610c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8b9190612bb3565b60a083018190528451610120015173e452ec6B7718553A133715aB798d688A71Ea74029163d7c07e5291518751610100015151610cc891906136e6565b6040518363ffffffff1660e01b8152600401610ce5929190612c2a565b602060405180830381865af4158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190612bb3565b8260c001818152505073e452ec6B7718553A133715aB798d688A71Ea740263fd48e65e604051806080016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b03168152508760a00151610daf88516060015190565b602089015160a001518a60c001518860c001518c60e00151610dd38d516040015190565b60208e015160e001516040518a63ffffffff1660e01b8152600401610e00999897969594939291906136f9565b602060405180830381865af4158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190612bb3565b50506080015190505b92915050565b6000610e6183604001516020015190565b1561116457600073f481e979eFc086755674f7A21A1281c4212c59f5635d95a47e8660000151610e93875160a0015190565b6040518363ffffffff1660e01b8152600401610eb0929190612c51565b608060405180830381865af4158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190612c6b565b90506000604051806060016040528087608001516001600160a01b0316635dcf719485602001516040518263ffffffff1660e01b8152600401610f349190612bcc565b6040805180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190612cd2565b815260200187608001516001600160a01b0316635dcf719485604001516040518263ffffffff1660e01b8152600401610fad9190612bcc565b6040805180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190612cd2565b815260200187608001516001600160a01b0316635dcf719485606001516040518263ffffffff1660e01b81526004016110269190612bcc565b6040805180830381865afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190612cd2565b81525090506110c4866000015183836040516020016110849061378a565b604051602081830303815290604052805190602001206040516020016110a99061378a565b604051602081830303815290604052805190602001206117b3565b836001600160a01b031663078d3b796110df875160a0015190565b8751516020890151516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561113757600080fd5b505af115801561114b573d6000803e3d6000fd5b5050505061115b85602001515190565b92505050611567565b604080516101a0810190915260009080608081018061118288515190565b6001600160a01b0316815260200161119988515190565b6001600160a01b03168152600060208201526040016111ba88516080015190565b6001600160a01b031681526020016111d4885160a0015190565b6001600160a01b031681526020016111ee885160c0015190565b6001600160a01b03168152602001611208885160e0015190565b6001600160a01b031681526020016112238851610100015190565b81526020016112358851610120015190565b81525081526020016040518060e0016040528061125788602090810151015190565b815260200161126b88602001516040015190565b81526020016000815260200161128688602001516080015190565b8152602001600081526020016000815260200160008152508152602001604051806020016040528060001515815250815260200160006001600160401b038111156112d3576112d36123e6565b6040519080825280602002602001820160405280156112fc578160200160208202803683370190505b50815250905060006113118660000151611838565b905085600001516001600160a01b031663c80f4c62604051602001611356906020808252600c908201526b11115413d4d25517d31254d560a21b604082015260600190565b60405160208183030381529060405280519060200120836040518363ffffffff1660e01b815260040161138a929190612c2a565b600060405180830381600087803b1580156113a457600080fd5b505af11580156113b8573d6000803e3d6000fd5b5050506020870151604051633ad7631560e01b815273F1f4dAe0660De81C944a0dFC957415D4fcF742629250633ad76315916113fd918590879060029060040161392a565b60006040518083038186803b15801561141557600080fd5b505af4158015611429573d6000803e3d6000fd5b50505050600060405180610160016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b0316815260200188608001516001600160a01b031681526020018381526020018860e001516001600160a01b031681526020018860c001518152602001600360058111156114d0576114d0613914565b815260016020820152600060409182018190529051635f973d4f60e01b81529192509073529d24AE130F4acD6B45CbAad54018132049AF4690635f973d4f9061151f9085908890600401613986565b602060405180830381865af415801561153c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115609190612bb3565b9450505050505b9392505050565b6000808212156115c05760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016103f7565b5090565b6115cc6122f5565b80516115d99060016116fb565b60408051808201909152600381526233b63b60e91b60208201528151611602916000908761185a565b60208101516116129060026116fb565b61164b60006040518060400160405280600581526020016476616c756560d81b815250858460200151611760909392919063ffffffff16565b611685600160405180604001604052806006815260200165737570706c7960d01b815250848460200151611760909392919063ffffffff16565b846001600160a01b03166324de01e46116a4866001600160a01b031690565b836040518363ffffffff1660e01b81526004016116c292919061427f565b600060405180830381600087803b1580156116dc57600080fd5b505af11580156116f0573d6000803e3d6000fd5b505050505050505050565b806001600160401b03811115611713576117136123e6565b60405190808252806020026020018201604052801561175957816020015b6040805180820190915260608152600060208201528152602001906001900390816117315790505b5090915250565b81846000015184815181106117775761177761437c565b602002602001015160000181905250808460000151848151811061179d5761179d61437c565b6020026020010151602001818152505050505050565b60008060006117c68888886001896118b7565b92509250925082156117ef578181604051630b92fb2560e41b81526004016103f7929190612c2a565b60008060006118028b8b8b60008b6118b7565b925092509250821561182b578181604051632c0041a560e21b81526004016103f7929190612c2a565b5050505050505050505050565b6000806118448361190b565b9050600061185284836119bd565b949350505050565b81846000015184815181106118715761187161437c565b60200260200101516000018190525080846000015184815181106118975761189761437c565b6020908102919091018101516001600160a01b0390921691015250505050565b6000806000806118cb8989898960016119f0565b905060006118df8a878b600001518a611a42565b9050600080831380156118f95750816118f78461156e565b115b9b929a50909850909650505050505050565b6000816001600160a01b031663340dbab3604051602001611945906020808252600590820152644e4f4e434560d81b604082015260600190565b6040516020818303038152906040528051906020012060016040518363ffffffff1660e01b815260040161197a929190612c2a565b6020604051808303816000875af1158015611999573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4a9190612bb3565b600082826040516020016119d2929190612c38565b60405160208183030381529060405280519060200120905092915050565b600080611a01878787878715611abd565b905080600003611a15576000915050611a39565b6000611a28888888600001518888611b43565b9050611a348183611bd4565b925050505b95945050505050565b6000846001600160a01b031663bd02d0f5611a5e868686611c13565b6040518263ffffffff1660e01b8152600401611a7c91815260200190565b602060405180830381865afa158015611a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190612bb3565b60008083611acf578560600151611ad5565b85604001515b90506000611ae4888884611ca2565b905060008415611b125785611b0157866040015160200151611b0b565b8660200151602001515b9050611b2c565b85611b2257604087015151611b29565b6020870151515b90505b611b368183614392565b9998505050505050505050565b600080611b59611b54888887611d40565b611d9e565b90506000611b68888887611e08565b9050811580611b75575080155b15611b8557600092505050611a39565b6000611b92878787611e4f565b90506000611ba3611b548385614392565b9050600087611bbb57611bb682866143a9565b611bc5565b611bc585836143a9565b9b9a5050505050505050505050565b600080611be9611be385611e88565b84611e9b565b905060008413611c0a57611bfc81611d9e565b611c05906143d0565b611852565b61185281611d9e565b6000604051602001611c47906020808252600e908201526d26a0ac2fa827262fa320a1aa27a960911b604082015260600190565b60408051601f1981840301815282825280516020918201209083015281018590526001600160a01b0384166060820152821515608082015260a0015b6040516020818303038152906040528051906020012090509392505050565b600080611cb784604001518560600151611ea9565b905080856001600160a01b031663bd02d0f5611cd7876000015187611ed8565b6040518263ffffffff1660e01b8152600401611cf591815260200190565b602060405180830381865afa158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d369190612bb3565b611a399190612929565b600080611d5584604001518560600151611ea9565b90506000611d6e86866000015187604001518786611f46565b90506000611d8787876000015188606001518887611f46565b9050611d9381836136e6565b979650505050505050565b60006001600160ff1b038211156115c05760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016103f7565b600080611e1d84604001518560600151611ea9565b90506000611e3686866000015187604001518786611fd6565b90506000611d8787876000015188606001518887611fd6565b60008215611e705781611e63578351611e69565b83602001515b9050611567565b81611e7f578360200151611852565b50509051919050565b6000808212156115c05781600003610e4a565b600061156783836000611ff3565b6000816001600160a01b0316836001600160a01b031614611ecb576001611ece565b60025b60ff169392505050565b6000604051602001611f09906020808252600b908201526a1413d3d317d05353d5539560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0380861691830191909152831660608201526080016119d2565b600081866001600160a01b031663bd02d0f5611f6388888861203b565b6040518263ffffffff1660e01b8152600401611f8191815260200190565b602060405180830381865afa158015611f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc29190612bb3565b611fcc9190612929565b9695505050505050565b600081866001600160a01b031663bd02d0f5611f638888886120b3565b60008360000361200557506000611567565b811561202457611e698468327cb2734119d3b7a9601e1b8560016120f0565b6118528468327cb2734119d3b7a9601e1b85612141565b600060405160200161206e906020808252600d908201526c13d4115397d2539511549154d5609a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038087169183019190915284166060820152821515608082015260a001611c83565b600060405160200161206e906020808252601790820152764f50454e5f494e5445524553545f494e5f544f4b454e5360481b604082015260600190565b6000806120fe868686612141565b9050600183600281111561211457612114613914565b14801561213157506000848061212c5761212c6128fd565b868809115b15611a3957611fcc6001826136e6565b600080806000198587098587029250828110838203039150508060000361217b57838281612171576121716128fd565b0492505050611567565b8084116121c25760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b60448201526064016103f7565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b604080516101a081019091526000610120820181815261014083018290526101608301829052610180830191909152819081526020016122be60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101208101909152606060e0820181815261010083019190915281908152602001612337604051806040016040528060608152602001606081525090565b8152602001612359604051806040016040528060608152602001606081525090565b815260200161237b604051806040016040528060608152602001606081525090565b815260200161239d604051806040016040528060608152602001606081525090565b81526020016123bf604051806040016040528060608152602001606081525090565b81526020016123e1604051806040016040528060608152602001606081525090565b905290565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b038111828210171561241f5761241f6123e6565b60405290565b604080519081016001600160401b038111828210171561241f5761241f6123e6565b604051608081016001600160401b038111828210171561241f5761241f6123e6565b60405161014081016001600160401b038111828210171561241f5761241f6123e6565b60405161016081016001600160401b038111828210171561241f5761241f6123e6565b604051601f8201601f191681016001600160401b03811182821017156124d7576124d76123e6565b604052919050565b6001600160a01b03811681146124f457600080fd5b50565b8035612502816124df565b919050565b60006001600160401b03821115612520576125206123e6565b5060051b60200190565b600082601f83011261253b57600080fd5b8135602061255061254b83612507565b6124af565b82815260059290921b8401810191818101908684111561256f57600080fd5b8286015b84811015612593578035612586816124df565b8352918301918301612573565b509695505050505050565b600061010082840312156125b157600080fd5b6125b96123fc565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015292915050565b8035801515811461250257600080fd5b60006040828403121561262d57600080fd5b612635612425565b90506126408261260b565b815261264e6020830161260b565b602082015292915050565b600082601f83011261266a57600080fd5b8135602061267a61254b83612507565b82815260059290921b8401810191818101908684111561269957600080fd5b8286015b84811015612593578035835291830191830161269d565b600061018082840312156126c757600080fd5b6126cf612447565b905081356001600160401b03808211156126e857600080fd5b9083019061014082860312156126fd57600080fd5b612705612469565b61270e836124f7565b815261271c602084016124f7565b602082015261272d604084016124f7565b604082015261273e606084016124f7565b606082015261274f608084016124f7565b608082015261276060a084016124f7565b60a082015261277160c084016124f7565b60c082015261278260e084016124f7565b60e0820152610100808401358381111561279b57600080fd5b6127a78882870161252a565b82840152505061012080840135838111156127c157600080fd5b6127cd8882870161252a565b82840152508185526127e2876020880161259e565b60208601526127f38782880161261b565b6040860152505061016084013591508082111561280f57600080fd5b5061281c84828501612659565b60608301525092915050565b60008082840361012081121561283d57600080fd5b6101008082121561284d57600080fd5b6128556123fc565b91508435612862816124df565b8252612870602086016124f7565b6020830152612881604086016124f7565b6040830152612892606086016124f7565b60608301526128a3608086016124f7565b608083015260a085013560a083015260c085013560c08301526128c860e086016124f7565b60e08301529092508301356001600160401b038111156128e757600080fd5b6128f3858286016126b4565b9150509250929050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261294657634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610e4a57610e4a612913565b6001600160a01b03169052565b600081518084526020808501945080840160005b838110156129a45781516001600160a01b03168752958201959082019060010161297f565b509495945050505050565b600081518084526020808501945080840160005b838110156129a4578151875295820195908201906001016129c3565b600061018082518185526129f6828601825161295e565b60208101519150612a0b6101a086018361295e565b60408101519150612a206101c086018361295e565b60608101519150612a356101e086018361295e565b60808101519150612a4a61020086018361295e565b60a08101519150612a5f61022086018361295e565b60c08101519150612a7461024086018361295e565b60e08101519150612a8961026086018361295e565b6101008101519150610140610280860152612aa86102c086018361296b565b6101209182015186820361017f19016102a088015290925090612acb838361296b565b925060208501519150612b2a6020870183805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b60408501519150612b4b818701838051151582526020908101511515910152565b50506060830151848203610160860152611a3982826129af565b6001600160a01b0383168152604060208201819052600090611852908301846129df565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b600060208284031215612bc557600080fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0387811682528616602082015260c060408201819052600090612c0c908301876129df565b606083019590955250608081019290925260a0909101529392505050565b918252602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b600060808284031215612c7d57600080fd5b612c85612447565b8251612c90816124df565b81526020830151612ca0816124df565b60208201526040830151612cb3816124df565b60408201526060830151612cc6816124df565b60608201529392505050565b600060408284031215612ce457600080fd5b612cec612425565b82518152602083015160208201528091505092915050565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b6001600160a01b03881681526101a08101612d556020830189612d04565b865160a083015260209687015160c0830152855160e083015294860151610100820152835161012082015292909401516101408301526101608201529115156101809092019190915292915050565b60006101608284031215612db757600080fd5b612dbf61248c565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152508091505092915050565b6001600160a01b038681168252851660208201526101008101612e5d6040830186612d04565b60c082019390935260e001529392505050565b6000815180845260005b81811015612e9657602081850181015186830182015201612e7a565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612f24578284038952815160408151818752612ef682880182612e70565b91505086820151915085810387870152612f10818361296b565b9a87019a9550505090840190600101612ed4565b5091979650505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015612fa857898603605f1901845284518051888852612f8289890182612e70565b918401516001600160a01b03169784019790975295509381019392810192600101612f5e565b50808801519550888503818a015250505050611a398183612eb6565b600081518084526020808501808196508360051b810191508286016000805b86811015613056578385038a5282516040815181885261300582890182612e70565b92890151888403898b01528051808552908a01938693508a0191505b808310156130415783518252928901926001929092019190890190613021565b509b88019b9650505091850191600101612fe3565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156130d257898603605f19018452845180518888526130b589890182612e70565b918401519784019790975295509381019392810192600101613091565b50808801519550888503818a015250505050611a398183612fc4565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156130d257898603605f190184528451805188885261313f89890182612e70565b91840151978401979097529550938101939281019260010161311b565b600081518084526020808501808196508360051b810191508286016000805b86811015613056578385038a5282516040815181885261319d82890182612e70565b92890151888403898b01528051808552908a01938693508a0191505b808310156131db578351151582529289019260019290920191908901906131b9565b509b88019b965050509185019160010161317b565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561326057898603605f190184528451805188885261324189890182612e70565b918401511515978401979097529550938101939281019260010161321d565b50808801519550888503818a015250505050611a39818361315c565b600081518084526020808501808196508360051b8101915082860160005b85811015612f245782840389528151604081518187526132bc82880182612e70565b915050868201519150858103878701526132d681836129af565b9a87019a955050509084019060010161329a565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561335857898603605f190184528451805188885261333b89890182612e70565b918401519784019790975295509381019392810192600101613317565b50808801519550888503818a015250505050611a39818361327c565b600081518084526020808501808196506005915083821b81018387016000805b8781101561341f578484038b528251604081518187526133b682880182612e70565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561340857601f198583030184526133f6828751612e70565b958d0195938d019391506001016133da565b509e8b019e97505050938801935050600101613394565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156134ab57898603605f190184528451805188885261347f89890182612e70565b91840151888303898601529190506134978183612e70565b97505050938101939281019260010161345b565b50808801519550888503818a015250505050611a398183613374565b600081518084526020808501808196506005915083821b81018387016000805b8781101561341f578484038b5282516040815181875261350982880182612e70565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561355b57601f19858303018452613549828751612e70565b958d0195938d0193915060010161352d565b509e8b019e975050509388019350506001016134e7565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156135ef57898603605f19018452845180518888526135c389890182612e70565b91840151888303898601529190506135db8183612e70565b97505050938101939281019260010161359f565b50808801519550888503818a015250505050611a3981836134c7565b83815260606020820152600061362460608301856129df565b8281036040840152835160e0825261363f60e0830182612f31565b9050602085015182820360208401526136588282613064565b9150506040850151828203604084015261367282826130ee565b9150506060850151828203606084015261368c82826131f0565b915050608085015182820360808401526136a682826132ea565b91505060a085015182820360a08401526136c0828261342e565b91505060c085015182820360c08401526136da8282613572565b98975050505050505050565b80820180821115610e4a57610e4a612913565b89516001600160a01b0390811682526020808c01518216908301526040808c01518216908301526060808c01519091169082015260808101899052610180810161374660a083018a61295e565b8760c08301528660e08301528561010083015261376761012083018661295e565b61377561014083018561295e565b826101608301529a9950505050505050505050565b6020808252601e908201527f4d41585f504e4c5f464143544f525f464f525f5749544844524157414c530000604082015260600190565b600061014082518185526137d8828601825161295e565b602081015191506137ed61016086018361295e565b6040810151915061380261018086018361295e565b606081015191506138176101a086018361295e565b6080810151915061382c6101c086018361295e565b60a081015191506138416101e086018361295e565b60c0810151915061385661020086018361295e565b60e081015191506101208061022087015261387561026087018461296b565b6101009283015187820361013f190161024089015290935091613898848461296b565b9350602086015192506138ed6020880184805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b6040860151511515908701526060850151868403918701919091529050611a3982826129af565b634e487b7160e01b600052602160045260246000fd5b60018060a01b038516815283602082015260806040820152600061395160808301856137c1565b90506003831061396357613963613914565b82606083015295945050505050565b6006811061398257613982613914565b9052565b600061018061399683865161295e565b60208501516139a8602085018261295e565b5060408501516139bb604085018261295e565b5060608501516139ce606085018261295e565b5060808501516139e1608085018261295e565b5060a085015160a084015260c08501516139fe60c085018261295e565b5060e085015160e084015261010080860151613a1c82860182613972565b50506101208581015115159084015261014080860151908401526101608301819052611a39818401856137c1565b600081518084526020808501808196508360051b810191508286016000805b86811015613056578385038a52825160408151818852613a8b82890182612e70565b92890151888403898b01528051808552908a01938693508a0191505b80831015613ad05783516001600160a01b03168252928901926001929092019190890190613aa7565b509b88019b9650505091850191600101613a69565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613b5c57898603605f1901845284518051888852613b3689890182612e70565b918401516001600160a01b03169784019790975295509381019392810192600101613b12565b50808801519550888503818a015250505050611a398183613a4a565b600081518084526020808501808196508360051b810191508286016000805b86811015613056578385038a52825160408151818852613bb982890182612e70565b92890151888403898b01528051808552908a01938693508a0191505b80831015613bf55783518252928901926001929092019190890190613bd5565b509b88019b9650505091850191600101613b97565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613c7857898603605f1901845284518051888852613c5b89890182612e70565b918401519784019790975295509381019392810192600101613c37565b50808801519550888503818a015250505050611a398183613b78565b600081518084526020808501808196508360051b810191508286016000805b86811015613056578385038a52825160408151818852613cd582890182612e70565b92890151888403898b01528051808552908a01938693508a0191505b80831015613d115783518252928901926001929092019190890190613cf1565b509b88019b9650505091850191600101613cb3565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613d9457898603605f1901845284518051888852613d7789890182612e70565b918401519784019790975295509381019392810192600101613d53565b50808801519550888503818a015250505050611a398183613c94565b600082825180855260208086019550808260051b8401018186016000805b85811015613e4757601f19878503018a52825160408151818752613df482880182612e70565b92880151878403888a0152805180855290890193869350890191505b80831015613e3257835115158252928801926001929092019190880190613e10565b509b87019b9550505091840191600101613dce565b509198975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613ec557898603605f1901845284518051888852613ea689890182612e70565b9184015115159784019790975295509381019392810192600101613e82565b50808801519550888503818a015250505050611a398183613db0565b600081518084526020808501808196508360051b810191508286016000805b86811015613056578385038a52825160408151818852613f2282890182612e70565b92890151888403898b01528051808552908a01938693508a0191505b80831015613f5e5783518252928901926001929092019190890190613f3e565b509b88019b9650505091850191600101613f00565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613fe157898603605f1901845284518051888852613fc489890182612e70565b918401519784019790975295509381019392810192600101613fa0565b50808801519550888503818a015250505050611a398183613ee1565b600081518084526020808501945084600583811b87018387016000805b8781101561341f578584038b5282516040815181875261403c82880182612e70565b928a0151878403888c01528051808552908b019392508a8301915080891b83018b01865b8281101561408e57601f1985830301845261407c828751612e70565b958d0195938d01939150600101614060565b509e8b019e9750505093880193505060010161401a565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561412257898603605f19018452845180518888526140f689890182612e70565b918401518883038986015291905061410e8183612e70565b9750505093810193928101926001016140d2565b50808801519550888503818a015250505050611a398183613ffd565b600081518084526020808501945084600583811b87018387016000805b8781101561341f578584038b5282516040815181875261417d82880182612e70565b928a0151878403888c01528051808552908b019392508a8301915080891b83018b01865b828110156141cf57601f198583030184526141bd828751612e70565b958d0195938d019391506001016141a1565b509e8b019e9750505093880193505060010161415b565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561426357898603605f190184528451805188885261423789890182612e70565b918401518883038986015291905061424f8183612e70565b975050509381019392810192600101614213565b50808801519550888503818a015250505050611a39818361413e565b60608152600f60608201526e11db1d95985b1d59555c19185d1959608a1b608082015282602082015260a060408201526000825160e060a08401526142c8610180840182613ae5565b90506020840151609f19808584030160c08601526142e68383613c0a565b925060408601519150808584030160e08601526143038383613d26565b92506060860151915080858403016101008601526143218383613e55565b925060808601519150808584030161012086015261433f8383613f73565b925060a08601519150808584030161014086015261435d83836140a5565b925060c08601519150808584030161016086015250611fcc82826141e6565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610e4a57610e4a612913565b81810360008312801583831316838312821617156143c9576143c9612913565b5092915050565b6000600160ff1b82016143e5576143e5612913565b506000039056fea26469706673582212201fe2b8c7ab3ae3787a8c645c46ccb5d1291a259c0df4630e99775ed959062d1764736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063481bddaf1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004612828565b61006c565b60405190815260200160405180910390f35b6000603f5a61007b9190612929565b8360c00181815161008c919061294b565b905250825160a084015173__$0b06d8034ddfec34cf23b0ef7b59522d69$__916374b6fe13916100be86516020015190565b60405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260640160006040518083038186803b15801561010d57600080fd5b505af4158015610121573d6000803e3d6000fd5b50508451604051631c09a7e960e11b815273__$76c2891370790d26a23a5d496e1f0b0d6c$__93506338134fd2925061015f91908690600401612b65565b60006040518083038186803b15801561017757600080fd5b505af415801561018b573d6000803e3d6000fd5b5050505061019761222b565b6101a684848660600151610e50565b60608201528351608085015173__$912693e8661eae8519dca8323d5b513832$__9163b18e9433916101d787515190565b60016040518563ffffffff1660e01b81526004016101f89493929190612b89565b602060405180830381865af4158015610215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102399190612bb3565b60e08201528251516001600160a01b031663eb40133f61025b855160a0015190565b6040518263ffffffff1660e01b81526004016102779190612bcc565b6020604051808303816000875af1158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190612bb3565b508251516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f9190612bb3565b610100820181905284516080860151606084015160e0850151604051631d0296ef60e31b815273__$76c2891370790d26a23a5d496e1f0b0d6c$__9563e814b7789561037795909490938b9391929091600401612be0565b602060405180830381865af4158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b89190612bb3565b608082018190526020840151606001511115610400576080810151602084015160600151604051630966fea160e41b81526004016103f7929190612c2a565b60405180910390fd5b602083015160e00151600003610486578251516001600160a01b03166340c10f1961042d85516040015190565b83608001516040518363ffffffff1660e01b815260040161044f929190612c38565b600060405180830381600087803b15801561046957600080fd5b505af115801561047d573d6000803e3d6000fd5b505050506105b1565b8251516001600160a01b03166340c10f19856040015183608001516040518363ffffffff1660e01b81526004016104be929190612c38565b600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b505085516020870151604088015187515173__$97f16f82bae4ac682deb2ea1417bfd757e$__95506315ff6d2d945088516040015160405160e087901b6001600160e01b03191681526001600160a01b03958616600482015293851660248501529184166044840152831660648301529091166084820152600060a482015260c401602060405180830381865af415801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af9190612bb3565b505b8351835160a00151604051632ecad23f60e11b815273__$e53db83827f4e07ebc418caf7145b8c2d5$__92635d95a47e926105ee92600401612c51565b608060405180830381865af415801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190612c6b565b808252845160808601516020830151604051631773dc6560e21b815273__$e53db83827f4e07ebc418caf7145b8c2d5$__9463f2e2a4f5949390926001600160a01b0390911691635dcf71949161068891600401612bcc565b6040805180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190612cd2565b608089015186516040908101519051631773dc6560e21b81526001600160a01b0390921691635dcf7194916106ff91600401612bcc565b6040805180830381865afa15801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190612cd2565b60808a0151875160600151604051631773dc6560e21b81526001600160a01b0390921691635dcf71949161077591600401612bcc565b6040805180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b59190612cd2565b6040516020016107f4906020808252601b908201527a4d41585f504e4c5f464143544f525f464f525f4445504f5349545360281b604082015260600190565b6040516020818303038152906040528051906020012060016040518863ffffffff1660e01b815260040161082e9796959493929190612d37565b61016060405180830381865af415801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190612da4565b602082015273__$e53db83827f4e07ebc418caf7145b8c2d5$__6316ba208961089b855160a0015190565b6040518263ffffffff1660e01b81526004016108b79190612bcc565b602060405180830381865af41580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190612bb3565b6040820152835183515173__$912693e8661eae8519dca8323d5b513832$__916391f0f18391845160208601515161092f9061156e565b86604001516040518663ffffffff1660e01b8152600401610954959493929190612e37565b60006040518083038186803b15801561096c57600080fd5b505af4158015610980573d6000803e3d6000fd5b5050505073__$0103e1f3fc7cf5dac62eee53f1c3919990$__631fa7df6685602001518660a001516109b487516020015190565b60808601516040516001600160e01b031960e087901b1681526001600160a01b039485166004820152602481019390935292166044820152606481019190915260840160006040518083038186803b158015610a0f57600080fd5b505af4158015610a23573d6000803e3d6000fd5b50508551608087015186515160405163b18e943360e01b815273__$912693e8661eae8519dca8323d5b513832$__955063b18e94339450610a6c93929190600190600401612b89565b602060405180830381865af4158015610a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aad9190612bb3565b60e08201528251516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190612bb3565b6101008201526020840151610b3e90610b2e85515190565b8360e001518461010001516115c4565b610b466122f5565b6020810151610b569060016116fb565b610b9f6000604051806040016040528060118152602001707265636569766564476c76546f6b656e7360781b81525084608001518460200151611760909392919063ffffffff16565b60a0850151604051632802574760e11b815273__$d7e28679fbfe4f4a6e86262d9995c4a909$__91635004ae8e91610bde91908890869060040161360b565b60006040518083038186803b158015610bf657600080fd5b505af4158015610c0a573d6000803e3d6000fd5b50508651865151604051630c61cf9960e41b815273__$912693e8661eae8519dca8323d5b513832$__945063c61cf9909350610c4a929190600401612c51565b602060405180830381865af4158015610c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8b9190612bb3565b60a083018190528451610120015173__$60bb1dd4670b1e26e5010aaaf2f65694d3$__9163d7c07e5291518751610100015151610cc891906136e6565b6040518363ffffffff1660e01b8152600401610ce5929190612c2a565b602060405180830381865af4158015610d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d269190612bb3565b8260c001818152505073__$60bb1dd4670b1e26e5010aaaf2f65694d3$__63fd48e65e604051806080016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b03168152508760a00151610daf88516060015190565b602089015160a001518a60c001518860c001518c60e00151610dd38d516040015190565b60208e015160e001516040518a63ffffffff1660e01b8152600401610e00999897969594939291906136f9565b602060405180830381865af4158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190612bb3565b50506080015190505b92915050565b6000610e6183604001516020015190565b1561116457600073__$e53db83827f4e07ebc418caf7145b8c2d5$__635d95a47e8660000151610e93875160a0015190565b6040518363ffffffff1660e01b8152600401610eb0929190612c51565b608060405180830381865af4158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190612c6b565b90506000604051806060016040528087608001516001600160a01b0316635dcf719485602001516040518263ffffffff1660e01b8152600401610f349190612bcc565b6040805180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f749190612cd2565b815260200187608001516001600160a01b0316635dcf719485604001516040518263ffffffff1660e01b8152600401610fad9190612bcc565b6040805180830381865afa158015610fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fed9190612cd2565b815260200187608001516001600160a01b0316635dcf719485606001516040518263ffffffff1660e01b81526004016110269190612bcc565b6040805180830381865afa158015611042573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110669190612cd2565b81525090506110c4866000015183836040516020016110849061378a565b604051602081830303815290604052805190602001206040516020016110a99061378a565b604051602081830303815290604052805190602001206117b3565b836001600160a01b031663078d3b796110df875160a0015190565b8751516020890151516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561113757600080fd5b505af115801561114b573d6000803e3d6000fd5b5050505061115b85602001515190565b92505050611567565b604080516101a0810190915260009080608081018061118288515190565b6001600160a01b0316815260200161119988515190565b6001600160a01b03168152600060208201526040016111ba88516080015190565b6001600160a01b031681526020016111d4885160a0015190565b6001600160a01b031681526020016111ee885160c0015190565b6001600160a01b03168152602001611208885160e0015190565b6001600160a01b031681526020016112238851610100015190565b81526020016112358851610120015190565b81525081526020016040518060e0016040528061125788602090810151015190565b815260200161126b88602001516040015190565b81526020016000815260200161128688602001516080015190565b8152602001600081526020016000815260200160008152508152602001604051806020016040528060001515815250815260200160006001600160401b038111156112d3576112d36123e6565b6040519080825280602002602001820160405280156112fc578160200160208202803683370190505b50815250905060006113118660000151611838565b905085600001516001600160a01b031663c80f4c62604051602001611356906020808252600c908201526b11115413d4d25517d31254d560a21b604082015260600190565b60405160208183030381529060405280519060200120836040518363ffffffff1660e01b815260040161138a929190612c2a565b600060405180830381600087803b1580156113a457600080fd5b505af11580156113b8573d6000803e3d6000fd5b5050506020870151604051633ad7631560e01b815273__$c1a7af12cfab3fde53a677c13aea00f1f1$__9250633ad76315916113fd918590879060029060040161392a565b60006040518083038186803b15801561141557600080fd5b505af4158015611429573d6000803e3d6000fd5b50505050600060405180610160016040528088600001516001600160a01b0316815260200188602001516001600160a01b0316815260200188604001516001600160a01b0316815260200188606001516001600160a01b0316815260200188608001516001600160a01b031681526020018381526020018860e001516001600160a01b031681526020018860c001518152602001600360058111156114d0576114d0613914565b815260016020820152600060409182018190529051635f973d4f60e01b81529192509073__$a26e5ecaf38b60f56220843100c2d8b777$",
  "libraries": {
    "MarketUtils": "0xf481e979eFc086755674f7A21A1281c4212c59f5",
    "GlvUtils": "0xB10bF164e0d80ff848c862Ea6c1E28813953ee04",
    "DepositEventUtils": "0xF1f4dAe0660De81C944a0dFC957415D4fcF74262",
    "ExecuteDepositUtils": "0x529d24AE130F4acD6B45CbAad54018132049AF46",
    "GasUtils": "0xe452ec6B7718553A133715aB798d688A71Ea7402",
    "GlvDepositEventUtils": "0x0dCc8a2415206aaa3453442979f004069F45E3a5",
    "GlvDepositStoreUtils": "0xF6BFA2A58C506bF4d2cd42FF79d87905C64c2db9",
    "GlvDepositCalc": "0x6ef8108E1E775466Cd95E83F225aE170662C20F3",
    "MarketStoreUtils": "0x999Ea5ef506bEC3639614a6AA0baA0E27e06664B",
    "MultichainUtils": "0x843F921839c09d07529121d29aeA5934D28D68D2",
    "CallbackUtils": "0x6644F2a4a862e367a3DB6683F421e47C296F8993"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}