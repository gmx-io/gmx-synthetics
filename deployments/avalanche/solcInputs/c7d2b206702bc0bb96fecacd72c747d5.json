{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    GelatoRelayContractsUtils\n} from \"../utils/GelatoRelayContractsUtils.sol\";\nimport {\n    GELATO_RELAY_V1,\n    GELATO_RELAY_V2,\n    GELATO_RELAY_ZKSYNC_V1,\n    GELATO_RELAY_ZKSYNC_V2\n} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayBase is GelatoRelayContractsUtils {\n    modifier onlyGelatoRelay() {\n        require(_isGelatoRelay(msg.sender), \"onlyGelatoRelay\");\n        _;\n    }\n\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\n        if (_isV1ZkSyncChainId) {\n            return _forwarder == GELATO_RELAY_ZKSYNC_V1;\n        }\n        if (_isV2ZkSyncChainId) {\n            return _forwarder == GELATO_RELAY_ZKSYNC_V2;\n        }\n        if (_isV1ChainId) {\n            return _forwarder == GELATO_RELAY_V1;\n        }\n        return _forwarder == GELATO_RELAY_V2;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant GELATO_RELAY_V1 = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\naddress constant GELATO_RELAY_ERC2771_V1 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_V1 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\n\naddress constant GELATO_RELAY_V2 = 0xcd565435e0d2109feFde337a66491541Df0D1420;\naddress constant GELATO_RELAY_ERC2771_V2 = 0x8aCE64CEA52b409F930f60B516F65197faD4B056;\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_V2 = 0xc7739c195618D314C08E8626C98f8573E4E43634;\n\naddress constant GELATO_RELAY_ZKSYNC_V1 = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\naddress constant GELATO_RELAY_ERC2771_ZKSYNC_V1 = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\n// solhint-disable-next-line max-line-length\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1 = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\n\naddress constant GELATO_RELAY_ZKSYNC_V2 = 0x42120A1417a091a52A8d4590E28fc6C0F61E5632;\naddress constant GELATO_RELAY_ERC2771_ZKSYNC_V2 = 0xACeD988c5B5Fe3f11848c728D9a5f66Cf34c9e73;\n// solhint-disable-next-line max-line-length\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2 = 0xbbCe89ACdD86D0130BDc3f1fe37C3aEDd79fc1F4;\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayBase} from \"./base/GelatoRelayBase.sol\";\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\nuint256 constant _FEE_START = 32; // offset: uint256\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\n    assembly {\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\n    assembly {\n        fee := calldataload(sub(calldatasize(), _FEE_START))\n    }\n}\n\n/**\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\n * Expects calldata encoding:\n * abi.encodePacked( _data,\n *                   _feeCollector,\n *                   _feeToken,\n *                   _fee);\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\n * 32bytes start offsets from calldatasize:\n *     feeCollector: - 72 bytes\n *     feeToken: - 52 bytes\n *     fee: - 32 bytes\n */\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\nabstract contract GelatoRelayContext is GelatoRelayBase {\n    using TokenUtils for address;\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFee() internal {\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\n    }\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFee();\n        require(\n            fee <= _maxFee,\n            \"GelatoRelayContext._transferRelayFeeCapped: maxFee\"\n        );\n        _getFeeToken().transfer(_getFeeCollector(), fee);\n    }\n\n    function _getMsgData() internal view returns (bytes calldata) {\n        return\n            _isGelatoRelay(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeToken() internal pure returns (address) {\n        return _getFeeTokenRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFee() internal pure returns (uint256) {\n        return _getFeeRelayContext();\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    IERC20Permit\n} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IERC20Permit;\n\n    modifier onlyERC20(address _token) {\n        require(_token != NATIVE_TOKEN, \"TokenUtils.onlyERC20\");\n        _;\n    }\n\n    function permit(\n        address _token,\n        address _owner,\n        address _spender,\n        uint256 _value,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) internal onlyERC20(_token) {\n        IERC20Permit(_token).safePermit(\n            _owner,\n            _spender,\n            _value,\n            _deadline,\n            _v,\n            _r,\n            _s\n        );\n    }\n\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        _token == NATIVE_TOKEN\n            ? Address.sendValue(payable(_to), _amount)\n            : IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function transferFrom(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal onlyERC20(_token) {\n        if (_amount == 0) return;\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/utils/GelatoRelayContractsUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nabstract contract GelatoRelayContractsUtils {\n    bool internal immutable _isV1ChainId;\n    bool internal immutable _isV1ZkSyncChainId;\n    bool internal immutable _isV2ZkSyncChainId;\n\n    constructor() {\n        _isV1ChainId = __isV1ChainId(block.chainid);\n        _isV1ZkSyncChainId = __isV1ZkSyncChainId(block.chainid);\n        _isV2ZkSyncChainId = __isV2ZkSyncChainId(block.chainid);\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function __isV1ChainId(uint256 chainId) private pure returns (bool) {\n        if (\n            chainId == 1 ||\n            chainId == 10 ||\n            chainId == 25 ||\n            chainId == 30 ||\n            chainId == 56 ||\n            chainId == 100 ||\n            chainId == 109 ||\n            chainId == 137 ||\n            chainId == 183 ||\n            chainId == 233 ||\n            chainId == 250 ||\n            chainId == 314 ||\n            chainId == 1088 ||\n            chainId == 1101 ||\n            chainId == 1135 ||\n            chainId == 1284 ||\n            chainId == 1285 ||\n            chainId == 1729 ||\n            chainId == 1829 ||\n            chainId == 1833 ||\n            chainId == 2039 ||\n            chainId == 3776 ||\n            chainId == 4202 ||\n            chainId == 6398 ||\n            chainId == 8453 ||\n            chainId == 10200 ||\n            chainId == 18231 ||\n            chainId == 18233 ||\n            chainId == 25327 ||\n            chainId == 34443 ||\n            chainId == 41455 ||\n            chainId == 42069 ||\n            chainId == 42161 ||\n            chainId == 43114 ||\n            chainId == 59144 ||\n            chainId == 80002 ||\n            chainId == 80084 ||\n            chainId == 81457 ||\n            chainId == 84532 ||\n            chainId == 111188 ||\n            chainId == 241120 ||\n            chainId == 421614 ||\n            chainId == 656476 ||\n            chainId == 1261120 ||\n            chainId == 6038361 ||\n            chainId == 7777777 ||\n            chainId == 11155111 ||\n            chainId == 11155420 ||\n            chainId == 29313331 ||\n            chainId == 69658185 ||\n            chainId == 89346162 ||\n            chainId == 94204209 ||\n            chainId == 123420111 ||\n            chainId == 168587773 ||\n            chainId == 222000222 ||\n            chainId == 994873017 ||\n            chainId == 1380012617 ||\n            chainId == 3155399334 ||\n            chainId == 80998896642 ||\n            chainId == 88153591557\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function __isV1ZkSyncChainId(uint256 chainId) private pure returns (bool) {\n        if (chainId == 324 || chainId == 280) {\n            return true;\n        }\n        return false;\n    }\n\n    function __isV2ZkSyncChainId(uint256 chainId) private pure returns (bool) {\n        if (chainId == 11124 || chainId == 2741) {\n            return true;\n        }\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/compatibility/GovernorCompatibilityBravo.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/math/SafeCast.sol\";\nimport \"../extensions/IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"./IGovernorCompatibilityBravo.sol\";\n\n/**\n * @dev Compatibility layer that implements GovernorBravo compatibility on top of {Governor}.\n *\n * This compatibility layer includes a voting system and requires a {IGovernorTimelock} compatible module to be added\n * through inheritance. It does not include token bindings, nor does it include any variable upgrade patterns.\n *\n * NOTE: When using this module, you may need to enable the Solidity optimizer to avoid hitting the contract size limit.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorCompatibilityBravo is IGovernorTimelock, IGovernorCompatibilityBravo, Governor {\n    enum VoteType {\n        Against,\n        For,\n        Abstain\n    }\n\n    struct ProposalDetails {\n        address proposer;\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 abstainVotes;\n        mapping(address => Receipt) receipts;\n        bytes32 descriptionHash;\n    }\n\n    mapping(uint256 => ProposalDetails) private _proposalDetails;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\n        return \"support=bravo&quorum=bravo\";\n    }\n\n    // ============================================== Proposal lifecycle ==============================================\n    /**\n     * @dev See {IGovernor-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override(IGovernor, Governor) returns (uint256) {\n        // Stores the proposal details (if not already present) and executes the propose logic from the core.\n        _storeProposal(_msgSender(), targets, values, new string[](calldatas.length), calldatas, description);\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-propose}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        require(signatures.length == calldatas.length, \"GovernorBravo: invalid signatures length\");\n        // Stores the full proposal and fallback to the public (possibly overridden) propose. The fallback is done\n        // after the full proposal is stored, so the store operation included in the fallback will be skipped. Here we\n        // call `propose` and not `super.propose` to make sure if a child contract override `propose`, whatever code\n        // is added there is also executed when calling this alternative interface.\n        _storeProposal(_msgSender(), targets, values, signatures, calldatas, description);\n        return propose(targets, values, _encodeCalldata(signatures, calldatas), description);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-queue}.\n     */\n    function queue(uint256 proposalId) public virtual override {\n        (\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        ) = _getProposalParameters(proposalId);\n\n        queue(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-execute}.\n     */\n    function execute(uint256 proposalId) public payable virtual override {\n        (\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        ) = _getProposalParameters(proposalId);\n\n        execute(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @dev Cancel a proposal with GovernorBravo logic.\n     */\n    function cancel(uint256 proposalId) public virtual override {\n        (\n            address[] memory targets,\n            uint256[] memory values,\n            bytes[] memory calldatas,\n            bytes32 descriptionHash\n        ) = _getProposalParameters(proposalId);\n\n        cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @dev Cancel a proposal with GovernorBravo logic. At any moment a proposal can be cancelled, either by the\n     * proposer, or by third parties if the proposer's voting power has dropped below the proposal threshold.\n     */\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override(IGovernor, Governor) returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        address proposer = _proposalDetails[proposalId].proposer;\n\n        require(\n            _msgSender() == proposer || getVotes(proposer, clock() - 1) < proposalThreshold(),\n            \"GovernorBravo: proposer above threshold\"\n        );\n\n        return _cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @dev Encodes calldatas with optional function signature.\n     */\n    function _encodeCalldata(\n        string[] memory signatures,\n        bytes[] memory calldatas\n    ) private pure returns (bytes[] memory) {\n        bytes[] memory fullcalldatas = new bytes[](calldatas.length);\n        for (uint256 i = 0; i < fullcalldatas.length; ++i) {\n            fullcalldatas[i] = bytes(signatures[i]).length == 0\n                ? calldatas[i]\n                : abi.encodePacked(bytes4(keccak256(bytes(signatures[i]))), calldatas[i]);\n        }\n\n        return fullcalldatas;\n    }\n\n    /**\n     * @dev Retrieve proposal parameters by id, with fully encoded calldatas.\n     */\n    function _getProposalParameters(\n        uint256 proposalId\n    )\n        private\n        view\n        returns (address[] memory targets, uint256[] memory values, bytes[] memory calldatas, bytes32 descriptionHash)\n    {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return (\n            details.targets,\n            details.values,\n            _encodeCalldata(details.signatures, details.calldatas),\n            details.descriptionHash\n        );\n    }\n\n    /**\n     * @dev Store proposal metadata (if not already present) for later lookup.\n     */\n    function _storeProposal(\n        address proposer,\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) private {\n        bytes32 descriptionHash = keccak256(bytes(description));\n        uint256 proposalId = hashProposal(targets, values, _encodeCalldata(signatures, calldatas), descriptionHash);\n\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        if (details.descriptionHash == bytes32(0)) {\n            details.proposer = proposer;\n            details.targets = targets;\n            details.values = values;\n            details.signatures = signatures;\n            details.calldatas = calldatas;\n            details.descriptionHash = descriptionHash;\n        }\n    }\n\n    // ==================================================== Views =====================================================\n    /**\n     * @dev See {IGovernorCompatibilityBravo-proposals}.\n     */\n    function proposals(\n        uint256 proposalId\n    )\n        public\n        view\n        virtual\n        override\n        returns (\n            uint256 id,\n            address proposer,\n            uint256 eta,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 forVotes,\n            uint256 againstVotes,\n            uint256 abstainVotes,\n            bool canceled,\n            bool executed\n        )\n    {\n        id = proposalId;\n        eta = proposalEta(proposalId);\n        startBlock = proposalSnapshot(proposalId);\n        endBlock = proposalDeadline(proposalId);\n\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        proposer = details.proposer;\n        forVotes = details.forVotes;\n        againstVotes = details.againstVotes;\n        abstainVotes = details.abstainVotes;\n\n        ProposalState currentState = state(proposalId);\n        canceled = currentState == ProposalState.Canceled;\n        executed = currentState == ProposalState.Executed;\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-getActions}.\n     */\n    function getActions(\n        uint256 proposalId\n    )\n        public\n        view\n        virtual\n        override\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        )\n    {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return (details.targets, details.values, details.signatures, details.calldatas);\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-getReceipt}.\n     */\n    function getReceipt(uint256 proposalId, address voter) public view virtual override returns (Receipt memory) {\n        return _proposalDetails[proposalId].receipts[voter];\n    }\n\n    /**\n     * @dev See {IGovernorCompatibilityBravo-quorumVotes}.\n     */\n    function quorumVotes() public view virtual override returns (uint256) {\n        return quorum(clock() - 1);\n    }\n\n    // ==================================================== Voting ====================================================\n    /**\n     * @dev See {IGovernor-hasVoted}.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\n        return _proposalDetails[proposalId].receipts[account].hasVoted;\n    }\n\n    /**\n     * @dev See {Governor-_quorumReached}. In this module, only forVotes count toward the quorum.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return quorum(proposalSnapshot(proposalId)) <= details.forVotes;\n    }\n\n    /**\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        return details.forVotes > details.againstVotes;\n    }\n\n    /**\n     * @dev See {Governor-_countVote}. In this module, the support follows Governor Bravo.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight,\n        bytes memory // params\n    ) internal virtual override {\n        ProposalDetails storage details = _proposalDetails[proposalId];\n        Receipt storage receipt = details.receipts[account];\n\n        require(!receipt.hasVoted, \"GovernorCompatibilityBravo: vote already cast\");\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = SafeCast.toUint96(weight);\n\n        if (support == uint8(VoteType.Against)) {\n            details.againstVotes += weight;\n        } else if (support == uint8(VoteType.For)) {\n            details.forVotes += weight;\n        } else if (support == uint8(VoteType.Abstain)) {\n            details.abstainVotes += weight;\n        } else {\n            revert(\"GovernorCompatibilityBravo: invalid vote type\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/compatibility/IGovernorCompatibilityBravo.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/compatibility/IGovernorCompatibilityBravo.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Interface extension that adds missing functions to the {Governor} core to provide `GovernorBravo` compatibility.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorCompatibilityBravo is IGovernor {\n    /**\n     * @dev Proposal structure from Compound Governor Bravo. Not actually used by the compatibility layer, as\n     * {{proposal}} returns a very different structure.\n     */\n    struct Proposal {\n        uint256 id;\n        address proposer;\n        uint256 eta;\n        address[] targets;\n        uint256[] values;\n        string[] signatures;\n        bytes[] calldatas;\n        uint256 startBlock;\n        uint256 endBlock;\n        uint256 forVotes;\n        uint256 againstVotes;\n        uint256 abstainVotes;\n        bool canceled;\n        bool executed;\n        mapping(address => Receipt) receipts;\n    }\n\n    /**\n     * @dev Receipt structure from Compound Governor Bravo\n     */\n    struct Receipt {\n        bool hasVoted;\n        uint8 support;\n        uint96 votes;\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface.\n     */\n    function quorumVotes() public view virtual returns (uint256);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The official record of all proposals ever proposed\"_.\n     */\n    function proposals(\n        uint256\n    )\n        public\n        view\n        virtual\n        returns (\n            uint256 id,\n            address proposer,\n            uint256 eta,\n            uint256 startBlock,\n            uint256 endBlock,\n            uint256 forVotes,\n            uint256 againstVotes,\n            uint256 abstainVotes,\n            bool canceled,\n            bool executed\n        );\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Function used to propose a new proposal\"_.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        string[] memory signatures,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256);\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Queues a proposal of state succeeded\"_.\n     */\n    function queue(uint256 proposalId) public virtual;\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Executes a queued proposal if eta has passed\"_.\n     */\n    function execute(uint256 proposalId) public payable virtual;\n\n    /**\n     * @dev Cancels a proposal only if the sender is the proposer or the proposer delegates' voting power dropped below the proposal threshold.\n     */\n    function cancel(uint256 proposalId) public virtual;\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Gets actions of a proposal\"_.\n     */\n    function getActions(\n        uint256 proposalId\n    )\n        public\n        view\n        virtual\n        returns (\n            address[] memory targets,\n            uint256[] memory values,\n            string[] memory signatures,\n            bytes[] memory calldatas\n        );\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"Gets the receipt for a voter on a given proposal\"_.\n     */\n    function getReceipt(uint256 proposalId, address voter) public view virtual returns (Receipt memory);\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorSettings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\n\n/**\n * @dev Extension of {Governor} for settings updatable through governance.\n *\n * _Available since v4.4._\n */\nabstract contract GovernorSettings is Governor {\n    uint256 private _votingDelay;\n    uint256 private _votingPeriod;\n    uint256 private _proposalThreshold;\n\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\n\n    /**\n     * @dev Initialize the governance parameters.\n     */\n    constructor(uint256 initialVotingDelay, uint256 initialVotingPeriod, uint256 initialProposalThreshold) {\n        _setVotingDelay(initialVotingDelay);\n        _setVotingPeriod(initialVotingPeriod);\n        _setProposalThreshold(initialProposalThreshold);\n    }\n\n    /**\n     * @dev See {IGovernor-votingDelay}.\n     */\n    function votingDelay() public view virtual override returns (uint256) {\n        return _votingDelay;\n    }\n\n    /**\n     * @dev See {IGovernor-votingPeriod}.\n     */\n    function votingPeriod() public view virtual override returns (uint256) {\n        return _votingPeriod;\n    }\n\n    /**\n     * @dev See {Governor-proposalThreshold}.\n     */\n    function proposalThreshold() public view virtual override returns (uint256) {\n        return _proposalThreshold;\n    }\n\n    /**\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\n        _setVotingDelay(newVotingDelay);\n    }\n\n    /**\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\n        _setVotingPeriod(newVotingPeriod);\n    }\n\n    /**\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\n        _setProposalThreshold(newProposalThreshold);\n    }\n\n    /**\n     * @dev Internal setter for the voting delay.\n     *\n     * Emits a {VotingDelaySet} event.\n     */\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\n        _votingDelay = newVotingDelay;\n    }\n\n    /**\n     * @dev Internal setter for the voting period.\n     *\n     * Emits a {VotingPeriodSet} event.\n     */\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\n        // voting period must be at least one block long\n        require(newVotingPeriod > 0, \"GovernorSettings: voting period too low\");\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\n        _votingPeriod = newVotingPeriod;\n    }\n\n    /**\n     * @dev Internal setter for the proposal threshold.\n     *\n     * Emits a {ProposalThresholdSet} event.\n     */\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\n        _proposalThreshold = newProposalThreshold;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorTimelockControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IGovernorTimelock.sol\";\nimport \"../Governor.sol\";\nimport \"../TimelockController.sol\";\n\n/**\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\n *\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\n * inaccessible.\n *\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\n    TimelockController private _timelock;\n    mapping(uint256 => bytes32) private _timelockIds;\n\n    /**\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\n     */\n    event TimelockChange(address oldTimelock, address newTimelock);\n\n    /**\n     * @dev Set the timelock.\n     */\n    constructor(TimelockController timelockAddress) {\n        _updateTimelock(timelockAddress);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` state.\n     */\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\n        ProposalState currentState = super.state(proposalId);\n\n        if (currentState != ProposalState.Succeeded) {\n            return currentState;\n        }\n\n        // core tracks execution, so we just have to check if successful proposal have been queued.\n        bytes32 queueid = _timelockIds[proposalId];\n        if (queueid == bytes32(0)) {\n            return currentState;\n        } else if (_timelock.isOperationDone(queueid)) {\n            return ProposalState.Executed;\n        } else if (_timelock.isOperationPending(queueid)) {\n            return ProposalState.Queued;\n        } else {\n            return ProposalState.Canceled;\n        }\n    }\n\n    /**\n     * @dev Public accessor to check the address of the timelock\n     */\n    function timelock() public view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public accessor to check the eta of a queued proposal\n     */\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\n    }\n\n    /**\n     * @dev Function to queue a proposal to the timelock.\n     */\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        require(state(proposalId) == ProposalState.Succeeded, \"Governor: proposal not successful\");\n\n        uint256 delay = _timelock.getMinDelay();\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\n\n        emit ProposalQueued(proposalId, block.timestamp + delay);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\n     */\n    function _execute(\n        uint256 /* proposalId */,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override {\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\n    }\n\n    /**\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\n     * been queued.\n     */\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\n    // well behaved (according to TimelockController) and this will not happen.\n    // slither-disable-next-line reentrancy-no-eth\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual override returns (uint256) {\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\n\n        if (_timelockIds[proposalId] != 0) {\n            _timelock.cancel(_timelockIds[proposalId]);\n            delete _timelockIds[proposalId];\n        }\n\n        return proposalId;\n    }\n\n    /**\n     * @dev Address through which the governor executes action. In this case, the timelock.\n     */\n    function _executor() internal view virtual override returns (address) {\n        return address(_timelock);\n    }\n\n    /**\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\n     * must be proposed, scheduled, and executed through governance proposals.\n     *\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\n     */\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\n        _updateTimelock(newTimelock);\n    }\n\n    function _updateTimelock(TimelockController newTimelock) private {\n        emit TimelockChange(address(_timelock), address(newTimelock));\n        _timelock = newTimelock;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../interfaces/IERC5805.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotes is Governor {\n    IERC5805 public immutable token;\n\n    constructor(IVotes tokenAddress) {\n        token = IERC5805(address(tokenAddress));\n    }\n\n    /**\n     * @dev Clock (as specified in EIP-6372) is set to match the token's clock. Fallback to block numbers if the token\n     * does not implement EIP-6372.\n     */\n    function clock() public view virtual override returns (uint48) {\n        try token.clock() returns (uint48 timepoint) {\n            return timepoint;\n        } catch {\n            return SafeCast.toUint48(block.number);\n        }\n    }\n\n    /**\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual override returns (string memory) {\n        try token.CLOCK_MODE() returns (string memory clockmode) {\n            return clockmode;\n        } catch {\n            return \"mode=blocknumber&from=default\";\n        }\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\n     */\n    function _getVotes(\n        address account,\n        uint256 timepoint,\n        bytes memory /*params*/\n    ) internal view virtual override returns (uint256) {\n        return token.getPastVotes(account, timepoint);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./GovernorVotes.sol\";\nimport \"../../utils/Checkpoints.sol\";\nimport \"../../utils/math/SafeCast.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\n * fraction of the total supply.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\n    using Checkpoints for Checkpoints.Trace224;\n\n    uint256 private _quorumNumerator; // DEPRECATED in favor of _quorumNumeratorHistory\n\n    /// @custom:oz-retyped-from Checkpoints.History\n    Checkpoints.Trace224 private _quorumNumeratorHistory;\n\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\n\n    /**\n     * @dev Initialize quorum as a fraction of the token's total supply.\n     *\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\n     * customized by overriding {quorumDenominator}.\n     */\n    constructor(uint256 quorumNumeratorValue) {\n        _updateQuorumNumerator(quorumNumeratorValue);\n    }\n\n    /**\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\n     */\n    function quorumNumerator() public view virtual returns (uint256) {\n        return _quorumNumeratorHistory._checkpoints.length == 0 ? _quorumNumerator : _quorumNumeratorHistory.latest();\n    }\n\n    /**\n     * @dev Returns the quorum numerator at a specific timepoint. See {quorumDenominator}.\n     */\n    function quorumNumerator(uint256 timepoint) public view virtual returns (uint256) {\n        // If history is empty, fallback to old storage\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\n        if (length == 0) {\n            return _quorumNumerator;\n        }\n\n        // Optimistic search, check the latest checkpoint\n        Checkpoints.Checkpoint224 memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\n        if (latest._key <= timepoint) {\n            return latest._value;\n        }\n\n        // Otherwise, do the binary search\n        return _quorumNumeratorHistory.upperLookupRecent(SafeCast.toUint32(timepoint));\n    }\n\n    /**\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\n     */\n    function quorumDenominator() public view virtual returns (uint256) {\n        return 100;\n    }\n\n    /**\n     * @dev Returns the quorum for a timepoint, in terms of number of votes: `supply * numerator / denominator`.\n     */\n    function quorum(uint256 timepoint) public view virtual override returns (uint256) {\n        return (token.getPastTotalSupply(timepoint) * quorumNumerator(timepoint)) / quorumDenominator();\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - Must be called through a governance proposal.\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\n        _updateQuorumNumerator(newQuorumNumerator);\n    }\n\n    /**\n     * @dev Changes the quorum numerator.\n     *\n     * Emits a {QuorumNumeratorUpdated} event.\n     *\n     * Requirements:\n     *\n     * - New numerator must be smaller or equal to the denominator.\n     */\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\n        require(\n            newQuorumNumerator <= quorumDenominator(),\n            \"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\"\n        );\n\n        uint256 oldQuorumNumerator = quorumNumerator();\n\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\n        if (oldQuorumNumerator != 0 && _quorumNumeratorHistory._checkpoints.length == 0) {\n            _quorumNumeratorHistory._checkpoints.push(\n                Checkpoints.Checkpoint224({_key: 0, _value: SafeCast.toUint224(oldQuorumNumerator)})\n            );\n        }\n\n        // Set new quorum for future proposals\n        _quorumNumeratorHistory.push(SafeCast.toUint32(clock()), SafeCast.toUint224(newQuorumNumerator));\n\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IGovernor.sol\";\n\n/**\n * @dev Extension of the {IGovernor} for timelock supporting modules.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernorTimelock is IGovernor {\n    event ProposalQueued(uint256 proposalId, uint256 eta);\n\n    function timelock() public view virtual returns (address);\n\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\n\n    function queue(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n}\n"
    },
    "@openzeppelin/contracts/governance/Governor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.1) (governance/Governor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\nimport \"../utils/cryptography/ECDSA.sol\";\nimport \"../utils/cryptography/EIP712.sol\";\nimport \"../utils/introspection/ERC165.sol\";\nimport \"../utils/math/SafeCast.sol\";\nimport \"../utils/structs/DoubleEndedQueue.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\nimport \"./IGovernor.sol\";\n\n/**\n * @dev Core of the governance system, designed to be extended though various modules.\n *\n * This contract is abstract and requires several functions to be implemented in various modules:\n *\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\n * - A voting module must implement {_getVotes}\n * - Additionally, {votingPeriod} must also be implemented\n *\n * _Available since v4.3._\n */\nabstract contract Governor is Context, ERC165, EIP712, IGovernor, IERC721Receiver, IERC1155Receiver {\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\n\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\n        keccak256(\"ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)\");\n\n    // solhint-disable var-name-mixedcase\n    struct ProposalCore {\n        // --- start retyped from Timers.BlockNumber at offset 0x00 ---\n        uint64 voteStart;\n        address proposer;\n        bytes4 __gap_unused0;\n        // --- start retyped from Timers.BlockNumber at offset 0x20 ---\n        uint64 voteEnd;\n        bytes24 __gap_unused1;\n        // --- Remaining fields starting at offset 0x40 ---------------\n        bool executed;\n        bool canceled;\n    }\n    // solhint-enable var-name-mixedcase\n\n    string private _name;\n\n    /// @custom:oz-retyped-from mapping(uint256 => Governor.ProposalCore)\n    mapping(uint256 => ProposalCore) private _proposals;\n\n    // This queue keeps track of the governor operating on itself. Calls to functions protected by the\n    // {onlyGovernance} modifier needs to be whitelisted in this queue. Whitelisting is set in {_beforeExecute},\n    // consumed by the {onlyGovernance} modifier and eventually reset in {_afterExecute}. This ensures that the\n    // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\n\n    /**\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\n     * parameter setters in {GovernorSettings} are protected using this modifier.\n     *\n     * The governance executing address may be different from the Governor's own address, for example it could be a\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\n     * governance protocol (since v4.6).\n     */\n    modifier onlyGovernance() {\n        require(_msgSender() == _executor(), \"Governor: onlyGovernance\");\n        if (_executor() != address(this)) {\n            bytes32 msgDataHash = keccak256(_msgData());\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\n            while (_governanceCall.popFront() != msgDataHash) {}\n        }\n        _;\n    }\n\n    /**\n     * @dev Sets the value for {name} and {version}\n     */\n    constructor(string memory name_) EIP712(name_, version()) {\n        _name = name_;\n    }\n\n    /**\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\n     */\n    receive() external payable virtual {\n        require(_executor() == address(this), \"Governor: must send to executor\");\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        bytes4 governorCancelId = this.cancel.selector ^ this.proposalProposer.selector;\n\n        bytes4 governorParamsId = this.castVoteWithReasonAndParams.selector ^\n            this.castVoteWithReasonAndParamsBySig.selector ^\n            this.getVotesWithParams.selector;\n\n        // The original interface id in v4.3.\n        bytes4 governor43Id = type(IGovernor).interfaceId ^\n            type(IERC6372).interfaceId ^\n            governorCancelId ^\n            governorParamsId;\n\n        // An updated interface id in v4.6, with params added.\n        bytes4 governor46Id = type(IGovernor).interfaceId ^ type(IERC6372).interfaceId ^ governorCancelId;\n\n        // For the updated interface id in v4.9, we use governorCancelId directly.\n\n        return\n            interfaceId == governor43Id ||\n            interfaceId == governor46Id ||\n            interfaceId == governorCancelId ||\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IGovernor-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IGovernor-version}.\n     */\n    function version() public view virtual override returns (string memory) {\n        return \"1\";\n    }\n\n    /**\n     * @dev See {IGovernor-hashProposal}.\n     *\n     * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\n     * advance, before the proposal is submitted.\n     *\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual override returns (uint256) {\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\n    }\n\n    /**\n     * @dev See {IGovernor-state}.\n     */\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\n        ProposalCore storage proposal = _proposals[proposalId];\n\n        if (proposal.executed) {\n            return ProposalState.Executed;\n        }\n\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        }\n\n        uint256 snapshot = proposalSnapshot(proposalId);\n\n        if (snapshot == 0) {\n            revert(\"Governor: unknown proposal id\");\n        }\n\n        uint256 currentTimepoint = clock();\n\n        if (snapshot >= currentTimepoint) {\n            return ProposalState.Pending;\n        }\n\n        uint256 deadline = proposalDeadline(proposalId);\n\n        if (deadline >= currentTimepoint) {\n            return ProposalState.Active;\n        }\n\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\n            return ProposalState.Succeeded;\n        } else {\n            return ProposalState.Defeated;\n        }\n    }\n\n    /**\n     * @dev Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_.\n     */\n    function proposalThreshold() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalSnapshot}.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteStart;\n    }\n\n    /**\n     * @dev See {IGovernor-proposalDeadline}.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\n        return _proposals[proposalId].voteEnd;\n    }\n\n    /**\n     * @dev Returns the account that created a given proposal.\n     */\n    function proposalProposer(uint256 proposalId) public view virtual override returns (address) {\n        return _proposals[proposalId].proposer;\n    }\n\n    /**\n     * @dev Amount of votes already cast passes the threshold limit.\n     */\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Is the proposal successful or not.\n     */\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\n\n    /**\n     * @dev Get the voting weight of `account` at a specific `timepoint`, for a vote as described by `params`.\n     */\n    function _getVotes(address account, uint256 timepoint, bytes memory params) internal view virtual returns (uint256);\n\n    /**\n     * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\n     *\n     * Note: Support is generic and can represent various things depending on the voting system used.\n     */\n    function _countVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        uint256 weight,\n        bytes memory params\n    ) internal virtual;\n\n    /**\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\n     *\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\n     * meaning of the additional params, in the context of that implementation\n     */\n    function _defaultParams() internal view virtual returns (bytes memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual override returns (uint256) {\n        address proposer = _msgSender();\n        require(_isValidDescriptionForProposer(proposer, description), \"Governor: proposer restricted\");\n\n        uint256 currentTimepoint = clock();\n        require(\n            getVotes(proposer, currentTimepoint - 1) >= proposalThreshold(),\n            \"Governor: proposer votes below proposal threshold\"\n        );\n\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\n\n        require(targets.length == values.length, \"Governor: invalid proposal length\");\n        require(targets.length == calldatas.length, \"Governor: invalid proposal length\");\n        require(targets.length > 0, \"Governor: empty proposal\");\n        require(_proposals[proposalId].voteStart == 0, \"Governor: proposal already exists\");\n\n        uint256 snapshot = currentTimepoint + votingDelay();\n        uint256 deadline = snapshot + votingPeriod();\n\n        _proposals[proposalId] = ProposalCore({\n            proposer: proposer,\n            voteStart: SafeCast.toUint64(snapshot),\n            voteEnd: SafeCast.toUint64(deadline),\n            executed: false,\n            canceled: false,\n            __gap_unused0: 0,\n            __gap_unused1: 0\n        });\n\n        emit ProposalCreated(\n            proposalId,\n            proposer,\n            targets,\n            values,\n            new string[](targets.length),\n            calldatas,\n            snapshot,\n            deadline,\n            description\n        );\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-execute}.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState currentState = state(proposalId);\n        require(\n            currentState == ProposalState.Succeeded || currentState == ProposalState.Queued,\n            \"Governor: proposal not successful\"\n        );\n        _proposals[proposalId].executed = true;\n\n        emit ProposalExecuted(proposalId);\n\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-cancel}.\n     */\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual override returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n        require(state(proposalId) == ProposalState.Pending, \"Governor: too late to cancel\");\n        require(_msgSender() == _proposals[proposalId].proposer, \"Governor: only proposer can cancel\");\n        return _cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    /**\n     * @dev Internal execution mechanism. Can be overridden to implement different execution mechanism\n     */\n    function _execute(\n        uint256 /* proposalId */,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        string memory errorMessage = \"Governor: call reverted without message\";\n        for (uint256 i = 0; i < targets.length; ++i) {\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\n            Address.verifyCallResult(success, returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Hook before execution is triggered.\n     */\n    function _beforeExecute(\n        uint256 /* proposalId */,\n        address[] memory targets,\n        uint256[] memory /* values */,\n        bytes[] memory calldatas,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        if (_executor() != address(this)) {\n            for (uint256 i = 0; i < targets.length; ++i) {\n                if (targets[i] == address(this)) {\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook after execution is triggered.\n     */\n    function _afterExecute(\n        uint256 /* proposalId */,\n        address[] memory /* targets */,\n        uint256[] memory /* values */,\n        bytes[] memory /* calldatas */,\n        bytes32 /*descriptionHash*/\n    ) internal virtual {\n        if (_executor() != address(this)) {\n            if (!_governanceCall.empty()) {\n                _governanceCall.clear();\n            }\n        }\n    }\n\n    /**\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\n     * canceled to allow distinguishing it from executed proposals.\n     *\n     * Emits a {IGovernor-ProposalCanceled} event.\n     */\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal virtual returns (uint256) {\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\n\n        ProposalState currentState = state(proposalId);\n\n        require(\n            currentState != ProposalState.Canceled &&\n                currentState != ProposalState.Expired &&\n                currentState != ProposalState.Executed,\n            \"Governor: proposal not active\"\n        );\n        _proposals[proposalId].canceled = true;\n\n        emit ProposalCanceled(proposalId);\n\n        return proposalId;\n    }\n\n    /**\n     * @dev See {IGovernor-getVotes}.\n     */\n    function getVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\n        return _getVotes(account, timepoint, _defaultParams());\n    }\n\n    /**\n     * @dev See {IGovernor-getVotesWithParams}.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 timepoint,\n        bytes memory params\n    ) public view virtual override returns (uint256) {\n        return _getVotes(account, timepoint, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVote}.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReason}.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual override returns (uint256) {\n        address voter = _msgSender();\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteBySig}.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\n            v,\n            r,\n            s\n        );\n        return _castVote(proposalId, voter, support, \"\");\n    }\n\n    /**\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override returns (uint256) {\n        address voter = ECDSA.recover(\n            _hashTypedDataV4(\n                keccak256(\n                    abi.encode(\n                        EXTENDED_BALLOT_TYPEHASH,\n                        proposalId,\n                        support,\n                        keccak256(bytes(reason)),\n                        keccak256(params)\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        return _castVote(proposalId, voter, support, reason, params);\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason\n    ) internal virtual returns (uint256) {\n        return _castVote(proposalId, account, support, reason, _defaultParams());\n    }\n\n    /**\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\n     *\n     * Emits a {IGovernor-VoteCast} event.\n     */\n    function _castVote(\n        uint256 proposalId,\n        address account,\n        uint8 support,\n        string memory reason,\n        bytes memory params\n    ) internal virtual returns (uint256) {\n        ProposalCore storage proposal = _proposals[proposalId];\n        require(state(proposalId) == ProposalState.Active, \"Governor: vote not currently active\");\n\n        uint256 weight = _getVotes(account, proposal.voteStart, params);\n        _countVote(proposalId, account, support, weight, params);\n\n        if (params.length == 0) {\n            emit VoteCast(account, proposalId, support, weight, reason);\n        } else {\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\n        }\n\n        return weight;\n    }\n\n    /**\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\n     */\n    function relay(address target, uint256 value, bytes calldata data) external payable virtual onlyGovernance {\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        Address.verifyCallResult(success, returndata, \"Governor: relay reverted without message\");\n    }\n\n    /**\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\n     * through another contract such as a timelock.\n     */\n    function _executor() internal view virtual returns (address) {\n        return address(this);\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    /**\n     * @dev Check if the proposer is authorized to submit a proposal with the given description.\n     *\n     * If the proposal description ends with `#proposer=0x???`, where `0x???` is an address written as a hex string\n     * (case insensitive), then the submission of this proposal will only be authorized to said address.\n     *\n     * This is used for frontrunning protection. By adding this pattern at the end of their proposal, one can ensure\n     * that no other address can submit the same proposal. An attacker would have to either remove or change that part,\n     * which would result in a different proposal id.\n     *\n     * If the description does not match this pattern, it is unrestricted and anyone can submit it. This includes:\n     * - If the `0x???` part is not a valid hex string.\n     * - If the `0x???` part is a valid hex string, but does not contain exactly 40 hex digits.\n     * - If it ends with the expected suffix followed by newlines or other whitespace.\n     * - If it ends with some other similar suffix, e.g. `#other=abc`.\n     * - If it does not end with any such suffix.\n     */\n    function _isValidDescriptionForProposer(\n        address proposer,\n        string memory description\n    ) internal view virtual returns (bool) {\n        uint256 len = bytes(description).length;\n\n        // Length is too short to contain a valid proposer suffix\n        if (len < 52) {\n            return true;\n        }\n\n        // Extract what would be the `#proposer=0x` marker beginning the suffix\n        bytes12 marker;\n        assembly {\n            // - Start of the string contents in memory = description + 32\n            // - First character of the marker = len - 52\n            //   - Length of \"#proposer=0x0000000000000000000000000000000000000000\" = 52\n            // - We read the memory word starting at the first character of the marker:\n            //   - (description + 32) + (len - 52) = description + (len - 20)\n            // - Note: Solidity will ignore anything past the first 12 bytes\n            marker := mload(add(description, sub(len, 20)))\n        }\n\n        // If the marker is not found, there is no proposer suffix to check\n        if (marker != bytes12(\"#proposer=0x\")) {\n            return true;\n        }\n\n        // Parse the 40 characters following the marker as uint160\n        uint160 recovered = 0;\n        for (uint256 i = len - 40; i < len; ++i) {\n            (bool isHex, uint8 value) = _tryHexToUint(bytes(description)[i]);\n            // If any of the characters is not a hex digit, ignore the suffix entirely\n            if (!isHex) {\n                return true;\n            }\n            recovered = (recovered << 4) | value;\n        }\n\n        return recovered == uint160(proposer);\n    }\n\n    /**\n     * @dev Try to parse a character from a string as a hex value. Returns `(true, value)` if the char is in\n     * `[0-9a-fA-F]` and `(false, 0)` otherwise. Value is guaranteed to be in the range `0 <= value < 16`\n     */\n    function _tryHexToUint(bytes1 char) private pure returns (bool, uint8) {\n        uint8 c = uint8(char);\n        unchecked {\n            // Case 0-9\n            if (47 < c && c < 58) {\n                return (true, c - 48);\n            }\n            // Case A-F\n            else if (64 < c && c < 71) {\n                return (true, c - 55);\n            }\n            // Case a-f\n            else if (96 < c && c < 103) {\n                return (true, c - 87);\n            }\n            // Else: not a hex char\n            else {\n                return (false, 0);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/IGovernor.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC165.sol\";\nimport \"../interfaces/IERC6372.sol\";\n\n/**\n * @dev Interface of the {Governor} core.\n *\n * _Available since v4.3._\n */\nabstract contract IGovernor is IERC165, IERC6372 {\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /**\n     * @dev Emitted when a proposal is created.\n     */\n    event ProposalCreated(\n        uint256 proposalId,\n        address proposer,\n        address[] targets,\n        uint256[] values,\n        string[] signatures,\n        bytes[] calldatas,\n        uint256 voteStart,\n        uint256 voteEnd,\n        string description\n    );\n\n    /**\n     * @dev Emitted when a proposal is canceled.\n     */\n    event ProposalCanceled(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a proposal is executed.\n     */\n    event ProposalExecuted(uint256 proposalId);\n\n    /**\n     * @dev Emitted when a vote is cast without params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     */\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\n\n    /**\n     * @dev Emitted when a vote is cast with params.\n     *\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\n     * `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\n     */\n    event VoteCastWithParams(\n        address indexed voter,\n        uint256 proposalId,\n        uint8 support,\n        uint256 weight,\n        string reason,\n        bytes params\n    );\n\n    /**\n     * @notice module:core\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\n     */\n    function name() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \"1\"\n     */\n    function version() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev See {IERC6372}\n     */\n    function clock() public view virtual override returns (uint48);\n\n    /**\n     * @notice module:core\n     * @dev See EIP-6372.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual override returns (string memory);\n\n    /**\n     * @notice module:voting\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\n     *\n     * There are 2 standard keys: `support` and `quorum`.\n     *\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\n     *\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\n     * name that describes the behavior. For example:\n     *\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\n     *\n     * NOTE: The string can be decoded by the standard\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\n     * JavaScript class.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function COUNTING_MODE() public view virtual returns (string memory);\n\n    /**\n     * @notice module:core\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\n     */\n    function hashProposal(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public pure virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Current state of a proposal, following Compound's convention\n     */\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\n\n    /**\n     * @notice module:core\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\n     * following block.\n     */\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\n     * possible to cast a vote during this block.\n     */\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\n\n    /**\n     * @notice module:core\n     * @dev The account that created a proposal.\n     */\n    function proposalProposer(uint256 proposalId) public view virtual returns (address);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\n     * on the clock (see EIP-6372) this contract uses.\n     *\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\n     * proposal starts.\n     */\n    function votingDelay() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock\n     * (see EIP-6372) this contract uses.\n     *\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\n     * duration compared to the voting delay.\n     */\n    function votingPeriod() public view virtual returns (uint256);\n\n    /**\n     * @notice module:user-config\n     * @dev Minimum number of cast voted required for a proposal to be successful.\n     *\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\n     */\n    function quorum(uint256 timepoint) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `timepoint`.\n     *\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\n     * multiple), {ERC20Votes} tokens.\n     */\n    function getVotes(address account, uint256 timepoint) public view virtual returns (uint256);\n\n    /**\n     * @notice module:reputation\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\n     */\n    function getVotesWithParams(\n        address account,\n        uint256 timepoint,\n        bytes memory params\n    ) public view virtual returns (uint256);\n\n    /**\n     * @notice module:voting\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\n     */\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\n\n    /**\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\n     * duration specified by {IGovernor-votingPeriod}.\n     *\n     * Emits a {ProposalCreated} event.\n     */\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\n     * deadline to be reached.\n     *\n     * Emits a {ProposalExecuted} event.\n     *\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\n     */\n    function execute(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public payable virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\n     * before the vote starts.\n     *\n     * Emits a {ProposalCanceled} event.\n     */\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public virtual returns (uint256 proposalId);\n\n    /**\n     * @dev Cast a vote\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteWithReason(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters\n     *\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\n     */\n    function castVoteWithReasonAndParams(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote using the user's cryptographic signature.\n     *\n     * Emits a {VoteCast} event.\n     */\n    function castVoteBySig(\n        uint256 proposalId,\n        uint8 support,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n\n    /**\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\n     *\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\n     */\n    function castVoteWithReasonAndParamsBySig(\n        uint256 proposalId,\n        uint8 support,\n        string calldata reason,\n        bytes memory params,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual returns (uint256 balance);\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../token/ERC721/IERC721Receiver.sol\";\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    bytes32 public constant CANCELLER_ROLE = keccak256(\"CANCELLER_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\n     */\n    event CallSalt(bytes32 indexed id, bytes32 salt);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // optional admin\n        if (admin != address(0)) {\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\n        }\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n            _setupRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\".\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\".\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     */\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/utils/IVotes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/utils/IVotes.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\n *\n * _Available since v4.5._\n */\ninterface IVotes {\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Returns the current amount of votes that `account` has.\n     */\n    function getVotes(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     */\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\n     *\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\n     * vote.\n     */\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\n\n    /**\n     * @dev Returns the delegate that `account` has chosen.\n     */\n    function delegates(address account) external view returns (address);\n\n    /**\n     * @dev Delegates votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) external;\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`.\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5805.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5805.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../governance/utils/IVotes.sol\";\nimport \"./IERC6372.sol\";\n\ninterface IERC5805 is IERC6372, IVotes {}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC6372.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC6372 {\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() external view returns (uint48);\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Votes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20Permit.sol\";\nimport \"../../../interfaces/IERC5805.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\n     */\n    function clock() public view virtual override returns (uint48) {\n        return SafeCast.toUint48(block.number);\n    }\n\n    /**\n     * @dev Description of the clock\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view virtual override returns (string memory) {\n        // Check that the clock was not modified\n        require(clock() == block.number, \"ERC20Votes: broken clock mode\");\n        return \"mode=blocknumber&from=default\";\n    }\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual override returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view virtual override returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        unchecked {\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n        }\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past\n     */\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\n        require(timepoint < clock(), \"ERC20Votes: future lookup\");\n        return _checkpointsLookup(_checkpoints[account], timepoint);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\n     * It is NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `timepoint` must be in the past\n     */\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\n        require(timepoint < clock(), \"ERC20Votes: future lookup\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\n        // We run a binary search to look for the last (most recent) checkpoint taken before (or at) `timepoint`.\n        //\n        // Initially we check if the block is recent to narrow the search range.\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\n        // the same.\n        uint256 length = ckpts.length;\n\n        uint256 low = 0;\n        uint256 high = length;\n\n        if (length > 5) {\n            uint256 mid = length - Math.sqrt(length);\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        unchecked {\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\n        }\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual override {\n        _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {IVotes-DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n\n        unchecked {\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\n\n            oldWeight = oldCkpt.votes;\n            newWeight = op(oldWeight, delta);\n\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\n            } else {\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\n            }\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, ckpts.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Checkpoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Checkpoints.sol)\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SafeCast.sol\";\n\n/**\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n *\n * _Available since v4.5._\n */\nlibrary Checkpoints {\n    struct History {\n        Checkpoint[] _checkpoints;\n    }\n\n    struct Checkpoint {\n        uint32 _blockNumber;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\n     * block, the requested block number must be in the past, excluding the current block.\n     */\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n        uint32 key = SafeCast.toUint32(blockNumber);\n\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\n     * checkpoint is probably \"recent\", defined as being among the last sqrt(N) checkpoints where N is the number of\n     * checkpoints.\n     */\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n        uint32 key = SafeCast.toUint32(blockNumber);\n\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\n     *\n     * Returns previous value and new value.\n     */\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\n        return _insert(self._checkpoints, SafeCast.toUint32(block.number), SafeCast.toUint224(value));\n    }\n\n    /**\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\n     * be set to `op(latest, delta)`.\n     *\n     * Returns previous value and new value.\n     */\n    function push(\n        History storage self,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) internal returns (uint256, uint256) {\n        return push(self, op(latest(self), delta));\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(History storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(\n        History storage self\n    ) internal view returns (bool exists, uint32 _blockNumber, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._blockNumber, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(History storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            require(last._blockNumber <= key, \"Checkpoint: decreasing keys\");\n\n            // Update or push new checkpoint\n            if (last._blockNumber == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace224 {\n        Checkpoint224[] _checkpoints;\n    }\n\n    struct Checkpoint224 {\n        uint32 _key;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     */\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if there is none.\n     */\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     */\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high keys).\n     */\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace224 storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace224 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            require(last._key <= key, \"Checkpoint: decreasing keys\");\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint224({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint224({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint224[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint224 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace160 {\n        Checkpoint160[] _checkpoints;\n    }\n\n    struct Checkpoint160 {\n        uint96 _key;\n        uint160 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     */\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if there is none.\n     */\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     */\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high keys).\n     */\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - Math.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace160 storage self) internal view returns (uint160) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace160 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            require(last._key <= key, \"Checkpoint: decreasing keys\");\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint160({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint160({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint160[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint160 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/DoubleEndedQueue.sol)\npragma solidity ^0.8.4;\n\nimport \"../math/SafeCast.sol\";\n\n/**\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\n * the existing queue contents are left in storage.\n *\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\n * used in storage, and not in memory.\n * ```solidity\n * DoubleEndedQueue.Bytes32Deque queue;\n * ```\n *\n * _Available since v4.6._\n */\nlibrary DoubleEndedQueue {\n    /**\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\n     */\n    error Empty();\n\n    /**\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\n     */\n    error OutOfBounds();\n\n    /**\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\n     *\n     * Struct members have an underscore prefix indicating that they are \"private\" and should not be read or written to\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\n     * lead to unexpected behavior.\n     *\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\n     * data[end - 1].\n     */\n    struct Bytes32Deque {\n        int128 _begin;\n        int128 _end;\n        mapping(int128 => bytes32) _data;\n    }\n\n    /**\n     * @dev Inserts an item at the end of the queue.\n     */\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\n        int128 backIndex = deque._end;\n        deque._data[backIndex] = value;\n        unchecked {\n            deque._end = backIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Removes the item at the end of the queue and returns it.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 backIndex;\n        unchecked {\n            backIndex = deque._end - 1;\n        }\n        value = deque._data[backIndex];\n        delete deque._data[backIndex];\n        deque._end = backIndex;\n    }\n\n    /**\n     * @dev Inserts an item at the beginning of the queue.\n     */\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\n        int128 frontIndex;\n        unchecked {\n            frontIndex = deque._begin - 1;\n        }\n        deque._data[frontIndex] = value;\n        deque._begin = frontIndex;\n    }\n\n    /**\n     * @dev Removes the item at the beginning of the queue and returns it.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 frontIndex = deque._begin;\n        value = deque._data[frontIndex];\n        delete deque._data[frontIndex];\n        unchecked {\n            deque._begin = frontIndex + 1;\n        }\n    }\n\n    /**\n     * @dev Returns the item at the beginning of the queue.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 frontIndex = deque._begin;\n        return deque._data[frontIndex];\n    }\n\n    /**\n     * @dev Returns the item at the end of the queue.\n     *\n     * Reverts with `Empty` if the queue is empty.\n     */\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\n        if (empty(deque)) revert Empty();\n        int128 backIndex;\n        unchecked {\n            backIndex = deque._end - 1;\n        }\n        return deque._data[backIndex];\n    }\n\n    /**\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\n     * `length(deque) - 1`.\n     *\n     * Reverts with `OutOfBounds` if the index is out of bounds.\n     */\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\n        // int256(deque._begin) is a safe upcast\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\n        if (idx >= deque._end) revert OutOfBounds();\n        return deque._data[idx];\n    }\n\n    /**\n     * @dev Resets the queue back to being empty.\n     *\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\n     * out on potential gas refunds.\n     */\n    function clear(Bytes32Deque storage deque) internal {\n        deque._begin = 0;\n        deque._end = 0;\n    }\n\n    /**\n     * @dev Returns the number of items in the queue.\n     */\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\n        // We also assume there are at most int256.max items in the queue.\n        unchecked {\n            return uint256(int256(deque._end) - int256(deque._begin));\n        }\n    }\n\n    /**\n     * @dev Returns true if the queue is empty.\n     */\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\n        return deque._end <= deque._begin;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/adl/AdlUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"../order/OrderStoreUtils.sol\";\nimport \"../order/OrderEventUtils.sol\";\nimport \"../position/PositionStoreUtils.sol\";\nimport \"../nonce/NonceUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\nimport \"../market/Market.sol\";\nimport \"../market/MarketUtils.sol\";\nimport \"../oracle/Oracle.sol\";\n\n// @title AdlUtils\n// @dev Library to help with auto-deleveraging\n// This is particularly for markets with an index token that is different from\n// the long token\n//\n// For example, if there is a DOGE / USD perp market with ETH as the long token\n// it would be possible for the price of DOGE to increase faster than the price of\n// ETH\n//\n// In this scenario, profitable positions should be closed through ADL to ensure\n// that the system remains fully solvent\nlibrary AdlUtils {\n    using SafeCast for int256;\n    using Market for Market.Props;\n    using Position for Position.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @dev CreateAdlOrderParams struct used in createAdlOrder to avoid stack\n    // too deep errors\n    //\n    // @param dataStore DataStore\n    // @param orderStore OrderStore\n    // @param account the account to reduce the position for\n    // @param market the position's market\n    // @param collateralToken the position's collateralToken\n    // @param isLong whether the position is long or short\n    // @param sizeDeltaUsd the size to reduce the position by\n    struct CreateAdlOrderParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        address account;\n        address market;\n        address collateralToken;\n        bool isLong;\n        uint256 sizeDeltaUsd;\n        uint256 updatedAtTime;\n    }\n\n    // @dev Multiple positions may need to be reduced to ensure that the pending\n    // profits does not exceed the allowed thresholds\n    //\n    // This automatic reduction of positions can only be done if the pool is in a state\n    // where auto-deleveraging is required\n    //\n    // This function checks the pending profit state and updates an isAdlEnabled\n    // flag to avoid having to repeatedly validate whether auto-deleveraging is required\n    //\n    // Once the pending profit has been reduced below the threshold this function can\n    // be called again to clear the flag\n    //\n    // The ADL check would be possible to do in AdlHandler.executeAdl as well\n    // but with that order keepers could use stale oracle prices to prove that\n    // an ADL state is possible\n    //\n    // Having this function allows any order keeper to disable ADL if prices\n    // have updated such that ADL is no longer needed\n    //\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param oracle Oracle\n    // @param market address of the market to check\n    // @param isLong indicates whether to check the long or short side of the market\n    function updateAdlState(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Oracle oracle,\n        address market,\n        bool isLong\n    ) external {\n        uint256 latestAdlTime = getLatestAdlTime(dataStore, market, isLong);\n\n        if (oracle.maxTimestamp() < latestAdlTime) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(oracle.maxTimestamp(), latestAdlTime);\n        }\n\n        Market.Props memory _market = MarketUtils.getEnabledMarket(dataStore, market);\n        MarketUtils.MarketPrices memory prices = MarketUtils.getMarketPrices(oracle, _market);\n        // if the MAX_PNL_FACTOR_FOR_ADL is set to be higher than MAX_PNL_FACTOR_FOR_WITHDRAWALS\n        // it is possible for a pool to be in a state where withdrawals and ADL is not allowed\n        // this is similar to the case where there is a large amount of open positions relative\n        // to the amount of tokens in the pool\n        (bool shouldEnableAdl, int256 pnlToPoolFactor, uint256 maxPnlFactor) = MarketUtils.isPnlFactorExceeded(\n            dataStore,\n            _market,\n            prices,\n            isLong,\n            Keys.MAX_PNL_FACTOR_FOR_ADL\n        );\n\n        setIsAdlEnabled(dataStore, market, isLong, shouldEnableAdl);\n        // since the latest ADL at is always updated, an ADL keeper could\n        // continually cause the latest ADL time to be updated and prevent\n        // ADL orders from being executed, however, this may be preferrable\n        // over a case where stale prices could be used by ADL keepers\n        // to execute orders\n         // as such updating of the ADL time is allowed and it is expected\n        // that ADL keepers will keep this time updated so that latest prices\n        // will be used for ADL\n        setLatestAdlAt(dataStore, market, isLong, Chain.currentTimestamp());\n\n        emitAdlStateUpdated(eventEmitter, market, isLong, pnlToPoolFactor, maxPnlFactor, shouldEnableAdl);\n    }\n\n    // @dev Construct an ADL order\n    //\n    // A decrease order is used to reduce a profitable position\n    //\n    // @param params CreateAdlOrderParams\n    // @return the key of the created order\n    function createAdlOrder(CreateAdlOrderParams memory params) external returns (bytes32) {\n        bytes32 positionKey = Position.getPositionKey(params.account, params.market, params.collateralToken, params.isLong);\n        Position.Props memory position = PositionStoreUtils.get(params.dataStore, positionKey);\n\n        if (params.sizeDeltaUsd > position.sizeInUsd()) {\n            revert Errors.InvalidSizeDeltaForAdl(params.sizeDeltaUsd, position.sizeInUsd());\n        }\n\n        Order.Addresses memory addresses = Order.Addresses(\n            params.account, // account\n            params.account, // receiver\n            params.account, // cancellationReceiver\n            CallbackUtils.getSavedCallbackContract(params.dataStore, params.account, params.market), // callbackContract\n            address(0), // uiFeeReceiver\n            params.market, // market\n            position.collateralToken(), // initialCollateralToken\n            new address[](0) // swapPath\n        );\n\n        // no slippage is set for this order, it may be preferrable for ADL orders\n        // to be executed, in case of large price impact, the user could be refunded\n        // through a protocol fund if required, this amount could later be claimed\n        // from the price impact pool, this claiming process should be added if\n        // required\n        //\n        // setting a maximum price impact that will work for majority of cases\n        // may also be challenging since the price impact would vary based on the\n        // amount of collateral being swapped\n        //\n        // note that the decreasePositionSwapType should be SwapPnlTokenToCollateralToken\n        // because fees are calculated with reference to the collateral token\n        // fees are deducted from the output amount if the output token is the same as the\n        // collateral token\n        // swapping the pnl token to the collateral token helps to ensure fees can be paid\n        // using the realized profit\n        Order.Numbers memory numbers = Order.Numbers(\n            Order.OrderType.MarketDecrease, // orderType\n            Order.DecreasePositionSwapType.SwapPnlTokenToCollateralToken, // decreasePositionSwapType\n            params.sizeDeltaUsd, // sizeDeltaUsd\n            0, // initialCollateralDeltaAmount\n            0, // triggerPrice\n            position.isLong() ? 0 : type(uint256).max, // acceptablePrice\n            0, // executionFee\n            params.dataStore.getUint(Keys.MAX_CALLBACK_GAS_LIMIT), // callbackGasLimit\n            0, // minOutputAmount\n            params.updatedAtTime, // updatedAtTime\n            0 // validFromTime\n        );\n\n        Order.Flags memory flags = Order.Flags(\n            position.isLong(), // isLong\n            true, // shouldUnwrapNativeToken\n            false, // isFrozen\n            false // autoCancel\n        );\n\n        Order.Props memory order = Order.Props(\n            addresses,\n            numbers,\n            flags\n        );\n\n        bytes32 key = NonceUtils.getNextKey(params.dataStore);\n        OrderStoreUtils.set(params.dataStore, key, order);\n\n        OrderEventUtils.emitOrderCreated(params.eventEmitter, key, order);\n\n        return key;\n    }\n\n    // @dev validate if the requested ADL can be executed\n    //\n    // @param dataStore DataStore\n    // @param oracle Oracle\n    // @param market address of the market to check\n    // @param isLong indicates whether to check the long or short side of the market\n    function validateAdl(\n        DataStore dataStore,\n        Oracle oracle,\n        address market,\n        bool isLong\n    ) external view {\n        bool isAdlEnabled = AdlUtils.getIsAdlEnabled(dataStore, market, isLong);\n        if (!isAdlEnabled) {\n            revert Errors.AdlNotEnabled();\n        }\n\n        uint256 latestAdlTime = AdlUtils.getLatestAdlTime(dataStore, market, isLong);\n        if (oracle.maxTimestamp() < latestAdlTime) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(oracle.maxTimestamp(), latestAdlTime);\n        }\n    }\n\n    // @dev get the latest time at which the ADL flag was updated\n    //\n    // @param dataStore DataStore\n    // @param market address of the market to check\n    // @param isLong indicates whether to check the long or short side of the market\n    //\n    // @return the latest time at which the ADL flag was updated\n    function getLatestAdlTime(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.latestAdlAtKey(market, isLong));\n    }\n\n    // @dev set the latest time at which the ADL flag was updated\n    //\n    // @param dataStore DataStore\n    // @param market address of the market to check\n    // @param isLong indicates whether to check the long or short side of the market\n    // @param value the latest time value\n    //\n    // @return the latest time value\n    function setLatestAdlAt(DataStore dataStore, address market, bool isLong, uint256 value) internal returns (uint256) {\n        return dataStore.setUint(Keys.latestAdlAtKey(market, isLong), value);\n    }\n\n    // @dev get whether ADL is enabled\n    //\n    // @param dataStore DataStore\n    // @param market address of the market to check\n    // @param isLong indicates whether to check the long or short side of the market\n    //\n    // @return whether ADL is enabled\n    function getIsAdlEnabled(DataStore dataStore, address market, bool isLong) internal view returns (bool) {\n        return dataStore.getBool(Keys.isAdlEnabledKey(market, isLong));\n    }\n\n    // @dev set whether ADL is enabled\n    //\n    // @param dataStore DataStore\n    // @param market address of the market to check\n    // @param isLong indicates whether to check the long or short side of the market\n    // @param value whether ADL is enabled\n    //\n    // @return whether ADL is enabled\n    function setIsAdlEnabled(DataStore dataStore, address market, bool isLong, bool value) internal returns (bool) {\n        return dataStore.setBool(Keys.isAdlEnabledKey(market, isLong), value);\n    }\n\n    // @dev emit ADL state update events\n    //\n    // @param eventEmitter EventEmitter\n    // @param market address of the market for the ADL state update\n    // @param isLong indicates the ADL state update is for the long or short side of the market\n    // @param pnlToPoolFactor the ratio of PnL to pool value\n    // @param maxPnlFactor the max PnL factor\n    // @param shouldEnableAdl whether ADL was enabled or disabled\n    function emitAdlStateUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        bool isLong,\n        int256 pnlToPoolFactor,\n        uint256 maxPnlFactor,\n        bool shouldEnableAdl\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"pnlToPoolFactor\", pnlToPoolFactor);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"maxPnlFactor\", maxPnlFactor);\n\n        eventData.boolItems.initItems(2);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n        eventData.boolItems.setItem(1, \"shouldEnableAdl\", shouldEnableAdl);\n\n        eventEmitter.emitEventLog1(\n            \"AdlStateUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/bank/Bank.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../token/TokenUtils.sol\";\nimport \"../role/RoleModule.sol\";\n\n// @title Bank\n// @dev Contract to handle storing and transferring of tokens\ncontract Bank is RoleModule {\n    using SafeERC20 for IERC20;\n\n    DataStore public immutable dataStore;\n\n    constructor(RoleStore _roleStore, DataStore _dataStore) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n    }\n\n    receive() external payable {\n        address wnt = TokenUtils.wnt(dataStore);\n        if (msg.sender != wnt) {\n            revert Errors.InvalidNativeTokenSender(msg.sender);\n        }\n    }\n\n    // @dev transfer tokens from this contract to a receiver\n    //\n    // @param token the token to transfer\n    // @param amount the amount to transfer\n    // @param receiver the address to transfer to\n    function transferOut(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external onlyController {\n        _transferOut(token, receiver, amount);\n    }\n\n    // @dev transfer tokens from this contract to a receiver\n    // handles native token transfers as well\n    //\n    // @param token the token to transfer\n    // @param amount the amount to transfer\n    // @param receiver the address to transfer to\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\n    // before transferring\n    function transferOut(\n        address token,\n        address receiver,\n        uint256 amount,\n        bool shouldUnwrapNativeToken\n    ) external onlyController {\n        address wnt = TokenUtils.wnt(dataStore);\n\n        if (token == wnt && shouldUnwrapNativeToken) {\n            _transferOutNativeToken(token, receiver, amount);\n        } else {\n            _transferOut(token, receiver, amount);\n        }\n    }\n\n    // @dev transfer native tokens from this contract to a receiver\n    //\n    // @param token the token to transfer\n    // @param amount the amount to transfer\n    // @param receiver the address to transfer to\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\n    // before transferring\n    function transferOutNativeToken(\n        address receiver,\n        uint256 amount\n    ) external onlyController {\n        address wnt = TokenUtils.wnt(dataStore);\n        _transferOutNativeToken(wnt, receiver, amount);\n    }\n\n    // @dev transfer tokens from this contract to a receiver\n    //\n    // @param token the token to transfer\n    // @param amount the amount to transfer\n    // @param receiver the address to transfer to\n    function _transferOut(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal {\n        if (receiver == address(this)) {\n            revert Errors.SelfTransferNotSupported(receiver);\n        }\n\n        TokenUtils.transfer(dataStore, token, receiver, amount);\n\n        _afterTransferOut(token);\n    }\n\n    // @dev unwrap wrapped native tokens and transfer the native tokens from\n    // this contract to a receiver\n    //\n    // @param token the token to transfer\n    // @param amount the amount to transfer\n    // @param receiver the address to transfer to\n    function _transferOutNativeToken(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal {\n        if (receiver == address(this)) {\n            revert Errors.SelfTransferNotSupported(receiver);\n        }\n\n        TokenUtils.withdrawAndSendNativeToken(\n            dataStore,\n            token,\n            receiver,\n            amount\n        );\n\n        _afterTransferOut(token);\n    }\n\n    function _afterTransferOut(address /* token */) internal virtual {}\n}\n"
    },
    "contracts/bank/StrictBank.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./Bank.sol\";\n\n// @title StrictBank\n// @dev a stricter version of Bank\n//\n// the Bank contract does not have functions to validate the amount of tokens\n// transferred in\n// the Bank contract will mainly assume that safeTransferFrom calls work correctly\n// and that tokens were transferred into it if there was no revert\n//\n// the StrictBank contract keeps track of its internal token balance\n// and uses recordTransferIn to compare its change in balance and return\n// the amount of tokens received\ncontract StrictBank is Bank {\n    using SafeERC20 for IERC20;\n\n    // used to record token balances to evaluate amounts transferred in\n    mapping (address => uint256) public tokenBalances;\n\n    constructor(RoleStore _roleStore, DataStore _dataStore) Bank(_roleStore, _dataStore) {}\n\n    // @dev records a token transfer into the contract\n    // @param token the token to record the transfer for\n    // @return the amount of tokens transferred in\n    function recordTransferIn(address token) external onlyController returns (uint256) {\n        return _recordTransferIn(token);\n    }\n\n    // @dev this can be used to update the tokenBalances in case of token burns\n    // or similar balance changes\n    // the prevBalance is not validated to be more than the nextBalance as this\n    // could allow someone to block this call by transferring into the contract\n    // @param token the token to record the burn for\n    // @return the new balance\n    function syncTokenBalance(address token) external onlyController returns (uint256) {\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\n        tokenBalances[token] = nextBalance;\n        return nextBalance;\n    }\n\n    // @dev records a token transfer into the contract\n    // @param token the token to record the transfer for\n    // @return the amount of tokens transferred in\n    function _recordTransferIn(address token) internal returns (uint256) {\n        uint256 prevBalance = tokenBalances[token];\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\n        tokenBalances[token] = nextBalance;\n\n        return nextBalance - prevBalance;\n    }\n\n    // @dev update the internal balance after tokens have been transferred out\n    // this is called from the Bank contract\n    // @param token the token that was transferred out\n    function _afterTransferOut(address token) internal override {\n        tokenBalances[token] = IERC20(token).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/callback/CallbackUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\n\nimport \"./IOrderCallbackReceiver.sol\";\nimport \"./IDepositCallbackReceiver.sol\";\nimport \"./IWithdrawalCallbackReceiver.sol\";\nimport \"./IShiftCallbackReceiver.sol\";\nimport \"./IGasFeeCallbackReceiver.sol\";\nimport \"./IGlvDepositCallbackReceiver.sol\";\nimport \"./IGlvWithdrawalCallbackReceiver.sol\";\n\n// @title CallbackUtils\n// @dev most features require a two step process to complete\n// the user first sends a request transaction, then a second transaction is sent\n// by a keeper to execute the request\n//\n// to allow for better composability with other contracts, a callback contract\n// can be specified to be called after request executions or cancellations\n//\n// in case it is necessary to add \"before\" callbacks, extra care should be taken\n// to ensure that important state cannot be changed during the before callback\n// for example, if an order can be cancelled in the \"before\" callback during\n// order execution, it may lead to an order being executed even though the user\n// was already refunded for its cancellation\n//\n// the details from callback errors are not processed to avoid cases where a malicious\n// callback contract returns a very large value to cause transactions to run out of gas\nlibrary CallbackUtils {\n    using Address for address;\n    using Deposit for Deposit.Props;\n    using Withdrawal for Withdrawal.Props;\n    using Shift for Shift.Props;\n    using Order for Order.Props;\n    using GlvDeposit for GlvDeposit.Props;\n    using GlvWithdrawal for GlvWithdrawal.Props;\n\n    event AfterDepositExecutionError(bytes32 key, Deposit.Props deposit);\n    event AfterDepositCancellationError(bytes32 key, Deposit.Props deposit);\n\n    event AfterWithdrawalExecutionError(bytes32 key, Withdrawal.Props withdrawal);\n    event AfterWithdrawalCancellationError(bytes32 key, Withdrawal.Props withdrawal);\n\n    event AfterShiftExecutionError(bytes32 key, Shift.Props shift);\n    event AfterShiftCancellationError(bytes32 key, Shift.Props shift);\n\n    event AfterOrderExecutionError(bytes32 key, Order.Props order);\n    event AfterOrderCancellationError(bytes32 key, Order.Props order);\n    event AfterOrderFrozenError(bytes32 key, Order.Props order);\n\n    event AfterGlvDepositExecutionError(bytes32 key, GlvDeposit.Props glvDeposit);\n    event AfterGlvDepositCancellationError(bytes32 key, GlvDeposit.Props glvDeposit);\n    event AfterGlvWithdrawalExecutionError(bytes32 key, GlvWithdrawal.Props glvWithdrawal);\n    event AfterGlvWithdrawalCancellationError(bytes32 key, GlvWithdrawal.Props glvWithdrawal);\n\n    // @dev validate that the callbackGasLimit is less than the max specified value\n    // this is to prevent callback gas limits which are larger than the max gas limits per block\n    // as this would allow for callback contracts that can consume all gas and conditionally cause\n    // executions to fail\n    // @param dataStore DataStore\n    // @param callbackGasLimit the callback gas limit\n    function validateCallbackGasLimit(DataStore dataStore, uint256 callbackGasLimit) internal view {\n        uint256 maxCallbackGasLimit = dataStore.getUint(Keys.MAX_CALLBACK_GAS_LIMIT);\n        if (callbackGasLimit > maxCallbackGasLimit) {\n            revert Errors.MaxCallbackGasLimitExceeded(callbackGasLimit, maxCallbackGasLimit);\n        }\n    }\n\n    function validateGasLeftForCallback(uint256 callbackGasLimit) internal view {\n        uint256 gasToBeForwarded = gasleft() / 64 * 63;\n        if (gasToBeForwarded < callbackGasLimit) {\n            revert Errors.InsufficientGasLeftForCallback(gasToBeForwarded, callbackGasLimit);\n        }\n    }\n\n    function setSavedCallbackContract(DataStore dataStore, address account, address market, address callbackContract) external {\n        dataStore.setAddress(Keys.savedCallbackContract(account, market), callbackContract);\n    }\n\n    function getSavedCallbackContract(DataStore dataStore, address account, address market) internal view returns (address) {\n        return dataStore.getAddress(Keys.savedCallbackContract(account, market));\n    }\n\n    function refundExecutionFee(\n        DataStore dataStore,\n        bytes32 key,\n        address callbackContract,\n        uint256 refundFeeAmount,\n        EventUtils.EventLogData memory eventData\n    ) internal returns (bool) {\n        if (!isValidCallbackContract(callbackContract)) { return false; }\n\n        uint256 gasLimit = dataStore.getUint(Keys.REFUND_EXECUTION_FEE_GAS_LIMIT);\n\n        validateGasLeftForCallback(gasLimit);\n\n        try IGasFeeCallbackReceiver(callbackContract).refundExecutionFee{ gas: gasLimit, value: refundFeeAmount }(\n            key,\n            eventData\n        ) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    // @dev called after a deposit execution\n    // @param key the key of the deposit\n    // @param deposit the deposit that was executed\n    function afterDepositExecution(\n        bytes32 key,\n        Deposit.Props memory deposit,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(deposit.callbackContract())) { return; }\n\n        validateGasLeftForCallback(deposit.callbackGasLimit());\n\n        try IDepositCallbackReceiver(deposit.callbackContract()).afterDepositExecution{ gas: deposit.callbackGasLimit() }(\n            key,\n            deposit,\n            eventData\n        ) {\n        } catch {\n            emit AfterDepositExecutionError(key, deposit);\n        }\n    }\n\n    // @dev called after a deposit cancellation\n    // @param key the key of the deposit\n    // @param deposit the deposit that was cancelled\n    function afterDepositCancellation(\n        bytes32 key,\n        Deposit.Props memory deposit,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(deposit.callbackContract())) { return; }\n\n        validateGasLeftForCallback(deposit.callbackGasLimit());\n\n        try IDepositCallbackReceiver(deposit.callbackContract()).afterDepositCancellation{ gas: deposit.callbackGasLimit() }(\n            key,\n            deposit,\n            eventData\n        ) {\n        } catch {\n            emit AfterDepositCancellationError(key, deposit);\n        }\n    }\n\n    // @dev called after a withdrawal execution\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was executed\n    function afterWithdrawalExecution(\n        bytes32 key,\n        Withdrawal.Props memory withdrawal,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(withdrawal.callbackContract())) { return; }\n\n        validateGasLeftForCallback(withdrawal.callbackGasLimit());\n\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract()).afterWithdrawalExecution{ gas: withdrawal.callbackGasLimit() }(\n            key,\n            withdrawal,\n            eventData\n        ) {\n        } catch {\n            emit AfterWithdrawalExecutionError(key, withdrawal);\n        }\n    }\n\n    // @dev called after a withdrawal cancellation\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was cancelled\n    function afterWithdrawalCancellation(\n        bytes32 key,\n        Withdrawal.Props memory withdrawal,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(withdrawal.callbackContract())) { return; }\n\n        validateGasLeftForCallback(withdrawal.callbackGasLimit());\n\n        try IWithdrawalCallbackReceiver(withdrawal.callbackContract()).afterWithdrawalCancellation{ gas: withdrawal.callbackGasLimit() }(\n            key,\n            withdrawal,\n            eventData\n        ) {\n        } catch {\n            emit AfterWithdrawalCancellationError(key, withdrawal);\n        }\n    }\n\n    function afterShiftExecution(\n        bytes32 key,\n        Shift.Props memory shift,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(shift.callbackContract())) { return; }\n\n        validateGasLeftForCallback(shift.callbackGasLimit());\n\n        try IShiftCallbackReceiver(shift.callbackContract()).afterShiftExecution{ gas: shift.callbackGasLimit() }(\n            key,\n            shift,\n            eventData\n        ) {\n        } catch {\n            emit AfterShiftExecutionError(key, shift);\n        }\n    }\n    function afterShiftCancellation(\n        bytes32 key,\n        Shift.Props memory shift,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(shift.callbackContract())) { return; }\n\n        validateGasLeftForCallback(shift.callbackGasLimit());\n\n        try IShiftCallbackReceiver(shift.callbackContract()).afterShiftCancellation{ gas: shift.callbackGasLimit() }(\n            key,\n            shift,\n            eventData\n        ) {\n        } catch {\n            emit AfterShiftCancellationError(key, shift);\n        }\n    }\n\n    // @dev called after an order execution\n    // note that the order.size, order.initialCollateralDeltaAmount and other\n    // properties may be updated during execution, the new values may not be\n    // updated in the order object for the callback\n    // @param key the key of the order\n    // @param order the order that was executed\n    function afterOrderExecution(\n        bytes32 key,\n        Order.Props memory order,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\n\n        validateGasLeftForCallback(order.callbackGasLimit());\n\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderExecution{ gas: order.callbackGasLimit() }(\n            key,\n            order,\n            eventData\n        ) {\n        } catch {\n            emit AfterOrderExecutionError(key, order);\n        }\n    }\n\n    // @dev called after an order cancellation\n    // @param key the key of the order\n    // @param order the order that was cancelled\n    function afterOrderCancellation(\n        bytes32 key,\n        Order.Props memory order,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\n\n        validateGasLeftForCallback(order.callbackGasLimit());\n\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderCancellation{ gas: order.callbackGasLimit() }(\n            key,\n            order,\n            eventData\n        ) {\n        } catch {\n            emit AfterOrderCancellationError(key, order);\n        }\n    }\n\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\n    // @param key the key of the order\n    // @param order the order that was frozen\n    function afterOrderFrozen(\n        bytes32 key,\n        Order.Props memory order,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(order.callbackContract())) { return; }\n\n        validateGasLeftForCallback(order.callbackGasLimit());\n\n        try IOrderCallbackReceiver(order.callbackContract()).afterOrderFrozen{ gas: order.callbackGasLimit() }(\n            key,\n            order,\n            eventData\n        ) {\n        } catch {\n            emit AfterOrderFrozenError(key, order);\n        }\n    }\n\n    // @dev called after a glvDeposit execution\n    // @param key the key of the glvDeposit\n    // @param glvDeposit the glvDeposit that was executed\n    function afterGlvDepositExecution(\n        bytes32 key,\n        GlvDeposit.Props memory glvDeposit,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(glvDeposit.callbackContract())) {\n            return;\n        }\n\n        validateGasLeftForCallback(glvDeposit.callbackGasLimit());\n\n        try IGlvDepositCallbackReceiver(glvDeposit.callbackContract()).afterGlvDepositExecution{ gas: glvDeposit.callbackGasLimit() }(\n            key,\n            glvDeposit,\n            eventData\n        ) {\n        } catch {\n            emit AfterGlvDepositExecutionError(key, glvDeposit);\n        }\n    }\n\n    // @dev called after a glvDeposit cancellation\n    // @param key the key of the glvDeposit\n    // @param glvDeposit the glvDeposit that was cancelled\n    function afterGlvDepositCancellation(\n        bytes32 key,\n        GlvDeposit.Props memory glvDeposit,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(glvDeposit.callbackContract())) { return; }\n\n        validateGasLeftForCallback(glvDeposit.callbackGasLimit());\n\n        try IGlvDepositCallbackReceiver(glvDeposit.callbackContract()).afterGlvDepositCancellation{ gas: glvDeposit.callbackGasLimit() }(\n            key,\n            glvDeposit,\n            eventData\n        ) {\n        } catch {\n            emit AfterGlvDepositCancellationError(key, glvDeposit);\n        }\n    }\n\n    // @dev called after a glvWithdrawal execution\n    // @param key the key of the glvWithdrawal\n    // @param glvWithdrawal the glvWithdrawal that was executed\n    function afterGlvWithdrawalExecution(\n        bytes32 key,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(glvWithdrawal.callbackContract())) { return; }\n\n        validateGasLeftForCallback(glvWithdrawal.callbackGasLimit());\n\n        try IGlvWithdrawalCallbackReceiver(glvWithdrawal.callbackContract()).afterGlvWithdrawalExecution{ gas: glvWithdrawal.callbackGasLimit() }(\n            key,\n            glvWithdrawal,\n            eventData\n        ) {\n        } catch {\n            emit AfterGlvWithdrawalExecutionError(key, glvWithdrawal);\n        }\n    }\n\n    // @dev called after a glvWithdrawal cancellation\n    // @param key the key of the glvWithdrawal\n    // @param glvWithdrawal the glvWithdrawal that was cancelled\n    function afterGlvWithdrawalCancellation(\n        bytes32 key,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        EventUtils.EventLogData memory eventData\n    ) internal {\n        if (!isValidCallbackContract(glvWithdrawal.callbackContract())) { return; }\n\n        validateGasLeftForCallback(glvWithdrawal.callbackGasLimit());\n\n        try IGlvWithdrawalCallbackReceiver(glvWithdrawal.callbackContract()).afterGlvWithdrawalCancellation{ gas: glvWithdrawal.callbackGasLimit() }(\n            key,\n            glvWithdrawal,\n            eventData\n        ) {\n        } catch {\n            emit AfterGlvWithdrawalCancellationError(key, glvWithdrawal);\n        }\n    }\n\n    // @dev validates that the given address is a contract\n    // @param callbackContract the contract to call\n    function isValidCallbackContract(address callbackContract) internal view returns (bool) {\n        if (callbackContract == address(0)) { return false; }\n        if (!callbackContract.isContract()) { return false; }\n\n        return true;\n    }\n}\n"
    },
    "contracts/callback/IDepositCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\nimport \"../deposit/Deposit.sol\";\n\n// @title IDepositCallbackReceiver\n// @dev interface for a deposit callback contract\ninterface IDepositCallbackReceiver {\n    // @dev called after a deposit execution\n    // @param key the key of the deposit\n    // @param deposit the deposit that was executed\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after a deposit cancellation\n    // @param key the key of the deposit\n    // @param deposit the deposit that was cancelled\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external;\n}\n"
    },
    "contracts/callback/IGasFeeCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\n\ninterface IGasFeeCallbackReceiver {\n    function refundExecutionFee(bytes32 key, EventUtils.EventLogData memory eventData) external payable;\n}\n"
    },
    "contracts/callback/IGlvDepositCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\nimport \"../glv/glvDeposit/GlvDeposit.sol\";\n\n// @title IGlvDepositCallbackReceiver\n// @dev interface for a glvDeposit callback contract\ninterface IGlvDepositCallbackReceiver {\n    // @dev called after a glvDeposit execution\n    // @param key the key of the glvDeposit\n    // @param glvDeposit the glvDeposit that was executed\n    function afterGlvDepositExecution(\n        bytes32 key,\n        GlvDeposit.Props memory glvDeposit,\n        EventUtils.EventLogData memory eventData\n    ) external;\n\n    // @dev called after a glvDeposit cancellation\n    // @param key the key of the glvDeposit\n    // @param glvDeposit the glvDeposit that was cancelled\n    function afterGlvDepositCancellation(\n        bytes32 key,\n        GlvDeposit.Props memory glvDeposit,\n        EventUtils.EventLogData memory eventData\n    ) external;\n}\n"
    },
    "contracts/callback/IGlvWithdrawalCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\nimport \"../glv/glvWithdrawal/GlvWithdrawal.sol\";\n\n// @title IGlvWithdrawalCallbackReceiver\n// @dev interface for a glvWithdrawal callback contract\ninterface IGlvWithdrawalCallbackReceiver {\n    // @dev called after a glvWithdrawal execution\n    // @param key the key of the glvWithdrawal\n    // @param glvWithdrawal the glvWithdrawal that was executed\n    function afterGlvWithdrawalExecution(\n        bytes32 key,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        EventUtils.EventLogData memory eventData\n    ) external;\n\n    // @dev called after a glvWithdrawal cancellation\n    // @param key the key of the glvWithdrawal\n    // @param glvWithdrawal the glvWithdrawal that was cancelled\n    function afterGlvWithdrawalCancellation(\n        bytes32 key,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        EventUtils.EventLogData memory eventData\n    ) external;\n}\n"
    },
    "contracts/callback/IOrderCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\nimport \"../order/Order.sol\";\n\n// @title IOrderCallbackReceiver\n// @dev interface for an order callback contract\ninterface IOrderCallbackReceiver {\n    // @dev called after an order execution\n    // @param key the key of the order\n    // @param order the order that was executed\n    function afterOrderExecution(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after an order cancellation\n    // @param key the key of the order\n    // @param order the order that was cancelled\n    function afterOrderCancellation(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\n    // @param key the key of the order\n    // @param order the order that was frozen\n    function afterOrderFrozen(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external;\n}\n"
    },
    "contracts/callback/IShiftCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\nimport \"../shift/Shift.sol\";\n\ninterface IShiftCallbackReceiver {\n    function afterShiftExecution(bytes32 key, Shift.Props memory shift, EventUtils.EventLogData memory eventData) external;\n    function afterShiftCancellation(bytes32 key, Shift.Props memory shift, EventUtils.EventLogData memory eventData) external;\n}\n"
    },
    "contracts/callback/IWithdrawalCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventUtils.sol\";\nimport \"../withdrawal/Withdrawal.sol\";\n\n// @title IWithdrawalCallbackReceiver\n// @dev interface for a withdrawal callback contract\ninterface IWithdrawalCallbackReceiver {\n    // @dev called after a withdrawal execution\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was executed\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after a withdrawal cancellation\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was cancelled\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external;\n}\n"
    },
    "contracts/chain/ArbGasInfo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title ArbGasInfo\ninterface ArbGasInfo {\n    function getCurrentTxL1GasFees() external view returns (uint256);\n}\n"
    },
    "contracts/chain/ArbSys.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title ArbSys\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\n// value, the ArbSys interface is used to retrieve the L2 value\ninterface ArbSys {\n    function arbBlockNumber() external view returns (uint256);\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\n}\n"
    },
    "contracts/chain/Chain.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./ArbSys.sol\";\nimport \"./ArbGasInfo.sol\";\n\n// @title Chain\n// @dev Wrap the calls to retrieve chain variables to handle differences\n// between chain implementations\nlibrary Chain {\n    // if the ARBITRUM_CHAIN_ID changes, a new version of this library\n    // and contracts depending on it would need to be deployed\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\n    uint256 public constant ARBITRUM_SEPOLIA_CHAIN_ID = 421614;\n\n    ArbSys public constant arbSys = ArbSys(address(100));\n    ArbGasInfo public constant arbGasInfo = ArbGasInfo(address(108));\n\n    // @dev return the current block's timestamp\n    // @return the current block's timestamp\n    function currentTimestamp() internal view returns (uint256) {\n        return block.timestamp;\n    }\n\n    // @dev return the current block's number\n    // @return the current block's number\n    function currentBlockNumber() internal view returns (uint256) {\n        if (shouldUseArbPrecompiles()) {\n            return arbSys.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    // @dev return the current block's hash\n    // @return the current block's hash\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\n        if (shouldUseArbPrecompiles()) {\n            return arbSys.arbBlockHash(blockNumber);\n        }\n\n        return blockhash(blockNumber);\n    }\n\n    function shouldUseArbPrecompiles() internal view returns (bool) {\n        return block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_SEPOLIA_CHAIN_ID;\n    }\n\n    function getCurrentTxL1GasFees() internal view returns (uint256) {\n        if (!shouldUseArbPrecompiles()) {\n            return 0;\n        }\n        return arbGasInfo.getCurrentTxL1GasFees();\n    }\n}\n"
    },
    "contracts/config/AutoCancelSyncer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../role/RoleModule.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/BasicMulticall.sol\";\nimport \"../order/OrderStoreUtils.sol\";\nimport \"../position/PositionStoreUtils.sol\";\nimport \"../order/AutoCancelUtils.sol\";\nimport \"../utils/Cast.sol\";\n\ncontract AutoCancelSyncer is ReentrancyGuard, RoleModule, BasicMulticall {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    using Order for Order.Props;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n    }\n\n    function syncAutoCancelOrderListForAccount(address account, uint256 start, uint256 end) external onlyConfigKeeper nonReentrant {\n        bytes32[] memory positionKeys = PositionStoreUtils.getAccountPositionKeys(dataStore, account, start, end);\n\n        for (uint256 i; i < positionKeys.length; i++) {\n            _syncAutoCancelOrderListForPosition(account, positionKeys[i]);\n        }\n    }\n\n    function syncAutoCancelOrderListForPosition(address account, bytes32 positionKey) external onlyConfigKeeper nonReentrant {\n        _syncAutoCancelOrderListForPosition(account, positionKey);\n    }\n\n    function _syncAutoCancelOrderListForPosition(address account, bytes32 positionKey) internal {\n        bytes32[] memory orderKeys = AutoCancelUtils.getAutoCancelOrderKeys(dataStore, positionKey);\n\n        for (uint256 j; j < orderKeys.length; j++) {\n            bytes32 orderKey = orderKeys[j];\n            Order.Props memory order = OrderStoreUtils.get(dataStore, orderKey);\n\n            if (order.account() == address(0) || (order.sizeDeltaUsd() == 0 && order.initialCollateralDeltaAmount() == 0)) {\n                AutoCancelUtils.removeAutoCancelOrderKey(dataStore, positionKey, orderKey);\n\n                EventUtils.EventLogData memory eventData;\n                eventData.addressItems.initItems(1);\n                eventData.addressItems.setItem(0, \"account\", account);\n                eventData.bytes32Items.initItems(2);\n                eventData.bytes32Items.setItem(0, \"positionKey\", positionKey);\n                eventData.bytes32Items.setItem(1, \"orderKey\", orderKey);\n                eventEmitter.emitEventLog1(\n                    \"ConfigSyncAutoCancelOrderList\",\n                    Cast.toBytes32(account),\n                    eventData\n                );\n            }\n        }\n    }\n}\n"
    },
    "contracts/config/Config.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../role/RoleModule.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/BasicMulticall.sol\";\nimport \"../utils/Precision.sol\";\nimport \"../utils/Cast.sol\";\nimport \"../market/MarketUtils.sol\";\n\n// @title Config\ncontract Config is ReentrancyGuard, RoleModule, BasicMulticall {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    uint256 public constant MAX_FEE_FACTOR = 5 * Precision.FLOAT_PRECISION / 100; // 5%\n\n    // 0.00001% per second, ~315% per year\n    uint256 public constant MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND = 100000000000000000000000;\n    // at this rate max allowed funding rate will be reached in 1 hour at 100% imbalance if max funding rate is 315%\n    uint256 public constant MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND = MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND / 1 hours;\n    // at this rate zero funding rate will be reached in 24 hours if max funding rate is 315%\n    uint256 public constant MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND = MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND / 24 hours;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    // @dev the base keys that can be set\n    mapping (bytes32 => bool) public allowedBaseKeys;\n    // @dev the limited base keys that can be set\n    mapping (bytes32 => bool) public allowedLimitedBaseKeys;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n\n        _initAllowedBaseKeys();\n        _initAllowedLimitedBaseKeys();\n    }\n\n    modifier onlyKeeper() {\n        if (\n            !roleStore.hasRole(msg.sender, Role.LIMITED_CONFIG_KEEPER) &&\n            !roleStore.hasRole(msg.sender, Role.CONFIG_KEEPER)\n        ) {\n            revert Errors.Unauthorized(msg.sender, \"LIMITED / CONFIG KEEPER\");\n        }\n\n        _;\n    }\n\n    function initOracleProviderForToken(address token, address provider) external onlyConfigKeeper nonReentrant {\n        if (dataStore.getAddress(Keys.oracleProviderForTokenKey(token)) != address(0)) {\n            revert Errors.OracleProviderAlreadyExistsForToken(token);\n        }\n\n        dataStore.setAddress(Keys.oracleProviderForTokenKey(token), provider);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"provider\", provider);\n        eventEmitter.emitEventLog(\n            \"InitOracleProviderForToken\",\n            eventData\n        );\n    }\n\n\n    function setPriceFeed(\n        address token,\n        address priceFeed,\n        uint256 priceFeedMultiplier,\n        uint256 priceFeedHeartbeatDuration,\n        uint256 stablePrice\n    ) external onlyConfigKeeper nonReentrant {\n        if (dataStore.getAddress(Keys.priceFeedKey(token)) != address(0)) {\n            revert Errors.PriceFeedAlreadyExistsForToken(token);\n        }\n\n        dataStore.setAddress(Keys.priceFeedKey(token), priceFeed);\n        dataStore.setUint(Keys.priceFeedMultiplierKey(token), priceFeedMultiplier);\n        dataStore.setUint(Keys.priceFeedHeartbeatDurationKey(token), priceFeedHeartbeatDuration);\n        dataStore.setUint(Keys.stablePriceKey(token), stablePrice);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"priceFeed\", priceFeed);\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"priceFeedMultiplier\", priceFeedMultiplier);\n        eventData.uintItems.setItem(1, \"priceFeedHeartbeatDuration\", priceFeedHeartbeatDuration);\n        eventData.uintItems.setItem(2, \"stablePrice\", stablePrice);\n        eventEmitter.emitEventLog1(\n            \"ConfigSetPriceFeed\",\n            Cast.toBytes32(token),\n            eventData\n        );\n    }\n\n    function setDataStream(\n        address token,\n        bytes32 feedId,\n        uint256 dataStreamMultiplier,\n        uint256 dataStreamSpreadReductionFactor\n    ) external onlyConfigKeeper nonReentrant {\n        if (dataStore.getBytes32(Keys.dataStreamIdKey(token)) != bytes32(0)) {\n            revert Errors.DataStreamIdAlreadyExistsForToken(token);\n        }\n\n        _validateRange(Keys.DATA_STREAM_SPREAD_REDUCTION_FACTOR, abi.encode(token), dataStreamSpreadReductionFactor);\n\n        dataStore.setBytes32(Keys.dataStreamIdKey(token), feedId);\n        dataStore.setUint(Keys.dataStreamMultiplierKey(token), dataStreamMultiplier);\n        dataStore.setUint(Keys.dataStreamSpreadReductionFactorKey(token), dataStreamSpreadReductionFactor);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"feedId\", feedId);\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"dataStreamMultiplier\", dataStreamMultiplier);\n        eventData.uintItems.setItem(1, \"dataStreamSpreadReductionFactor\", dataStreamSpreadReductionFactor);\n        eventEmitter.emitEventLog1(\n            \"ConfigSetDataStream\",\n            Cast.toBytes32(token),\n            eventData\n        );\n    }\n\n    function setClaimableCollateralFactorForTime(\n        address market,\n        address token,\n        uint256 timeKey,\n        uint256 factor\n    ) external onlyConfigKeeper nonReentrant {\n        if (factor > Precision.FLOAT_PRECISION) { revert Errors.InvalidClaimableFactor(factor); }\n\n        bytes32 key = Keys.claimableCollateralFactorKey(market, token, timeKey);\n        dataStore.setUint(key, factor);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"timeKey\", timeKey);\n        eventData.uintItems.setItem(1, \"factor\", factor);\n\n        eventEmitter.emitEventLog2(\n            \"SetClaimableCollateralFactorForTime\",\n            Cast.toBytes32(market),\n            Cast.toBytes32(token),\n            eventData\n        );\n    }\n\n    function setClaimableCollateralFactorForAccount(\n        address market,\n        address token,\n        uint256 timeKey,\n        address account,\n        uint256 factor\n    ) external onlyConfigKeeper nonReentrant {\n        if (factor > Precision.FLOAT_PRECISION) { revert Errors.InvalidClaimableFactor(factor); }\n\n        bytes32 key = Keys.claimableCollateralFactorKey(market, token, timeKey, account);\n        dataStore.setUint(key, factor);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"account\", account);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"timeKey\", timeKey);\n        eventData.uintItems.setItem(1, \"factor\", factor);\n\n        eventEmitter.emitEventLog2(\n            \"SetClaimableCollateralFactorForAccount\",\n            Cast.toBytes32(market),\n            Cast.toBytes32(token),\n            eventData\n        );\n    }\n\n    function setPositionImpactDistributionRate(\n        address market,\n        uint256 minPositionImpactPoolAmount,\n        uint256 positionImpactPoolDistributionRate\n    ) external onlyConfigKeeper nonReentrant {\n        MarketUtils.distributePositionImpactPool(dataStore, eventEmitter, market);\n\n        dataStore.setUint(Keys.minPositionImpactPoolAmountKey(market), minPositionImpactPoolAmount);\n        dataStore.setUint(Keys.positionImpactPoolDistributionRateKey(market), positionImpactPoolDistributionRate);\n\n        dataStore.setUint(Keys.positionImpactPoolDistributedAtKey(market), Chain.currentTimestamp());\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"minPositionImpactPoolAmount\", minPositionImpactPoolAmount);\n        eventData.uintItems.setItem(1, \"positionImpactPoolDistributionRate\", positionImpactPoolDistributionRate);\n\n        eventEmitter.emitEventLog1(\n            \"SetPositionImpactPoolDistributionRate\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    // @dev set a bool value\n    // @param baseKey the base key of the value to set\n    // @param data the additional data to be combined with the base key\n    // @param value the bool value\n    function setBool(bytes32 baseKey, bytes memory data, bool value) external onlyKeeper nonReentrant {\n        _validateKey(baseKey);\n\n        bytes32 fullKey = Keys.getFullKey(baseKey, data);\n\n        dataStore.setBool(fullKey, value);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"baseKey\", baseKey);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"data\", data);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"value\", value);\n\n        eventEmitter.emitEventLog1(\n            \"SetBool\",\n            baseKey,\n            eventData\n        );\n    }\n\n    // @dev set an address value\n    // @param baseKey the base key of the value to set\n    // @param data the additional data to be combined with the base key\n    // @param value the address value\n    function setAddress(bytes32 baseKey, bytes memory data, address value) external onlyKeeper nonReentrant {\n        _validateKey(baseKey);\n\n        bytes32 fullKey = Keys.getFullKey(baseKey, data);\n\n        dataStore.setAddress(fullKey, value);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"baseKey\", baseKey);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"data\", data);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"value\", value);\n\n        eventEmitter.emitEventLog1(\n            \"SetAddress\",\n            baseKey,\n            eventData\n        );\n    }\n\n    // @dev set a bytes32 value\n    // @param baseKey the base key of the value to set\n    // @param data the additional data to be combined with the base key\n    // @param value the bytes32 value\n    function setBytes32(bytes32 baseKey, bytes memory data, bytes32 value) external onlyKeeper nonReentrant {\n        _validateKey(baseKey);\n\n        bytes32 fullKey = Keys.getFullKey(baseKey, data);\n\n        dataStore.setBytes32(fullKey, value);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"baseKey\", baseKey);\n        eventData.bytes32Items.setItem(1, \"value\", value);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"data\", data);\n\n        eventEmitter.emitEventLog1(\n            \"SetBytes32\",\n            baseKey,\n            eventData\n        );\n    }\n\n    // @dev set a uint256 value\n    // @param basekey the base key of the value to set\n    // @param data the additional data to be combined with the base key\n    // @param value the uint256 value\n    function setUint(bytes32 baseKey, bytes memory data, uint256 value) external onlyKeeper nonReentrant {\n        _validateKey(baseKey);\n\n        bytes32 fullKey = Keys.getFullKey(baseKey, data);\n\n        _validateRange(baseKey, data, value);\n\n        dataStore.setUint(fullKey, value);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"baseKey\", baseKey);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"data\", data);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"value\", value);\n\n        eventEmitter.emitEventLog1(\n            \"SetUint\",\n            baseKey,\n            eventData\n        );\n    }\n\n    // @dev set an int256 value\n    // @param basekey the base key of the value to set\n    // @param data the additional data to be combined with the base key\n    // @param value the int256 value\n    function setInt(bytes32 baseKey, bytes memory data, int256 value) external onlyKeeper nonReentrant {\n        _validateKey(baseKey);\n\n        bytes32 fullKey = Keys.getFullKey(baseKey, data);\n\n        dataStore.setInt(fullKey, value);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"baseKey\", baseKey);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"data\", data);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"value\", value);\n\n        eventEmitter.emitEventLog1(\n            \"SetInt\",\n            baseKey,\n            eventData\n        );\n    }\n\n    // @dev initialize the allowed base keys\n    function _initAllowedBaseKeys() internal {\n        allowedBaseKeys[Keys.HOLDING_ADDRESS] = true;\n\n        allowedBaseKeys[Keys.MIN_HANDLE_EXECUTION_ERROR_GAS] = true;\n        allowedBaseKeys[Keys.MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD] = true;\n        allowedBaseKeys[Keys.MIN_ADDITIONAL_GAS_FOR_EXECUTION] = true;\n\n        allowedBaseKeys[Keys.IS_MARKET_DISABLED] = true;\n\n        allowedBaseKeys[Keys.MAX_SWAP_PATH_LENGTH] = true;\n        allowedBaseKeys[Keys.MAX_CALLBACK_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.REFUND_EXECUTION_FEE_GAS_LIMIT] = true;\n\n        allowedBaseKeys[Keys.MIN_POSITION_SIZE_USD] = true;\n        allowedBaseKeys[Keys.MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS] = true;\n\n        allowedBaseKeys[Keys.MAX_POOL_AMOUNT] = true;\n        allowedBaseKeys[Keys.MAX_POOL_USD_FOR_DEPOSIT] = true;\n        allowedBaseKeys[Keys.MAX_OPEN_INTEREST] = true;\n\n        allowedBaseKeys[Keys.MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT] = true;\n\n        allowedBaseKeys[Keys.CREATE_DEPOSIT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CANCEL_DEPOSIT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_DEPOSIT_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CREATE_WITHDRAWAL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CANCEL_WITHDRAWAL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_WITHDRAWAL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CREATE_SHIFT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CANCEL_SHIFT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_SHIFT_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CREATE_ORDER_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_ORDER_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_ADL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.UPDATE_ORDER_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CANCEL_ORDER_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CREATE_GLV_DEPOSIT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CANCEL_GLV_DEPOSIT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CREATE_GLV_SHIFT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.EXECUTE_GLV_SHIFT_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.CLAIM_FUNDING_FEES_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CLAIM_COLLATERAL_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.CLAIM_UI_FEES_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.MIN_AFFILIATE_REWARD_FACTOR] = true;\n\n        allowedBaseKeys[Keys.SUBACCOUNT_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.GASLESS_FEATURE_DISABLED] = true;\n\n        allowedBaseKeys[Keys.MIN_ORACLE_BLOCK_CONFIRMATIONS] = true;\n        allowedBaseKeys[Keys.MAX_ORACLE_PRICE_AGE] = true;\n        allowedBaseKeys[Keys.MAX_ORACLE_TIMESTAMP_RANGE] = true;\n        allowedBaseKeys[Keys.ORACLE_TIMESTAMP_ADJUSTMENT] = true;\n        allowedBaseKeys[Keys.CHAINLINK_PAYMENT_TOKEN] = true;\n        allowedBaseKeys[Keys.SEQUENCER_GRACE_DURATION] = true;\n        allowedBaseKeys[Keys.MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR] = true;\n\n        allowedBaseKeys[Keys.POSITION_FEE_RECEIVER_FACTOR] = true;\n        allowedBaseKeys[Keys.LIQUIDATION_FEE_RECEIVER_FACTOR] = true;\n        allowedBaseKeys[Keys.SWAP_FEE_RECEIVER_FACTOR] = true;\n        allowedBaseKeys[Keys.BORROWING_FEE_RECEIVER_FACTOR] = true;\n\n        allowedBaseKeys[Keys.ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1] = true;\n        allowedBaseKeys[Keys.ESTIMATED_GAS_FEE_PER_ORACLE_PRICE] = true;\n        allowedBaseKeys[Keys.ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR] = true;\n\n        allowedBaseKeys[Keys.EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1] = true;\n        allowedBaseKeys[Keys.EXECUTION_GAS_FEE_PER_ORACLE_PRICE] = true;\n        allowedBaseKeys[Keys.EXECUTION_GAS_FEE_MULTIPLIER_FACTOR] = true;\n\n        allowedBaseKeys[Keys.MAX_EXECUTION_FEE_MULTIPLIER_FACTOR] = true;\n\n        allowedBaseKeys[Keys.DEPOSIT_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.WITHDRAWAL_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.GLV_DEPOSIT_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.GLV_WITHDRAWAL_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.GLV_SHIFT_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.GLV_PER_MARKET_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.SHIFT_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.SINGLE_SWAP_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.INCREASE_ORDER_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.DECREASE_ORDER_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.SWAP_ORDER_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.TOKEN_TRANSFER_GAS_LIMIT] = true;\n        allowedBaseKeys[Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT] = true;\n\n        allowedBaseKeys[Keys.REQUEST_EXPIRATION_TIME] = true;\n        allowedBaseKeys[Keys.MIN_COLLATERAL_FACTOR] = true;\n        allowedBaseKeys[Keys.MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER] = true;\n        allowedBaseKeys[Keys.MIN_COLLATERAL_USD] = true;\n\n        allowedBaseKeys[Keys.VIRTUAL_TOKEN_ID] = true;\n        allowedBaseKeys[Keys.VIRTUAL_MARKET_ID] = true;\n        allowedBaseKeys[Keys.VIRTUAL_INVENTORY_FOR_SWAPS] = true;\n        allowedBaseKeys[Keys.VIRTUAL_INVENTORY_FOR_POSITIONS] = true;\n\n        allowedBaseKeys[Keys.POSITION_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.POSITION_IMPACT_EXPONENT_FACTOR] = true;\n        allowedBaseKeys[Keys.MAX_POSITION_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.POSITION_FEE_FACTOR] = true;\n        allowedBaseKeys[Keys.PRO_DISCOUNT_FACTOR] = true;\n        allowedBaseKeys[Keys.PRO_TRADER_TIER] = true;\n        allowedBaseKeys[Keys.LIQUIDATION_FEE_FACTOR] = true;\n\n        allowedBaseKeys[Keys.SWAP_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.SWAP_IMPACT_EXPONENT_FACTOR] = true;\n        allowedBaseKeys[Keys.SWAP_FEE_FACTOR] = true;\n        allowedBaseKeys[Keys.DEPOSIT_FEE_FACTOR] = true;\n        allowedBaseKeys[Keys.WITHDRAWAL_FEE_FACTOR] = true;\n        allowedBaseKeys[Keys.ATOMIC_SWAP_FEE_FACTOR] = true;\n        allowedBaseKeys[Keys.ATOMIC_WITHDRAWAL_FEE_FACTOR] = true;\n\n        allowedBaseKeys[Keys.MAX_UI_FEE_FACTOR] = true;\n        allowedBaseKeys[Keys.MAX_AUTO_CANCEL_ORDERS] = true;\n        allowedBaseKeys[Keys.MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS] = true;\n\n        allowedBaseKeys[Keys.ORACLE_TYPE] = true;\n\n        allowedBaseKeys[Keys.RESERVE_FACTOR] = true;\n        allowedBaseKeys[Keys.OPEN_INTEREST_RESERVE_FACTOR] = true;\n\n        allowedBaseKeys[Keys.MAX_PNL_FACTOR] = true;\n        allowedBaseKeys[Keys.MIN_PNL_FACTOR_AFTER_ADL] = true;\n\n        allowedBaseKeys[Keys.FUNDING_FACTOR] = true;\n        allowedBaseKeys[Keys.FUNDING_EXPONENT_FACTOR] = true;\n        allowedBaseKeys[Keys.FUNDING_INCREASE_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.FUNDING_DECREASE_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.MIN_FUNDING_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.MAX_FUNDING_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.THRESHOLD_FOR_STABLE_FUNDING] = true;\n        allowedBaseKeys[Keys.THRESHOLD_FOR_DECREASE_FUNDING] = true;\n\n        allowedBaseKeys[Keys.IGNORE_OPEN_INTEREST_FOR_USAGE_FACTOR] = true;\n\n        allowedBaseKeys[Keys.OPTIMAL_USAGE_FACTOR] = true;\n        allowedBaseKeys[Keys.BASE_BORROWING_FACTOR] = true;\n        allowedBaseKeys[Keys.ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR] = true;\n        allowedBaseKeys[Keys.BORROWING_FACTOR] = true;\n        allowedBaseKeys[Keys.BORROWING_EXPONENT_FACTOR] = true;\n        allowedBaseKeys[Keys.SKIP_BORROWING_FEE_FOR_SMALLER_SIDE] = true;\n\n        allowedBaseKeys[Keys.PRICE_FEED_HEARTBEAT_DURATION] = true;\n\n        allowedBaseKeys[Keys.IS_GLV_MARKET_DISABLED] = true;\n        allowedBaseKeys[Keys.GLV_MAX_MARKET_TOKEN_BALANCE_USD] = true;\n        allowedBaseKeys[Keys.GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT] = true;\n        allowedBaseKeys[Keys.GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.GLV_SHIFT_MIN_INTERVAL] = true;\n        allowedBaseKeys[Keys.MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT] = true;\n        allowedBaseKeys[Keys.GLV_MAX_MARKET_COUNT] = true;\n\n        allowedBaseKeys[Keys.SYNC_CONFIG_FEATURE_DISABLED] = true;\n        allowedBaseKeys[Keys.SYNC_CONFIG_MARKET_DISABLED] = true;\n        allowedBaseKeys[Keys.SYNC_CONFIG_PARAMETER_DISABLED] = true;\n        allowedBaseKeys[Keys.SYNC_CONFIG_MARKET_PARAMETER_DISABLED] = true;\n\n        allowedBaseKeys[Keys.BUYBACK_BATCH_AMOUNT] = true;\n        allowedBaseKeys[Keys.BUYBACK_GMX_FACTOR] = true;\n        allowedBaseKeys[Keys.BUYBACK_MAX_PRICE_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.BUYBACK_MAX_PRICE_AGE] = true;\n\n        allowedBaseKeys[Keys.DATA_STREAM_SPREAD_REDUCTION_FACTOR] = true;\n\n        allowedBaseKeys[Keys.RELAY_FEE_ADDRESS] = true;\n        allowedBaseKeys[Keys.GELATO_RELAY_FEE_BASE_AMOUNT] = true;\n        allowedBaseKeys[Keys.GELATO_RELAY_FEE_MULTIPLIER_FACTOR] = true;\n        allowedBaseKeys[Keys.MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT] = true;\n    }\n\n    function _initAllowedLimitedBaseKeys() internal {\n        allowedLimitedBaseKeys[Keys.ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1] = true;\n        allowedLimitedBaseKeys[Keys.ESTIMATED_GAS_FEE_PER_ORACLE_PRICE] = true;\n        allowedLimitedBaseKeys[Keys.ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR] = true;\n\n        allowedLimitedBaseKeys[Keys.EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1] = true;\n        allowedLimitedBaseKeys[Keys.EXECUTION_GAS_FEE_PER_ORACLE_PRICE] = true;\n        allowedLimitedBaseKeys[Keys.EXECUTION_GAS_FEE_MULTIPLIER_FACTOR] = true;\n\n        allowedLimitedBaseKeys[Keys.MAX_FUNDING_FACTOR_PER_SECOND] = true;\n        allowedLimitedBaseKeys[Keys.MIN_FUNDING_FACTOR_PER_SECOND] = true;\n        allowedLimitedBaseKeys[Keys.FUNDING_INCREASE_FACTOR_PER_SECOND] = true;\n        allowedLimitedBaseKeys[Keys.FUNDING_DECREASE_FACTOR_PER_SECOND] = true;\n\n        allowedLimitedBaseKeys[Keys.MAX_POOL_AMOUNT] = true;\n        allowedLimitedBaseKeys[Keys.MAX_POOL_USD_FOR_DEPOSIT] = true;\n        allowedLimitedBaseKeys[Keys.MAX_OPEN_INTEREST] = true;\n\n        allowedLimitedBaseKeys[Keys.GLV_MAX_MARKET_TOKEN_BALANCE_USD] = true;\n        allowedLimitedBaseKeys[Keys.GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT] = true;\n\n        allowedLimitedBaseKeys[Keys.PRO_TRADER_TIER] = true;\n    }\n\n    // @dev validate that the baseKey is allowed to be used\n    // @param baseKey the base key to validate\n    function _validateKey(bytes32 baseKey) internal view {\n        if (roleStore.hasRole(msg.sender, Role.CONFIG_KEEPER)) {\n            if (!allowedBaseKeys[baseKey]) {\n                revert Errors.InvalidBaseKey(baseKey);\n            }\n\n            return;\n        }\n\n        if (roleStore.hasRole(msg.sender, Role.LIMITED_CONFIG_KEEPER)) {\n            if (!allowedLimitedBaseKeys[baseKey]) {\n                revert Errors.InvalidBaseKey(baseKey);\n            }\n\n            return;\n        }\n\n        revert Errors.InvalidBaseKey(baseKey);\n    }\n\n    // @dev validate that the value is within the allowed range\n    // @param baseKey the base key for the value\n    // @param value the value to be set\n    function _validateRange(bytes32 baseKey, bytes memory data, uint256 value) internal view {\n        if (\n            baseKey == Keys.SEQUENCER_GRACE_DURATION\n        ) {\n            // 2 hours\n            if (value > 7200) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.MAX_FUNDING_FACTOR_PER_SECOND\n        ) {\n            if (value > MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n\n            bytes32 minFundingFactorPerSecondKey = Keys.getFullKey(Keys.MIN_FUNDING_FACTOR_PER_SECOND, data);\n            uint256 minFundingFactorPerSecond = dataStore.getUint(minFundingFactorPerSecondKey);\n            if (value < minFundingFactorPerSecond) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.MIN_FUNDING_FACTOR_PER_SECOND\n        ) {\n            bytes32 maxFundingFactorPerSecondKey = Keys.getFullKey(Keys.MAX_FUNDING_FACTOR_PER_SECOND, data);\n            uint256 maxFundingFactorPerSecond = dataStore.getUint(maxFundingFactorPerSecondKey);\n            if (value > maxFundingFactorPerSecond) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.FUNDING_INCREASE_FACTOR_PER_SECOND\n        ) {\n            if (value > MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.FUNDING_DECREASE_FACTOR_PER_SECOND\n        ) {\n            if (value > MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.BORROWING_FACTOR ||\n            baseKey == Keys.BASE_BORROWING_FACTOR\n        ) {\n            // 0.000005% per second, ~157% per year at 100% utilization\n            if (value > 50000000000000000000000) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (baseKey == Keys.ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR) {\n            // 0.00001% per second, ~315% per year at 100% utilization\n            if (value > 100000000000000000000000) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.FUNDING_EXPONENT_FACTOR ||\n            baseKey == Keys.BORROWING_EXPONENT_FACTOR\n        ) {\n            // revert if value > 2\n            if (value > 2 * Precision.FLOAT_PRECISION) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.POSITION_IMPACT_EXPONENT_FACTOR ||\n            baseKey == Keys.SWAP_IMPACT_EXPONENT_FACTOR\n        ) {\n            // revert if value > 3\n            if (value > 3 * Precision.FLOAT_PRECISION) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.FUNDING_FACTOR ||\n            baseKey == Keys.BORROWING_FACTOR ||\n            baseKey == Keys.FUNDING_INCREASE_FACTOR_PER_SECOND ||\n            baseKey == Keys.FUNDING_DECREASE_FACTOR_PER_SECOND ||\n            baseKey == Keys.MIN_COLLATERAL_FACTOR\n        ) {\n            // revert if value > 1%\n            if (value > 1 * Precision.FLOAT_PRECISION / 100) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.SWAP_FEE_FACTOR ||\n            baseKey == Keys.DEPOSIT_FEE_FACTOR ||\n            baseKey == Keys.WITHDRAWAL_FEE_FACTOR ||\n            baseKey == Keys.POSITION_FEE_FACTOR ||\n            baseKey == Keys.MAX_UI_FEE_FACTOR ||\n            baseKey == Keys.ATOMIC_SWAP_FEE_FACTOR ||\n            baseKey == Keys.ATOMIC_WITHDRAWAL_FEE_FACTOR ||\n            baseKey == Keys.BUYBACK_MAX_PRICE_IMPACT_FACTOR\n        ) {\n            // revert if value > 5%\n            if (value > 5 * Precision.FLOAT_PRECISION / 100) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (baseKey == Keys.LIQUIDATION_FEE_FACTOR) {\n            // revert if value > 1%\n            if (value > Precision.FLOAT_PRECISION / 100) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (baseKey == Keys.MIN_COLLATERAL_USD) {\n            // revert if value > 10 USD\n            if (value > 10 * Precision.FLOAT_PRECISION) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (\n            baseKey == Keys.POSITION_FEE_RECEIVER_FACTOR ||\n            baseKey == Keys.SWAP_FEE_RECEIVER_FACTOR ||\n            baseKey == Keys.BORROWING_FEE_RECEIVER_FACTOR ||\n            baseKey == Keys.LIQUIDATION_FEE_RECEIVER_FACTOR ||\n            baseKey == Keys.MAX_PNL_FACTOR ||\n            baseKey == Keys.MIN_PNL_FACTOR_AFTER_ADL ||\n            baseKey == Keys.OPTIMAL_USAGE_FACTOR ||\n            baseKey == Keys.PRO_DISCOUNT_FACTOR ||\n            baseKey == Keys.BUYBACK_GMX_FACTOR ||\n            baseKey == Keys.DATA_STREAM_SPREAD_REDUCTION_FACTOR\n        ) {\n            // revert if value > 100%\n            if (value > Precision.FLOAT_PRECISION) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n\n        if (baseKey == Keys.MAX_EXECUTION_FEE_MULTIPLIER_FACTOR) {\n            if (value < Precision.FLOAT_PRECISION * 10 || value > Precision.FLOAT_PRECISION * 100_000) {\n                revert Errors.ConfigValueExceedsAllowedRange(baseKey, value);\n            }\n        }\n    }\n}\n"
    },
    "contracts/config/ConfigSyncer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./Config.sol\";\nimport \"./IRiskOracle.sol\";\nimport \"../feature/FeatureUtils.sol\";\n\n// @title ConfigSyncer\n// @dev Contract to handle market parameter updates\ncontract ConfigSyncer is ReentrancyGuard, RoleModule {\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.BoolItems;\n\n    Config public immutable config;\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n    address public immutable riskOracle;\n\n    // @dev the base keys that can be set\n    mapping(bytes32 => bool) public allowedBaseKeys;\n\n    constructor(\n        RoleStore _roleStore,\n        Config _config,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        address _riskOracle\n    ) RoleModule(_roleStore) {\n        config = _config;\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n        riskOracle = _riskOracle;\n\n        _initAllowedBaseKeys();\n    }\n\n    // @dev Allows the LIMITED_CONFIG_KEEPER to apply updates with the provided markets and parameters\n    // Values for parameters with the following base keys are not currently validated on-chain, they should be\n    // validated off-chain if needed: MIN_FUNDING_FACTOR_PER_SECOND, MAX_POOL_AMOUNT, MAX_POOL_USD_FOR_DEPOSIT,\n    // MAX_OPEN_INTEREST, POSITION_IMPACT_FACTOR, SWAP_IMPACT_FACTOR, RESERVE_FACTOR, OPEN_INTEREST_RESERVE_FACTOR\n    // @param markets An array of market addresses for which updates are to be applied\n    // @param parameters An array of parameters corresponding to each market for which updates are to be applied\n    function sync(\n        address[] calldata markets,\n        string[] calldata parameters\n    ) external onlyLimitedConfigKeeper nonReentrant {\n        FeatureUtils.validateFeature(dataStore, Keys.syncConfigFeatureDisabledKey(address(this)));\n\n        if (markets.length != parameters.length) {\n            revert Errors.SyncConfigInvalidInputLengths(markets.length, parameters.length);\n        }\n\n        uint256 latestUpdateId = dataStore.getUint(Keys.syncConfigLatestUpdateIdKey());\n\n        for (uint256 i; i < markets.length; i++) {\n            address market = markets[i];\n            string memory parameter = parameters[i];\n            bool updateApplied;\n\n            bool syncConfigMarketDisabled = dataStore.getBool(Keys.syncConfigMarketDisabledKey(market));\n            if (syncConfigMarketDisabled) {\n                revert Errors.SyncConfigUpdatesDisabledForMarket(market);\n            }\n\n            bool syncConfigParameterDisabled = dataStore.getBool(Keys.syncConfigParameterDisabledKey(parameter));\n            if (syncConfigParameterDisabled) {\n                revert Errors.SyncConfigUpdatesDisabledForParameter(parameter);\n            }\n\n            bool syncConfigMarketParameterDisabled = dataStore.getBool(\n                Keys.syncConfigMarketParameterDisabledKey(market, parameter)\n            );\n            if (syncConfigMarketParameterDisabled) {\n                revert Errors.SyncConfigUpdatesDisabledForMarketParameter(market, parameter);\n            }\n\n            IRiskOracle.RiskParameterUpdate memory riskParameterUpdate = IRiskOracle(riskOracle)\n                .getLatestUpdateByParameterAndMarket(parameter, market);\n            uint256 updateId = riskParameterUpdate.updateId;\n            (bytes32 baseKey, bytes memory data) = abi.decode(riskParameterUpdate.additionalData, (bytes32, bytes));\n\n            _validateMarketInData(baseKey, market, data);\n\n            _validateKey(baseKey);\n\n            bytes32 fullKey = Keys.getFullKey(baseKey, data);\n            uint256 prevValue = dataStore.getUint(fullKey);\n            uint256 updatedValue = Cast.bytesToUint256(riskParameterUpdate.newValue);\n\n            bool syncConfigUpdateCompleted = dataStore.getBool(Keys.syncConfigUpdateCompletedKey(updateId));\n            if (!syncConfigUpdateCompleted) {\n                config.setUint(baseKey, data, updatedValue);\n                dataStore.setBool(Keys.syncConfigUpdateCompletedKey(updateId), true);\n                updateApplied = true;\n\n                if (updateId > latestUpdateId) {\n                    latestUpdateId = updateId;\n                }\n            }\n\n            EventUtils.EventLogData memory eventData;\n\n            eventData.uintItems.initItems(3);\n            eventData.uintItems.setItem(0, \"updateId\", updateId);\n            eventData.uintItems.setItem(1, \"prevValue\", prevValue);\n            eventData.uintItems.setItem(2, \"nextValue\", updatedValue);\n\n            eventData.boolItems.initItems(1);\n            eventData.boolItems.setItem(0, \"updateApplied\", updateApplied);\n\n            eventEmitter.emitEventLog(\"SyncConfig\", eventData);\n        }\n\n        if (latestUpdateId > dataStore.getUint(Keys.syncConfigLatestUpdateIdKey())) {\n            dataStore.setUint(Keys.syncConfigLatestUpdateIdKey(), latestUpdateId);\n        }\n    }\n\n    // @dev initialize the allowed base keys\n    function _initAllowedBaseKeys() internal {\n        allowedBaseKeys[Keys.MAX_POOL_AMOUNT] = true;\n        allowedBaseKeys[Keys.MAX_POOL_USD_FOR_DEPOSIT] = true;\n        allowedBaseKeys[Keys.MAX_OPEN_INTEREST] = true;\n\n        allowedBaseKeys[Keys.POSITION_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.POSITION_IMPACT_EXPONENT_FACTOR] = true;\n\n        allowedBaseKeys[Keys.SWAP_IMPACT_FACTOR] = true;\n        allowedBaseKeys[Keys.SWAP_IMPACT_EXPONENT_FACTOR] = true;\n\n        allowedBaseKeys[Keys.FUNDING_INCREASE_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.FUNDING_DECREASE_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.MIN_FUNDING_FACTOR_PER_SECOND] = true;\n        allowedBaseKeys[Keys.MAX_FUNDING_FACTOR_PER_SECOND] = true;\n\n        allowedBaseKeys[Keys.OPTIMAL_USAGE_FACTOR] = true;\n        allowedBaseKeys[Keys.BASE_BORROWING_FACTOR] = true;\n        allowedBaseKeys[Keys.ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR] = true;\n        allowedBaseKeys[Keys.BORROWING_FACTOR] = true;\n        allowedBaseKeys[Keys.BORROWING_EXPONENT_FACTOR] = true;\n\n        allowedBaseKeys[Keys.RESERVE_FACTOR] = true;\n        allowedBaseKeys[Keys.OPEN_INTEREST_RESERVE_FACTOR] = true;\n    }\n\n    // @dev validate that the baseKey is allowed to be used\n    // @param baseKey the base key to validate\n    function _validateKey(bytes32 baseKey) internal view {\n        if (!allowedBaseKeys[baseKey]) {\n            revert Errors.InvalidBaseKey(baseKey);\n        }\n    }\n\n    // @dev validate that the market within data is equal to market\n    // With the exception of parameters that use the MAX_PNL_FACTOR base key, this function currently\n    // only supports parameters for which the market address is the first element in the 'data' param\n    // @param baseKey the base key to validate\n    // @param market the market address\n    // @param data the data used to compute fullKey\n    function _validateMarketInData(bytes32 baseKey, address market, bytes memory data) internal pure {\n        address marketFromData;\n        if (baseKey == Keys.MAX_PNL_FACTOR) {\n            (, /* bytes32 extKey */ marketFromData /* bool isLong */, ) = abi.decode(data, (bytes32, address, bool));\n        } else {\n            marketFromData = abi.decode(data, (address));\n        }\n\n        if (market != marketFromData) {\n            revert Errors.SyncConfigInvalidMarketFromData(market, marketFromData);\n        }\n    }\n}\n"
    },
    "contracts/config/IRiskOracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// Using interface for the Chaos Labs Risk Oracle contract so that importing the contract is not necessary\ninterface IRiskOracle {\n    struct RiskParameterUpdate {\n        uint256 timestamp;\n        bytes newValue;\n        string referenceId;\n        bytes previousValue;\n        string updateType;\n        uint256 updateId;\n        address market;\n        bytes additionalData;\n    }\n    function getLatestUpdateByParameterAndMarket(string memory updateType, address market) external view returns (RiskParameterUpdate memory);\n}\n"
    },
    "contracts/config/Timelock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../role/RoleModule.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/BasicMulticall.sol\";\nimport \"../utils/Precision.sol\";\nimport \"../oracle/OracleStore.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../chain/Chain.sol\";\n\n// @title Timelock\ncontract Timelock is ReentrancyGuard, RoleModule, BasicMulticall {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableValues for EnumerableSet.Bytes32Set;\n\n    uint256 public constant MAX_TIMELOCK_DELAY = 5 days;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n    OracleStore public immutable oracleStore;\n    uint256 public timelockDelay;\n\n    mapping (bytes32 => uint256) public pendingActions;\n    EnumerableSet.Bytes32Set internal pendingActionsList;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        OracleStore _oracleStore,\n        uint256 _timelockDelay\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n        oracleStore = _oracleStore;\n        timelockDelay = _timelockDelay;\n\n        _validateTimelockDelay();\n    }\n\n    function getPendingActionsCount() internal view returns (uint256) {\n        return pendingActionsList.length();\n    }\n\n    function getPendingActionsList(uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return pendingActionsList.valuesAt(start, end);\n    }\n\n    // @dev immediately revoke the role of an account\n    // @param account the account to revoke the role for\n    // @param roleKey the role to revoke\n    function revokeRole(address account, bytes32 roleKey) external onlyTimelockMultisig nonReentrant {\n        roleStore.revokeRole(account, roleKey);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"roleKey\", roleKey);\n        eventEmitter.emitEventLog(\n            \"RevokeRole\",\n            eventData\n        );\n    }\n\n    // @dev increase the timelock delay\n    // @param the new timelock delay\n    function increaseTimelockDelay(uint256 _timelockDelay) external onlyTimelockAdmin nonReentrant {\n        if (_timelockDelay <= timelockDelay) {\n            revert Errors.InvalidTimelockDelay(_timelockDelay);\n        }\n\n        timelockDelay = _timelockDelay;\n\n        _validateTimelockDelay();\n\n        EventUtils.EventLogData memory eventData;\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"_timelockDelay\", _timelockDelay);\n        eventEmitter.emitEventLog(\n            \"IncreaseTimelockDelay\",\n            eventData\n        );\n    }\n\n    function setOracleProviderEnabled(address provider, bool value) external onlyTimelockMultisig nonReentrant {\n        dataStore.setBool(Keys.isOracleProviderEnabledKey(provider), value);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"provider\", provider);\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"value\", value);\n        eventEmitter.emitEventLog(\n            \"SetOracleProviderEnabled\",\n            eventData\n        );\n    }\n\n    function signalSetOracleProviderForToken(address token, address provider) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setOracleProviderForTokenKey(token, provider);\n        _signalPendingAction(actionKey, \"setOracleProviderForToken\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"provider\", provider);\n        eventEmitter.emitEventLog(\n            \"SignalSetOracleProviderForToken\",\n            eventData\n        );\n    }\n\n    function setOracleProviderForTokenAfterSignal(address token, address provider) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setOracleProviderForTokenKey(token, provider);\n        _validateAndClearAction(actionKey, \"setOracleProviderForToken\");\n\n        dataStore.setAddress(Keys.oracleProviderForTokenKey(token), provider);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"provider\", provider);\n        eventEmitter.emitEventLog(\n            \"SetOracleProviderForToken\",\n            eventData\n        );\n    }\n\n    function signalSetOracleProviderEnabled(address provider, bool value) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setOracleProviderEnabledKey(provider, value);\n        _signalPendingAction(actionKey, \"setOracleProviderEnabled\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"provider\", provider);\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"value\", value);\n        eventEmitter.emitEventLog(\n            \"SignalSetOracleProviderEnabled\",\n            eventData\n        );\n    }\n\n    function setOracleProviderEnabledAfterSignal(address provider, bool value) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setOracleProviderEnabledKey(provider, value);\n        _validateAndClearAction(actionKey, \"setOracleProviderEnabled\");\n\n        dataStore.setBool(Keys.isOracleProviderEnabledKey(provider), value);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"provider\", provider);\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"value\", value);\n        eventEmitter.emitEventLog(\n            \"SetOracleProviderEnabled\",\n            eventData\n        );\n    }\n\n    function signalSetAtomicOracleProvider(address provider, bool value) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setAtomicOracleProviderKey(provider, value);\n        _signalPendingAction(actionKey, \"setAtomicOracleProvider\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"provider\", provider);\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"value\", value);\n        eventEmitter.emitEventLog(\n            \"SignalSetAtomicOracleProvider\",\n            eventData\n        );\n    }\n\n    function setAtomicOracleProviderAfterSignal(address provider, bool value) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setAtomicOracleProviderKey(provider, value);\n        _validateAndClearAction(actionKey, \"setAtomicOracleProvider\");\n\n        dataStore.setBool(Keys.isAtomicOracleProviderKey(provider), value);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"provider\", provider);\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"value\", value);\n        eventEmitter.emitEventLog(\n            \"SetAtomicOracleProvider\",\n            eventData\n        );\n    }\n\n    function signalAddOracleSigner(address account) external onlyTimelockAdmin nonReentrant {\n        if (account == address(0)) {\n            revert Errors.InvalidOracleSigner(account);\n        }\n\n        bytes32 actionKey = _addOracleSignerActionKey(account);\n        _signalPendingAction(actionKey, \"addOracleSigner\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventEmitter.emitEventLog1(\n            \"SignalAddOracleSigner\",\n            actionKey,\n            eventData\n        );\n    }\n\n    function addOracleSignerAfterSignal(address account) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _addOracleSignerActionKey(account);\n        _validateAndClearAction(actionKey, \"addOracleSigner\");\n\n        oracleStore.addSigner(account);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventEmitter.emitEventLog1(\n            \"AddOracleSigner\",\n            actionKey,\n            eventData\n        );\n    }\n\n    function signalRemoveOracleSigner(address account) external onlyTimelockAdmin nonReentrant {\n        if (account == address(0)) {\n            revert Errors.InvalidOracleSigner(account);\n        }\n\n        bytes32 actionKey = _removeOracleSignerActionKey(account);\n        _signalPendingAction(actionKey, \"removeOracleSigner\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventEmitter.emitEventLog1(\n            \"SignalRemoveOracleSigner\",\n            actionKey,\n            eventData\n        );\n    }\n\n    function removeOracleSignerAfterSignal(address account) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _removeOracleSignerActionKey(account);\n        _validateAndClearAction(actionKey, \"removeOracleSigner\");\n\n        oracleStore.removeSigner(account);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventEmitter.emitEventLog1(\n            \"RemoveOracleSigner\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev signal setting of the fee receiver\n    // @param account the new fee receiver\n    function signalSetFeeReceiver(address account) external onlyTimelockAdmin nonReentrant {\n        if (account == address(0)) {\n            revert Errors.InvalidFeeReceiver(account);\n        }\n\n        bytes32 actionKey = _setFeeReceiverActionKey(account);\n        _signalPendingAction(actionKey, \"setFeeReceiver\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventEmitter.emitEventLog1(\n            \"SignalSetFeeReceiver\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev set the fee receiver\n    // @param account the new fee receiver\n    function setFeeReceiverAfterSignal(address account) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setFeeReceiverActionKey(account);\n        _validateAndClearAction(actionKey, \"setFeeReceiver\");\n\n        dataStore.setAddress(Keys.FEE_RECEIVER, account);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventEmitter.emitEventLog1(\n            \"SetFeeReceiver\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev signal granting of a role\n    // @param account the account to grant the role\n    // @param roleKey the role to grant\n    function signalGrantRole(address account, bytes32 roleKey) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _grantRoleActionKey(account, roleKey);\n        _signalPendingAction(actionKey, \"grantRole\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"roleKey\", roleKey);\n        eventEmitter.emitEventLog1(\n            \"SignalGrantRole\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev grant a role\n    // @param account the account to grant the role\n    // @param roleKey the role to grant\n    function grantRoleAfterSignal(address account, bytes32 roleKey) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _grantRoleActionKey(account, roleKey);\n        _validateAndClearAction(actionKey, \"grantRole\");\n\n        roleStore.grantRole(account, roleKey);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"roleKey\", roleKey);\n        eventEmitter.emitEventLog1(\n            \"GrantRole\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev signal revoking of a role\n    // @param account the account to revoke the role for\n    // @param roleKey the role to revoke\n    function signalRevokeRole(address account, bytes32 roleKey) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _revokeRoleActionKey(account, roleKey);\n        _signalPendingAction(actionKey, \"revokeRole\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"roleKey\", roleKey);\n        eventEmitter.emitEventLog1(\n            \"SignalRevokeRole\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev revoke a role\n    // @param account the account to revoke the role for\n    // @param roleKey the role to revoke\n    function revokeRoleAfterSignal(address account, bytes32 roleKey) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _revokeRoleActionKey(account, roleKey);\n        _validateAndClearAction(actionKey, \"revokeRole\");\n\n        roleStore.revokeRole(account, roleKey);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"roleKey\", roleKey);\n        eventEmitter.emitEventLog1(\n            \"RevokeRole\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev signal setting of a price feed\n    // @param token the token to set the price feed for\n    // @param priceFeed the address of the price feed\n    // @param priceFeedMultiplier the multiplier to apply to the price feed results\n    // @param stablePrice the stable price to set a range for the price feed results\n    function signalSetPriceFeed(\n        address token,\n        address priceFeed,\n        uint256 priceFeedMultiplier,\n        uint256 priceFeedHeartbeatDuration,\n        uint256 stablePrice\n    ) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setPriceFeedActionKey(\n            token,\n            priceFeed,\n            priceFeedMultiplier,\n            priceFeedHeartbeatDuration,\n            stablePrice\n        );\n\n        _signalPendingAction(actionKey, \"setPriceFeed\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"priceFeed\", priceFeed);\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"priceFeedMultiplier\", priceFeedMultiplier);\n        eventData.uintItems.setItem(1, \"priceFeedHeartbeatDuration\", priceFeedHeartbeatDuration);\n        eventData.uintItems.setItem(2, \"stablePrice\", stablePrice);\n        eventEmitter.emitEventLog1(\n            \"SignalSetPriceFeed\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev sets a price feed\n    // @param token the token to set the price feed for\n    // @param priceFeed the address of the price feed\n    // @param priceFeedMultiplier the multiplier to apply to the price feed results\n    // @param stablePrice the stable price to set a range for the price feed results\n    function setPriceFeedAfterSignal(\n        address token,\n        address priceFeed,\n        uint256 priceFeedMultiplier,\n        uint256 priceFeedHeartbeatDuration,\n        uint256 stablePrice\n    ) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setPriceFeedActionKey(\n            token,\n            priceFeed,\n            priceFeedMultiplier,\n            priceFeedHeartbeatDuration,\n            stablePrice\n        );\n\n        _validateAndClearAction(actionKey, \"setPriceFeed\");\n\n        dataStore.setAddress(Keys.priceFeedKey(token), priceFeed);\n        dataStore.setUint(Keys.priceFeedMultiplierKey(token), priceFeedMultiplier);\n        dataStore.setUint(Keys.priceFeedHeartbeatDurationKey(token), priceFeedHeartbeatDuration);\n        dataStore.setUint(Keys.stablePriceKey(token), stablePrice);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"priceFeed\", priceFeed);\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"priceFeedMultiplier\", priceFeedMultiplier);\n        eventData.uintItems.setItem(1, \"priceFeedHeartbeatDuration\", priceFeedHeartbeatDuration);\n        eventData.uintItems.setItem(2, \"stablePrice\", stablePrice);\n        eventEmitter.emitEventLog1(\n            \"SetPriceFeed\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev signal setting of a data stream feed\n    // @param token the token to set the data stream feed for\n    // @param feedId the ID of the data stream feed\n    // @param dataStreamMultiplier the multiplier to apply to the data stream feed results\n    // @param dataStreamSpreadReductionFactor the factor to apply to the data stream price spread\n    function signalSetDataStream(\n        address token,\n        bytes32 feedId,\n        uint256 dataStreamMultiplier,\n        uint256 dataStreamSpreadReductionFactor\n    ) external onlyTimelockAdmin nonReentrant {\n        if (dataStreamSpreadReductionFactor > Precision.FLOAT_PRECISION) {\n            revert Errors.ConfigValueExceedsAllowedRange(Keys.DATA_STREAM_SPREAD_REDUCTION_FACTOR, dataStreamSpreadReductionFactor);\n        }\n\n        bytes32 actionKey = _setDataStreamActionKey(\n            token,\n            feedId,\n            dataStreamMultiplier,\n            dataStreamSpreadReductionFactor\n        );\n\n        _signalPendingAction(actionKey, \"setDataStream\");\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"feedId\", feedId);\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"dataStreamMultiplier\", dataStreamMultiplier);\n        eventData.uintItems.setItem(1, \"dataStreamSpreadReductionFactor\", dataStreamSpreadReductionFactor);\n        eventEmitter.emitEventLog1(\n            \"SignalSetDataStream\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev sets a data stream feed\n    // @param token the token to set the data stream feed for\n    // @param feedId the ID of the data stream feed\n    // @param dataStreamMultiplier the multiplier to apply to the data stream feed results\n    // @param dataStreamMultiplier the factor to apply to the data stream price spread\n    function setDataStreamAfterSignal(\n        address token,\n        bytes32 feedId,\n        uint256 dataStreamMultiplier,\n        uint256 dataStreamSpreadReductionFactor\n    ) external onlyTimelockAdmin nonReentrant {\n        bytes32 actionKey = _setDataStreamActionKey(\n            token,\n            feedId,\n            dataStreamMultiplier,\n            dataStreamSpreadReductionFactor\n        );\n\n        _validateAndClearAction(actionKey, \"setDataStream\");\n\n        dataStore.setBytes32(Keys.dataStreamIdKey(token), feedId);\n        dataStore.setUint(Keys.dataStreamMultiplierKey(token), dataStreamMultiplier);\n        dataStore.setUint(Keys.dataStreamSpreadReductionFactorKey(token), dataStreamSpreadReductionFactor);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"feedId\", feedId);\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"dataStreamMultiplier\", dataStreamMultiplier);\n        eventData.uintItems.setItem(1, \"dataStreamSpreadReductionFactor\", dataStreamSpreadReductionFactor);\n        eventEmitter.emitEventLog1(\n            \"SetDataStream\",\n            actionKey,\n            eventData\n        );\n    }\n\n    // @dev cancels a previously signalled pending action\n    // @param actionKey the key of the action to cancel\n    function cancelAction(bytes32 actionKey) external onlyTimelockAdmin nonReentrant {\n        _clearAction(actionKey, \"cancelAction\");\n    }\n\n    // @dev signal a pending action\n    // @param actionKey the key of the action\n    // @param actionLabel a label for the action\n    function _signalPendingAction(bytes32 actionKey, string memory actionLabel) internal {\n        if (pendingActions[actionKey] != 0) {\n            revert Errors.ActionAlreadySignalled();\n        }\n\n        pendingActions[actionKey] = Chain.currentTimestamp() + timelockDelay;\n        pendingActionsList.add(actionKey);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"actionKey\", actionKey);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"actionLabel\", actionLabel);\n\n        eventEmitter.emitEventLog1(\n            \"SignalPendingAction\",\n            actionKey,\n            eventData\n        );\n    }\n\n    function _setOracleProviderForTokenKey(address token, address provider) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"setOracleProviderForToken\", token, provider));\n    }\n\n    function _setOracleProviderEnabledKey(address provider, bool value) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"setOracleProviderEnabled\", provider, value));\n    }\n\n    function _setAtomicOracleProviderKey(address provider, bool value) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"setAtomicOracleProvider\", provider, value));\n    }\n\n    function _addOracleSignerActionKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"addOracleSigner\", account));\n    }\n\n    function _removeOracleSignerActionKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"removeOracleSigner\", account));\n    }\n\n    function _setFeeReceiverActionKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"setFeeReceiver\", account));\n    }\n\n    function _grantRoleActionKey(address account, bytes32 roleKey) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"grantRole\", account, roleKey));\n    }\n\n    function _revokeRoleActionKey(address account, bytes32 roleKey) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"revokeRole\", account, roleKey));\n    }\n\n    function _setPriceFeedActionKey(\n        address token,\n        address priceFeed,\n        uint256 priceFeedMultiplier,\n        uint256 priceFeedHeartbeatDuration,\n        uint256 stablePrice\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\n            \"setPriceFeed\",\n            token,\n            priceFeed,\n            priceFeedMultiplier,\n            priceFeedHeartbeatDuration,\n            stablePrice\n        ));\n    }\n\n    function _setDataStreamActionKey(\n        address token,\n        bytes32 feedId,\n        uint256 dataStreamMultiplier,\n        uint256 dataStreamSpreadReductionFactor\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\n            \"setDataStream\",\n            token,\n            feedId,\n            dataStreamMultiplier,\n            dataStreamSpreadReductionFactor\n        ));\n    }\n\n    // @dev validate that the action has been signalled and sufficient time has\n    // passed, clear the action after\n    function _validateAndClearAction(bytes32 actionKey, string memory actionLabel) internal {\n        _validateAction(actionKey);\n        _clearAction(actionKey, actionLabel);\n    }\n\n    // @dev validate that the action has been signalled and sufficient time has passed\n    function _validateAction(bytes32 actionKey) internal view {\n        if (pendingActions[actionKey] == 0) {\n            revert Errors.ActionNotSignalled();\n        }\n\n        if (pendingActions[actionKey] > Chain.currentTimestamp()) {\n            revert Errors.SignalTimeNotYetPassed(pendingActions[actionKey]);\n        }\n    }\n\n    // @dev clear a previously signalled action\n    function _clearAction(bytes32 actionKey, string memory actionLabel) internal {\n        if (pendingActions[actionKey] == 0) {\n            revert Errors.ActionNotSignalled();\n        }\n        delete pendingActions[actionKey];\n        pendingActionsList.remove(actionKey);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"actionKey\", actionKey);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"actionLabel\", actionLabel);\n\n        eventEmitter.emitEventLog1(\n            \"ClearPendingAction\",\n            actionKey,\n            eventData\n        );\n    }\n\n    function _validateTimelockDelay() internal view {\n        if (timelockDelay > MAX_TIMELOCK_DELAY) {\n            revert Errors.MaxTimelockDelayExceeded(timelockDelay);\n        }\n    }\n}\n"
    },
    "contracts/contributor/ContributorHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../role/RoleModule.sol\";\n\nimport \"../chain/Chain.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/BasicMulticall.sol\";\nimport \"../utils/Cast.sol\";\n\n// @title ContributorHandler\ncontract ContributorHandler is ReentrancyGuard, RoleModule, BasicMulticall {\n    using SafeERC20 for IERC20;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n    }\n\n    // note that since there will be account * token number of iterations in some functions\n    // and that the CONTRIBUTOR_ACCOUNT_LIST and CONTRIBUTOR_TOKEN_LIST will be loaded entirely\n    // into memory\n    // care should be taken to not have too many accounts / tokens such that the block gas limit\n    // or other execution limits is exceeded\n    function addContributorAccount(address account) external nonReentrant onlyContributorKeeper {\n        dataStore.addAddress(Keys.CONTRIBUTOR_ACCOUNT_LIST, account);\n    }\n\n    function removeContributorAccount(address account) external nonReentrant onlyContributorKeeper {\n        dataStore.removeAddress(Keys.CONTRIBUTOR_ACCOUNT_LIST, account);\n    }\n\n    function addContributorToken(address token) external nonReentrant onlyContributorKeeper {\n        dataStore.addAddress(Keys.CONTRIBUTOR_TOKEN_LIST, token);\n    }\n\n    function removeContributorToken(address token) external nonReentrant onlyContributorKeeper {\n        dataStore.removeAddress(Keys.CONTRIBUTOR_TOKEN_LIST, token);\n    }\n\n    function setContributorTokenVault(address token, address vault) external nonReentrant onlyConfigKeeper {\n        dataStore.setAddress(Keys.contributorTokenVaultKey(token), vault);\n    }\n\n    function setMinContributorPaymentInterval(uint256 interval) external nonReentrant onlyTimelockMultisig {\n        // revert if < 20 days\n        if (interval < 20 days) {\n            revert Errors.MinContributorPaymentIntervalBelowAllowedRange(interval);\n        }\n\n        dataStore.setUint(Keys.MIN_CONTRIBUTOR_PAYMENT_INTERVAL, interval);\n    }\n\n    function setMaxTotalContributorTokenAmount(\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external nonReentrant onlyTimelockMultisig {\n        if (tokens.length != amounts.length) {\n            revert Errors.InvalidSetMaxTotalContributorTokenAmountInput(tokens.length, amounts.length);\n        }\n\n        for (uint256 i; i < tokens.length; i++) {\n            dataStore.setUint(Keys.maxTotalContributorTokenAmountKey(tokens[i]), amounts[i]);\n        }\n    }\n\n    function sendPayments() external nonReentrant onlyContributorDistributor {\n        uint256 lastPaymentAt = dataStore.getUint(Keys.CONTRIBUTOR_LAST_PAYMENT_AT);\n        uint256 minPaymentInterval = dataStore.getUint(Keys.MIN_CONTRIBUTOR_PAYMENT_INTERVAL);\n\n        if (lastPaymentAt + minPaymentInterval > Chain.currentTimestamp()) {\n            revert Errors.MinContributorPaymentIntervalNotYetPassed(minPaymentInterval);\n        }\n\n        uint256 tokenCount = dataStore.getAddressCount(Keys.CONTRIBUTOR_TOKEN_LIST);\n        uint256 accountCount = dataStore.getAddressCount(Keys.CONTRIBUTOR_ACCOUNT_LIST);\n\n        address[] memory tokens = dataStore.getAddressValuesAt(Keys.CONTRIBUTOR_TOKEN_LIST, 0, tokenCount);\n        address[] memory accounts = dataStore.getAddressValuesAt(Keys.CONTRIBUTOR_ACCOUNT_LIST, 0, accountCount);\n\n        for (uint256 i; i < tokenCount; i++) {\n            address token = tokens[i];\n            address vault = dataStore.getAddress(Keys.contributorTokenVaultKey(token));\n\n            for (uint256 j; j < accountCount; j++) {\n                address account = accounts[j];\n                uint256 amount = dataStore.getUint(Keys.contributorTokenAmountKey(account, token));\n\n                IERC20(token).safeTransferFrom(vault, account, amount);\n\n                EventUtils.EventLogData memory eventData;\n                eventData.addressItems.initItems(2);\n                eventData.addressItems.setItem(0, \"account\", account);\n                eventData.addressItems.setItem(1, \"token\", token);\n                eventData.uintItems.initItems(1);\n                eventData.uintItems.setItem(0, \"amount\", amount);\n                eventEmitter.emitEventLog1(\n                    \"SendContributorPayment\",\n                    Cast.toBytes32(account),\n                    eventData\n                );\n            }\n        }\n\n        dataStore.setUint(Keys.CONTRIBUTOR_LAST_PAYMENT_AT, Chain.currentTimestamp());\n    }\n\n    function setContributorAmount(\n        address account,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external nonReentrant onlyContributorKeeper {\n        if (tokens.length != amounts.length) {\n            revert Errors.InvalidSetContributorPaymentInput(tokens.length, amounts.length);\n        }\n\n        for (uint256 i; i < tokens.length; i++) {\n            address token = tokens[i];\n            if (!dataStore.containsAddress(Keys.CONTRIBUTOR_TOKEN_LIST, token)) {\n                revert Errors.InvalidContributorToken(token);\n            }\n\n            uint256 amount = amounts[i];\n            dataStore.setUint(Keys.contributorTokenAmountKey(account, token), amount);\n\n            EventUtils.EventLogData memory eventData;\n            eventData.addressItems.initItems(2);\n            eventData.addressItems.setItem(0, \"account\", account);\n            eventData.addressItems.setItem(1, \"token\", token);\n            eventData.uintItems.initItems(1);\n            eventData.uintItems.setItem(0, \"amount\", amount);\n            eventEmitter.emitEventLog1(\n                \"SetContributorAmount\",\n                Cast.toBytes32(account),\n                eventData\n            );\n        }\n\n        _validateMaxContributorTokenAmounts();\n    }\n\n    // note that this is just a sanity validation since the maxTotalContributorTokenAmount\n    // can technically be exceeded since can be separately updated in Config\n    function _validateMaxContributorTokenAmounts() internal view {\n        uint256 tokenCount = dataStore.getAddressCount(Keys.CONTRIBUTOR_TOKEN_LIST);\n        uint256 accountCount = dataStore.getAddressCount(Keys.CONTRIBUTOR_ACCOUNT_LIST);\n\n        address[] memory tokens = dataStore.getAddressValuesAt(Keys.CONTRIBUTOR_TOKEN_LIST, 0, tokenCount);\n        address[] memory accounts = dataStore.getAddressValuesAt(Keys.CONTRIBUTOR_ACCOUNT_LIST, 0, accountCount);\n\n        for (uint256 i; i < tokenCount; i++) {\n            address token = tokens[i];\n            uint256 totalAmount;\n\n            for (uint256 j; j < accountCount; j++) {\n                address account = accounts[j];\n                uint256 amount = dataStore.getUint(Keys.contributorTokenAmountKey(account, token));\n                totalAmount += amount;\n            }\n\n            uint256 maxTotalAmount = dataStore.getUint(Keys.maxTotalContributorTokenAmountKey(token));\n            if (totalAmount > maxTotalAmount) {\n                revert Errors.MaxTotalContributorTokenAmountExceeded(token, totalAmount, maxTotalAmount);\n            }\n        }\n    }\n}\n"
    },
    "contracts/data/DataStore.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../role/RoleModule.sol\";\nimport \"../utils/Calc.sol\";\n\n// @title DataStore\n// @dev DataStore for all general state values\ncontract DataStore is RoleModule {\n    using SafeCast for int256;\n\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableValues for EnumerableSet.Bytes32Set;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.UintSet;\n\n    // store for uint values\n    mapping(bytes32 => uint256) public uintValues;\n    // store for int values\n    mapping(bytes32 => int256) public intValues;\n    // store for address values\n    mapping(bytes32 => address) public addressValues;\n    // store for bool values\n    mapping(bytes32 => bool) public boolValues;\n    // store for string values\n    mapping(bytes32 => string) public stringValues;\n    // store for bytes32 values\n    mapping(bytes32 => bytes32) public bytes32Values;\n\n    // store for uint[] values\n    mapping(bytes32 => uint256[]) public uintArrayValues;\n    // store for int[] values\n    mapping(bytes32 => int256[]) public intArrayValues;\n    // store for address[] values\n    mapping(bytes32 => address[]) public addressArrayValues;\n    // store for bool[] values\n    mapping(bytes32 => bool[]) public boolArrayValues;\n    // store for string[] values\n    mapping(bytes32 => string[]) public stringArrayValues;\n    // store for bytes32[] values\n    mapping(bytes32 => bytes32[]) public bytes32ArrayValues;\n\n    // store for bytes32 sets\n    mapping(bytes32 => EnumerableSet.Bytes32Set) internal bytes32Sets;\n    // store for address sets\n    mapping(bytes32 => EnumerableSet.AddressSet) internal addressSets;\n    // store for uint256 sets\n    mapping(bytes32 => EnumerableSet.UintSet) internal uintSets;\n\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\n\n    // @dev get the uint value for the given key\n    // @param key the key of the value\n    // @return the uint value for the key\n    function getUint(bytes32 key) external view returns (uint256) {\n        return uintValues[key];\n    }\n\n    // @dev set the uint value for the given key\n    // @param key the key of the value\n    // @param value the value to set\n    // @return the uint value for the key\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\n        uintValues[key] = value;\n        return value;\n    }\n\n    // @dev delete the uint value for the given key\n    // @param key the key of the value\n    function removeUint(bytes32 key) external onlyController {\n        delete uintValues[key];\n    }\n\n    // @dev add the input int value to the existing uint value\n    // @param key the key of the value\n    // @param value the input int value\n    // @return the new uint value\n    function applyDeltaToUint(bytes32 key, int256 value, string memory errorMessage) external onlyController returns (uint256) {\n        uint256 currValue = uintValues[key];\n        if (value < 0 && (-value).toUint256() > currValue) {\n            revert(errorMessage);\n        }\n        uint256 nextUint = Calc.sumReturnUint256(currValue, value);\n        uintValues[key] = nextUint;\n        return nextUint;\n    }\n\n    // @dev add the input uint value to the existing uint value\n    // @param key the key of the value\n    // @param value the input int value\n    // @return the new uint value\n    function applyDeltaToUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\n        uint256 currValue = uintValues[key];\n        uint256 nextUint = currValue + value;\n        uintValues[key] = nextUint;\n        return nextUint;\n    }\n\n    // @dev add the input int value to the existing uint value, prevent the uint\n    // value from becoming negative\n    // @param key the key of the value\n    // @param value the input int value\n    // @return the new uint value\n    function applyBoundedDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\n        uint256 uintValue = uintValues[key];\n        if (value < 0 && (-value).toUint256() > uintValue) {\n            uintValues[key] = 0;\n            return 0;\n        }\n\n        uint256 nextUint = Calc.sumReturnUint256(uintValue, value);\n        uintValues[key] = nextUint;\n        return nextUint;\n    }\n\n    // @dev add the input uint value to the existing uint value\n    // @param key the key of the value\n    // @param value the input uint value\n    // @return the new uint value\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\n        uint256 nextUint = uintValues[key] + value;\n        uintValues[key] = nextUint;\n        return nextUint;\n    }\n\n    // @dev subtract the input uint value from the existing uint value\n    // @param key the key of the value\n    // @param value the input uint value\n    // @return the new uint value\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\n        uint256 nextUint = uintValues[key] - value;\n        uintValues[key] = nextUint;\n        return nextUint;\n    }\n\n    // @dev get the int value for the given key\n    // @param key the key of the value\n    // @return the int value for the key\n    function getInt(bytes32 key) external view returns (int256) {\n        return intValues[key];\n    }\n\n    // @dev set the int value for the given key\n    // @param key the key of the value\n    // @param value the value to set\n    // @return the int value for the key\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\n        intValues[key] = value;\n        return value;\n    }\n\n    function removeInt(bytes32 key) external onlyController {\n        delete intValues[key];\n    }\n\n    // @dev add the input int value to the existing int value\n    // @param key the key of the value\n    // @param value the input int value\n    // @return the new int value\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\n        int256 nextInt = intValues[key] + value;\n        intValues[key] = nextInt;\n        return nextInt;\n    }\n\n    // @dev add the input int value to the existing int value\n    // @param key the key of the value\n    // @param value the input int value\n    // @return the new int value\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\n        int256 nextInt = intValues[key] + value;\n        intValues[key] = nextInt;\n        return nextInt;\n    }\n\n    // @dev subtract the input int value from the existing int value\n    // @param key the key of the value\n    // @param value the input int value\n    // @return the new int value\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\n        int256 nextInt = intValues[key] - value;\n        intValues[key] = nextInt;\n        return nextInt;\n    }\n\n    // @dev get the address value for the given key\n    // @param key the key of the value\n    // @return the address value for the key\n    function getAddress(bytes32 key) external view returns (address) {\n        return addressValues[key];\n    }\n\n    // @dev set the address value for the given key\n    // @param key the key of the value\n    // @param value the value to set\n    // @return the address value for the key\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\n        addressValues[key] = value;\n        return value;\n    }\n\n    // @dev delete the address value for the given key\n    // @param key the key of the value\n    function removeAddress(bytes32 key) external onlyController {\n        delete addressValues[key];\n    }\n\n    // @dev get the bool value for the given key\n    // @param key the key of the value\n    // @return the bool value for the key\n    function getBool(bytes32 key) external view returns (bool) {\n        return boolValues[key];\n    }\n\n    // @dev set the bool value for the given key\n    // @param key the key of the value\n    // @param value the value to set\n    // @return the bool value for the key\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\n        boolValues[key] = value;\n        return value;\n    }\n\n    // @dev delete the bool value for the given key\n    // @param key the key of the value\n    function removeBool(bytes32 key) external onlyController {\n        delete boolValues[key];\n    }\n\n    // @dev get the string value for the given key\n    // @param key the key of the value\n    // @return the string value for the key\n    function getString(bytes32 key) external view returns (string memory) {\n        return stringValues[key];\n    }\n\n    // @dev set the string value for the given key\n    // @param key the key of the value\n    // @param value the value to set\n    // @return the string value for the key\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\n        stringValues[key] = value;\n        return value;\n    }\n\n    // @dev delete the string value for the given key\n    // @param key the key of the value\n    function removeString(bytes32 key) external onlyController {\n        delete stringValues[key];\n    }\n\n    // @dev get the bytes32 value for the given key\n    // @param key the key of the value\n    // @return the bytes32 value for the key\n    function getBytes32(bytes32 key) external view returns (bytes32) {\n        return bytes32Values[key];\n    }\n\n    // @dev set the bytes32 value for the given key\n    // @param key the key of the value\n    // @param value the value to set\n    // @return the bytes32 value for the key\n    function setBytes32(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\n        bytes32Values[key] = value;\n        return value;\n    }\n\n    // @dev delete the bytes32 value for the given key\n    // @param key the key of the value\n    function removeBytes32(bytes32 key) external onlyController {\n        delete bytes32Values[key];\n    }\n\n    // @dev get the uint array for the given key\n    // @param key the key of the uint array\n    // @return the uint array for the key\n    function getUintArray(bytes32 key) external view returns (uint256[] memory) {\n        return uintArrayValues[key];\n    }\n\n    // @dev set the uint array for the given key\n    // @param key the key of the uint array\n    // @param value the value of the uint array\n    function setUintArray(bytes32 key, uint256[] memory value) external onlyController {\n        uintArrayValues[key] = value;\n    }\n\n    // @dev delete the uint array for the given key\n    // @param key the key of the uint array\n    // @param value the value of the uint array\n    function removeUintArray(bytes32 key) external onlyController {\n        delete uintArrayValues[key];\n    }\n\n    // @dev get the int array for the given key\n    // @param key the key of the int array\n    // @return the int array for the key\n    function getIntArray(bytes32 key) external view returns (int256[] memory) {\n        return intArrayValues[key];\n    }\n\n    // @dev set the int array for the given key\n    // @param key the key of the int array\n    // @param value the value of the int array\n    function setIntArray(bytes32 key, int256[] memory value) external onlyController {\n        intArrayValues[key] = value;\n    }\n\n    // @dev delete the int array for the given key\n    // @param key the key of the int array\n    // @param value the value of the int array\n    function removeIntArray(bytes32 key) external onlyController {\n        delete intArrayValues[key];\n    }\n\n    // @dev get the address array for the given key\n    // @param key the key of the address array\n    // @return the address array for the key\n    function getAddressArray(bytes32 key) external view returns (address[] memory) {\n        return addressArrayValues[key];\n    }\n\n    // @dev set the address array for the given key\n    // @param key the key of the address array\n    // @param value the value of the address array\n    function setAddressArray(bytes32 key, address[] memory value) external onlyController {\n        addressArrayValues[key] = value;\n    }\n\n    // @dev delete the address array for the given key\n    // @param key the key of the address array\n    // @param value the value of the address array\n    function removeAddressArray(bytes32 key) external onlyController {\n        delete addressArrayValues[key];\n    }\n\n    // @dev get the bool array for the given key\n    // @param key the key of the bool array\n    // @return the bool array for the key\n    function getBoolArray(bytes32 key) external view returns (bool[] memory) {\n        return boolArrayValues[key];\n    }\n\n    // @dev set the bool array for the given key\n    // @param key the key of the bool array\n    // @param value the value of the bool array\n    function setBoolArray(bytes32 key, bool[] memory value) external onlyController {\n        boolArrayValues[key] = value;\n    }\n\n    // @dev delete the bool array for the given key\n    // @param key the key of the bool array\n    // @param value the value of the bool array\n    function removeBoolArray(bytes32 key) external onlyController {\n        delete boolArrayValues[key];\n    }\n\n    // @dev get the string array for the given key\n    // @param key the key of the string array\n    // @return the string array for the key\n    function getStringArray(bytes32 key) external view returns (string[] memory) {\n        return stringArrayValues[key];\n    }\n\n    // @dev set the string array for the given key\n    // @param key the key of the string array\n    // @param value the value of the string array\n    function setStringArray(bytes32 key, string[] memory value) external onlyController {\n        stringArrayValues[key] = value;\n    }\n\n    // @dev delete the string array for the given key\n    // @param key the key of the string array\n    // @param value the value of the string array\n    function removeStringArray(bytes32 key) external onlyController {\n        delete stringArrayValues[key];\n    }\n\n    // @dev get the bytes32 array for the given key\n    // @param key the key of the bytes32 array\n    // @return the bytes32 array for the key\n    function getBytes32Array(bytes32 key) external view returns (bytes32[] memory) {\n        return bytes32ArrayValues[key];\n    }\n\n    // @dev set the bytes32 array for the given key\n    // @param key the key of the bytes32 array\n    // @param value the value of the bytes32 array\n    function setBytes32Array(bytes32 key, bytes32[] memory value) external onlyController {\n        bytes32ArrayValues[key] = value;\n    }\n\n    // @dev delete the bytes32 array for the given key\n    // @param key the key of the bytes32 array\n    // @param value the value of the bytes32 array\n    function removeBytes32Array(bytes32 key) external onlyController {\n        delete bytes32ArrayValues[key];\n    }\n\n    // @dev check whether the given value exists in the set\n    // @param setKey the key of the set\n    // @param value the value to check\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool) {\n        return bytes32Sets[setKey].contains(value);\n    }\n\n    // @dev get the length of the set\n    // @param setKey the key of the set\n    function getBytes32Count(bytes32 setKey) external view returns (uint256) {\n        return bytes32Sets[setKey].length();\n    }\n\n    // @dev get the values of the set in the given range\n    // @param setKey the key of the set\n    // @param the start of the range, values at the start index will be returned\n    // in the result\n    // @param the end of the range, values at the end index will not be returned\n    // in the result\n    function getBytes32ValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (bytes32[] memory) {\n        return bytes32Sets[setKey].valuesAt(start, end);\n    }\n\n    // @dev add the given value to the set\n    // @param setKey the key of the set\n    // @param value the value to add\n    function addBytes32(bytes32 setKey, bytes32 value) external onlyController {\n        bytes32Sets[setKey].add(value);\n    }\n\n    // @dev remove the given value from the set\n    // @param setKey the key of the set\n    // @param value the value to remove\n    function removeBytes32(bytes32 setKey, bytes32 value) external onlyController {\n        bytes32Sets[setKey].remove(value);\n    }\n\n    // @dev check whether the given value exists in the set\n    // @param setKey the key of the set\n    // @param value the value to check\n    function containsAddress(bytes32 setKey, address value) external view returns (bool) {\n        return addressSets[setKey].contains(value);\n    }\n\n    // @dev get the length of the set\n    // @param setKey the key of the set\n    function getAddressCount(bytes32 setKey) external view returns (uint256) {\n        return addressSets[setKey].length();\n    }\n\n    // @dev get the values of the set in the given range\n    // @param setKey the key of the set\n    // @param the start of the range, values at the start index will be returned\n    // in the result\n    // @param the end of the range, values at the end index will not be returned\n    // in the result\n    function getAddressValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (address[] memory) {\n        return addressSets[setKey].valuesAt(start, end);\n    }\n\n    // @dev add the given value to the set\n    // @param setKey the key of the set\n    // @param value the value to add\n    function addAddress(bytes32 setKey, address value) external onlyController {\n        addressSets[setKey].add(value);\n    }\n\n    // @dev remove the given value from the set\n    // @param setKey the key of the set\n    // @param value the value to remove\n    function removeAddress(bytes32 setKey, address value) external onlyController {\n        addressSets[setKey].remove(value);\n    }\n\n    // @dev check whether the given value exists in the set\n    // @param setKey the key of the set\n    // @param value the value to check\n    function containsUint(bytes32 setKey, uint256 value) external view returns (bool) {\n        return uintSets[setKey].contains(value);\n    }\n\n    // @dev get the length of the set\n    // @param setKey the key of the set\n    function getUintCount(bytes32 setKey) external view returns (uint256) {\n        return uintSets[setKey].length();\n    }\n\n    // @dev get the values of the set in the given range\n    // @param setKey the key of the set\n    // @param the start of the range, values at the start index will be returned\n    // in the result\n    // @param the end of the range, values at the end index will not be returned\n    // in the result\n    function getUintValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (uint256[] memory) {\n        return uintSets[setKey].valuesAt(start, end);\n    }\n\n    // @dev add the given value to the set\n    // @param setKey the key of the set\n    // @param value the value to add\n    function addUint(bytes32 setKey, uint256 value) external onlyController {\n        uintSets[setKey].add(value);\n    }\n\n    // @dev remove the given value from the set\n    // @param setKey the key of the set\n    // @param value the value to remove\n    function removeUint(bytes32 setKey, uint256 value) external onlyController {\n        uintSets[setKey].remove(value);\n    }\n}\n"
    },
    "contracts/data/Keys.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title Keys\n// @dev Keys for values in the DataStore\nlibrary Keys {\n    // @dev key for the address of the wrapped native token\n    bytes32 public constant WNT = keccak256(abi.encode(\"WNT\"));\n    // @dev key for the nonce value used in NonceUtils\n    bytes32 public constant NONCE = keccak256(abi.encode(\"NONCE\"));\n\n    // @dev for sending received fees\n    bytes32 public constant FEE_RECEIVER = keccak256(abi.encode(\"FEE_RECEIVER\"));\n\n    // @dev for holding tokens that could not be sent out\n    bytes32 public constant HOLDING_ADDRESS = keccak256(abi.encode(\"HOLDING_ADDRESS\"));\n    bytes32 public constant RELAY_FEE_ADDRESS = keccak256(abi.encode(\"RELAY_FEE_ADDRESS\"));\n\n    // @dev key for the minimum gas for execution error\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS = keccak256(abi.encode(\"MIN_HANDLE_EXECUTION_ERROR_GAS\"));\n\n    // @dev key for the minimum gas that should be forwarded for execution error handling\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD = keccak256(abi.encode(\"MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD\"));\n\n    // @dev key for the min additional gas for execution\n    bytes32 public constant MIN_ADDITIONAL_GAS_FOR_EXECUTION = keccak256(abi.encode(\"MIN_ADDITIONAL_GAS_FOR_EXECUTION\"));\n\n    // @dev for a global reentrancy guard\n    bytes32 public constant REENTRANCY_GUARD_STATUS = keccak256(abi.encode(\"REENTRANCY_GUARD_STATUS\"));\n\n    // @dev key for deposit fees\n    bytes32 public constant DEPOSIT_FEE_TYPE = keccak256(abi.encode(\"DEPOSIT_FEE_TYPE\"));\n    // @dev key for withdrawal fees\n    bytes32 public constant WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\"WITHDRAWAL_FEE_TYPE\"));\n    // @dev key for swap fees\n    bytes32 public constant SWAP_FEE_TYPE = keccak256(abi.encode(\"SWAP_FEE_TYPE\"));\n    bytes32 public constant ATOMIC_SWAP_FEE_TYPE = keccak256(abi.encode(\"ATOMIC_SWAP_FEE_TYPE\"));\n    // @dev key for position fees\n    bytes32 public constant POSITION_FEE_TYPE = keccak256(abi.encode(\"POSITION_FEE_TYPE\"));\n    // @dev key for ui deposit fees\n    bytes32 public constant UI_DEPOSIT_FEE_TYPE = keccak256(abi.encode(\"UI_DEPOSIT_FEE_TYPE\"));\n    // @dev key for ui withdrawal fees\n    bytes32 public constant UI_WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\"UI_WITHDRAWAL_FEE_TYPE\"));\n    // @dev key for ui swap fees\n    bytes32 public constant UI_SWAP_FEE_TYPE = keccak256(abi.encode(\"UI_SWAP_FEE_TYPE\"));\n    // @dev key for ui position fees\n    bytes32 public constant UI_POSITION_FEE_TYPE = keccak256(abi.encode(\"UI_POSITION_FEE_TYPE\"));\n\n    // @dev key for ui fee factor\n    bytes32 public constant UI_FEE_FACTOR = keccak256(abi.encode(\"UI_FEE_FACTOR\"));\n    // @dev key for max ui fee receiver factor\n    bytes32 public constant MAX_UI_FEE_FACTOR = keccak256(abi.encode(\"MAX_UI_FEE_FACTOR\"));\n\n    // @dev key for the claimable fee amount\n    bytes32 public constant CLAIMABLE_FEE_AMOUNT = keccak256(abi.encode(\"CLAIMABLE_FEE_AMOUNT\"));\n    // @dev key for the claimable ui fee amount\n    bytes32 public constant CLAIMABLE_UI_FEE_AMOUNT = keccak256(abi.encode(\"CLAIMABLE_UI_FEE_AMOUNT\"));\n    // @dev key for the max number of auto cancel orders\n    bytes32 public constant MAX_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\"MAX_AUTO_CANCEL_ORDERS\"));\n    // @dev key for the max total callback gas limit for auto cancel orders\n    bytes32 public constant MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\"MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS\"));\n\n    // @dev key for the market list\n    bytes32 public constant MARKET_LIST = keccak256(abi.encode(\"MARKET_LIST\"));\n\n    // @dev key for the fee batch list\n    bytes32 public constant FEE_BATCH_LIST = keccak256(abi.encode(\"FEE_BATCH_LIST\"));\n\n    // @dev key for the deposit list\n    bytes32 public constant DEPOSIT_LIST = keccak256(abi.encode(\"DEPOSIT_LIST\"));\n    // @dev key for the account deposit list\n    bytes32 public constant ACCOUNT_DEPOSIT_LIST = keccak256(abi.encode(\"ACCOUNT_DEPOSIT_LIST\"));\n\n    // @dev key for the withdrawal list\n    bytes32 public constant WITHDRAWAL_LIST = keccak256(abi.encode(\"WITHDRAWAL_LIST\"));\n    // @dev key for the account withdrawal list\n    bytes32 public constant ACCOUNT_WITHDRAWAL_LIST = keccak256(abi.encode(\"ACCOUNT_WITHDRAWAL_LIST\"));\n\n    // @dev key for the shift list\n    bytes32 public constant SHIFT_LIST = keccak256(abi.encode(\"SHIFT_LIST\"));\n    // @dev key for the account shift list\n    bytes32 public constant ACCOUNT_SHIFT_LIST = keccak256(abi.encode(\"ACCOUNT_SHIFT_LIST\"));\n\n    bytes32 public constant GLV_LIST = keccak256(abi.encode(\"GLV_LIST\"));\n    bytes32 public constant GLV_DEPOSIT_LIST = keccak256(abi.encode(\"GLV_DEPOSIT_LIST\"));\n    bytes32 public constant GLV_SHIFT_LIST = keccak256(abi.encode(\"GLV_SHIFT_LIST\"));\n    bytes32 public constant ACCOUNT_GLV_DEPOSIT_LIST = keccak256(abi.encode(\"ACCOUNT_GLV_DEPOSIT_LIST\"));\n    bytes32 public constant GLV_WITHDRAWAL_LIST = keccak256(abi.encode(\"GLV_WITHDRAWAL_LIST\"));\n    bytes32 public constant ACCOUNT_GLV_WITHDRAWAL_LIST = keccak256(abi.encode(\"ACCOUNT_GLV_WITHDRAWAL_LIST\"));\n    bytes32 public constant GLV_SUPPORTED_MARKET_LIST = keccak256(abi.encode(\"GLV_SUPPORTED_MARKET_LIST\"));\n\n    // @dev key for the position list\n    bytes32 public constant POSITION_LIST = keccak256(abi.encode(\"POSITION_LIST\"));\n    // @dev key for the account position list\n    bytes32 public constant ACCOUNT_POSITION_LIST = keccak256(abi.encode(\"ACCOUNT_POSITION_LIST\"));\n\n    // @dev key for the order list\n    bytes32 public constant ORDER_LIST = keccak256(abi.encode(\"ORDER_LIST\"));\n    // @dev key for the account order list\n    bytes32 public constant ACCOUNT_ORDER_LIST = keccak256(abi.encode(\"ACCOUNT_ORDER_LIST\"));\n\n    // @dev key for the subaccount list\n    bytes32 public constant SUBACCOUNT_LIST = keccak256(abi.encode(\"SUBACCOUNT_LIST\"));\n\n    // @dev key for the auto cancel order list\n    bytes32 public constant AUTO_CANCEL_ORDER_LIST = keccak256(abi.encode(\"AUTO_CANCEL_ORDER_LIST\"));\n\n    // @dev key for is market disabled\n    bytes32 public constant IS_MARKET_DISABLED = keccak256(abi.encode(\"IS_MARKET_DISABLED\"));\n\n    // @dev key for the max swap path length allowed\n    bytes32 public constant MAX_SWAP_PATH_LENGTH = keccak256(abi.encode(\"MAX_SWAP_PATH_LENGTH\"));\n    // @dev key used to store markets observed in a swap path, to ensure that a swap path contains unique markets\n    bytes32 public constant SWAP_PATH_MARKET_FLAG = keccak256(abi.encode(\"SWAP_PATH_MARKET_FLAG\"));\n    // @dev key used to store the min market tokens for the first deposit for a market\n    bytes32 public constant MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\"MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT\"));\n\n    bytes32 public constant CREATE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_GLV_DEPOSIT_FEATURE_DISABLED\"));\n    bytes32 public constant CANCEL_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"CANCEL_GLV_DEPOSIT_FEATURE_DISABLED\"));\n    bytes32 public constant EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED\"));\n\n    bytes32 public constant CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED\"));\n    bytes32 public constant CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED\"));\n    bytes32 public constant EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED\"));\n\n    bytes32 public constant CREATE_GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_GLV_SHIFT_FEATURE_DISABLED\"));\n    bytes32 public constant EXECUTE_GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_GLV_SHIFT_FEATURE_DISABLED\"));\n\n    // @dev key for whether the create deposit feature is disabled\n    bytes32 public constant CREATE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_DEPOSIT_FEATURE_DISABLED\"));\n    // @dev key for whether the cancel deposit feature is disabled\n    bytes32 public constant CANCEL_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"CANCEL_DEPOSIT_FEATURE_DISABLED\"));\n    // @dev key for whether the execute deposit feature is disabled\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_DEPOSIT_FEATURE_DISABLED\"));\n\n    // @dev key for whether the create withdrawal feature is disabled\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_WITHDRAWAL_FEATURE_DISABLED\"));\n    // @dev key for whether the cancel withdrawal feature is disabled\n    bytes32 public constant CANCEL_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"CANCEL_WITHDRAWAL_FEATURE_DISABLED\"));\n    // @dev key for whether the execute withdrawal feature is disabled\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_WITHDRAWAL_FEATURE_DISABLED\"));\n    // @dev key for whether the execute atomic withdrawal feature is disabled\n    bytes32 public constant EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED\"));\n\n    // @dev key for whether the create shift feature is disabled\n    bytes32 public constant CREATE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_SHIFT_FEATURE_DISABLED\"));\n    // @dev key for whether the cancel shift feature is disabled\n    bytes32 public constant CANCEL_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\"CANCEL_SHIFT_FEATURE_DISABLED\"));\n    // @dev key for whether the execute shift feature is disabled\n    bytes32 public constant EXECUTE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_SHIFT_FEATURE_DISABLED\"));\n\n    // @dev key for whether the create order feature is disabled\n    bytes32 public constant CREATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\"CREATE_ORDER_FEATURE_DISABLED\"));\n    // @dev key for whether the execute order feature is disabled\n    bytes32 public constant EXECUTE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_ORDER_FEATURE_DISABLED\"));\n    // @dev key for whether the execute adl feature is disabled\n    // for liquidations, it can be disabled by using the EXECUTE_ORDER_FEATURE_DISABLED key with the Liquidation\n    // order type, ADL orders have a MarketDecrease order type, so a separate key is needed to disable it\n    bytes32 public constant EXECUTE_ADL_FEATURE_DISABLED = keccak256(abi.encode(\"EXECUTE_ADL_FEATURE_DISABLED\"));\n    // @dev key for whether the update order feature is disabled\n    bytes32 public constant UPDATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\"UPDATE_ORDER_FEATURE_DISABLED\"));\n    // @dev key for whether the cancel order feature is disabled\n    bytes32 public constant CANCEL_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\"CANCEL_ORDER_FEATURE_DISABLED\"));\n\n    // @dev key for whether the claim funding fees feature is disabled\n    bytes32 public constant CLAIM_FUNDING_FEES_FEATURE_DISABLED = keccak256(abi.encode(\"CLAIM_FUNDING_FEES_FEATURE_DISABLED\"));\n    // @dev key for whether the claim collateral feature is disabled\n    bytes32 public constant CLAIM_COLLATERAL_FEATURE_DISABLED = keccak256(abi.encode(\"CLAIM_COLLATERAL_FEATURE_DISABLED\"));\n    // @dev key for whether the claim affiliate rewards feature is disabled\n    bytes32 public constant CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED = keccak256(abi.encode(\"CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED\"));\n    // @dev key for whether the claim ui fees feature is disabled\n    bytes32 public constant CLAIM_UI_FEES_FEATURE_DISABLED = keccak256(abi.encode(\"CLAIM_UI_FEES_FEATURE_DISABLED\"));\n    // @dev key for whether the subaccount feature is disabled\n    bytes32 public constant SUBACCOUNT_FEATURE_DISABLED = keccak256(abi.encode(\"SUBACCOUNT_FEATURE_DISABLED\"));\n    // @dev key for whether the gasless feature is disabled\n    bytes32 public constant GASLESS_FEATURE_DISABLED = keccak256(abi.encode(\"GASLESS_FEATURE_DISABLED\"));\n\n    // @dev key for the minimum required oracle signers for an oracle observation\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(abi.encode(\"MIN_ORACLE_SIGNERS\"));\n    // @dev key for the minimum block confirmations before blockhash can be excluded for oracle signature validation\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(abi.encode(\"MIN_ORACLE_BLOCK_CONFIRMATIONS\"));\n    // @dev key for the maximum usable oracle price age in seconds\n    bytes32 public constant MAX_ORACLE_PRICE_AGE = keccak256(abi.encode(\"MAX_ORACLE_PRICE_AGE\"));\n    // @dev key for the maximum oracle timestamp range\n    bytes32 public constant MAX_ORACLE_TIMESTAMP_RANGE = keccak256(abi.encode(\"MAX_ORACLE_TIMESTAMP_RANGE\"));\n    // @dev key for the maximum oracle price deviation factor from the ref price\n    bytes32 public constant MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR = keccak256(abi.encode(\"MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR\"));\n    // @dev key for whether an oracle provider is enabled\n    bytes32 public constant IS_ORACLE_PROVIDER_ENABLED = keccak256(abi.encode(\"IS_ORACLE_PROVIDER_ENABLED\"));\n    // @dev key for whether an oracle provider can be used for atomic actions\n    bytes32 public constant IS_ATOMIC_ORACLE_PROVIDER = keccak256(abi.encode(\"IS_ATOMIC_ORACLE_PROVIDER\"));\n    // @dev key for oracle timestamp adjustment\n    bytes32 public constant ORACLE_TIMESTAMP_ADJUSTMENT = keccak256(abi.encode(\"ORACLE_TIMESTAMP_ADJUSTMENT\"));\n    // @dev key for oracle provider for token\n    bytes32 public constant ORACLE_PROVIDER_FOR_TOKEN = keccak256(abi.encode(\"ORACLE_PROVIDER_FOR_TOKEN\"));\n    // @dev key for the chainlink payment token\n    bytes32 public constant CHAINLINK_PAYMENT_TOKEN = keccak256(abi.encode(\"CHAINLINK_PAYMENT_TOKEN\"));\n    // @dev key for the sequencer grace duration\n    bytes32 public constant SEQUENCER_GRACE_DURATION = keccak256(abi.encode(\"SEQUENCER_GRACE_DURATION\"));\n\n    // @dev key for the percentage amount of position fees to be received\n    bytes32 public constant POSITION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\"POSITION_FEE_RECEIVER_FACTOR\"));\n    // @dev key for the percentage amount of liquidation fees to be received\n    bytes32 public constant LIQUIDATION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\"LIQUIDATION_FEE_RECEIVER_FACTOR\"));\n    // @dev key for the percentage amount of swap fees to be received\n    bytes32 public constant SWAP_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\"SWAP_FEE_RECEIVER_FACTOR\"));\n    // @dev key for the percentage amount of borrowing fees to be received\n    bytes32 public constant BORROWING_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\"BORROWING_FEE_RECEIVER_FACTOR\"));\n\n    // @dev key for the base gas limit used when estimating execution fee\n    bytes32 public constant ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\"ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1\"));\n    // @dev key for the gas limit used for each oracle price when estimating execution fee\n    bytes32 public constant ESTIMATED_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\"ESTIMATED_GAS_FEE_PER_ORACLE_PRICE\"));\n    // @dev key for the multiplier used when estimating execution fee\n    bytes32 public constant ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\"ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR\"));\n\n    // @dev key for the base gas limit used when calculating execution fee\n    bytes32 public constant EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\"EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1\"));\n    // @dev key for the gas limit used for each oracle price\n    bytes32 public constant EXECUTION_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\"EXECUTION_GAS_FEE_PER_ORACLE_PRICE\"));\n    // @dev key for the multiplier used when calculating execution fee\n    bytes32 public constant EXECUTION_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\"EXECUTION_GAS_FEE_MULTIPLIER_FACTOR\"));\n\n    // @dev key for the max execution fee multiplier\n    bytes32 public constant MAX_EXECUTION_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\"MAX_EXECUTION_FEE_MULTIPLIER_FACTOR\"));\n\n    bytes32 public constant MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT = keccak256(abi.encode(\"MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT\"));\n    bytes32 public constant GELATO_RELAY_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\"GELATO_RELAY_FEE_MULTIPLIER_FACTOR\"));\n    bytes32 public constant GELATO_RELAY_FEE_BASE_AMOUNT = keccak256(abi.encode(\"GELATO_RELAY_FEE_BASE_AMOUNT\"));\n    // @dev key for the estimated gas limit for deposits\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\"DEPOSIT_GAS_LIMIT\"));\n    // @dev key for the estimated gas limit for withdrawals\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\"WITHDRAWAL_GAS_LIMIT\"));\n    bytes32 public constant GLV_DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\"GLV_DEPOSIT_GAS_LIMIT\"));\n    bytes32 public constant GLV_WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\"GLV_WITHDRAWAL_GAS_LIMIT\"));\n    bytes32 public constant GLV_SHIFT_GAS_LIMIT = keccak256(abi.encode(\"GLV_SHIFT_GAS_LIMIT\"));\n    bytes32 public constant GLV_PER_MARKET_GAS_LIMIT = keccak256(abi.encode(\"GLV_PER_MARKET_GAS_LIMIT\"));\n    // @dev key for the estimated gas limit for shifts\n    bytes32 public constant SHIFT_GAS_LIMIT = keccak256(abi.encode(\"SHIFT_GAS_LIMIT\"));\n    // @dev key for the estimated gas limit for single swaps\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(abi.encode(\"SINGLE_SWAP_GAS_LIMIT\"));\n    // @dev key for the estimated gas limit for increase orders\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\"INCREASE_ORDER_GAS_LIMIT\"));\n    // @dev key for the estimated gas limit for decrease orders\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\"DECREASE_ORDER_GAS_LIMIT\"));\n    // @dev key for the estimated gas limit for swap orders\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(abi.encode(\"SWAP_ORDER_GAS_LIMIT\"));\n    // @dev key for the amount of gas to forward for token transfers\n    bytes32 public constant TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\"TOKEN_TRANSFER_GAS_LIMIT\"));\n    // @dev key for the amount of gas to forward for native token transfers\n    bytes32 public constant NATIVE_TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\"NATIVE_TOKEN_TRANSFER_GAS_LIMIT\"));\n    // @dev key for the request expiration time, after which the request will be considered expired\n    bytes32 public constant REQUEST_EXPIRATION_TIME = keccak256(abi.encode(\"REQUEST_EXPIRATION_TIME\"));\n\n    bytes32 public constant MAX_CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"MAX_CALLBACK_GAS_LIMIT\"));\n    bytes32 public constant REFUND_EXECUTION_FEE_GAS_LIMIT = keccak256(abi.encode(\"REFUND_EXECUTION_FEE_GAS_LIMIT\"));\n    bytes32 public constant SAVED_CALLBACK_CONTRACT = keccak256(abi.encode(\"SAVED_CALLBACK_CONTRACT\"));\n\n    // @dev key for the min collateral factor\n    bytes32 public constant MIN_COLLATERAL_FACTOR = keccak256(abi.encode(\"MIN_COLLATERAL_FACTOR\"));\n    // @dev key for the min collateral factor for open interest multiplier\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER = keccak256(abi.encode(\"MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER\"));\n    // @dev key for the min allowed collateral in USD\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(abi.encode(\"MIN_COLLATERAL_USD\"));\n    // @dev key for the min allowed position size in USD\n    bytes32 public constant MIN_POSITION_SIZE_USD = keccak256(abi.encode(\"MIN_POSITION_SIZE_USD\"));\n\n    // @dev key for the virtual id of tokens\n    bytes32 public constant VIRTUAL_TOKEN_ID = keccak256(abi.encode(\"VIRTUAL_TOKEN_ID\"));\n    // @dev key for the virtual id of markets\n    bytes32 public constant VIRTUAL_MARKET_ID = keccak256(abi.encode(\"VIRTUAL_MARKET_ID\"));\n    // @dev key for the virtual inventory for swaps\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_SWAPS = keccak256(abi.encode(\"VIRTUAL_INVENTORY_FOR_SWAPS\"));\n    // @dev key for the virtual inventory for positions\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_POSITIONS = keccak256(abi.encode(\"VIRTUAL_INVENTORY_FOR_POSITIONS\"));\n\n    // @dev key for the position impact factor\n    bytes32 public constant POSITION_IMPACT_FACTOR = keccak256(abi.encode(\"POSITION_IMPACT_FACTOR\"));\n    // @dev key for the position impact exponent factor\n    bytes32 public constant POSITION_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\"POSITION_IMPACT_EXPONENT_FACTOR\"));\n    // @dev key for the max decrease position impact factor\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR = keccak256(abi.encode(\"MAX_POSITION_IMPACT_FACTOR\"));\n    // @dev key for the max position impact factor for liquidations\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS = keccak256(abi.encode(\"MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS\"));\n    // @dev key for the position fee factor\n    bytes32 public constant POSITION_FEE_FACTOR = keccak256(abi.encode(\"POSITION_FEE_FACTOR\"));\n    bytes32 public constant PRO_TRADER_TIER = keccak256(abi.encode(\"PRO_TRADER_TIER\"));\n    bytes32 public constant PRO_DISCOUNT_FACTOR = keccak256(abi.encode(\"PRO_DISCOUNT_FACTOR\"));\n    // @dev key for the liquidation fee factor\n    bytes32 public constant LIQUIDATION_FEE_FACTOR = keccak256(abi.encode(\"LIQUIDATION_FEE_FACTOR\"));\n    // @dev key for the swap impact factor\n    bytes32 public constant SWAP_IMPACT_FACTOR = keccak256(abi.encode(\"SWAP_IMPACT_FACTOR\"));\n    // @dev key for the swap impact exponent factor\n    bytes32 public constant SWAP_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\"SWAP_IMPACT_EXPONENT_FACTOR\"));\n    // @dev key for the swap fee factor\n    bytes32 public constant SWAP_FEE_FACTOR = keccak256(abi.encode(\"SWAP_FEE_FACTOR\"));\n    // @dev key for the atomic swap fee factor\n    bytes32 public constant ATOMIC_SWAP_FEE_FACTOR = keccak256(abi.encode(\"ATOMIC_SWAP_FEE_FACTOR\"));\n    bytes32 public constant ATOMIC_WITHDRAWAL_FEE_FACTOR = keccak256(abi.encode(\"ATOMIC_WITHDRAWAL_FEE_FACTOR\"));\n    bytes32 public constant DEPOSIT_FEE_FACTOR = keccak256(abi.encode(\"DEPOSIT_FEE_FACTOR\"));\n    bytes32 public constant WITHDRAWAL_FEE_FACTOR = keccak256(abi.encode(\"WITHDRAWAL_FEE_FACTOR\"));\n    // @dev key for the oracle type\n    bytes32 public constant ORACLE_TYPE = keccak256(abi.encode(\"ORACLE_TYPE\"));\n    // @dev key for open interest\n    bytes32 public constant OPEN_INTEREST = keccak256(abi.encode(\"OPEN_INTEREST\"));\n    // @dev key for open interest in tokens\n    bytes32 public constant OPEN_INTEREST_IN_TOKENS = keccak256(abi.encode(\"OPEN_INTEREST_IN_TOKENS\"));\n    // @dev key for collateral sum for a market\n    bytes32 public constant COLLATERAL_SUM = keccak256(abi.encode(\"COLLATERAL_SUM\"));\n    // @dev key for pool amount\n    bytes32 public constant POOL_AMOUNT = keccak256(abi.encode(\"POOL_AMOUNT\"));\n    // @dev key for max pool amount\n    bytes32 public constant MAX_POOL_AMOUNT = keccak256(abi.encode(\"MAX_POOL_AMOUNT\"));\n    // @dev key for max pool usd for deposit\n    bytes32 public constant MAX_POOL_USD_FOR_DEPOSIT = keccak256(abi.encode(\"MAX_POOL_USD_FOR_DEPOSIT\"));\n    // @dev key for max open interest\n    bytes32 public constant MAX_OPEN_INTEREST = keccak256(abi.encode(\"MAX_OPEN_INTEREST\"));\n    // @dev key for position impact pool amount\n    bytes32 public constant POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\"POSITION_IMPACT_POOL_AMOUNT\"));\n    // @dev key for min position impact pool amount\n    bytes32 public constant MIN_POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\"MIN_POSITION_IMPACT_POOL_AMOUNT\"));\n    // @dev key for position impact pool distribution rate\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTION_RATE = keccak256(abi.encode(\"POSITION_IMPACT_POOL_DISTRIBUTION_RATE\"));\n    // @dev key for position impact pool distributed at\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTED_AT = keccak256(abi.encode(\"POSITION_IMPACT_POOL_DISTRIBUTED_AT\"));\n    // @dev key for swap impact pool amount\n    bytes32 public constant SWAP_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\"SWAP_IMPACT_POOL_AMOUNT\"));\n    // @dev key for price feed\n    bytes32 public constant PRICE_FEED = keccak256(abi.encode(\"PRICE_FEED\"));\n    // @dev key for price feed multiplier\n    bytes32 public constant PRICE_FEED_MULTIPLIER = keccak256(abi.encode(\"PRICE_FEED_MULTIPLIER\"));\n    // @dev key for price feed heartbeat\n    bytes32 public constant PRICE_FEED_HEARTBEAT_DURATION = keccak256(abi.encode(\"PRICE_FEED_HEARTBEAT_DURATION\"));\n    // @dev key for data stream feed id\n    bytes32 public constant DATA_STREAM_ID = keccak256(abi.encode(\"DATA_STREAM_ID\"));\n    // @dev key for data stream feed multiplier\n    bytes32 public constant DATA_STREAM_MULTIPLIER = keccak256(abi.encode(\"DATA_STREAM_MULTIPLIER\"));\n    bytes32 public constant DATA_STREAM_SPREAD_REDUCTION_FACTOR = keccak256(abi.encode(\"DATA_STREAM_SPREAD_REDUCTION_FACTOR\"));\n    // @dev key for stable price\n    bytes32 public constant STABLE_PRICE = keccak256(abi.encode(\"STABLE_PRICE\"));\n    // @dev key for reserve factor\n    bytes32 public constant RESERVE_FACTOR = keccak256(abi.encode(\"RESERVE_FACTOR\"));\n    // @dev key for open interest reserve factor\n    bytes32 public constant OPEN_INTEREST_RESERVE_FACTOR = keccak256(abi.encode(\"OPEN_INTEREST_RESERVE_FACTOR\"));\n    // @dev key for max pnl factor\n    bytes32 public constant MAX_PNL_FACTOR = keccak256(abi.encode(\"MAX_PNL_FACTOR\"));\n    // @dev key for max pnl factor\n    bytes32 public constant MAX_PNL_FACTOR_FOR_TRADERS = keccak256(abi.encode(\"MAX_PNL_FACTOR_FOR_TRADERS\"));\n    // @dev key for max pnl factor for adl\n    bytes32 public constant MAX_PNL_FACTOR_FOR_ADL = keccak256(abi.encode(\"MAX_PNL_FACTOR_FOR_ADL\"));\n    // @dev key for min pnl factor for adl\n    bytes32 public constant MIN_PNL_FACTOR_AFTER_ADL = keccak256(abi.encode(\"MIN_PNL_FACTOR_AFTER_ADL\"));\n    // @dev key for max pnl factor\n    bytes32 public constant MAX_PNL_FACTOR_FOR_DEPOSITS = keccak256(abi.encode(\"MAX_PNL_FACTOR_FOR_DEPOSITS\"));\n    // @dev key for max pnl factor for withdrawals\n    bytes32 public constant MAX_PNL_FACTOR_FOR_WITHDRAWALS = keccak256(abi.encode(\"MAX_PNL_FACTOR_FOR_WITHDRAWALS\"));\n    // @dev key for latest ADL at\n    bytes32 public constant LATEST_ADL_AT = keccak256(abi.encode(\"LATEST_ADL_AT\"));\n    // @dev key for whether ADL is enabled\n    bytes32 public constant IS_ADL_ENABLED = keccak256(abi.encode(\"IS_ADL_ENABLED\"));\n    // @dev key for funding factor\n    bytes32 public constant FUNDING_FACTOR = keccak256(abi.encode(\"FUNDING_FACTOR\"));\n    // @dev key for funding exponent factor\n    bytes32 public constant FUNDING_EXPONENT_FACTOR = keccak256(abi.encode(\"FUNDING_EXPONENT_FACTOR\"));\n    // @dev key for saved funding factor\n    bytes32 public constant SAVED_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\"SAVED_FUNDING_FACTOR_PER_SECOND\"));\n    // @dev key for funding increase factor\n    bytes32 public constant FUNDING_INCREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\"FUNDING_INCREASE_FACTOR_PER_SECOND\"));\n    // @dev key for funding decrease factor\n    bytes32 public constant FUNDING_DECREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\"FUNDING_DECREASE_FACTOR_PER_SECOND\"));\n    // @dev key for min funding factor\n    bytes32 public constant MIN_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\"MIN_FUNDING_FACTOR_PER_SECOND\"));\n    // @dev key for max funding factor\n    bytes32 public constant MAX_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\"MAX_FUNDING_FACTOR_PER_SECOND\"));\n    // @dev key for threshold for stable funding\n    bytes32 public constant THRESHOLD_FOR_STABLE_FUNDING = keccak256(abi.encode(\"THRESHOLD_FOR_STABLE_FUNDING\"));\n    // @dev key for threshold for decrease funding\n    bytes32 public constant THRESHOLD_FOR_DECREASE_FUNDING = keccak256(abi.encode(\"THRESHOLD_FOR_DECREASE_FUNDING\"));\n    // @dev key for funding fee amount per size\n    bytes32 public constant FUNDING_FEE_AMOUNT_PER_SIZE = keccak256(abi.encode(\"FUNDING_FEE_AMOUNT_PER_SIZE\"));\n    // @dev key for claimable funding amount per size\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\"CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\"));\n    // @dev key for when funding was last updated at\n    bytes32 public constant FUNDING_UPDATED_AT = keccak256(abi.encode(\"FUNDING_UPDATED_AT\"));\n    // @dev key for claimable funding amount\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT = keccak256(abi.encode(\"CLAIMABLE_FUNDING_AMOUNT\"));\n    // @dev key for claimable collateral amount\n    bytes32 public constant CLAIMABLE_COLLATERAL_AMOUNT = keccak256(abi.encode(\"CLAIMABLE_COLLATERAL_AMOUNT\"));\n    // @dev key for claimable collateral factor\n    bytes32 public constant CLAIMABLE_COLLATERAL_FACTOR = keccak256(abi.encode(\"CLAIMABLE_COLLATERAL_FACTOR\"));\n    // @dev key for claimable collateral time divisor\n    bytes32 public constant CLAIMABLE_COLLATERAL_TIME_DIVISOR = keccak256(abi.encode(\"CLAIMABLE_COLLATERAL_TIME_DIVISOR\"));\n    // @dev key for claimed collateral amount\n    bytes32 public constant CLAIMED_COLLATERAL_AMOUNT = keccak256(abi.encode(\"CLAIMED_COLLATERAL_AMOUNT\"));\n    bytes32 public constant IGNORE_OPEN_INTEREST_FOR_USAGE_FACTOR = keccak256(abi.encode(\"IGNORE_OPEN_INTEREST_FOR_USAGE_FACTOR\"));\n    // @dev key for optimal usage factor\n    bytes32 public constant OPTIMAL_USAGE_FACTOR = keccak256(abi.encode(\"OPTIMAL_USAGE_FACTOR\"));\n    // @dev key for base borrowing factor\n    bytes32 public constant BASE_BORROWING_FACTOR = keccak256(abi.encode(\"BASE_BORROWING_FACTOR\"));\n    // @dev key for above optimal usage borrowing factor\n    bytes32 public constant ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR = keccak256(abi.encode(\"ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR\"));\n    // @dev key for borrowing factor\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\"BORROWING_FACTOR\"));\n    // @dev key for borrowing factor\n    bytes32 public constant BORROWING_EXPONENT_FACTOR = keccak256(abi.encode(\"BORROWING_EXPONENT_FACTOR\"));\n    // @dev key for skipping the borrowing factor for the smaller side\n    bytes32 public constant SKIP_BORROWING_FEE_FOR_SMALLER_SIDE = keccak256(abi.encode(\"SKIP_BORROWING_FEE_FOR_SMALLER_SIDE\"));\n    // @dev key for cumulative borrowing factor\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR = keccak256(abi.encode(\"CUMULATIVE_BORROWING_FACTOR\"));\n    // @dev key for when the cumulative borrowing factor was last updated at\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = keccak256(abi.encode(\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\"));\n    // @dev key for total borrowing amount\n    bytes32 public constant TOTAL_BORROWING = keccak256(abi.encode(\"TOTAL_BORROWING\"));\n    // @dev key for affiliate reward\n    bytes32 public constant MIN_AFFILIATE_REWARD_FACTOR = keccak256(abi.encode(\"MIN_AFFILIATE_REWARD_FACTOR\"));\n    bytes32 public constant AFFILIATE_REWARD = keccak256(abi.encode(\"AFFILIATE_REWARD\"));\n    // @dev key for max allowed subaccount action count\n    bytes32 public constant MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\"MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT\"));\n    bytes32 public constant SUBACCOUNT_EXPIRES_AT = keccak256(abi.encode(\"SUBACCOUNT_EXPIRES_AT\"));\n    // @dev key for subaccount action count\n    bytes32 public constant SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\"SUBACCOUNT_ACTION_COUNT\"));\n    // @dev key for subaccount auto top up amount\n    bytes32 public constant SUBACCOUNT_AUTO_TOP_UP_AMOUNT = keccak256(abi.encode(\"SUBACCOUNT_AUTO_TOP_UP_AMOUNT\"));\n    // @dev key for subaccount order action\n    bytes32 public constant SUBACCOUNT_ORDER_ACTION = keccak256(abi.encode(\"SUBACCOUNT_ORDER_ACTION\"));\n    // @dev key for fee distributor swap order token index\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX = keccak256(abi.encode(\"FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX\"));\n    // @dev key for fee distributor swap fee batch\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_FEE_BATCH = keccak256(abi.encode(\"FEE_DISTRIBUTOR_SWAP_FEE_BATCH\"));\n\n    bytes32 public constant GLV_MAX_MARKET_COUNT = keccak256(abi.encode(\"GLV_MAX_MARKET_COUNT\"));\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_USD = keccak256(abi.encode(\"GLV_MAX_MARKET_TOKEN_BALANCE_USD\"));\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT = keccak256(abi.encode(\"GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT\"));\n    bytes32 public constant IS_GLV_MARKET_DISABLED = keccak256(abi.encode(\"IS_GLV_MARKET_DISABLED\"));\n    bytes32 public constant GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR = keccak256(abi.encode(\"GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR\"));\n    bytes32 public constant GLV_SHIFT_LAST_EXECUTED_AT = keccak256(abi.encode(\"GLV_SHIFT_LAST_EXECUTED_AT\"));\n    bytes32 public constant GLV_SHIFT_MIN_INTERVAL = keccak256(abi.encode(\"GLV_SHIFT_MIN_INTERVAL\"));\n    bytes32 public constant MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\"MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT\"));\n\n    // @dev key for disabling automatic parameter updates via ConfigSyncer\n    bytes32 public constant SYNC_CONFIG_FEATURE_DISABLED = keccak256(abi.encode(\"SYNC_CONFIG_FEATURE_DISABLED\"));\n    // @dev key for disabling all parameter updates for a specific market via ConfigSyncer\n    bytes32 public constant SYNC_CONFIG_MARKET_DISABLED = keccak256(abi.encode(\"SYNC_CONFIG_MARKET_DISABLED\"));\n    // @dev key for disabling all updates for a specific parameter via ConfigSyncer\n    bytes32 public constant SYNC_CONFIG_PARAMETER_DISABLED = keccak256(abi.encode(\"SYNC_CONFIG_PARAMETER_DISABLED\"));\n    // @dev key for disabling all updates for a specific market parameter via ConfigSyncer\n    bytes32 public constant SYNC_CONFIG_MARKET_PARAMETER_DISABLED = keccak256(abi.encode(\"SYNC_CONFIG_MARKET_PARAMETER_DISABLED\"));\n    // @dev key for tracking which updateIds have already been applied by ConfigSyncer\n    bytes32 public constant SYNC_CONFIG_UPDATE_COMPLETED = keccak256(abi.encode(\"SYNC_CONFIG_UPDATE_COMPLETED\"));\n    // @dev key for the latest updateId that has been applied by ConfigSyncer\n    bytes32 public constant SYNC_CONFIG_LATEST_UPDATE_ID = keccak256(abi.encode(\"SYNC_CONFIG_LATEST_UPDATE_ID\"));\n\n    // @dev key for the contributor account list\n    bytes32 public constant CONTRIBUTOR_ACCOUNT_LIST = keccak256(abi.encode(\"CONTRIBUTOR_ACCOUNT_LIST\"));\n    // @dev key for the contributor token list\n    bytes32 public constant CONTRIBUTOR_TOKEN_LIST = keccak256(abi.encode(\"CONTRIBUTOR_TOKEN_LIST\"));\n    // @dev key for the contributor token amount\n    bytes32 public constant CONTRIBUTOR_TOKEN_AMOUNT = keccak256(abi.encode(\"CONTRIBUTOR_TOKEN_AMOUNT\"));\n    // @dev key for the max total contributor token amount\n    bytes32 public constant MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT = keccak256(abi.encode(\"MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT\"));\n    // @dev key for the contributor token vault\n    bytes32 public constant CONTRIBUTOR_TOKEN_VAULT = keccak256(abi.encode(\"CONTRIBUTOR_TOKEN_VAULT\"));\n    // @dev key for the contributor last payment at\n    bytes32 public constant CONTRIBUTOR_LAST_PAYMENT_AT = keccak256(abi.encode(\"CONTRIBUTOR_LAST_PAYMENT_AT\"));\n    // @dev key for the min contributor payment interval\n    bytes32 public constant MIN_CONTRIBUTOR_PAYMENT_INTERVAL = keccak256(abi.encode(\"MIN_CONTRIBUTOR_PAYMENT_INTERVAL\"));\n\n    // @dev key for the buyback batch amount used when claiming and swapping fees\n    bytes32 public constant BUYBACK_BATCH_AMOUNT = keccak256(abi.encode(\"BUYBACK_BATCH_AMOUNT\"));\n    // @dev key for the buyback available fees\n    bytes32 public constant BUYBACK_AVAILABLE_FEE_AMOUNT = keccak256(abi.encode(\"BUYBACK_AVAILABLE_FEE_AMOUNT\"));\n    // @dev key for the buyback gmx fee factor used in calculating fees by GMX/WNT\n    bytes32 public constant BUYBACK_GMX_FACTOR = keccak256(abi.encode(\"BUYBACK_GMX_FACTOR\"));\n    // @dev key for the FeeHandler max price impact when buying back fees\n    bytes32 public constant BUYBACK_MAX_PRICE_IMPACT_FACTOR = keccak256(abi.encode(\"BUYBACK_MAX_PRICE_IMPACT_FACTOR\"));\n    // @dev key for the maximum price delay in seconds when buying back fees\n    bytes32 public constant BUYBACK_MAX_PRICE_AGE = keccak256(abi.encode(\"BUYBACK_MAX_PRICE_AGE\"));\n    // @dev key for the buyback withdrawable fees\n    bytes32 public constant WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT = keccak256(abi.encode(\"WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT\"));\n\n    // @dev constant for user initiated cancel reason\n    string public constant USER_INITIATED_CANCEL = \"USER_INITIATED_CANCEL\";\n\n    // @dev function used to calculate fullKey for a given market parameter\n    // @param baseKey the base key for the market parameter\n    // @param data the additional data for the market parameter\n    function getFullKey(bytes32 baseKey, bytes memory data) internal pure returns (bytes32) {\n        if (data.length == 0) {\n            return baseKey;\n        }\n\n        return keccak256(bytes.concat(baseKey, data));\n    }\n\n    // @dev key for the account deposit list\n    // @param account the account for the list\n    function accountDepositListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_DEPOSIT_LIST, account));\n    }\n\n    // @dev key for the account withdrawal list\n    // @param account the account for the list\n    function accountWithdrawalListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_WITHDRAWAL_LIST, account));\n    }\n\n    // @dev key for the account shift list\n    // @param account the account for the list\n    function accountShiftListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_SHIFT_LIST, account));\n    }\n\n    // @dev key for the account glv deposit list\n    // @param account the account for the list\n    function accountGlvDepositListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_GLV_DEPOSIT_LIST, account));\n    }\n\n    // @dev key for the account glv deposit list\n    // @param account the account for the list\n    function accountGlvWithdrawalListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_GLV_WITHDRAWAL_LIST, account));\n    }\n\n    // @dev key for the glv supported market list\n    // @param glv the glv for the supported market list\n    function glvSupportedMarketListKey(address glv) internal pure returns (bytes32) {\n        return keccak256(abi.encode(GLV_SUPPORTED_MARKET_LIST, glv));\n    }\n\n    // @dev key for the account position list\n    // @param account the account for the list\n    function accountPositionListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_POSITION_LIST, account));\n    }\n\n    // @dev key for the account order list\n    // @param account the account for the list\n    function accountOrderListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ACCOUNT_ORDER_LIST, account));\n    }\n\n    // @dev key for the subaccount list\n    // @param account the account for the list\n    function subaccountListKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(SUBACCOUNT_LIST, account));\n    }\n\n    // @dev key for the auto cancel order list\n    // @param position key the position key for the list\n    function autoCancelOrderListKey(bytes32 positionKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(AUTO_CANCEL_ORDER_LIST, positionKey));\n    }\n\n    // @dev key for the claimable fee amount\n    // @param market the market for the fee\n    // @param token the token for the fee\n    function claimableFeeAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(CLAIMABLE_FEE_AMOUNT, market, token));\n    }\n\n    // @dev key for the claimable ui fee amount\n    // @param market the market for the fee\n    // @param token the token for the fee\n    // @param account the account that can claim the ui fee\n    function claimableUiFeeAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token));\n    }\n\n    // @dev key for the claimable ui fee amount for account\n    // @param market the market for the fee\n    // @param token the token for the fee\n    // @param account the account that can claim the ui fee\n    function claimableUiFeeAmountKey(address market, address token, address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token, account));\n    }\n\n    // @dev key for deposit gas limit\n    // @param singleToken whether a single token or pair tokens are being deposited\n    // @return key for deposit gas limit\n    function depositGasLimitKey() internal pure returns (bytes32) {\n        return DEPOSIT_GAS_LIMIT;\n    }\n\n    // @dev key for withdrawal gas limit\n    // @return key for withdrawal gas limit\n    function withdrawalGasLimitKey() internal pure returns (bytes32) {\n        return WITHDRAWAL_GAS_LIMIT;\n    }\n\n    // @dev key for shift gas limit\n    // @return key for shift gas limit\n    function shiftGasLimitKey() internal pure returns (bytes32) {\n        return SHIFT_GAS_LIMIT;\n    }\n\n    function glvDepositGasLimitKey() internal pure returns (bytes32) {\n        return GLV_DEPOSIT_GAS_LIMIT;\n    }\n\n    function glvWithdrawalGasLimitKey() internal pure returns (bytes32) {\n        return GLV_WITHDRAWAL_GAS_LIMIT;\n    }\n\n    function glvShiftGasLimitKey() internal pure returns (bytes32) {\n        return GLV_SHIFT_GAS_LIMIT;\n    }\n\n    function glvPerMarketGasLimitKey() internal pure returns (bytes32) {\n        return GLV_PER_MARKET_GAS_LIMIT;\n    }\n\n    // @dev key for single swap gas limit\n    // @return key for single swap gas limit\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\n        return SINGLE_SWAP_GAS_LIMIT;\n    }\n\n    // @dev key for increase order gas limit\n    // @return key for increase order gas limit\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\n        return INCREASE_ORDER_GAS_LIMIT;\n    }\n\n    // @dev key for decrease order gas limit\n    // @return key for decrease order gas limit\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\n        return DECREASE_ORDER_GAS_LIMIT;\n    }\n\n    // @dev key for swap order gas limit\n    // @return key for swap order gas limit\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\n        return SWAP_ORDER_GAS_LIMIT;\n    }\n\n    function swapPathMarketFlagKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SWAP_PATH_MARKET_FLAG,\n            market\n        ));\n    }\n\n    // @dev key for whether create glv deposit is disabled\n    // @param the create deposit module\n    // @return key for whether create deposit is disabled\n    function createGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_GLV_DEPOSIT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether cancel glv deposit is disabled\n    // @param the cancel deposit module\n    // @return key for whether cancel deposit is disabled\n    function cancelGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CANCEL_GLV_DEPOSIT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether execute glv deposit is disabled\n    // @param the execute deposit module\n    // @return key for whether execute deposit is disabled\n    function executeGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether create glv withdrawal is disabled\n    // @param the create withdrawal module\n    // @return key for whether create withdrawal is disabled\n    function createGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_GLV_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether cancel glv withdrawal is disabled\n    // @param the cancel withdrawal module\n    // @return key for whether cancel withdrawal is disabled\n    function cancelGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CANCEL_GLV_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether execute glv withdrawal is disabled\n    // @param the execute withdrawal module\n    // @return key for whether execute withdrawal is disabled\n    function executeGlvWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_GLV_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    function createGlvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_GLV_SHIFT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    function executeGlvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_GLV_SHIFT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n\n    // @dev key for whether create deposit is disabled\n    // @param the create deposit module\n    // @return key for whether create deposit is disabled\n    function createDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_DEPOSIT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether cancel deposit is disabled\n    // @param the cancel deposit module\n    // @return key for whether cancel deposit is disabled\n    function cancelDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CANCEL_DEPOSIT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether execute deposit is disabled\n    // @param the execute deposit module\n    // @return key for whether execute deposit is disabled\n    function executeDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_DEPOSIT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether create withdrawal is disabled\n    // @param the create withdrawal module\n    // @return key for whether create withdrawal is disabled\n    function createWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether cancel withdrawal is disabled\n    // @param the cancel withdrawal module\n    // @return key for whether cancel withdrawal is disabled\n    function cancelWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CANCEL_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether execute withdrawal is disabled\n    // @param the execute withdrawal module\n    // @return key for whether execute withdrawal is disabled\n    function executeWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether execute atomic withdrawal is disabled\n    // @param the execute atomic withdrawal module\n    // @return key for whether execute atomic withdrawal is disabled\n    function executeAtomicWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether create shift is disabled\n    // @param the create shift module\n    // @return key for whether create shift is disabled\n    function createShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_SHIFT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether cancel shift is disabled\n    // @param the cancel shift module\n    // @return key for whether cancel shift is disabled\n    function cancelShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CANCEL_SHIFT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether execute shift is disabled\n    // @param the execute shift module\n    // @return key for whether execute shift is disabled\n    function executeShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_SHIFT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether create order is disabled\n    // @param the create order module\n    // @return key for whether create order is disabled\n    function createOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CREATE_ORDER_FEATURE_DISABLED,\n            module,\n            orderType\n        ));\n    }\n\n    // @dev key for whether execute order is disabled\n    // @param the execute order module\n    // @return key for whether execute order is disabled\n    function executeOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_ORDER_FEATURE_DISABLED,\n            module,\n            orderType\n        ));\n    }\n\n    // @dev key for whether execute adl is disabled\n    // @param the execute adl module\n    // @return key for whether execute adl is disabled\n    function executeAdlFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            EXECUTE_ADL_FEATURE_DISABLED,\n            module,\n            orderType\n        ));\n    }\n\n    // @dev key for whether update order is disabled\n    // @param the update order module\n    // @return key for whether update order is disabled\n    function updateOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            UPDATE_ORDER_FEATURE_DISABLED,\n            module,\n            orderType\n        ));\n    }\n\n    // @dev key for whether cancel order is disabled\n    // @param the cancel order module\n    // @return key for whether cancel order is disabled\n    function cancelOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CANCEL_ORDER_FEATURE_DISABLED,\n            module,\n            orderType\n        ));\n    }\n\n    // @dev key for whether claim funding fees is disabled\n    // @param the claim funding fees module\n    function claimFundingFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIM_FUNDING_FEES_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether claim colltareral is disabled\n    // @param the claim funding fees module\n    function claimCollateralFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIM_COLLATERAL_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether claim affiliate rewards is disabled\n    // @param the claim affiliate rewards module\n    function claimAffiliateRewardsFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether claim ui fees is disabled\n    // @param the claim ui fees module\n    function claimUiFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIM_UI_FEES_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether subaccounts are disabled\n    // @param the subaccount module\n    function subaccountFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SUBACCOUNT_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether subaccounts are disabled\n    // @param the gasless module\n    function gaslessFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            GASLESS_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for ui fee factor\n    // @param account the fee receiver account\n    // @return key for ui fee factor\n    function uiFeeFactorKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            UI_FEE_FACTOR,\n            account\n        ));\n    }\n\n    // @dev key for whether an oracle provider is enabled\n    // @param provider the oracle provider\n    // @return key for whether an oracle provider is enabled\n    function isOracleProviderEnabledKey(address provider) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            IS_ORACLE_PROVIDER_ENABLED,\n            provider\n        ));\n    }\n\n    // @dev key for whether an oracle provider is allowed to be used for atomic actions\n    // @param provider the oracle provider\n    // @return key for whether an oracle provider is allowed to be used for atomic actions\n    function isAtomicOracleProviderKey(address provider) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            IS_ATOMIC_ORACLE_PROVIDER,\n            provider\n        ));\n    }\n\n    // @dev key for oracle timestamp adjustment\n    // @param provider the oracle provider\n    // @param token the token\n    // @return key for oracle timestamp adjustment\n    function oracleTimestampAdjustmentKey(address provider, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ORACLE_TIMESTAMP_ADJUSTMENT,\n            provider,\n            token\n        ));\n    }\n\n    // @dev key for oracle provider for token\n    // @param token the token\n    // @return key for oracle provider for token\n    function oracleProviderForTokenKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ORACLE_PROVIDER_FOR_TOKEN,\n            token\n        ));\n    }\n\n    // @dev key for gas to forward for token transfer\n    // @param the token to check\n    // @return key for gas to forward for token transfer\n    function tokenTransferGasLimit(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            TOKEN_TRANSFER_GAS_LIMIT,\n            token\n        ));\n   }\n\n   // @dev the default callback contract\n   // @param account the user's account\n   // @param market the address of the market\n   // @param callbackContract the callback contract\n   function savedCallbackContract(address account, address market) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           SAVED_CALLBACK_CONTRACT,\n           account,\n           market\n       ));\n   }\n\n   // @dev the min collateral factor key\n   // @param the market for the min collateral factor\n   function minCollateralFactorKey(address market) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           MIN_COLLATERAL_FACTOR,\n           market\n       ));\n   }\n\n   // @dev the min collateral factor for open interest multiplier key\n   // @param the market for the factor\n   function minCollateralFactorForOpenInterestMultiplierKey(address market, bool isLong) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER,\n           market,\n           isLong\n       ));\n   }\n\n   // @dev the key for the virtual token id\n   // @param the token to get the virtual id for\n   function virtualTokenIdKey(address token) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           VIRTUAL_TOKEN_ID,\n           token\n       ));\n   }\n\n   // @dev the key for the virtual market id\n   // @param the market to get the virtual id for\n   function virtualMarketIdKey(address market) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           VIRTUAL_MARKET_ID,\n           market\n       ));\n   }\n\n   // @dev the key for the virtual inventory for positions\n   // @param the virtualTokenId the virtual token id\n   function virtualInventoryForPositionsKey(bytes32 virtualTokenId) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           VIRTUAL_INVENTORY_FOR_POSITIONS,\n           virtualTokenId\n       ));\n   }\n\n   // @dev the key for the virtual inventory for swaps\n   // @param the virtualMarketId the virtual market id\n   // @param the token to check the inventory for\n   function virtualInventoryForSwapsKey(bytes32 virtualMarketId, bool isLongToken) internal pure returns (bytes32) {\n       return keccak256(abi.encode(\n           VIRTUAL_INVENTORY_FOR_SWAPS,\n           virtualMarketId,\n           isLongToken\n       ));\n   }\n\n    // @dev key for position impact factor\n    // @param market the market address to check\n    // @param isPositive whether the impact is positive or negative\n    // @return key for position impact factor\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POSITION_IMPACT_FACTOR,\n            market,\n            isPositive\n        ));\n   }\n\n    // @dev key for position impact exponent factor\n    // @param market the market address to check\n    // @return key for position impact exponent factor\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POSITION_IMPACT_EXPONENT_FACTOR,\n            market\n        ));\n    }\n\n    // @dev key for the max position impact factor\n    // @param market the market address to check\n    // @return key for the max position impact factor\n    function maxPositionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_POSITION_IMPACT_FACTOR,\n            market,\n            isPositive\n        ));\n    }\n\n    // @dev key for the max position impact factor for liquidations\n    // @param market the market address to check\n    // @return key for the max position impact factor\n    function maxPositionImpactFactorForLiquidationsKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS,\n            market\n        ));\n    }\n\n    // @dev key for position fee factor\n    // @param market the market address to check\n    // @param forPositiveImpact whether the fee is for an action that has a positive price impact\n    // @return key for position fee factor\n    function positionFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POSITION_FEE_FACTOR,\n            market,\n            forPositiveImpact\n        ));\n    }\n\n    // @dev key for pro trader's tier\n    function proTraderTierKey(address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            PRO_TRADER_TIER,\n            account\n        ));\n    }\n\n\n    // @dev key for pro discount factor for specific tier\n    function proDiscountFactorKey(uint256 proTier) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            PRO_DISCOUNT_FACTOR,\n            proTier\n        ));\n    }\n\n    // @dev key for liquidation fee factor\n    // @param market the market address to check\n    // @param forPositiveImpact whether the fee is for an action that has a positive price impact\n    // @return key for liquidation fee factor\n    function liquidationFeeFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            LIQUIDATION_FEE_FACTOR,\n            market\n        ));\n    }\n\n    // @dev key for swap impact factor\n    // @param market the market address to check\n    // @param isPositive whether the impact is positive or negative\n    // @return key for swap impact factor\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SWAP_IMPACT_FACTOR,\n            market,\n            isPositive\n        ));\n    }\n\n    // @dev key for swap impact exponent factor\n    // @param market the market address to check\n    // @return key for swap impact exponent factor\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SWAP_IMPACT_EXPONENT_FACTOR,\n            market\n        ));\n    }\n\n\n    // @dev key for swap fee factor\n    // @param market the market address to check\n    // @return key for swap fee factor\n    function swapFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SWAP_FEE_FACTOR,\n            market,\n            forPositiveImpact\n        ));\n    }\n\n    // @dev key for atomic swap fee factor\n    // @param market the market address to check\n    // @return key for atomic swap fee factor\n    function atomicSwapFeeFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ATOMIC_SWAP_FEE_FACTOR,\n            market\n        ));\n    }\n\n    // @dev key for atomic withdrawal fee factor\n    // @param market the market address to check\n    // @return key for atomic withdrawal fee factor\n    function atomicWithdrawalFeeFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ATOMIC_WITHDRAWAL_FEE_FACTOR,\n            market\n        ));\n    }\n\n    function depositFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            DEPOSIT_FEE_FACTOR,\n            market,\n            forPositiveImpact\n        ));\n    }\n\n    function withdrawalFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            WITHDRAWAL_FEE_FACTOR,\n            market,\n            forPositiveImpact\n        ));\n    }\n\n    // @dev key for oracle type\n    // @param token the token to check\n    // @return key for oracle type\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ORACLE_TYPE,\n            token\n        ));\n    }\n\n    // @dev key for open interest\n    // @param market the market to check\n    // @param collateralToken the collateralToken to check\n    // @param isLong whether to check the long or short open interest\n    // @return key for open interest\n    function openInterestKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            OPEN_INTEREST,\n            market,\n            collateralToken,\n            isLong\n        ));\n    }\n\n    // @dev key for open interest in tokens\n    // @param market the market to check\n    // @param collateralToken the collateralToken to check\n    // @param isLong whether to check the long or short open interest\n    // @return key for open interest in tokens\n    function openInterestInTokensKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            OPEN_INTEREST_IN_TOKENS,\n            market,\n            collateralToken,\n            isLong\n        ));\n    }\n\n    // @dev key for collateral sum for a market\n    // @param market the market to check\n    // @param collateralToken the collateralToken to check\n    // @param isLong whether to check the long or short open interest\n    // @return key for collateral sum\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            COLLATERAL_SUM,\n            market,\n            collateralToken,\n            isLong\n        ));\n    }\n\n    // @dev key for amount of tokens in a market's pool\n    // @param market the market to check\n    // @param token the token to check\n    // @return key for amount of tokens in a market's pool\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POOL_AMOUNT,\n            market,\n            token\n        ));\n    }\n\n    // @dev the key for the max amount of pool tokens\n    // @param market the market for the pool\n    // @param token the token for the pool\n    function maxPoolAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_POOL_AMOUNT,\n            market,\n            token\n        ));\n    }\n\n    // @dev the key for the max usd of pool tokens for deposits\n    // @param market the market for the pool\n    // @param token the token for the pool\n    function maxPoolUsdForDepositKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_POOL_USD_FOR_DEPOSIT,\n            market,\n            token\n        ));\n    }\n\n    // @dev the key for the max open interest\n    // @param market the market for the pool\n    // @param isLong whether the key is for the long or short side\n    function maxOpenInterestKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_OPEN_INTEREST,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for amount of tokens in a market's position impact pool\n    // @param market the market to check\n    // @return key for amount of tokens in a market's position impact pool\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POSITION_IMPACT_POOL_AMOUNT,\n            market\n        ));\n    }\n\n    // @dev key for min amount of tokens in a market's position impact pool\n    // @param market the market to check\n    // @return key for min amount of tokens in a market's position impact pool\n    function minPositionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MIN_POSITION_IMPACT_POOL_AMOUNT,\n            market\n        ));\n    }\n\n    // @dev key for position impact pool distribution rate\n    // @param market the market to check\n    // @return key for position impact pool distribution rate\n    function positionImpactPoolDistributionRateKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POSITION_IMPACT_POOL_DISTRIBUTION_RATE,\n            market\n        ));\n    }\n\n    // @dev key for position impact pool distributed at\n    // @param market the market to check\n    // @return key for position impact pool distributed at\n    function positionImpactPoolDistributedAtKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            POSITION_IMPACT_POOL_DISTRIBUTED_AT,\n            market\n        ));\n    }\n\n    // @dev key for amount of tokens in a market's swap impact pool\n    // @param market the market to check\n    // @param token the token to check\n    // @return key for amount of tokens in a market's swap impact pool\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SWAP_IMPACT_POOL_AMOUNT,\n            market,\n            token\n        ));\n    }\n\n    // @dev key for reserve factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for reserve factor\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            RESERVE_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for open interest reserve factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for open interest reserve factor\n    function openInterestReserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            OPEN_INTEREST_RESERVE_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for max pnl factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for max pnl factor\n    function maxPnlFactorKey(bytes32 pnlFactorType, address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_PNL_FACTOR,\n            pnlFactorType,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev the key for min PnL factor after ADL\n    // @param market the market for the pool\n    // @param isLong whether the key is for the long or short side\n    function minPnlFactorAfterAdlKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MIN_PNL_FACTOR_AFTER_ADL,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for latest adl time\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for latest adl time\n    function latestAdlAtKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            LATEST_ADL_AT,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for whether adl is enabled\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for whether adl is enabled\n    function isAdlEnabledKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            IS_ADL_ENABLED,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for funding factor\n    // @param market the market to check\n    // @return key for funding factor\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FUNDING_FACTOR,\n            market\n        ));\n    }\n\n    // @dev the key for funding exponent\n    // @param market the market for the pool\n    function fundingExponentFactorKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FUNDING_EXPONENT_FACTOR,\n            market\n        ));\n    }\n\n    // @dev the key for saved funding factor\n    // @param market the market for the pool\n    function savedFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SAVED_FUNDING_FACTOR_PER_SECOND,\n            market\n        ));\n    }\n\n    // @dev the key for funding increase factor\n    // @param market the market for the pool\n    function fundingIncreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FUNDING_INCREASE_FACTOR_PER_SECOND,\n            market\n        ));\n    }\n\n    // @dev the key for funding decrease factor\n    // @param market the market for the pool\n    function fundingDecreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FUNDING_DECREASE_FACTOR_PER_SECOND,\n            market\n        ));\n    }\n\n    // @dev the key for min funding factor\n    // @param market the market for the pool\n    function minFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MIN_FUNDING_FACTOR_PER_SECOND,\n            market\n        ));\n    }\n\n    // @dev the key for max funding factor\n    // @param market the market for the pool\n    function maxFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_FUNDING_FACTOR_PER_SECOND,\n            market\n        ));\n    }\n\n    // @dev the key for threshold for stable funding\n    // @param market the market for the pool\n    function thresholdForStableFundingKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            THRESHOLD_FOR_STABLE_FUNDING,\n            market\n        ));\n    }\n\n    // @dev the key for threshold for decreasing funding\n    // @param market the market for the pool\n    function thresholdForDecreaseFundingKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            THRESHOLD_FOR_DECREASE_FUNDING,\n            market\n        ));\n    }\n\n    // @dev key for funding fee amount per size\n    // @param market the market to check\n    // @param collateralToken the collateralToken to get the key for\n    // @param isLong whether to get the key for the long or short side\n    // @return key for funding fee amount per size\n    function fundingFeeAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FUNDING_FEE_AMOUNT_PER_SIZE,\n            market,\n            collateralToken,\n            isLong\n        ));\n    }\n\n    // @dev key for claimabel funding amount per size\n    // @param market the market to check\n    // @param collateralToken the collateralToken to get the key for\n    // @param isLong whether to get the key for the long or short side\n    // @return key for claimable funding amount per size\n    function claimableFundingAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_FUNDING_AMOUNT_PER_SIZE,\n            market,\n            collateralToken,\n            isLong\n        ));\n    }\n\n    // @dev key for when funding was last updated\n    // @param market the market to check\n    // @return key for when funding was last updated\n    function fundingUpdatedAtKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FUNDING_UPDATED_AT,\n            market\n        ));\n    }\n\n    // @dev key for claimable funding amount\n    // @param market the market to check\n    // @param token the token to check\n    // @return key for claimable funding amount\n    function claimableFundingAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_FUNDING_AMOUNT,\n            market,\n            token\n        ));\n    }\n\n    // @dev key for claimable funding amount by account\n    // @param market the market to check\n    // @param token the token to check\n    // @param account the account to check\n    // @return key for claimable funding amount\n    function claimableFundingAmountKey(address market, address token, address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_FUNDING_AMOUNT,\n            market,\n            token,\n            account\n        ));\n    }\n\n    // @dev key for claimable collateral amount\n    // @param market the market to check\n    // @param token the token to check\n    // @param account the account to check\n    // @param timeKey the time key for the claimable amount\n    // @return key for claimable funding amount\n    function claimableCollateralAmountKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_COLLATERAL_AMOUNT,\n            market,\n            token\n        ));\n    }\n\n    // @dev key for claimable collateral amount for a timeKey for an account\n    // @param market the market to check\n    // @param token the token to check\n    // @param account the account to check\n    // @param timeKey the time key for the claimable amount\n    // @return key for claimable funding amount\n    function claimableCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_COLLATERAL_AMOUNT,\n            market,\n            token,\n            timeKey,\n            account\n        ));\n    }\n\n    // @dev key for claimable collateral factor for a timeKey\n    // @param market the market to check\n    // @param token the token to check\n    // @param timeKey the time key for the claimable amount\n    // @return key for claimable funding amount\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_COLLATERAL_FACTOR,\n            market,\n            token,\n            timeKey\n        ));\n    }\n\n    // @dev key for claimable collateral factor for a timeKey for an account\n    // @param market the market to check\n    // @param token the token to check\n    // @param timeKey the time key for the claimable amount\n    // @param account the account to check\n    // @return key for claimable funding amount\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMABLE_COLLATERAL_FACTOR,\n            market,\n            token,\n            timeKey,\n            account\n        ));\n    }\n\n    // @dev key for claimable collateral factor\n    // @param market the market to check\n    // @param token the token to check\n    // @param account the account to check\n    // @param timeKey the time key for the claimable amount\n    // @return key for claimable funding amount\n    function claimedCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CLAIMED_COLLATERAL_AMOUNT,\n            market,\n            token,\n            timeKey,\n            account\n        ));\n    }\n\n    // @dev key for optimal usage factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for optimal usage factor\n    function optimalUsageFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            OPTIMAL_USAGE_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for base borrowing factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for base borrowing factor\n    function baseBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BASE_BORROWING_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for above optimal usage borrowing factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for above optimal usage borrowing factor\n    function aboveOptimalUsageBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for borrowing factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for borrowing factor\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BORROWING_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev the key for borrowing exponent\n    // @param market the market for the pool\n    // @param isLong whether to get the key for the long or short side\n    function borrowingExponentFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BORROWING_EXPONENT_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for cumulative borrowing factor\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for cumulative borrowing factor\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CUMULATIVE_BORROWING_FACTOR,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for cumulative borrowing factor updated at\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for cumulative borrowing factor updated at\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for total borrowing amount\n    // @param market the market to check\n    // @param isLong whether to get the key for the long or short side\n    // @return key for total borrowing amount\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            TOTAL_BORROWING,\n            market,\n            isLong\n        ));\n    }\n\n    // @dev key for affiliate reward amount\n    // @param market the market to check\n    // @param token the token to get the key for\n    // @param account the account to get the key for\n    // @return key for affiliate reward amount\n    function affiliateRewardKey(address market, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            AFFILIATE_REWARD,\n            market,\n            token\n        ));\n    }\n\n    function minAffiliateRewardFactorKey(uint256 referralTierLevel) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MIN_AFFILIATE_REWARD_FACTOR,\n            referralTierLevel\n        ));\n    }\n\n    function maxAllowedSubaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT,\n            account,\n            subaccount,\n            actionType\n        ));\n    }\n\n    function subaccountExpiresAtKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SUBACCOUNT_EXPIRES_AT,\n            account,\n            subaccount,\n            actionType\n        ));\n    }\n\n    function subaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SUBACCOUNT_ACTION_COUNT,\n            account,\n            subaccount,\n            actionType\n        ));\n    }\n\n    function subaccountAutoTopUpAmountKey(address account, address subaccount) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SUBACCOUNT_AUTO_TOP_UP_AMOUNT,\n            account,\n            subaccount\n        ));\n    }\n\n    // @dev key for affiliate reward amount for an account\n    // @param market the market to check\n    // @param token the token to get the key for\n    // @param account the account to get the key for\n    // @return key for affiliate reward amount\n    function affiliateRewardKey(address market, address token, address account) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            AFFILIATE_REWARD,\n            market,\n            token,\n            account\n        ));\n    }\n\n    // @dev key for is market disabled\n    // @param market the market to check\n    // @return key for is market disabled\n    function isMarketDisabledKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            IS_MARKET_DISABLED,\n            market\n        ));\n    }\n\n    // @dev key for min market tokens for first deposit\n    // @param market the market to check\n    // @return key for min market tokens for first deposit\n    function minMarketTokensForFirstDepositKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT,\n            market\n        ));\n    }\n\n    // @dev key for price feed address\n    // @param token the token to get the key for\n    // @return key for price feed address\n    function priceFeedKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            PRICE_FEED,\n            token\n        ));\n    }\n\n    // @dev key for data stream feed ID\n    // @param token the token to get the key for\n    // @return key for data stream feed ID\n    function dataStreamIdKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            DATA_STREAM_ID,\n            token\n        ));\n    }\n\n    // @dev key for data stream feed multiplier\n    // @param token the token to get the key for\n    // @return key for data stream feed multiplier\n    function dataStreamMultiplierKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            DATA_STREAM_MULTIPLIER,\n            token\n        ));\n    }\n\n    function dataStreamSpreadReductionFactorKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            DATA_STREAM_SPREAD_REDUCTION_FACTOR,\n            token\n        ));\n    }\n\n    // @dev key for price feed multiplier\n    // @param token the token to get the key for\n    // @return key for price feed multiplier\n    function priceFeedMultiplierKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            PRICE_FEED_MULTIPLIER,\n            token\n        ));\n    }\n\n    function priceFeedHeartbeatDurationKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            PRICE_FEED_HEARTBEAT_DURATION,\n            token\n        ));\n    }\n\n    // @dev key for stable price value\n    // @param token the token to get the key for\n    // @return key for stable price value\n    function stablePriceKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            STABLE_PRICE,\n            token\n        ));\n    }\n\n    // @dev key for fee distributor swap token index\n    // @param orderKey the swap order key\n    // @return key for fee distributor swap token index\n    function feeDistributorSwapTokenIndexKey(bytes32 orderKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX,\n            orderKey\n        ));\n    }\n\n    // @dev key for fee distributor swap fee batch key\n    // @param orderKey the swap order key\n    // @return key for fee distributor swap fee batch key\n    function feeDistributorSwapFeeBatchKey(bytes32 orderKey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            FEE_DISTRIBUTOR_SWAP_FEE_BATCH,\n            orderKey\n        ));\n    }\n\n    // @dev key for max market token balance usd\n    // it is used to limit amount of funds deposited into each market\n    function glvMaxMarketTokenBalanceUsdKey(address glv, address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_USD, glv, market));\n    }\n\n    // @dev key for max market token balance amount\n    // it is used to limit amount of funds deposited into each market\n    function glvMaxMarketTokenBalanceAmountKey(address glv, address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_AMOUNT, glv, market));\n    }\n\n    // @dev key for is glv market disabled\n    function isGlvMarketDisabledKey(address glv, address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            IS_GLV_MARKET_DISABLED,\n            glv,\n            market\n        ));\n    }\n\n    // @dev key for max allowed price impact for glv shifts\n    // if effective price impact exceeds max price impact then glv shift fails\n    function glvShiftMaxPriceImpactFactorKey(address glv) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            GLV_SHIFT_MAX_PRICE_IMPACT_FACTOR,\n            glv\n        ));\n    }\n\n    // @dev key for time when glv shift was executed last\n    // used to validate glv shifts are not executed too frequently\n    function glvShiftLastExecutedAtKey(address glv) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            GLV_SHIFT_LAST_EXECUTED_AT,\n            glv\n        ));\n    }\n\n    // @dev key for min time interval between glv shifts in seconds\n    function glvShiftMinIntervalKey(address glv) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            GLV_SHIFT_MIN_INTERVAL,\n            glv\n        ));\n    }\n\n    function minGlvTokensForFirstGlvDepositKey(address glv) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MIN_GLV_TOKENS_FOR_FIRST_DEPOSIT,\n            glv\n        ));\n    }\n\n    // @dev key for whether the sync config feature is disabled\n    // @param module the sync config module\n    // @return key for sync config feature disabled\n    function syncConfigFeatureDisabledKey(address module) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SYNC_CONFIG_FEATURE_DISABLED,\n            module\n        ));\n    }\n\n    // @dev key for whether sync config updates are disabled for a market\n    // @param market the market to check\n    // @return key for sync config market disabled\n    function syncConfigMarketDisabledKey(address market) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SYNC_CONFIG_MARKET_DISABLED,\n            market\n        ));\n    }\n\n    // @dev key for whether sync config updates are disabled for a parameter\n    // @param parameter the parameter to check\n    // @return key for sync config parameter disabled\n    function syncConfigParameterDisabledKey(string memory parameter) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SYNC_CONFIG_PARAMETER_DISABLED,\n            parameter\n        ));\n    }\n\n    // @dev key for whether sync config updates are disabled for a market parameter\n    // @param market the market to check\n    // @param parameter the parameter to check\n    // @return key for sync config market parameter disabled\n    function syncConfigMarketParameterDisabledKey(address market, string memory parameter) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SYNC_CONFIG_MARKET_PARAMETER_DISABLED,\n            market,\n            parameter\n        ));\n    }\n\n    // @dev key for whether a sync config update is completed\n    // @param updateId the update id to check\n    // @return key for sync config market update completed\n    function syncConfigUpdateCompletedKey(uint256 updateId) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            SYNC_CONFIG_UPDATE_COMPLETED,\n            updateId\n        ));\n    }\n\n    // @dev key for the latest sync config update that was completed\n    // @return key for sync config latest update id\n    function syncConfigLatestUpdateIdKey() internal pure returns (bytes32) {\n        return SYNC_CONFIG_LATEST_UPDATE_ID;\n    }\n\n    // @dev key for the contributor token amount\n    // @param account the contributor account\n    // @param token the contributor token\n    // @return key for the contributor token amount\n    function contributorTokenAmountKey(address account, address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CONTRIBUTOR_TOKEN_AMOUNT,\n            account,\n            token\n        ));\n    }\n\n    // @dev key for the max total contributor token amount\n    // @param token the contributor token\n    // @return key for the max contributor token amount\n    function maxTotalContributorTokenAmountKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            MAX_TOTAL_CONTRIBUTOR_TOKEN_AMOUNT,\n            token\n        ));\n    }\n\n    // @dev key for the contributor token vault\n    // @param token the contributor token\n    // @return key for the contributor token vault\n    function contributorTokenVaultKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            CONTRIBUTOR_TOKEN_VAULT,\n            token\n        ));\n    }\n\n    // @dev key for the buyback batch amount\n    // @param token the token for which to retrieve batch amount (GMX or WNT)\n    // @return key for buyback batch amount for a given token\n    function buybackBatchAmountKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BUYBACK_BATCH_AMOUNT,\n            token\n        ));\n    }\n\n    // @dev key for the buyback available fee amount\n    // @param feeToken the token in which the fees are denominated\n    // @param swapToken the token for which fees are accumulated (GMX or WNT)\n    // @return key for buyback available fee amount for a given token and feeToken\n    function buybackAvailableFeeAmountKey(address feeToken, address swapToken) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BUYBACK_AVAILABLE_FEE_AMOUNT,\n            feeToken,\n            swapToken\n        ));\n    }\n\n    // @dev key for the buyback withdrawable fee amount\n    // @param buybackToken the token that was bought back\n    // @return key for the buyback withdrawable fee amount\n    function withdrawableBuybackTokenAmountKey(address buybackToken) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT,\n            buybackToken\n        ));\n    }\n\n    // @dev key for the buyback gmx fee factor\n    // @param version the version for which to retrieve the fee numerator\n    // @return key for buyback gmx fee factor for a given version\n    function buybackGmxFactorKey(uint256 version) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BUYBACK_GMX_FACTOR,\n            version\n        ));\n    }\n\n    // @dev key for the buyback max price impact factor\n    // @param token the token for which to retrieve the max price impact factor key\n    // @return key for buyback max price impact factor for a given token\n    function buybackMaxPriceImpactFactorKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            BUYBACK_MAX_PRICE_IMPACT_FACTOR,\n            token\n        ));\n    }\n}\n"
    },
    "contracts/deposit/Deposit.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title Deposit\n// @dev Struct for deposits\nlibrary Deposit {\n    enum DepositType {\n        Normal,\n        Shift,\n        Glv\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account depositing liquidity\n    // @param receiver the address to send the liquidity tokens to\n    // @param callbackContract the callback contract\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the market to deposit to\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param initialLongTokenAmount the amount of long tokens to deposit\n    // @param initialShortTokenAmount the amount of short tokens to deposit\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\n    // sending funds back to the user in case the deposit gets cancelled\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    struct Numbers {\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n        uint256 minMarketTokens;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function initialLongToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialLongToken;\n    }\n\n    function setInitialLongToken(Props memory props, address value) internal pure {\n        props.addresses.initialLongToken = value;\n    }\n\n    function initialShortToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialShortToken;\n    }\n\n    function setInitialShortToken(Props memory props, address value) internal pure {\n        props.addresses.initialShortToken = value;\n    }\n\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.longTokenSwapPath;\n    }\n\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.longTokenSwapPath = value;\n    }\n\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.shortTokenSwapPath;\n    }\n\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.shortTokenSwapPath = value;\n    }\n\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialLongTokenAmount;\n    }\n\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialLongTokenAmount = value;\n    }\n\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialShortTokenAmount;\n    }\n\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialShortTokenAmount = value;\n    }\n\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minMarketTokens;\n    }\n\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\n        props.numbers.minMarketTokens = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n}\n"
    },
    "contracts/deposit/DepositEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nimport \"./Deposit.sol\";\nimport \"../pricing/ISwapPricingUtils.sol\";\n\nlibrary DepositEventUtils {\n    using Deposit for Deposit.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitDepositCreated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        Deposit.Props memory deposit,\n        Deposit.DepositType depositType\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(6);\n        eventData.addressItems.setItem(0, \"account\", deposit.account());\n        eventData.addressItems.setItem(1, \"receiver\", deposit.receiver());\n        eventData.addressItems.setItem(2, \"callbackContract\", deposit.callbackContract());\n        eventData.addressItems.setItem(3, \"market\", deposit.market());\n        eventData.addressItems.setItem(4, \"initialLongToken\", deposit.initialLongToken());\n        eventData.addressItems.setItem(5, \"initialShortToken\", deposit.initialShortToken());\n\n        eventData.addressItems.initArrayItems(2);\n        eventData.addressItems.setItem(0, \"longTokenSwapPath\", deposit.longTokenSwapPath());\n        eventData.addressItems.setItem(1, \"shortTokenSwapPath\", deposit.shortTokenSwapPath());\n\n        eventData.uintItems.initItems(7);\n        eventData.uintItems.setItem(0, \"initialLongTokenAmount\", deposit.initialLongTokenAmount());\n        eventData.uintItems.setItem(1, \"initialShortTokenAmount\", deposit.initialShortTokenAmount());\n        eventData.uintItems.setItem(2, \"minMarketTokens\", deposit.minMarketTokens());\n        eventData.uintItems.setItem(3, \"updatedAtTime\", deposit.updatedAtTime());\n        eventData.uintItems.setItem(4, \"executionFee\", deposit.executionFee());\n        eventData.uintItems.setItem(5, \"callbackGasLimit\", deposit.callbackGasLimit());\n        eventData.uintItems.setItem(6, \"depositType\", uint256(depositType));\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"shouldUnwrapNativeToken\", deposit.shouldUnwrapNativeToken());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog2(\n            \"DepositCreated\",\n            key,\n            Cast.toBytes32(deposit.account()),\n            eventData\n        );\n    }\n\n    function emitDepositExecuted(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        uint256 longTokenAmount,\n        uint256 shortTokenAmount,\n        uint256 receivedMarketTokens,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(4);\n        eventData.uintItems.setItem(0, \"longTokenAmount\", longTokenAmount);\n        eventData.uintItems.setItem(1, \"shortTokenAmount\", shortTokenAmount);\n        eventData.uintItems.setItem(2, \"receivedMarketTokens\", receivedMarketTokens);\n        eventData.uintItems.setItem(3, \"swapPricingType\", uint256(swapPricingType));\n\n        eventEmitter.emitEventLog2(\n            \"DepositExecuted\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitDepositCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\n            \"DepositCancelled\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/deposit/DepositStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Deposit.sol\";\n\n/**\n * @title DepositStoreUtils\n * @dev Library for deposit storage functions\n */\nlibrary DepositStoreUtils {\n    using Deposit for Deposit.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\"RECEIVER\"));\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\"CALLBACK_CONTRACT\"));\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\"UI_FEE_RECEIVER\"));\n    bytes32 public constant MARKET = keccak256(abi.encode(\"MARKET\"));\n    bytes32 public constant INITIAL_LONG_TOKEN = keccak256(abi.encode(\"INITIAL_LONG_TOKEN\"));\n    bytes32 public constant INITIAL_SHORT_TOKEN = keccak256(abi.encode(\"INITIAL_SHORT_TOKEN\"));\n    bytes32 public constant LONG_TOKEN_SWAP_PATH = keccak256(abi.encode(\"LONG_TOKEN_SWAP_PATH\"));\n    bytes32 public constant SHORT_TOKEN_SWAP_PATH = keccak256(abi.encode(\"SHORT_TOKEN_SWAP_PATH\"));\n\n    bytes32 public constant INITIAL_LONG_TOKEN_AMOUNT = keccak256(abi.encode(\"INITIAL_LONG_TOKEN_AMOUNT\"));\n    bytes32 public constant INITIAL_SHORT_TOKEN_AMOUNT = keccak256(abi.encode(\"INITIAL_SHORT_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_MARKET_TOKENS = keccak256(abi.encode(\"MIN_MARKET_TOKENS\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\"EXECUTION_FEE\"));\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"CALLBACK_GAS_LIMIT\"));\n\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\"SHOULD_UNWRAP_NATIVE_TOKEN\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (Deposit.Props memory) {\n        Deposit.Props memory deposit;\n        if (!dataStore.containsBytes32(Keys.DEPOSIT_LIST, key)) {\n            return deposit;\n        }\n\n        deposit.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        deposit.setReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        ));\n\n        deposit.setCallbackContract(dataStore.getAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        ));\n\n        deposit.setUiFeeReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        ));\n\n        deposit.setMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET))\n        ));\n\n        deposit.setInitialLongToken(dataStore.getAddress(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\n        ));\n\n        deposit.setInitialShortToken(dataStore.getAddress(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\n        ));\n\n        deposit.setLongTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        ));\n\n        deposit.setShortTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        ));\n\n        deposit.setInitialLongTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\n        ));\n\n        deposit.setInitialShortTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\n        ));\n\n        deposit.setMinMarketTokens(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\n        ));\n\n        deposit.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        deposit.setExecutionFee(dataStore.getUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        ));\n\n        deposit.setCallbackGasLimit(dataStore.getUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        ));\n\n        deposit.setShouldUnwrapNativeToken(dataStore.getBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        ));\n\n        return deposit;\n    }\n\n    function set(DataStore dataStore, bytes32 key, Deposit.Props memory deposit) external {\n        dataStore.addBytes32(\n            Keys.DEPOSIT_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountDepositListKey(deposit.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            deposit.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, RECEIVER)),\n            deposit.receiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\n            deposit.callbackContract()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\n            deposit.uiFeeReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET)),\n            deposit.market()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN)),\n            deposit.initialLongToken()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN)),\n            deposit.initialShortToken()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH)),\n            deposit.longTokenSwapPath()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH)),\n            deposit.shortTokenSwapPath()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT)),\n            deposit.initialLongTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT)),\n            deposit.initialShortTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS)),\n            deposit.minMarketTokens()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            deposit.updatedAtTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, EXECUTION_FEE)),\n            deposit.executionFee()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\n            deposit.callbackGasLimit()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\n            deposit.shouldUnwrapNativeToken()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.DEPOSIT_LIST, key)) {\n            revert Errors.DepositNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.DEPOSIT_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountDepositListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        );\n    }\n\n    function getDepositCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.DEPOSIT_LIST);\n    }\n\n    function getDepositKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.DEPOSIT_LIST, start, end);\n    }\n\n    function getAccountDepositCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountDepositListKey(account));\n    }\n\n    function getAccountDepositKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountDepositListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/deposit/DepositUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"./DepositVault.sol\";\nimport \"./DepositStoreUtils.sol\";\nimport \"./DepositEventUtils.sol\";\n\nimport \"../nonce/NonceUtils.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\nimport \"../utils/AccountUtils.sol\";\n\n// @title DepositUtils\n// @dev Library for deposit functions, to help with the depositing of liquidity\n// into a market in return for market tokens\nlibrary DepositUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    using Price for Price.Props;\n    using Deposit for Deposit.Props;\n\n    // @dev CreateDepositParams struct used in createDeposit to avoid stack\n    // too deep errors\n    //\n    // @param receiver the address to send the market tokens to\n    // @param callbackContract the callback contract\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the market to deposit into\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    // sending funds back to the user in case the deposit gets cancelled\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    struct CreateDepositParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minMarketTokens;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @dev creates a deposit\n    //\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param depositVault DepositVault\n    // @param account the depositing account\n    // @param params CreateDepositParams\n    function createDeposit(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        DepositVault depositVault,\n        address account,\n        CreateDepositParams memory params\n    ) external returns (bytes32) {\n        AccountUtils.validateAccount(account);\n\n        Market.Props memory market = MarketUtils.getEnabledMarket(dataStore, params.market);\n        MarketUtils.validateSwapPath(dataStore, params.longTokenSwapPath);\n        MarketUtils.validateSwapPath(dataStore, params.shortTokenSwapPath);\n\n        // if the initialLongToken and initialShortToken are the same, only the initialLongTokenAmount would\n        // be non-zero, the initialShortTokenAmount would be zero\n        uint256 initialLongTokenAmount = depositVault.recordTransferIn(params.initialLongToken);\n        uint256 initialShortTokenAmount = depositVault.recordTransferIn(params.initialShortToken);\n\n        address wnt = TokenUtils.wnt(dataStore);\n\n        if (params.initialLongToken == wnt) {\n            initialLongTokenAmount -= params.executionFee;\n        } else if (params.initialShortToken == wnt) {\n            initialShortTokenAmount -= params.executionFee;\n        } else {\n            uint256 wntAmount = depositVault.recordTransferIn(wnt);\n            if (wntAmount < params.executionFee) {\n                revert Errors.InsufficientWntAmountForExecutionFee(wntAmount, params.executionFee);\n            }\n\n            params.executionFee = wntAmount;\n        }\n\n        if (initialLongTokenAmount == 0 && initialShortTokenAmount == 0) {\n            revert Errors.EmptyDepositAmounts();\n        }\n\n        AccountUtils.validateReceiver(params.receiver);\n\n        Deposit.Props memory deposit = Deposit.Props(\n            Deposit.Addresses(\n                account,\n                params.receiver,\n                params.callbackContract,\n                params.uiFeeReceiver,\n                market.marketToken,\n                params.initialLongToken,\n                params.initialShortToken,\n                params.longTokenSwapPath,\n                params.shortTokenSwapPath\n            ),\n            Deposit.Numbers(\n                initialLongTokenAmount,\n                initialShortTokenAmount,\n                params.minMarketTokens,\n                Chain.currentTimestamp(), // updatedAtTime\n                params.executionFee,\n                params.callbackGasLimit\n            ),\n            Deposit.Flags(\n                params.shouldUnwrapNativeToken\n            )\n        );\n\n        CallbackUtils.validateCallbackGasLimit(dataStore, deposit.callbackGasLimit());\n\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteDepositGasLimit(dataStore, deposit);\n        uint256 oraclePriceCount = GasUtils.estimateDepositOraclePriceCount(\n            deposit.longTokenSwapPath().length + deposit.shortTokenSwapPath().length\n        );\n        GasUtils.validateExecutionFee(dataStore, estimatedGasLimit, params.executionFee, oraclePriceCount);\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n\n        DepositStoreUtils.set(dataStore, key, deposit);\n\n        DepositEventUtils.emitDepositCreated(eventEmitter, key, deposit, Deposit.DepositType.Normal);\n\n        return key;\n    }\n\n    // @dev cancels a deposit, funds are sent back to the user\n    //\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param depositVault DepositVault\n    // @param key the key of the deposit to cancel\n    // @param keeper the address of the keeper\n    // @param startingGas the starting gas amount\n    function cancelDeposit(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        DepositVault depositVault,\n        bytes32 key,\n        address keeper,\n        uint256 startingGas,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        startingGas -= gasleft() / 63;\n\n        Deposit.Props memory deposit = DepositStoreUtils.get(dataStore, key);\n        if (deposit.account() == address(0)) {\n            revert Errors.EmptyDeposit();\n        }\n\n        if (\n            deposit.initialLongTokenAmount() == 0 &&\n            deposit.initialShortTokenAmount() == 0\n        ) {\n            revert Errors.EmptyDepositAmounts();\n        }\n\n        DepositStoreUtils.remove(dataStore, key, deposit.account());\n\n        if (deposit.initialLongTokenAmount() > 0) {\n            depositVault.transferOut(\n                deposit.initialLongToken(),\n                deposit.account(),\n                deposit.initialLongTokenAmount(),\n                deposit.shouldUnwrapNativeToken()\n            );\n        }\n\n        if (deposit.initialShortTokenAmount() > 0) {\n            depositVault.transferOut(\n                deposit.initialShortToken(),\n                deposit.account(),\n                deposit.initialShortTokenAmount(),\n                deposit.shouldUnwrapNativeToken()\n            );\n        }\n\n        DepositEventUtils.emitDepositCancelled(\n            eventEmitter,\n            key,\n            deposit.account(),\n            reason,\n            reasonBytes\n        );\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterDepositCancellation(key, deposit, eventData);\n\n        GasUtils.payExecutionFee(\n            dataStore,\n            eventEmitter,\n            depositVault,\n            key,\n            deposit.callbackContract(),\n            deposit.executionFee(),\n            startingGas,\n            GasUtils.estimateDepositOraclePriceCount(deposit.longTokenSwapPath().length + deposit.shortTokenSwapPath().length),\n            keeper,\n            deposit.receiver()\n        );\n    }\n}\n"
    },
    "contracts/deposit/DepositVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../bank/StrictBank.sol\";\n\n// @title DepositVault\n// @dev Vault for deposits\ncontract DepositVault is StrictBank {\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\n}\n"
    },
    "contracts/deposit/ExecuteDepositUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"./DepositVault.sol\";\nimport \"./DepositStoreUtils.sol\";\nimport \"./DepositEventUtils.sol\";\n\nimport \"../pricing/SwapPricingUtils.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../position/PositionUtils.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\n\nimport \"../utils/Array.sol\";\n\n// @title DepositUtils\n// @dev Library for deposit functions, to help with the depositing of liquidity\n// into a market in return for market tokens\nlibrary ExecuteDepositUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Array for uint256[];\n\n    using Price for Price.Props;\n    using Deposit for Deposit.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @dev ExecuteDepositParams struct used in executeDeposit to avoid stack\n    // too deep errors\n    struct ExecuteDepositParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        DepositVault depositVault;\n        Oracle oracle;\n        bytes32 key;\n        address keeper;\n        uint256 startingGas;\n        ISwapPricingUtils.SwapPricingType swapPricingType;\n        bool includeVirtualInventoryImpact;\n    }\n\n    // @dev _ExecuteDepositParams struct used in executeDeposit to avoid stack\n    // too deep errors\n    //\n    // @param market the market to deposit into\n    // @param account the depositing account\n    // @param receiver the account to send the market tokens to\n    // @param uiFeeReceiver the ui fee receiver account\n    // @param tokenIn the token to deposit, either the market.longToken or\n    // market.shortToken\n    // @param tokenOut the other token, if tokenIn is market.longToken then\n    // tokenOut is market.shortToken and vice versa\n    // @param tokenInPrice price of tokenIn\n    // @param tokenOutPrice price of tokenOut\n    // @param amount amount of tokenIn\n    // @param priceImpactUsd price impact in USD\n    struct _ExecuteDepositParams {\n        Market.Props market;\n        address account;\n        address receiver;\n        address uiFeeReceiver;\n        address tokenIn;\n        address tokenOut;\n        Price.Props tokenInPrice;\n        Price.Props tokenOutPrice;\n        uint256 amount;\n        int256 priceImpactUsd;\n    }\n\n    struct ExecuteDepositCache {\n        uint256 requestExpirationTime;\n        uint256 maxOracleTimestamp;\n        Market.Props market;\n        MarketUtils.MarketPrices prices;\n        uint256 longTokenAmount;\n        uint256 shortTokenAmount;\n        uint256 longTokenUsd;\n        uint256 shortTokenUsd;\n        uint256 receivedMarketTokens;\n        int256 priceImpactUsd;\n        uint256 marketTokensSupply;\n        EventUtils.EventLogData callbackEventData;\n    }\n\n    address public constant RECEIVER_FOR_FIRST_DEPOSIT = address(1);\n\n    // @dev executes a deposit\n    // @param params ExecuteDepositParams\n    function executeDeposit(ExecuteDepositParams memory params, Deposit.Props memory deposit) external returns (uint256 receivedMarketTokens) {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        DepositStoreUtils.remove(params.dataStore, params.key, deposit.account());\n\n\n        if (deposit.account() == address(0)) {\n            revert Errors.EmptyDeposit();\n        }\n\n        if (params.oracle.minTimestamp() < deposit.updatedAtTime()) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\n                params.oracle.minTimestamp(),\n                deposit.updatedAtTime()\n            );\n        }\n\n        ExecuteDepositCache memory cache;\n        cache.requestExpirationTime = params.dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\n        cache.maxOracleTimestamp = params.oracle.maxTimestamp();\n\n        if (cache.maxOracleTimestamp > deposit.updatedAtTime() + cache.requestExpirationTime) {\n            revert Errors.OracleTimestampsAreLargerThanRequestExpirationTime(\n                cache.maxOracleTimestamp,\n                deposit.updatedAtTime(),\n                cache.requestExpirationTime\n            );\n        }\n\n        cache.market = MarketUtils.getEnabledMarket(params.dataStore, deposit.market());\n\n        _validateFirstDeposit(params, deposit, cache.market);\n\n        cache.prices = MarketUtils.getMarketPrices(params.oracle, cache.market);\n\n        MarketUtils.distributePositionImpactPool(\n            params.dataStore,\n            params.eventEmitter,\n            cache.market.marketToken\n        );\n\n        PositionUtils.updateFundingAndBorrowingState(\n            params.dataStore,\n            params.eventEmitter,\n            cache.market,\n            cache.prices\n        );\n\n        // deposits should improve the pool state but it should be checked if\n        // the max pnl factor for deposits is exceeded as this would lead to the\n        // price of the market token decreasing below a target minimum percentage\n        // due to pnl\n        // note that this is just a validation for deposits, there is no actual\n        // minimum price for a market token\n        MarketUtils.validateMaxPnl(\n            params.dataStore,\n            cache.market,\n            cache.prices,\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS\n        );\n\n        cache.longTokenAmount = swap(\n            params,\n            deposit.longTokenSwapPath(),\n            deposit.initialLongToken(),\n            deposit.initialLongTokenAmount(),\n            cache.market.marketToken,\n            cache.market.longToken,\n            deposit.uiFeeReceiver()\n        );\n\n        cache.shortTokenAmount = swap(\n            params,\n            deposit.shortTokenSwapPath(),\n            deposit.initialShortToken(),\n            deposit.initialShortTokenAmount(),\n            cache.market.marketToken,\n            cache.market.shortToken,\n            deposit.uiFeeReceiver()\n        );\n\n        if (cache.longTokenAmount == 0 && cache.shortTokenAmount == 0) {\n            revert Errors.EmptyDepositAmountsAfterSwap();\n        }\n\n        cache.longTokenUsd = cache.longTokenAmount * cache.prices.longTokenPrice.midPrice();\n        cache.shortTokenUsd = cache.shortTokenAmount * cache.prices.shortTokenPrice.midPrice();\n\n        cache.priceImpactUsd = SwapPricingUtils.getPriceImpactUsd(\n            SwapPricingUtils.GetPriceImpactUsdParams(\n                params.dataStore,\n                cache.market,\n                cache.market.longToken,\n                cache.market.shortToken,\n                cache.prices.longTokenPrice.midPrice(),\n                cache.prices.shortTokenPrice.midPrice(),\n                cache.longTokenUsd.toInt256(),\n                cache.shortTokenUsd.toInt256(),\n                params.includeVirtualInventoryImpact\n            )\n        );\n\n        if (cache.longTokenAmount > 0) {\n            _ExecuteDepositParams memory _params = _ExecuteDepositParams(\n                cache.market,\n                deposit.account(),\n                deposit.receiver(),\n                deposit.uiFeeReceiver(),\n                cache.market.longToken,\n                cache.market.shortToken,\n                cache.prices.longTokenPrice,\n                cache.prices.shortTokenPrice,\n                cache.longTokenAmount,\n                Precision.mulDiv(cache.priceImpactUsd, cache.longTokenUsd, cache.longTokenUsd + cache.shortTokenUsd)\n            );\n\n            cache.receivedMarketTokens += _executeDeposit(params, _params);\n        }\n\n        if (cache.shortTokenAmount > 0) {\n            _ExecuteDepositParams memory _params = _ExecuteDepositParams(\n                cache.market,\n                deposit.account(),\n                deposit.receiver(),\n                deposit.uiFeeReceiver(),\n                cache.market.shortToken,\n                cache.market.longToken,\n                cache.prices.shortTokenPrice,\n                cache.prices.longTokenPrice,\n                cache.shortTokenAmount,\n                Precision.mulDiv(cache.priceImpactUsd, cache.shortTokenUsd, cache.longTokenUsd + cache.shortTokenUsd)\n            );\n\n            cache.receivedMarketTokens += _executeDeposit(params, _params);\n        }\n\n        if (cache.receivedMarketTokens < deposit.minMarketTokens()) {\n            revert Errors.MinMarketTokens(cache.receivedMarketTokens, deposit.minMarketTokens());\n        }\n\n        // validate that internal state changes are correct before calling\n        // external callbacks\n        MarketUtils.validateMarketTokenBalance(params.dataStore, cache.market);\n\n        DepositEventUtils.emitDepositExecuted(\n            params.eventEmitter,\n            params.key,\n            deposit.account(),\n            cache.longTokenAmount,\n            cache.shortTokenAmount,\n            cache.receivedMarketTokens,\n            params.swapPricingType\n        );\n\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            cache.market,\n            cache.prices.indexTokenPrice,\n            cache.prices.longTokenPrice,\n            cache.prices.shortTokenPrice,\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            true\n        );\n\n        cache.marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(cache.market.marketToken)));\n\n        MarketEventUtils.emitMarketPoolValueUpdated(\n            params.eventEmitter,\n            keccak256(abi.encode(\"DEPOSIT\")),\n            params.key,\n            cache.market.marketToken,\n            poolValueInfo,\n            cache.marketTokensSupply\n        );\n\n        cache.callbackEventData.uintItems.initItems(1);\n        cache.callbackEventData.uintItems.setItem(0, \"receivedMarketTokens\", cache.receivedMarketTokens);\n        CallbackUtils.afterDepositExecution(params.key, deposit, cache.callbackEventData);\n\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.depositVault,\n            params.key,\n            deposit.callbackContract(),\n            deposit.executionFee(),\n            params.startingGas,\n            GasUtils.estimateDepositOraclePriceCount(deposit.longTokenSwapPath().length + deposit.shortTokenSwapPath().length),\n            params.keeper,\n            deposit.receiver()\n        );\n\n        return cache.receivedMarketTokens;\n    }\n\n    // @dev executes a deposit\n    // @param params ExecuteDepositParams\n    // @param _params _ExecuteDepositParams\n    function _executeDeposit(ExecuteDepositParams memory params, _ExecuteDepositParams memory _params) internal returns (uint256) {\n        // for markets where longToken == shortToken, the price impact factor should be set to zero\n        // in which case, the priceImpactUsd would always equal zero\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\n            params.dataStore,\n            _params.market.marketToken,\n            _params.amount,\n            _params.priceImpactUsd > 0, // forPositiveImpact\n            _params.uiFeeReceiver,\n            params.swapPricingType\n        );\n\n        FeeUtils.incrementClaimableFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            _params.market.marketToken,\n            _params.tokenIn,\n            fees.feeReceiverAmount,\n            Keys.DEPOSIT_FEE_TYPE\n        );\n\n        FeeUtils.incrementClaimableUiFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            _params.uiFeeReceiver,\n            _params.market.marketToken,\n            _params.tokenIn,\n            fees.uiFeeAmount,\n            Keys.UI_DEPOSIT_FEE_TYPE\n        );\n\n        SwapPricingUtils.emitSwapFeesCollected(\n            params.eventEmitter,\n            params.key,\n            _params.market.marketToken,\n            _params.tokenIn,\n            _params.tokenInPrice.min,\n            Keys.DEPOSIT_FEE_TYPE,\n            fees\n         );\n\n        uint256 mintAmount;\n\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            _params.market,\n            params.oracle.getPrimaryPrice(_params.market.indexToken),\n            _params.tokenIn == _params.market.longToken ? _params.tokenInPrice : _params.tokenOutPrice,\n            _params.tokenIn == _params.market.shortToken ? _params.tokenInPrice : _params.tokenOutPrice,\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            true\n        );\n\n        if (poolValueInfo.poolValue < 0) {\n            revert Errors.InvalidPoolValueForDeposit(poolValueInfo.poolValue);\n        }\n\n        uint256 poolValue = poolValueInfo.poolValue.toUint256();\n\n        uint256 marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(_params.market.marketToken)));\n\n        if (poolValueInfo.poolValue == 0 && marketTokensSupply > 0) {\n            revert Errors.InvalidPoolValueForDeposit(poolValueInfo.poolValue);\n        }\n\n        MarketEventUtils.emitMarketPoolValueInfo(\n            params.eventEmitter,\n            params.key,\n            _params.market.marketToken,\n            poolValueInfo,\n            marketTokensSupply\n        );\n\n        // the poolValue and marketTokensSupply is cached for the mintAmount calculation below\n        // so the effect of any positive price impact on the poolValue and marketTokensSupply\n        // would not be accounted for\n        //\n        // for most cases, this should not be an issue, since the poolValue and marketTokensSupply\n        // should have been proportionately increased\n        //\n        // e.g. if the poolValue is $100 and marketTokensSupply is 100, and there is a positive price impact\n        // of $10, the poolValue should have increased by $10 and the marketTokensSupply should have been increased by 10\n        //\n        // there is a case where this may be an issue which is when all tokens are withdrawn from an existing market\n        // and the marketTokensSupply is reset to zero, but the poolValue is not entirely zero\n        // the case where this happens should be very rare and during withdrawal the poolValue should be close to zero\n        //\n        // however, in case this occurs, the usdToMarketTokenAmount will mint an additional number of market tokens\n        // proportional to the existing poolValue\n        //\n        // since the poolValue and marketTokensSupply is cached, this could occur once during positive price impact\n        // and again when calculating the mintAmount\n        //\n        // to avoid this, set the priceImpactUsd to be zero for this case\n        if (_params.priceImpactUsd > 0 && marketTokensSupply == 0) {\n            _params.priceImpactUsd = 0;\n        }\n\n        if (_params.priceImpactUsd > 0) {\n            // when there is a positive price impact factor,\n            // tokens from the swap impact pool are used to mint additional market tokens for the user\n            // for example, if 50,000 USDC is deposited and there is a positive price impact\n            // an additional 0.005 ETH may be used to mint market tokens\n            // the swap impact pool is decreased by the used amount\n            //\n            // priceImpactUsd is calculated based on pricing assuming only depositAmount of tokenIn\n            // was added to the pool\n            // since impactAmount of tokenOut is added to the pool here, the calculation of\n            // the price impact would not be entirely accurate\n            //\n            // it is possible that the addition of the positive impact amount of tokens into the pool\n            // could increase the imbalance of the pool, for most cases this should not be a significant\n            // change compared to the improvement of balance from the actual deposit\n            (int256 positiveImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.applySwapImpactWithCap(\n                params.dataStore,\n                params.eventEmitter,\n                _params.market.marketToken,\n                _params.tokenOut,\n                _params.tokenOutPrice,\n                _params.priceImpactUsd\n            );\n\n            // calculate the usd amount using positiveImpactAmount since it may\n            // be capped by the max available amount in the impact pool\n            // use tokenOutPrice.max to get the USD value since the positiveImpactAmount\n            // was calculated using a USD value divided by tokenOutPrice.max\n            //\n            // for the initial deposit, the pool value and token supply would be zero\n            // so the market token price is treated as 1 USD\n            //\n            // it is possible for the pool value to be more than zero and the token supply\n            // to be zero, in that case, the market token price is also treated as 1 USD\n            mintAmount += MarketUtils.usdToMarketTokenAmount(\n                positiveImpactAmount.toUint256() * _params.tokenOutPrice.max,\n                poolValue,\n                marketTokensSupply\n            );\n\n            // deposit the token out, that was withdrawn from the impact pool, to mint market tokens\n            MarketUtils.applyDeltaToPoolAmount(\n                params.dataStore,\n                params.eventEmitter,\n                _params.market,\n                _params.tokenOut,\n                positiveImpactAmount\n            );\n\n            // MarketUtils.validatePoolUsdForDeposit is not called here\n            // this is to prevent unnecessary reverts\n            // for example, if the pool's long token is close to the deposit cap\n            // but the short token is not close to the cap, depositing the short\n            // token can lead to a positive price impact which can cause the\n            // long token's deposit cap to be exceeded\n            // in this case, it is preferrable that the pool can still be\n            // rebalanced even if the deposit cap may be exceeded\n\n            MarketUtils.validatePoolAmount(\n                params.dataStore,\n                _params.market,\n                _params.tokenOut\n            );\n        }\n\n        if (_params.priceImpactUsd < 0) {\n            // when there is a negative price impact factor,\n            // less of the deposit amount is used to mint market tokens\n            // for example, if 10 ETH is deposited and there is a negative price impact\n            // only 9.995 ETH may be used to mint market tokens\n            // the remaining 0.005 ETH will be stored in the swap impact pool\n            (int256 negativeImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.applySwapImpactWithCap(\n                params.dataStore,\n                params.eventEmitter,\n                _params.market.marketToken,\n                _params.tokenIn,\n                _params.tokenInPrice,\n                _params.priceImpactUsd\n            );\n\n            fees.amountAfterFees -= (-negativeImpactAmount).toUint256();\n        }\n\n        mintAmount += MarketUtils.usdToMarketTokenAmount(\n            fees.amountAfterFees * _params.tokenInPrice.min,\n            poolValue,\n            marketTokensSupply\n        );\n\n        MarketUtils.applyDeltaToPoolAmount(\n            params.dataStore,\n            params.eventEmitter,\n            _params.market,\n            _params.tokenIn,\n            (fees.amountAfterFees + fees.feeAmountForPool).toInt256()\n        );\n\n        MarketUtils.validatePoolUsdForDeposit(\n            params.dataStore,\n            _params.market,\n            _params.tokenIn,\n            _params.tokenInPrice.max\n        );\n\n        MarketUtils.validatePoolAmount(\n            params.dataStore,\n            _params.market,\n            _params.tokenIn\n        );\n\n        MarketToken(payable(_params.market.marketToken)).mint(_params.receiver, mintAmount);\n\n        return mintAmount;\n    }\n\n    function swap(\n        ExecuteDepositParams memory params,\n        address[] memory swapPath,\n        address initialToken,\n        uint256 inputAmount,\n        address market,\n        address expectedOutputToken,\n        address uiFeeReceiver\n    ) internal returns (uint256) {\n        Market.Props[] memory swapPathMarkets = MarketUtils.getSwapPathMarkets(\n            params.dataStore,\n            swapPath\n        );\n\n        (address outputToken, uint256 outputAmount) = SwapUtils.swap(\n            SwapUtils.SwapParams(\n                params.dataStore, // dataStore\n                params.eventEmitter, // eventEmitter\n                params.oracle, // oracle\n                params.depositVault, // bank\n                params.key, // key\n                initialToken, // tokenIn\n                inputAmount, // amountIn\n                swapPathMarkets, // swapPathMarkets\n                0, // minOutputAmount\n                market, // receiver\n                uiFeeReceiver, // uiFeeReceiver\n                false, // shouldUnwrapNativeToken\n                ISwapPricingUtils.SwapPricingType.Swap\n            )\n        );\n\n        if (outputToken != expectedOutputToken) {\n            revert Errors.InvalidSwapOutputToken(outputToken, expectedOutputToken);\n        }\n\n        MarketUtils.validateMarketTokenBalance(params.dataStore, swapPathMarkets);\n\n        return outputAmount;\n    }\n\n    // this method validates that a specified minimum number of market tokens are locked\n    // this can be used to help ensure a minimum amount of liquidity for a market\n    // this also helps to prevent manipulation of the market token price by the first depositor\n    // since it may be possible to deposit a small amount of tokens on the first deposit\n    // to cause a high market token price due to rounding of the amount of tokens minted\n    function _validateFirstDeposit(\n        ExecuteDepositParams memory params,\n        Deposit.Props memory deposit,\n        Market.Props memory market\n    ) internal view {\n        uint256 initialMarketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\n\n        // return if this is not the first deposit\n        if (initialMarketTokensSupply != 0) { return; }\n\n        uint256 minMarketTokens = params.dataStore.getUint(Keys.minMarketTokensForFirstDepositKey(market.marketToken));\n\n        // return if there is no minMarketTokens requirement\n        if (minMarketTokens == 0) { return; }\n\n        if (deposit.receiver() != RECEIVER_FOR_FIRST_DEPOSIT) {\n            revert Errors.InvalidReceiverForFirstDeposit(deposit.receiver(), RECEIVER_FOR_FIRST_DEPOSIT);\n        }\n\n        if (deposit.minMarketTokens() < minMarketTokens) {\n            revert Errors.InvalidMinMarketTokensForFirstDeposit(deposit.minMarketTokens(), minMarketTokens);\n        }\n    }\n}\n"
    },
    "contracts/error/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary Errors {\n    // AdlHandler errors\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\n\n    // AdlUtils errors\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\n    error AdlNotEnabled();\n\n    // AutoCancelUtils errors\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\n\n    // Bank errors\n    error SelfTransferNotSupported(address receiver);\n    error InvalidNativeTokenSender(address msgSender);\n\n    // BaseHandler errors\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\n\n    // CallbackUtils errors\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\n\n    // Config errors\n    error InvalidBaseKey(bytes32 baseKey);\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\n    error InvalidClaimableFactor(uint256 value);\n    error OracleProviderAlreadyExistsForToken(address token);\n    error PriceFeedAlreadyExistsForToken(address token);\n    error DataStreamIdAlreadyExistsForToken(address token);\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\n\n    // ContributorHandler errors\n    error InvalidSetContributorPaymentInput(uint256 tokensLength, uint256 amountsLength);\n    error InvalidContributorToken(address token);\n    error MaxTotalContributorTokenAmountExceeded(address token, uint256 totalAmount, uint256 maxTotalAmount);\n    error MinContributorPaymentIntervalNotYetPassed(uint256 minPaymentInterval);\n    error MinContributorPaymentIntervalBelowAllowedRange(uint256 interval);\n    error InvalidSetMaxTotalContributorTokenAmountInput(uint256 tokensLength, uint256 amountsLength);\n\n    // Timelock errors\n    error ActionAlreadySignalled();\n    error ActionNotSignalled();\n    error SignalTimeNotYetPassed(uint256 signalTime);\n    error InvalidTimelockDelay(uint256 timelockDelay);\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\n    error InvalidFeeReceiver(address receiver);\n    error InvalidOracleSigner(address receiver);\n\n    // GlvDepositStoreUtils errors\n    error GlvDepositNotFound(bytes32 key);\n    // GlvShiftStoreUtils errors\n    error GlvShiftNotFound(bytes32 key);\n    // GlvWithdrawalStoreUtils errors\n    error GlvWithdrawalNotFound(bytes32 key);\n    // GlvDepositUtils errors\n    error EmptyGlvDepositAmounts();\n    error EmptyGlvMarketAmount();\n    error EmptyGlvDeposit();\n    error InvalidMinGlvTokensForFirstGlvDeposit(uint256 minGlvTokens, uint256 expectedMinGlvTokens);\n    error InvalidReceiverForFirstGlvDeposit(address receiver, address expectedReceiver);\n    // GlvWithdrawalUtils errors\n    error EmptyGlvWithdrawal();\n    error EmptyGlvWithdrawalAmount();\n    // GlvUtils errors\n    error EmptyGlv(address glv);\n    error EmptyGlvTokenSupply();\n    error GlvNegativeMarketPoolValue(address glv, address market);\n    error GlvUnsupportedMarket(address glv, address market);\n    error GlvDisabledMarket(address glv, address market);\n    error GlvEnabledMarket(address glv, address market);\n    error GlvNonZeroMarketBalance(address glv, address market);\n    error GlvMaxMarketCountExceeded(address glv, uint256 glvMaxMarketCount);\n    error GlvMaxMarketTokenBalanceUsdExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\n    error GlvMaxMarketTokenBalanceAmountExceeded(address glv, address market, uint256 maxMarketTokenBalanceAmount, uint256 marketTokenBalanceAmount);\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\n    error GlvMarketAlreadyExists(address glv, address market);\n    error GlvInvalidLongToken(address glv, address provided, address expected);\n    error GlvInvalidShortToken(address glv, address provided, address expected);\n    // GlvShiftUtils\n    error GlvShiftMaxPriceImpactExceeded(uint256 effectivePriceImpactFactor, uint256 glvMaxShiftPriceImpactFactor);\n    error GlvShiftIntervalNotYetPassed(uint256 currentTimestamp, uint256 lastGlvShiftExecutedAt, uint256 glvShiftMinInterval);\n    // GlvFactory\n    error GlvAlreadyExists(bytes32 salt, address glv);\n    error GlvSymbolTooLong();\n    error GlvNameTooLong();\n    // GlvStoreUtils\n    error GlvNotFound(address key);\n\n    // DepositStoreUtils errors\n    error DepositNotFound(bytes32 key);\n\n    // DepositUtils errors\n    error EmptyDeposit();\n    error EmptyDepositAmounts();\n\n    // ExecuteDepositUtils errors\n    error MinMarketTokens(uint256 received, uint256 expected);\n    error EmptyDepositAmountsAfterSwap();\n    error InvalidPoolValueForDeposit(int256 poolValue);\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\n\n    // ExternalHandler errors\n    error ExternalCallFailed(bytes data);\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\n    error InvalidExternalCallTarget(address target);\n\n    // FeeBatchStoreUtils errors\n    error FeeBatchNotFound(bytes32 key);\n\n    // FeeDistributor errors\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\n\n    // GlpMigrator errors\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\n\n    // GlvHandler errors\n    error InvalidGlvDepositInitialLongToken(address initialLongToken);\n    error InvalidGlvDepositInitialShortToken(address initialShortToken);\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\n    error MinGlvTokens(uint256 received, uint256 expected);\n\n    // OrderHandler errors\n    error OrderNotUpdatable(uint256 orderType);\n    error InvalidKeeperForFrozenOrder(address keeper);\n\n    // FeatureUtils errors\n    error DisabledFeature(bytes32 key);\n\n    // FeeHandler errors\n    error InvalidBuybackToken(address buybackToken);\n    error InvalidVersion(uint256 version);\n    error InsufficientBuybackOutputAmount(address feeToken, address buybackToken, uint256 outputAmount, uint256 minOutputAmount);\n    error BuybackAndFeeTokenAreEqual(address feeToken, address buybackToken);\n    error AvailableFeeAmountIsZero(address feeToken, address buybackToken, uint256 availableFeeAmount);\n    error MaxBuybackPriceAgeExceeded(uint256 priceTimestamp, uint256 buybackMaxPriceAge, uint256 currentTimestamp);\n    error EmptyClaimFeesMarket();\n\n    // GasUtils errors\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\n    error InvalidExecutionFee(uint256 executionFee, uint256 minExecutionFee, uint256 maxExecutionFee);\n    error EmptyRelayFeeAddress();\n\n    // MarketFactory errors\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\n\n    // MarketStoreUtils errors\n    error MarketNotFound(address key);\n\n    // MarketUtils errors\n    error EmptyMarket();\n    error DisabledMarket(address market);\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\n    error UnableToGetOppositeToken(address inputToken, address market);\n    error UnexpectedTokenForVirtualInventory(address token, address market);\n    error EmptyMarketTokenSupply();\n    error InvalidSwapMarket(address market);\n    error UnableToGetCachedTokenPrice(address token, address market);\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\n    error UnableToGetFundingFactorEmptyOpenInterest();\n    error InvalidPositionMarket(address market);\n    error InvalidCollateralTokenForMarket(address market, address token);\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\n    error UnexpectedPoolValue(int256 poolValue);\n\n    // Oracle errors\n    error SequencerDown();\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\n    error EmptyValidatedPrices(); // not used, kept for compatibility\n    error InvalidOracleProvider(address provider);\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\n    error GmEmptySigner(uint256 signerIndex);\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\n    error EmptyDataStreamFeedId(address token);\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\n    error EmptyChainlinkPriceFeedMultiplier(address token);\n    error EmptyDataStreamMultiplier(address token);\n    error InvalidDataStreamSpreadReductionFactor(address token, uint256 spreadReductionFactor);\n    error InvalidFeedPrice(address token, int256 price);\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\n    error InvalidGmOraclePrice(address token);\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\n    error EmptyChainlinkPriceFeed(address token);\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\n    error MaxRefPriceDeviationExceeded(\n        address token,\n        uint256 price,\n        uint256 refPrice,\n        uint256 maxRefPriceDeviationFactor\n    );\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\n    error EmptyChainlinkPaymentToken();\n    error NonAtomicOracleProvider(address provider);\n\n    // OracleModule errors\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\n    error EndOfOracleSimulation();\n\n    // OracleUtils errors\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\n\n    error EmptyPrimaryPrice(address token);\n\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\n\n    // BaseOrderUtils errors\n    error EmptyOrder();\n    error UnsupportedOrderType(uint256 orderType);\n    error InvalidOrderPrices(\n        uint256 primaryPriceMin,\n        uint256 primaryPriceMax,\n        uint256 triggerPrice,\n        uint256 orderType\n    );\n    error EmptySizeDeltaInTokens();\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\n    error OrderValidFromTimeNotReached(uint256 validFromTime, uint256 currentTimestamp);\n\n    // IncreaseOrderUtils errors\n    error UnexpectedPositionState();\n\n    // OrderUtils errors\n    error OrderTypeCannotBeCreated(uint256 orderType);\n    error OrderAlreadyFrozen();\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\n    error InvalidReceiver(address receiver);\n    error UnexpectedValidFromTime(uint256 orderType);\n\n    // OrderStoreUtils errors\n    error OrderNotFound(bytes32 key);\n\n    // SwapOrderUtils errors\n    error UnexpectedMarket();\n\n    // DecreasePositionCollateralUtils errors\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\n\n    // DecreasePositionUtils errors\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\n    error PositionShouldNotBeLiquidated(\n        string reason,\n        int256 remainingCollateralUsd,\n        int256 minCollateralUsd,\n        int256 minCollateralUsdForLeverage\n    );\n\n    // IncreasePositionUtils errors\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\n\n    // PositionStoreUtils errors\n    error PositionNotFound(bytes32 key);\n\n    // PositionUtils errors\n    error LiquidatablePosition(\n        string reason,\n        int256 remainingCollateralUsd,\n        int256 minCollateralUsd,\n        int256 minCollateralUsdForLeverage\n    );\n\n    error EmptyPosition();\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\n\n    // PositionPricingUtils errors\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\n\n    // ShiftStoreUtils errors\n    error ShiftNotFound(bytes32 key);\n\n    // ShiftUtils errors\n    error EmptyShift();\n    error EmptyShiftAmount();\n    error ShiftFromAndToMarketAreEqual(address market);\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\n\n    // SwapPricingUtils errors\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\n\n    // RoleModule errors\n    error Unauthorized(address msgSender, string role);\n\n    // RoleStore errors\n    error ThereMustBeAtLeastOneRoleAdmin();\n    error ThereMustBeAtLeastOneTimelockMultiSig();\n\n    // ExchangeRouter errors\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\n\n    // SwapUtils errors\n    error InvalidTokenIn(address tokenIn, address market);\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\n    error DuplicatedMarketInSwapPath(address market);\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\n\n    // SubaccountRouter errors\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\n    error InvalidCancellationReceiverForSubaccountOrder(address cancellationReceiver, address expectedCancellationReceiver);\n\n    // SubaccountUtils errors\n    error SubaccountNotAuthorized(address account, address subaccount);\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\n    error SubaccountApprovalExpired(address account, address subaccount, uint256 deadline, uint256 currentTimestamp);\n\n    // TokenUtils errors\n    error TokenTransferError(address token, address receiver, uint256 amount);\n    error EmptyHoldingAddress();\n    // Note that Transfer is misspelled as Tranfer in the EmptyTokenTranferGasLimit error\n    // some contracts with this error cannot be re-deployed so it has been left as is\n    error EmptyTokenTranferGasLimit(address token);\n\n    // AccountUtils errors\n    error EmptyAccount();\n    error EmptyReceiver();\n\n    // Array errors\n    error CompactedArrayOutOfBounds(\n        uint256[] compactedValues,\n        uint256 index,\n        uint256 slotIndex,\n        string label\n    );\n\n    error ArrayOutOfBoundsUint256(\n        uint256[] values,\n        uint256 index,\n        string label\n    );\n\n    error ArrayOutOfBoundsBytes(\n        bytes[] values,\n        uint256 index,\n        string label\n    );\n\n    // WithdrawalHandler errors\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\n\n    // WithdrawalStoreUtils errors\n    error WithdrawalNotFound(bytes32 key);\n\n    // WithdrawalUtils errors\n    error EmptyWithdrawal();\n    error EmptyWithdrawalAmount();\n    error MinLongTokens(uint256 received, uint256 expected);\n    error MinShortTokens(uint256 received, uint256 expected);\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\n    error InsufficientWntAmount(uint256 wntAmount, uint256 executionFee);\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\n\n    // Uint256Mask errors\n    error MaskIndexOutOfBounds(uint256 index, string label);\n    error DuplicatedIndex(uint256 index, string label);\n\n    // Cast errors\n    error Uint256AsBytesLengthExceeds32Bytes(uint256 length);\n\n    // ConfigSyncer errors\n    error SyncConfigInvalidInputLengths(uint256 marketsLength, uint256 parametersLength);\n    error SyncConfigUpdatesDisabledForMarket(address market);\n    error SyncConfigUpdatesDisabledForParameter(string parameter);\n    error SyncConfigUpdatesDisabledForMarketParameter(address market, string parameter);\n    error SyncConfigInvalidMarketFromData(address market, address marketFromData);\n\n    // Reader errors\n    error EmptyMarketPrice(address market);\n\n    // Gelato relay errors\n    error InvalidSignature(string signatureType);\n    // User sent incorrect fee token or incorrect swap path\n    error UnexpectedRelayFeeTokenAfterSwap(address feeToken, address expectedFeeToken);\n    error UnexpectedRelayFeeToken(address feeToken, address expectedFeeToken);\n    // Contract received unsupported fee token from Gelato relay\n    error UnsupportedRelayFeeToken(address feeToken, address expectedFeeToken);\n    error InvalidPermitSpender(address spender, address expectedSpender);\n    error InvalidUserNonce(uint256 storedUserNonce, uint256 userNonce);\n    error SubaccountApprovalDeadlinePassed(uint256 currentTimestamp, uint256 deadline);\n    error InvalidSubaccountApprovalNonce(uint256 storedNonce, uint256 nonce);\n    error DeadlinePassed(uint256 currentTimestamp, uint256 deadline);\n    error InsufficientRelayFee(uint256 requiredRelayFee, uint256 availableFeeAmount);\n    error InvalidSubaccountApprovalSubaccount();\n    error NonEmptyExternalCallsForSubaccountOrder();\n    error RelayEmptyBatch();\n    error RelayCalldataTooLong(uint256 calldataLength);\n    error InvalidExternalCalls(uint256 sendTokensLength, uint256 sendAmountsLength);\n    error MaxRelayFeeSwapForSubaccountExceeded(uint256 feeUsd, uint256 maxFeeUsd);\n}\n"
    },
    "contracts/error/ErrorUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary ErrorUtils {\n    // To get the revert reason, referenced from https://ethereum.stackexchange.com/a/83577\n    function getRevertMessage(bytes memory result) internal pure returns (string memory, bool) {\n        // If the result length is less than 68, then the transaction either panicked or failed silently\n        if (result.length < 68) {\n            return (\"\", false);\n        }\n\n        bytes4 errorSelector = getErrorSelectorFromData(result);\n\n        // 0x08c379a0 is the selector for Error(string)\n        // referenced from https://blog.soliditylang.org/2021/04/21/custom-errors/\n        if (errorSelector == bytes4(0x08c379a0)) {\n            assembly {\n                result := add(result, 0x04)\n            }\n\n            return (abi.decode(result, (string)), true);\n        }\n\n        // error may be a custom error, return an empty string for this case\n        return (\"\", false);\n    }\n\n    function getErrorSelectorFromData(bytes memory data) internal pure returns (bytes4) {\n        bytes4 errorSelector;\n\n        assembly {\n            errorSelector := mload(add(data, 0x20))\n        }\n\n        return errorSelector;\n    }\n\n    function revertWithParsedMessage(bytes memory result) internal pure {\n        (string memory revertMessage, bool hasRevertMessage) = getRevertMessage(result);\n\n        if (hasRevertMessage) {\n            revert(revertMessage);\n        } else {\n            revertWithCustomError(result);\n        }\n    }\n\n    function revertWithCustomError(bytes memory result) internal pure {\n        // referenced from https://ethereum.stackexchange.com/a/123588\n        uint256 length = result.length;\n        assembly {\n            revert(add(result, 0x20), length)\n        }\n    }\n}\n"
    },
    "contracts/event/EventEmitter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../role/RoleModule.sol\";\nimport \"./EventUtils.sol\";\n\n// @title EventEmitter\n// @dev Contract to emit events\n// This allows main events to be emitted from a single contract\n// Logic contracts can be updated while re-using the same eventEmitter contract\n// Peripheral services like monitoring or analytics would be able to continue\n// to work without an update and without segregating historical data\ncontract EventEmitter is RoleModule {\n    event EventLog(\n        address msgSender,\n        string eventName,\n        string indexed eventNameHash,\n        EventUtils.EventLogData eventData\n    );\n\n    event EventLog1(\n        address msgSender,\n        string eventName,\n        string indexed eventNameHash,\n        bytes32 indexed topic1,\n        EventUtils.EventLogData eventData\n    );\n\n    event EventLog2(\n        address msgSender,\n        string eventName,\n        string indexed eventNameHash,\n        bytes32 indexed topic1,\n        bytes32 indexed topic2,\n        EventUtils.EventLogData eventData\n    );\n\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\n\n    // @dev emit a general event log\n    // @param eventName the name of the event\n    // @param eventData the event data\n    function emitEventLog(\n        string memory eventName,\n        EventUtils.EventLogData memory eventData\n    ) external onlyController {\n        emit EventLog(\n            msg.sender,\n            eventName,\n            eventName,\n            eventData\n        );\n    }\n\n    // @dev emit a general event log\n    // @param eventName the name of the event\n    // @param topic1 topic1 for indexing\n    // @param eventData the event data\n    function emitEventLog1(\n        string memory eventName,\n        bytes32 topic1,\n        EventUtils.EventLogData memory eventData\n    ) external onlyController {\n        emit EventLog1(\n            msg.sender,\n            eventName,\n            eventName,\n            topic1,\n            eventData\n        );\n    }\n\n    // @dev emit a general event log\n    // @param eventName the name of the event\n    // @param topic1 topic1 for indexing\n    // @param topic2 topic2 for indexing\n    // @param eventData the event data\n    function emitEventLog2(\n        string memory eventName,\n        bytes32 topic1,\n        bytes32 topic2,\n        EventUtils.EventLogData memory eventData\n    ) external onlyController {\n        emit EventLog2(\n            msg.sender,\n            eventName,\n            eventName,\n            topic1,\n            topic2,\n            eventData\n        );\n    }\n\n\n\n    // @dev event log for general use\n    // @param topic1 event topic 1\n    // @param data additional data\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\n        uint256 len = data.length;\n        assembly {\n            log1(add(data, 32), len, topic1)\n        }\n    }\n\n    // @dev event log for general use\n    // @param topic1 event topic 1\n    // @param topic2 event topic 2\n    // @param data additional data\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\n        uint256 len = data.length;\n        assembly {\n            log2(add(data, 32), len, topic1, topic2)\n        }\n    }\n\n    // @dev event log for general use\n    // @param topic1 event topic 1\n    // @param topic2 event topic 2\n    // @param topic3 event topic 3\n    // @param data additional data\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\n        uint256 len = data.length;\n        assembly {\n            log3(add(data, 32), len, topic1, topic2, topic3)\n        }\n    }\n\n    // @dev event log for general use\n    // @param topic1 event topic 1\n    // @param topic2 event topic 2\n    // @param topic3 event topic 3\n    // @param topic4 event topic 4\n    // @param data additional data\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\n        uint256 len = data.length;\n        assembly {\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\n        }\n    }\n}\n"
    },
    "contracts/event/EventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary EventUtils {\n    struct EmitPositionDecreaseParams {\n        bytes32 key;\n        address account;\n        address market;\n        address collateralToken;\n        bool isLong;\n    }\n\n    struct EventLogData {\n        AddressItems addressItems;\n        UintItems uintItems;\n        IntItems intItems;\n        BoolItems boolItems;\n        Bytes32Items bytes32Items;\n        BytesItems bytesItems;\n        StringItems stringItems;\n    }\n\n    struct AddressItems {\n        AddressKeyValue[] items;\n        AddressArrayKeyValue[] arrayItems;\n    }\n\n    struct UintItems {\n        UintKeyValue[] items;\n        UintArrayKeyValue[] arrayItems;\n    }\n\n    struct IntItems {\n        IntKeyValue[] items;\n        IntArrayKeyValue[] arrayItems;\n    }\n\n    struct BoolItems {\n        BoolKeyValue[] items;\n        BoolArrayKeyValue[] arrayItems;\n    }\n\n    struct Bytes32Items {\n        Bytes32KeyValue[] items;\n        Bytes32ArrayKeyValue[] arrayItems;\n    }\n\n    struct BytesItems {\n        BytesKeyValue[] items;\n        BytesArrayKeyValue[] arrayItems;\n    }\n\n    struct StringItems {\n        StringKeyValue[] items;\n        StringArrayKeyValue[] arrayItems;\n    }\n\n    struct AddressKeyValue {\n        string key;\n        address value;\n    }\n\n    struct AddressArrayKeyValue {\n        string key;\n        address[] value;\n    }\n\n    struct UintKeyValue {\n        string key;\n        uint256 value;\n    }\n\n    struct UintArrayKeyValue {\n        string key;\n        uint256[] value;\n    }\n\n    struct IntKeyValue {\n        string key;\n        int256 value;\n    }\n\n    struct IntArrayKeyValue {\n        string key;\n        int256[] value;\n    }\n\n    struct BoolKeyValue {\n        string key;\n        bool value;\n    }\n\n    struct BoolArrayKeyValue {\n        string key;\n        bool[] value;\n    }\n\n    struct Bytes32KeyValue {\n        string key;\n        bytes32 value;\n    }\n\n    struct Bytes32ArrayKeyValue {\n        string key;\n        bytes32[] value;\n    }\n\n    struct BytesKeyValue {\n        string key;\n        bytes value;\n    }\n\n    struct BytesArrayKeyValue {\n        string key;\n        bytes[] value;\n    }\n\n    struct StringKeyValue {\n        string key;\n        string value;\n    }\n\n    struct StringArrayKeyValue {\n        string key;\n        string[] value;\n    }\n\n    function initItems(AddressItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.AddressKeyValue[](size);\n    }\n\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\n    }\n\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(UintItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.UintKeyValue[](size);\n    }\n\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\n    }\n\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(IntItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.IntKeyValue[](size);\n    }\n\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\n    }\n\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(BoolItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.BoolKeyValue[](size);\n    }\n\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\n    }\n\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\n        items.items = new EventUtils.Bytes32KeyValue[](size);\n    }\n\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\n    }\n\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(BytesItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.BytesKeyValue[](size);\n    }\n\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\n    }\n\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(StringItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.StringKeyValue[](size);\n    }\n\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\n    }\n\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n}\n"
    },
    "contracts/exchange/AdlHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOrderHandler.sol\";\nimport \"../adl/AdlUtils.sol\";\nimport \"../order/ExecuteOrderUtils.sol\";\n\n// @title AdlHandler\n// @dev Contract to handle adls\ncontract AdlHandler is BaseOrderHandler {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    // @dev ExecuteAdlCache struct used in executeAdl to avoid\n    // stack too deep errors\n    struct ExecuteAdlCache {\n        uint256 startingGas;\n        bytes32 key;\n        bool shouldAllowAdl;\n        uint256 maxPnlFactorForAdl;\n        int256 pnlToPoolFactor;\n        int256 nextPnlToPoolFactor;\n        uint256 minPnlFactorForAdl;\n    }\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        OrderVault _orderVault,\n        SwapHandler _swapHandler,\n        IReferralStorage _referralStorage\n    ) BaseOrderHandler(\n        _roleStore,\n        _dataStore,\n        _eventEmitter,\n        _oracle,\n        _orderVault,\n        _swapHandler,\n        _referralStorage\n    ) {}\n\n    // @dev checks the ADL state to update the isAdlEnabled flag\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @param oracleParams OracleUtils.SetPricesParams\n    function updateAdlState(\n        address market,\n        bool isLong,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external\n        globalNonReentrant\n        onlyAdlKeeper\n        withOraclePrices(oracleParams)\n    {\n        AdlUtils.updateAdlState(\n            dataStore,\n            eventEmitter,\n            oracle,\n            market,\n            isLong\n        );\n    }\n\n    // @dev auto-deleverages a position\n    // there is no validation that ADL is executed in order of position profit\n    // or position size, this is due to the limitation of the gas overhead\n    // required to check this ordering\n    //\n    // ADL keepers could be separately incentivised using a rebate based on\n    // position profit, this is not implemented within the contracts at the moment\n    //\n    // @param account the position's account\n    // @param market the position's market\n    // @param collateralToken the position's collateralToken\n    // @param isLong whether the position is long or short\n    // @param sizeDeltaUsd the size to reduce the position by\n    // @param oracleParams OracleUtils.SetPricesParams\n    function executeAdl(\n        address account,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 sizeDeltaUsd,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external\n        globalNonReentrant\n        onlyAdlKeeper\n        withOraclePrices(oracleParams)\n    {\n        ExecuteAdlCache memory cache;\n\n        cache.startingGas = gasleft();\n\n        AdlUtils.validateAdl(\n            dataStore,\n            oracle,\n            market,\n            isLong\n        );\n\n        (cache.shouldAllowAdl, cache.pnlToPoolFactor, cache.maxPnlFactorForAdl) = MarketUtils.isPnlFactorExceeded(\n            dataStore,\n            oracle,\n            market,\n            isLong,\n            Keys.MAX_PNL_FACTOR_FOR_ADL\n        );\n\n        if (!cache.shouldAllowAdl) {\n            revert Errors.AdlNotRequired(cache.pnlToPoolFactor, cache.maxPnlFactorForAdl);\n        }\n\n        cache.key = AdlUtils.createAdlOrder(\n            AdlUtils.CreateAdlOrderParams(\n                dataStore,\n                eventEmitter,\n                account,\n                market,\n                collateralToken,\n                isLong,\n                sizeDeltaUsd,\n                oracle.minTimestamp() // updatedAtTime\n            )\n        );\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, cache.key);\n\n        BaseOrderUtils.ExecuteOrderParams memory params = _getExecuteOrderParams(\n            cache.key,\n            order,\n            msg.sender,\n            cache.startingGas,\n            Order.SecondaryOrderType.Adl\n        );\n\n        FeatureUtils.validateFeature(params.contracts.dataStore, Keys.executeAdlFeatureDisabledKey(address(this), uint256(params.order.orderType())));\n\n        ExecuteOrderUtils.executeOrder(params);\n\n        // validate that the ratio of pending pnl to pool value was decreased\n        cache.nextPnlToPoolFactor = MarketUtils.getPnlToPoolFactor(dataStore, oracle, market, isLong, true);\n        if (cache.nextPnlToPoolFactor >= cache.pnlToPoolFactor) {\n            revert Errors.InvalidAdl(cache.nextPnlToPoolFactor, cache.pnlToPoolFactor);\n        }\n\n        cache.minPnlFactorForAdl = MarketUtils.getMinPnlFactorAfterAdl(dataStore, market, isLong);\n\n        if (cache.nextPnlToPoolFactor < cache.minPnlFactorForAdl.toInt256()) {\n            revert Errors.PnlOvercorrected(cache.nextPnlToPoolFactor, cache.minPnlFactorForAdl);\n        }\n    }\n}\n"
    },
    "contracts/exchange/BaseHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../oracle/OracleModule.sol\";\nimport \"../role/RoleModule.sol\";\nimport \"../utils/GlobalReentrancyGuard.sol\";\nimport \"../error/ErrorUtils.sol\";\nimport \"../feature/FeatureUtils.sol\";\n\ncontract BaseHandler is RoleModule, GlobalReentrancyGuard, OracleModule {\n    EventEmitter public immutable eventEmitter;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle\n    ) RoleModule(_roleStore) GlobalReentrancyGuard(_dataStore) OracleModule(_oracle) {\n        eventEmitter = _eventEmitter;\n    }\n\n    receive() external payable {\n        address wnt = dataStore.getAddress(Keys.WNT);\n        if (msg.sender != wnt) {\n            revert Errors.InvalidNativeTokenSender(msg.sender);\n        }\n    }\n\n    function validateRequestCancellation(\n        uint256 createdAtTime,\n        string memory requestType\n    ) internal view {\n        uint256 requestExpirationTime = dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\n        uint256 requestAge = Chain.currentTimestamp() - createdAtTime;\n        if (requestAge < requestExpirationTime) {\n            revert Errors.RequestNotYetCancellable(requestAge, requestExpirationTime, requestType);\n        }\n    }\n\n    function validateNonKeeperError(bytes4 errorSelector, bytes memory reasonBytes) internal pure {\n        if (\n            OracleUtils.isOracleError(errorSelector) ||\n            errorSelector == Errors.DisabledFeature.selector ||\n            errorSelector == Errors.InsufficientGasLeftForCallback.selector ||\n            errorSelector == Errors.InsufficientGasForCancellation.selector\n        ) {\n            ErrorUtils.revertWithCustomError(reasonBytes);\n        }\n    }\n}\n"
    },
    "contracts/exchange/BaseOrderHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseHandler.sol\";\n\nimport \"../market/Market.sol\";\nimport \"../order/BaseOrderUtils.sol\";\nimport \"../order/OrderVault.sol\";\nimport \"../order/Order.sol\";\nimport \"../swap/SwapHandler.sol\";\n\nimport \"../referral/IReferralStorage.sol\";\n\n// @title BaseOrderHandler\n// @dev Base contract for shared order handler functions\ncontract BaseOrderHandler is BaseHandler {\n    using SafeCast for uint256;\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    OrderVault public immutable orderVault;\n    SwapHandler public immutable swapHandler;\n    IReferralStorage public immutable referralStorage;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        OrderVault _orderVault,\n        SwapHandler _swapHandler,\n        IReferralStorage _referralStorage\n    ) BaseHandler(_roleStore, _dataStore, _eventEmitter, _oracle) {\n        orderVault = _orderVault;\n        swapHandler = _swapHandler;\n        referralStorage = _referralStorage;\n    }\n\n    // @dev get the BaseOrderUtils.ExecuteOrderParams to execute an order\n    // @return the required BaseOrderUtils.ExecuteOrderParams params to execute the order\n    function _getExecuteOrderParams(\n        bytes32 key,\n        Order.Props memory order,\n        address keeper,\n        uint256 startingGas,\n        Order.SecondaryOrderType secondaryOrderType\n    ) internal view returns (BaseOrderUtils.ExecuteOrderParams memory) {\n        BaseOrderUtils.ExecuteOrderParams memory params;\n\n        params.key = key;\n        params.order = order;\n        params.swapPathMarkets = MarketUtils.getSwapPathMarkets(\n            dataStore,\n            params.order.swapPath()\n        );\n\n        params.contracts.dataStore = dataStore;\n        params.contracts.eventEmitter = eventEmitter;\n        params.contracts.orderVault = orderVault;\n        params.contracts.oracle = oracle;\n        params.contracts.swapHandler = swapHandler;\n        params.contracts.referralStorage = referralStorage;\n\n        params.minOracleTimestamp = oracle.minTimestamp();\n        params.maxOracleTimestamp = oracle.maxTimestamp();\n\n        if (params.order.market() != address(0)) {\n            params.market = MarketUtils.getEnabledMarket(params.contracts.dataStore, params.order.market());\n        }\n\n        params.keeper = keeper;\n        params.startingGas = startingGas;\n\n        params.secondaryOrderType = secondaryOrderType;\n\n        return params;\n    }\n}\n"
    },
    "contracts/exchange/DepositHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseHandler.sol\";\n\nimport \"../market/Market.sol\";\n\nimport \"../deposit/Deposit.sol\";\nimport \"../deposit/DepositVault.sol\";\nimport \"../deposit/DepositUtils.sol\";\nimport \"../deposit/ExecuteDepositUtils.sol\";\n\nimport \"./IDepositHandler.sol\";\n\n// @title DepositHandler\n// @dev Contract to handle creation, execution and cancellation of deposits\ncontract DepositHandler is IDepositHandler, BaseHandler {\n    using Deposit for Deposit.Props;\n\n    DepositVault public immutable depositVault;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        DepositVault _depositVault\n    ) BaseHandler(_roleStore, _dataStore, _eventEmitter, _oracle) {\n        depositVault = _depositVault;\n    }\n\n    // @dev creates a deposit in the deposit store\n    // @param account the depositing account\n    // @param params DepositUtils.CreateDepositParams\n    function createDeposit(\n        address account,\n        DepositUtils.CreateDepositParams calldata params\n    ) external override globalNonReentrant onlyController returns (bytes32) {\n        FeatureUtils.validateFeature(dataStore, Keys.createDepositFeatureDisabledKey(address(this)));\n\n        return DepositUtils.createDeposit(\n            dataStore,\n            eventEmitter,\n            depositVault,\n            account,\n            params\n        );\n    }\n\n    // @dev cancels a deposit\n    // @param key the deposit key\n    function cancelDeposit(bytes32 key) external override globalNonReentrant onlyController {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n        Deposit.Props memory deposit = DepositStoreUtils.get(_dataStore, key);\n\n        FeatureUtils.validateFeature(_dataStore, Keys.cancelDepositFeatureDisabledKey(address(this)));\n\n        validateRequestCancellation(\n            deposit.updatedAtTime(),\n            \"Deposit\"\n        );\n\n        DepositUtils.cancelDeposit(\n            _dataStore,\n            eventEmitter,\n            depositVault,\n            key,\n            deposit.account(),\n            startingGas,\n            Keys.USER_INITIATED_CANCEL,\n            \"\"\n        );\n    }\n\n    // @dev executes a deposit\n    // @param key the key of the deposit to execute\n    // @param oracleParams OracleUtils.SetPricesParams\n    function executeDeposit(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external\n        globalNonReentrant\n        onlyOrderKeeper\n        withOraclePrices(oracleParams)\n    {\n        uint256 startingGas = gasleft();\n\n        Deposit.Props memory deposit = DepositStoreUtils.get(dataStore, key);\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteDepositGasLimit(dataStore, deposit);\n        GasUtils.validateExecutionGas(dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(dataStore, startingGas);\n\n        try this._executeDeposit{ gas: executionGas }(\n            key,\n            deposit,\n            msg.sender\n        ) {\n        } catch (bytes memory reasonBytes) {\n            _handleDepositError(\n                key,\n                startingGas,\n                reasonBytes\n            );\n        }\n    }\n\n    // @dev simulate execution of a deposit to check for any errors\n    // @param key the deposit key\n    // @param params OracleUtils.SimulatePricesParams\n    function simulateExecuteDeposit(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params\n    ) external\n        override\n        onlyController\n        withSimulatedOraclePrices(params)\n        globalNonReentrant\n    {\n        Deposit.Props memory deposit = DepositStoreUtils.get(dataStore, key);\n\n        this._executeDeposit(\n            key,\n            deposit,\n            msg.sender\n        );\n    }\n\n    // @dev executes a deposit\n    // @param oracleParams OracleUtils.SetPricesParams\n    // @param keeper the keeper executing the deposit\n    // @param startingGas the starting gas\n    function _executeDeposit(\n        bytes32 key,\n        Deposit.Props memory deposit,\n        address keeper\n    ) external onlySelf {\n        uint256 startingGas = gasleft();\n\n        FeatureUtils.validateFeature(dataStore, Keys.executeDepositFeatureDisabledKey(address(this)));\n\n        ExecuteDepositUtils.ExecuteDepositParams memory params = ExecuteDepositUtils.ExecuteDepositParams(\n            dataStore,\n            eventEmitter,\n            depositVault,\n            oracle,\n            key,\n            keeper,\n            startingGas,\n            ISwapPricingUtils.SwapPricingType.Deposit,\n            true // includeVirtualInventoryImpact\n        );\n\n        ExecuteDepositUtils.executeDeposit(params, deposit);\n    }\n\n    // @dev handle errors from deposits\n    // @param key the deposit key\n    // @param startingGas the starting gas of the txn\n    // @param reasonBytes the reason bytes of the error\n    function _handleDepositError(\n        bytes32 key,\n        uint256 startingGas,\n        bytes memory reasonBytes\n    ) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        DepositUtils.cancelDeposit(\n            dataStore,\n            eventEmitter,\n            depositVault,\n            key,\n            msg.sender,\n            startingGas,\n            reason,\n            reasonBytes\n        );\n    }\n}\n"
    },
    "contracts/exchange/GlvHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./BaseHandler.sol\";\n\nimport \"../glv/glvDeposit/GlvDepositUtils.sol\";\nimport \"../glv/glvWithdrawal/GlvWithdrawalUtils.sol\";\nimport \"../glv/glvShift/GlvShiftUtils.sol\";\n\ncontract GlvHandler is BaseHandler, ReentrancyGuard {\n    using GlvDeposit for GlvDeposit.Props;\n    using GlvShift for GlvShift.Props;\n    using GlvWithdrawal for GlvWithdrawal.Props;\n\n    GlvVault public immutable glvVault;\n    ShiftVault public immutable shiftVault;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        GlvVault _glvVault,\n        ShiftVault _shiftVault\n    ) BaseHandler(_roleStore, _dataStore, _eventEmitter, _oracle) {\n        glvVault = _glvVault;\n        shiftVault = _shiftVault;\n    }\n\n    function createGlvDeposit(\n        address account,\n        GlvDepositUtils.CreateGlvDepositParams calldata params\n    ) external globalNonReentrant onlyController returns (bytes32) {\n        FeatureUtils.validateFeature(dataStore, Keys.createGlvDepositFeatureDisabledKey(address(this)));\n\n        return GlvDepositUtils.createGlvDeposit(dataStore, eventEmitter, glvVault, account, params);\n    }\n\n    // @key glvDeposit key\n    // @oracleParams prices for all markets in GLV are required\n    function executeGlvDeposit(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external globalNonReentrant onlyOrderKeeper withOraclePrices(oracleParams) {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n\n        GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(_dataStore, key);\n        uint256 marketCount = GlvUtils.getGlvMarketCount(_dataStore, glvDeposit.glv());\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteGlvDepositGasLimit(_dataStore, glvDeposit, marketCount);\n        GasUtils.validateExecutionGas(_dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(_dataStore, startingGas);\n\n        try this._executeGlvDeposit{gas: executionGas}(key, glvDeposit, msg.sender) {} catch (\n            bytes memory reasonBytes\n        ) {\n            _handleGlvDepositError(key, startingGas, reasonBytes);\n        }\n    }\n\n    function _executeGlvDeposit(bytes32 key, GlvDeposit.Props memory glvDeposit, address keeper) external onlySelf {\n        uint256 startingGas = gasleft();\n\n        FeatureUtils.validateFeature(dataStore, Keys.executeGlvDepositFeatureDisabledKey(address(this)));\n\n        GlvDepositUtils.ExecuteGlvDepositParams memory params = GlvDepositUtils.ExecuteGlvDepositParams({\n            key: key,\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            glvVault: glvVault,\n            oracle: oracle,\n            startingGas: startingGas,\n            keeper: keeper\n        });\n\n        GlvDepositUtils.executeGlvDeposit(params, glvDeposit);\n    }\n\n    function _handleGlvDepositError(bytes32 key, uint256 startingGas, bytes memory reasonBytes) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        (string memory reason /* bool hasRevertMessage */, ) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        GlvDepositUtils.CancelGlvDepositParams memory params = GlvDepositUtils.CancelGlvDepositParams({\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            glvVault: glvVault,\n            key: key,\n            keeper: msg.sender,\n            startingGas: startingGas,\n            reason: reason,\n            reasonBytes: reasonBytes\n        });\n        GlvDepositUtils.cancelGlvDeposit(params);\n    }\n\n    function cancelGlvDeposit(bytes32 key) external globalNonReentrant onlyController {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n        FeatureUtils.validateFeature(_dataStore, Keys.cancelGlvDepositFeatureDisabledKey(address(this)));\n\n        GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(_dataStore, key);\n        validateRequestCancellation(glvDeposit.updatedAtTime(), \"GlvDeposit\");\n\n        GlvDepositUtils.CancelGlvDepositParams memory params = GlvDepositUtils.CancelGlvDepositParams({\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            glvVault: glvVault,\n            key: key,\n            keeper: glvDeposit.account(),\n            startingGas: startingGas,\n            reason: Keys.USER_INITIATED_CANCEL,\n            reasonBytes: \"\"\n        });\n        GlvDepositUtils.cancelGlvDeposit(params);\n    }\n\n    function createGlvWithdrawal(\n        address account,\n        GlvWithdrawalUtils.CreateGlvWithdrawalParams calldata params\n    ) external globalNonReentrant onlyController returns (bytes32) {\n        DataStore _dataStore = dataStore;\n        FeatureUtils.validateFeature(_dataStore, Keys.createGlvWithdrawalFeatureDisabledKey(address(this)));\n\n        return GlvWithdrawalUtils.createGlvWithdrawal(_dataStore, eventEmitter, glvVault, account, params);\n    }\n\n    // @key glvDeposit key\n    // @oracleParams prices for all markets in GLV are required\n    function executeGlvWithdrawal(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external globalNonReentrant onlyOrderKeeper withOraclePrices(oracleParams) {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n\n        GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(_dataStore, key);\n        uint256 marketCount = GlvUtils.getGlvMarketCount(_dataStore, glvWithdrawal.glv());\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteGlvWithdrawalGasLimit(\n            _dataStore,\n            glvWithdrawal,\n            marketCount\n        );\n        GasUtils.validateExecutionGas(_dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(_dataStore, startingGas);\n\n        try this._executeGlvWithdrawal{gas: executionGas}(key, glvWithdrawal, msg.sender) {} catch (\n            bytes memory reasonBytes\n        ) {\n            _handleGlvWithdrawalError(key, startingGas, reasonBytes);\n        }\n    }\n\n    function _executeGlvWithdrawal(\n        bytes32 key,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        address keeper\n    ) external onlySelf {\n        uint256 startingGas = gasleft();\n\n        FeatureUtils.validateFeature(dataStore, Keys.executeGlvWithdrawalFeatureDisabledKey(address(this)));\n\n        GlvWithdrawalUtils.ExecuteGlvWithdrawalParams memory params = GlvWithdrawalUtils.ExecuteGlvWithdrawalParams({\n            key: key,\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            glvVault: glvVault,\n            oracle: oracle,\n            startingGas: startingGas,\n            keeper: keeper\n        });\n\n        GlvWithdrawalUtils.executeGlvWithdrawal(params, glvWithdrawal);\n    }\n\n    function _handleGlvWithdrawalError(bytes32 key, uint256 startingGas, bytes memory reasonBytes) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        (string memory reason /* bool hasRevertMessage */, ) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        GlvWithdrawalUtils.CancelGlvWithdrawalParams memory params = GlvWithdrawalUtils.CancelGlvWithdrawalParams({\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            glvVault: glvVault,\n            key: key,\n            keeper: msg.sender,\n            startingGas: startingGas,\n            reason: reason,\n            reasonBytes: reasonBytes\n        });\n        GlvWithdrawalUtils.cancelGlvWithdrawal(params);\n    }\n\n    function cancelGlvWithdrawal(bytes32 key) external globalNonReentrant onlyController {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n        FeatureUtils.validateFeature(_dataStore, Keys.cancelGlvWithdrawalFeatureDisabledKey(address(this)));\n\n        GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(_dataStore, key);\n        validateRequestCancellation(glvWithdrawal.updatedAtTime(), \"GlvWithdrawal\");\n\n        GlvWithdrawalUtils.CancelGlvWithdrawalParams memory params = GlvWithdrawalUtils.CancelGlvWithdrawalParams({\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            glvVault: glvVault,\n            key: key,\n            keeper: glvWithdrawal.account(),\n            startingGas: startingGas,\n            reason: Keys.USER_INITIATED_CANCEL,\n            reasonBytes: \"\"\n        });\n        GlvWithdrawalUtils.cancelGlvWithdrawal(params);\n    }\n\n    function simulateExecuteGlvDeposit(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params\n    ) external onlyController withSimulatedOraclePrices(params) globalNonReentrant {\n        GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(dataStore, key);\n\n        this._executeGlvDeposit(key, glvDeposit, msg.sender);\n    }\n\n    function simulateExecuteGlvWithdrawal(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params\n    ) external onlyController withSimulatedOraclePrices(params) globalNonReentrant {\n        GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(dataStore, key);\n\n        this._executeGlvWithdrawal(key, glvWithdrawal, msg.sender);\n    }\n\n    function createGlvShift(\n        GlvShiftUtils.CreateGlvShiftParams memory params\n    ) external globalNonReentrant onlyOrderKeeper returns (bytes32) {\n        FeatureUtils.validateFeature(dataStore, Keys.createGlvShiftFeatureDisabledKey(address(this)));\n\n        return GlvShiftUtils.createGlvShift(dataStore, eventEmitter, params);\n    }\n\n    // @key glvDeposit key\n    // @oracleParams prices for `fromMarket` and `toMarket` are required\n    function executeGlvShift(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external globalNonReentrant onlyOrderKeeper withOraclePrices(oracleParams) {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n\n        GlvShift.Props memory glvShift = GlvShiftStoreUtils.get(_dataStore, key);\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteGlvShiftGasLimit(_dataStore);\n        GasUtils.validateExecutionGas(_dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(_dataStore, startingGas);\n\n        try this._executeGlvShift{gas: executionGas}(key, glvShift, msg.sender) {} catch (bytes memory reasonBytes) {\n            _handleGlvShiftError(key, reasonBytes);\n        }\n    }\n\n    function _executeGlvShift(bytes32 key, GlvShift.Props memory glvShift, address keeper) external onlySelf {\n        FeatureUtils.validateFeature(dataStore, Keys.executeGlvShiftFeatureDisabledKey(address(this)));\n\n        GlvShiftUtils.ExecuteGlvShiftParams memory params = GlvShiftUtils.ExecuteGlvShiftParams({\n            key: key,\n            dataStore: dataStore,\n            eventEmitter: eventEmitter,\n            shiftVault: shiftVault,\n            glvVault: glvVault,\n            oracle: oracle,\n            keeper: keeper\n        });\n\n        GlvShiftUtils.executeGlvShift(params, glvShift);\n    }\n\n    function _handleGlvShiftError(bytes32 key, bytes memory reasonBytes) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        (string memory reason /* bool hasRevertMessage */, ) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        GlvShiftUtils.cancelGlvShift(\n            dataStore,\n            eventEmitter,\n            key,\n            reason,\n            reasonBytes\n        );\n    }\n\n    function addMarketToGlv(address glv, address market) external globalNonReentrant onlyConfigKeeper {\n        GlvUtils.addMarketToGlv(dataStore, eventEmitter, glv, market);\n    }\n\n    function removeMarketFromGlv(address glv, address market) external globalNonReentrant onlyConfigKeeper {\n        GlvUtils.removeMarketFromGlv(dataStore, eventEmitter, glv, market);\n    }\n}\n"
    },
    "contracts/exchange/IDepositHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../deposit/DepositUtils.sol\";\nimport \"../oracle/OracleUtils.sol\";\n\ninterface IDepositHandler {\n    function createDeposit(address account, DepositUtils.CreateDepositParams calldata params) external returns (bytes32);\n    function cancelDeposit(bytes32 key) external;\n    function simulateExecuteDeposit(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params\n    ) external;\n}\n"
    },
    "contracts/exchange/IGlvHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../glv/glvDeposit/GlvDepositUtils.sol\";\nimport \"../glv/glvWithdrawal/GlvWithdrawalUtils.sol\";\nimport \"../oracle/OracleUtils.sol\";\n\ninterface IGlvHandler {\n    function createGlvDeposit(\n        address account,\n        GlvDepositUtils.CreateGlvDepositParams calldata params\n    ) external payable returns (bytes32);\n\n    function cancelGlvDeposit(bytes32 key) external;\n\n    function simulateExecuteGlvDeposit(bytes32 key, OracleUtils.SimulatePricesParams memory params) external;\n\n    function createGlvWithdrawal(\n        address account,\n        GlvWithdrawalUtils.CreateGlvWithdrawalParams calldata params\n    ) external payable returns (bytes32);\n\n    function cancelGlvWithdrawal(bytes32 key) external;\n\n    function simulateExecuteGlvWithdrawal(bytes32 key, OracleUtils.SimulatePricesParams memory params) external;\n}\n"
    },
    "contracts/exchange/IOrderHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../order/IBaseOrderUtils.sol\";\nimport \"../oracle/OracleUtils.sol\";\n\ninterface IOrderHandler {\n    function createOrder(\n        address account,\n        IBaseOrderUtils.CreateOrderParams calldata params,\n        bool shouldCapMaxExecutionFee\n    ) external returns (bytes32);\n\n    function simulateExecuteOrder(bytes32 key, OracleUtils.SimulatePricesParams memory params) external;\n\n    function updateOrder(\n        bytes32 key,\n        uint256 sizeDeltaUsd,\n        uint256 acceptablePrice,\n        uint256 triggerPrice,\n        uint256 minOutputAmount,\n        uint256 validFromTime,\n        bool autoCancel,\n        Order.Props memory order,\n        bool shouldCapMaxExecutionFee\n    ) external;\n\n    function cancelOrder(bytes32 key) external;\n}\n"
    },
    "contracts/exchange/IShiftHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../shift/ShiftUtils.sol\";\nimport \"../oracle/OracleUtils.sol\";\n\ninterface IShiftHandler {\n    function createShift(address account, ShiftUtils.CreateShiftParams calldata params) external returns (bytes32);\n    function cancelShift(bytes32 key) external;\n    function simulateExecuteShift(bytes32 key, OracleUtils.SimulatePricesParams memory params) external;\n}\n"
    },
    "contracts/exchange/IWithdrawalHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../withdrawal/WithdrawalUtils.sol\";\nimport \"../oracle/OracleUtils.sol\";\nimport \"../pricing/ISwapPricingUtils.sol\";\n\ninterface IWithdrawalHandler {\n    function createWithdrawal(address account, WithdrawalUtils.CreateWithdrawalParams calldata params) external returns (bytes32);\n    function cancelWithdrawal(bytes32 key) external;\n    function executeAtomicWithdrawal(\n        address account,\n        WithdrawalUtils.CreateWithdrawalParams calldata params,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external;\n    function simulateExecuteWithdrawal(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external;\n}\n"
    },
    "contracts/exchange/LiquidationHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOrderHandler.sol\";\nimport \"../liquidation/LiquidationUtils.sol\";\nimport \"../order/ExecuteOrderUtils.sol\";\n\n// @title LiquidationHandler\n// @dev Contract to handle liquidations\ncontract LiquidationHandler is BaseOrderHandler {\n    using SafeCast for uint256;\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        OrderVault _orderVault,\n        SwapHandler _swapHandler,\n        IReferralStorage _referralStorage\n    ) BaseOrderHandler(\n        _roleStore,\n        _dataStore,\n        _eventEmitter,\n        _oracle,\n        _orderVault,\n        _swapHandler,\n        _referralStorage\n    ) {}\n\n    // @dev executes a position liquidation\n    // @param account the account of the position to liquidate\n    // @param market the position's market\n    // @param collateralToken the position's collateralToken\n    // @param isLong whether the position is long or short\n    // @param oracleParams OracleUtils.SetPricesParams\n    function executeLiquidation(\n        address account,\n        address market,\n        address collateralToken,\n        bool isLong,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external\n        globalNonReentrant\n        onlyLiquidationKeeper\n        withOraclePrices(oracleParams)\n    {\n        uint256 startingGas = gasleft();\n\n        oracle.validateSequencerUp();\n\n        bytes32 key = LiquidationUtils.createLiquidationOrder(\n            dataStore,\n            eventEmitter,\n            account,\n            market,\n            collateralToken,\n            isLong\n        );\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n\n        BaseOrderUtils.ExecuteOrderParams memory params = _getExecuteOrderParams(\n            key,\n            order,\n            msg.sender,\n            startingGas,\n            Order.SecondaryOrderType.None\n        );\n\n        FeatureUtils.validateFeature(params.contracts.dataStore, Keys.executeOrderFeatureDisabledKey(address(this), uint256(params.order.orderType())));\n\n        ExecuteOrderUtils.executeOrder(params);\n    }\n}\n"
    },
    "contracts/exchange/OrderHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOrderHandler.sol\";\nimport \"../error/ErrorUtils.sol\";\nimport \"./IOrderHandler.sol\";\nimport \"../order/OrderUtils.sol\";\nimport \"../order/ExecuteOrderUtils.sol\";\n\n// @title OrderHandler\n// @dev Contract to handle creation, execution and cancellation of orders\ncontract OrderHandler is IOrderHandler, BaseOrderHandler {\n    using SafeCast for uint256;\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        OrderVault _orderVault,\n        SwapHandler _swapHandler,\n        IReferralStorage _referralStorage\n    ) BaseOrderHandler(\n        _roleStore,\n        _dataStore,\n        _eventEmitter,\n        _oracle,\n        _orderVault,\n        _swapHandler,\n        _referralStorage\n    ) {}\n\n    // @dev creates an order in the order store\n    // @param account the order's account\n    // @param params BaseOrderUtils.CreateOrderParams\n    function createOrder(\n        address account,\n        IBaseOrderUtils.CreateOrderParams calldata params,\n        bool shouldCapMaxExecutionFee\n    ) external override globalNonReentrant onlyController returns (bytes32) {\n        FeatureUtils.validateFeature(dataStore, Keys.createOrderFeatureDisabledKey(address(this), uint256(params.orderType)));\n\n        return OrderUtils.createOrder(\n            dataStore,\n            eventEmitter,\n            orderVault,\n            referralStorage,\n            account,\n            params,\n            shouldCapMaxExecutionFee\n        );\n    }\n\n    struct UpdateOrderCache {\n        address wnt;\n        uint256 receivedWnt;\n        uint256 estimatedGasLimit;\n        uint256 oraclePriceCount;\n    }\n\n    /**\n     * @dev Updates the given order with the specified size delta, acceptable price, and trigger price.\n     * The `updateOrder()` feature must be enabled for the given order type. The caller must be the owner\n     * of the order, and the order must not be a market order. The size delta, trigger price, and\n     * acceptable price are updated on the order, and the order is unfrozen. Any additional WNT that is\n     * transferred to the contract is added to the order's execution fee. The updated order is then saved\n     * in the order store, and an `OrderUpdated` event is emitted.\n     *\n     * A user may be able to observe exchange prices and prevent order execution by updating the order's\n     * trigger price or acceptable price\n     *\n     * The main front-running concern is if a user knows whether the price is going to move up or down\n     * then positions accordingly, e.g. if price is going to move up then the user opens a long position\n     *\n     * With updating of orders, a user may know that price could be lower and delays the execution of an\n     * order by updating it, this should not be a significant front-running concern since it is similar\n     * to observing prices then creating a market order as price is decreasing\n     *\n     * @param key The unique ID of the order to be updated\n     * @param sizeDeltaUsd The new size delta for the order\n     * @param acceptablePrice The new acceptable price for the order\n     * @param triggerPrice The new trigger price for the order\n     */\n    function updateOrder(\n        bytes32 key,\n        uint256 sizeDeltaUsd,\n        uint256 acceptablePrice,\n        uint256 triggerPrice,\n        uint256 minOutputAmount,\n        uint256 validFromTime,\n        bool autoCancel,\n        Order.Props memory order,\n        bool shouldCapMaxExecutionFee\n    ) external override globalNonReentrant onlyController {\n        FeatureUtils.validateFeature(dataStore, Keys.updateOrderFeatureDisabledKey(address(this), uint256(order.orderType())));\n\n        if (BaseOrderUtils.isMarketOrder(order.orderType())) {\n            revert Errors.OrderNotUpdatable(uint256(order.orderType()));\n        }\n\n        // this could happen if the order was created in new contracts that support new order types\n        // but the order is being updated in old contracts\n        if (!BaseOrderUtils.isSupportedOrder(order.orderType())) {\n            revert Errors.UnsupportedOrderType(uint256(order.orderType()));\n        }\n\n        if (order.autoCancel() != autoCancel) {\n            OrderUtils.updateAutoCancelList(dataStore, key, order, autoCancel);\n            OrderUtils.validateTotalCallbackGasLimitForAutoCancelOrders(dataStore, order);\n        }\n        order.setAutoCancel(autoCancel);\n\n        order.setSizeDeltaUsd(sizeDeltaUsd);\n        order.setTriggerPrice(triggerPrice);\n        order.setAcceptablePrice(acceptablePrice);\n        order.setMinOutputAmount(minOutputAmount);\n        order.setValidFromTime(validFromTime);\n        order.setIsFrozen(false);\n\n        UpdateOrderCache memory cache;\n        // allow topping up of executionFee as frozen orders\n        // will have their executionFee reduced\n        cache.wnt = TokenUtils.wnt(dataStore);\n        cache.receivedWnt = orderVault.recordTransferIn(cache.wnt);\n\n        cache.estimatedGasLimit = GasUtils.estimateExecuteOrderGasLimit(dataStore, order);\n        cache.oraclePriceCount = GasUtils.estimateOrderOraclePriceCount(order.swapPath().length);\n        (uint256 executionFee, uint256 executionFeeDiff) = GasUtils.validateAndCapExecutionFee(\n            dataStore,\n            cache.estimatedGasLimit,\n            order.executionFee() + cache.receivedWnt,\n            cache.oraclePriceCount,\n            shouldCapMaxExecutionFee\n        );\n        order.setExecutionFee(executionFee);\n\n        if (executionFeeDiff != 0) {\n            GasUtils.transferExcessiveExecutionFee(dataStore, eventEmitter, orderVault, order.account(), executionFeeDiff);\n        }\n\n        order.touch();\n\n        BaseOrderUtils.validateNonEmptyOrder(order);\n\n        OrderStoreUtils.set(dataStore, key, order);\n\n        OrderEventUtils.emitOrderUpdated(\n            eventEmitter,\n            key,\n            order\n        );\n    }\n\n    /**\n     * @dev Cancels the given order. The `cancelOrder()` feature must be enabled for the given order\n     * type. The caller must be the owner of the order. The order is cancelled by calling the `cancelOrder()`\n     * function in the `OrderUtils` contract. This function also records the starting gas amount and the\n     * reason for cancellation, which is passed to the `cancelOrder()` function.\n     *\n     * @param key The unique ID of the order to be cancelled\n     */\n    function cancelOrder(bytes32 key) external override globalNonReentrant onlyController {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n        Order.Props memory order = OrderStoreUtils.get(_dataStore, key);\n\n        FeatureUtils.validateFeature(_dataStore, Keys.cancelOrderFeatureDisabledKey(address(this), uint256(order.orderType())));\n\n        if (BaseOrderUtils.isMarketOrder(order.orderType())) {\n            validateRequestCancellation(\n                order.updatedAtTime(),\n                \"Order\"\n            );\n        }\n\n        OrderUtils.cancelOrder(\n            OrderUtils.CancelOrderParams(\n                dataStore,\n                eventEmitter,\n                orderVault,\n                key,\n                order.account(),\n                startingGas,\n                true, // isExternalCall\n                Keys.USER_INITIATED_CANCEL,\n                \"\"\n            )\n        );\n    }\n\n    // @dev simulate execution of an order to check for any errors\n    // @param key the order key\n    // @param params OracleUtils.SimulatePricesParams\n    function simulateExecuteOrder(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params\n    ) external\n        override\n        onlyController\n        withSimulatedOraclePrices(params)\n        globalNonReentrant\n    {\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n\n        this._executeOrder(\n            key,\n            order,\n            msg.sender\n        );\n    }\n\n    // @dev executes an order\n    // @param key the key of the order to execute\n    // @param oracleParams OracleUtils.SetPricesParams\n    function executeOrder(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external\n        globalNonReentrant\n        onlyOrderKeeper\n        withOraclePrices(oracleParams)\n    {\n        uint256 startingGas = gasleft();\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteOrderGasLimit(dataStore, order);\n        GasUtils.validateExecutionGas(dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(dataStore, startingGas);\n\n        try this._executeOrder{ gas: executionGas }(\n            key,\n            order,\n            msg.sender\n        ) {\n        } catch (bytes memory reasonBytes) {\n            _handleOrderError(key, startingGas, reasonBytes);\n        }\n    }\n\n    // @dev executes an order\n    // @param key the key of the order to execute\n    // @param oracleParams OracleUtils.SetPricesParams\n    // @param keeper the keeper executing the order\n    // @param startingGas the starting gas\n    function _executeOrder(\n        bytes32 key,\n        Order.Props memory order,\n        address keeper\n    ) external onlySelf {\n        uint256 startingGas = gasleft();\n\n        BaseOrderUtils.ExecuteOrderParams memory params = _getExecuteOrderParams(\n            key,\n            order,\n            keeper,\n            startingGas,\n            Order.SecondaryOrderType.None\n        );\n        // limit swaps require frozen order keeper for execution since on creation it can fail due to output amount\n        // which would automatically cause the order to be frozen\n        // limit increase and limit / trigger decrease orders may fail due to output amount as well and become frozen\n        // but only if their acceptablePrice is reached\n        if (params.order.isFrozen() || params.order.orderType() == Order.OrderType.LimitSwap) {\n            _validateFrozenOrderKeeper(keeper);\n        }\n\n        FeatureUtils.validateFeature(params.contracts.dataStore, Keys.executeOrderFeatureDisabledKey(address(this), uint256(params.order.orderType())));\n\n        ExecuteOrderUtils.executeOrder(params);\n    }\n\n    // @dev handle a caught order error\n    // @param key the order's key\n    // @param startingGas the starting gas\n    // @param reason the error reason\n    // @param reasonKey the hash or the error reason\n    function _handleOrderError(\n        bytes32 key,\n        uint256 startingGas,\n        bytes memory reasonBytes\n    ) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n        bool isMarketOrder = BaseOrderUtils.isMarketOrder(order.orderType());\n\n        if (\n            // if the order is already frozen, revert with the custom error to provide more information\n            // on why the order cannot be executed\n            order.isFrozen() ||\n            // for market orders, the EmptyPosition error should still lead to the\n            // order being cancelled\n            // for limit, trigger orders, the EmptyPosition error should lead to the transaction\n            // being reverted instead\n            // if the position is created or increased later, the oracle prices used to fulfill the order\n            // must be after the position was last increased, this is validated in DecreaseOrderUtils\n            (!isMarketOrder && errorSelector == Errors.EmptyPosition.selector) ||\n            errorSelector == Errors.EmptyOrder.selector ||\n            // if the order execution feature is disabled, it may be possible\n            // for a user to cancel their orders after the feature is re-enabled\n            // or they may be able to execute the order at an outdated price\n            // depending on the order keeper\n            // disabling of features should be a rare occurrence, it may be\n            // preferrable to still execute the orders when the feature is re-enabled\n            // instead of cancelling / freezing the orders\n            // if features are not frequently disabled, the amount of front-running\n            // from this should not be significant\n            // based on this it may also be advisable to disable the cancelling of orders\n            // if the execution of orders is disabled\n            errorSelector == Errors.InvalidKeeperForFrozenOrder.selector ||\n            errorSelector == Errors.UnsupportedOrderType.selector ||\n            // the transaction is reverted for InvalidOrderPrices since the oracle prices\n            // do not fulfill the specified trigger price\n            errorSelector == Errors.InvalidOrderPrices.selector ||\n            // order should not be cancelled or frozen in this case\n            // otherwise malicious keepers can cancel orders before valid from time is reached\n            errorSelector == Errors.OrderValidFromTimeNotReached.selector\n        ) {\n            ErrorUtils.revertWithCustomError(reasonBytes);\n        }\n\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        if (\n            isMarketOrder ||\n            errorSelector == Errors.InvalidPositionMarket.selector ||\n            errorSelector == Errors.InvalidCollateralTokenForMarket.selector ||\n            errorSelector == Errors.InvalidPositionSizeValues.selector\n        ) {\n            OrderUtils.cancelOrder(\n                OrderUtils.CancelOrderParams(\n                    dataStore,\n                    eventEmitter,\n                    orderVault,\n                    key,\n                    msg.sender,\n                    startingGas,\n                    true, // isExternalCall\n                    reason,\n                    reasonBytes\n                )\n            );\n\n            return;\n        }\n\n        // freeze unfulfillable orders to prevent the order system from being gamed\n        // an example of gaming would be if a user creates a limit order\n        // with size greater than the available amount in the pool\n        // the user waits for their limit price to be hit, and if price\n        // moves in their favour after, they can deposit into the pool\n        // to allow the order to be executed then close the order for a profit\n        //\n        // frozen order keepers are expected to execute orders only if the\n        // latest prices match the trigger price\n        //\n        // a user can also call updateOrder to unfreeze an order\n        OrderUtils.freezeOrder(\n            dataStore,\n            eventEmitter,\n            orderVault,\n            key,\n            msg.sender,\n            startingGas,\n            reason,\n            reasonBytes\n        );\n    }\n\n    // @dev validate that the keeper is a frozen order keeper\n    // @param keeper address of the keeper\n    function _validateFrozenOrderKeeper(address keeper) internal view {\n        if (!roleStore.hasRole(keeper, Role.FROZEN_ORDER_KEEPER)) {\n            revert Errors.InvalidKeeperForFrozenOrder(keeper);\n        }\n    }\n}\n"
    },
    "contracts/exchange/ShiftHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseHandler.sol\";\nimport \"../shift/ShiftVault.sol\";\nimport \"../shift/Shift.sol\";\nimport \"../shift/ShiftUtils.sol\";\nimport \"./IShiftHandler.sol\";\n\ncontract ShiftHandler is IShiftHandler, BaseHandler {\n    using Shift for Shift.Props;\n\n    ShiftVault public immutable shiftVault;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        ShiftVault _shiftVault\n    ) BaseHandler(_roleStore, _dataStore, _eventEmitter, _oracle) {\n        shiftVault = _shiftVault;\n    }\n\n    function createShift(\n        address account,\n        ShiftUtils.CreateShiftParams calldata params\n    ) external override globalNonReentrant onlyController returns (bytes32) {\n        FeatureUtils.validateFeature(dataStore, Keys.createShiftFeatureDisabledKey(address(this)));\n\n        return ShiftUtils.createShift(\n            dataStore,\n            eventEmitter,\n            shiftVault,\n            account,\n            params\n        );\n    }\n\n    function cancelShift(bytes32 key) external override globalNonReentrant onlyController {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n        Shift.Props memory shift = ShiftStoreUtils.get(_dataStore, key);\n\n        FeatureUtils.validateFeature(_dataStore, Keys.cancelShiftFeatureDisabledKey(address(this)));\n\n        validateRequestCancellation(\n            shift.updatedAtTime(),\n            \"Shift\"\n        );\n\n        ShiftUtils.cancelShift(\n            _dataStore,\n            eventEmitter,\n            shiftVault,\n            key,\n            shift.account(),\n            startingGas,\n            Keys.USER_INITIATED_CANCEL,\n            \"\"\n        );\n    }\n\n    function executeShift(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external\n        globalNonReentrant\n        onlyOrderKeeper\n        withOraclePrices(oracleParams)\n    {\n        uint256 startingGas = gasleft();\n\n        Shift.Props memory shift = ShiftStoreUtils.get(dataStore, key);\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteShiftGasLimit(dataStore, shift);\n        GasUtils.validateExecutionGas(dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(dataStore, startingGas);\n\n        try this._executeShift{ gas: executionGas }(\n            key,\n            shift,\n            msg.sender\n        ) {\n        } catch (bytes memory reasonBytes) {\n            _handleShiftError(\n                key,\n                startingGas,\n                reasonBytes\n            );\n        }\n    }\n\n    function simulateExecuteShift(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params\n    ) external\n        override\n        onlyController\n        withSimulatedOraclePrices(params)\n        globalNonReentrant\n    {\n        Shift.Props memory shift = ShiftStoreUtils.get(dataStore, key);\n\n        this._executeShift(\n            key,\n            shift,\n            msg.sender\n        );\n    }\n\n    function _executeShift(\n        bytes32 key,\n        Shift.Props memory shift,\n        address keeper\n    ) external onlySelf {\n        uint256 startingGas = gasleft();\n\n        FeatureUtils.validateFeature(dataStore, Keys.executeShiftFeatureDisabledKey(address(this)));\n\n        ShiftUtils.ExecuteShiftParams memory params = ShiftUtils.ExecuteShiftParams(\n            dataStore,\n            eventEmitter,\n            shiftVault,\n            oracle,\n            key,\n            keeper,\n            startingGas\n        );\n\n        ShiftUtils.executeShift(params, shift);\n    }\n\n    function _handleShiftError(\n        bytes32 key,\n        uint256 startingGas,\n        bytes memory reasonBytes\n    ) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        ShiftUtils.cancelShift(\n            dataStore,\n            eventEmitter,\n            shiftVault,\n            key,\n            msg.sender,\n            startingGas,\n            reason,\n            reasonBytes\n        );\n    }\n}\n"
    },
    "contracts/exchange/WithdrawalHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseHandler.sol\";\nimport \"../error/ErrorUtils.sol\";\n\nimport \"../market/Market.sol\";\n\nimport \"../withdrawal/Withdrawal.sol\";\nimport \"../withdrawal/WithdrawalVault.sol\";\nimport \"../withdrawal/WithdrawalStoreUtils.sol\";\nimport \"../withdrawal/WithdrawalUtils.sol\";\nimport \"../withdrawal/ExecuteWithdrawalUtils.sol\";\n\nimport \"./IWithdrawalHandler.sol\";\n\n// @title WithdrawalHandler\n// @dev Contract to handle creation, execution and cancellation of withdrawals\ncontract WithdrawalHandler is IWithdrawalHandler, BaseHandler {\n    using Withdrawal for Withdrawal.Props;\n\n    WithdrawalVault public immutable withdrawalVault;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        WithdrawalVault _withdrawalVault\n    ) BaseHandler(_roleStore, _dataStore, _eventEmitter, _oracle) {\n        withdrawalVault = _withdrawalVault;\n    }\n\n    // @dev creates a withdrawal in the withdrawal store\n    // @param account the withdrawing account\n    // @param params WithdrawalUtils.CreateWithdrawalParams\n    function createWithdrawal(\n        address account,\n        WithdrawalUtils.CreateWithdrawalParams calldata params\n    ) external override globalNonReentrant onlyController returns (bytes32) {\n        FeatureUtils.validateFeature(dataStore, Keys.createWithdrawalFeatureDisabledKey(address(this)));\n\n        return WithdrawalUtils.createWithdrawal(\n            dataStore,\n            eventEmitter,\n            withdrawalVault,\n            account,\n            params\n        );\n    }\n\n    // @dev cancels a withdrawal\n    // @param key the withdrawal key\n    function cancelWithdrawal(bytes32 key) external override globalNonReentrant onlyController {\n        uint256 startingGas = gasleft();\n\n        DataStore _dataStore = dataStore;\n        Withdrawal.Props memory withdrawal = WithdrawalStoreUtils.get(_dataStore, key);\n\n        FeatureUtils.validateFeature(_dataStore, Keys.cancelWithdrawalFeatureDisabledKey(address(this)));\n\n        validateRequestCancellation(\n            withdrawal.updatedAtTime(),\n            \"Withdrawal\"\n        );\n\n        WithdrawalUtils.cancelWithdrawal(\n            _dataStore,\n            eventEmitter,\n            withdrawalVault,\n            key,\n            withdrawal.account(),\n            startingGas,\n            Keys.USER_INITIATED_CANCEL,\n            \"\"\n        );\n    }\n\n    // @dev executes a withdrawal\n    // @param key the key of the withdrawal to execute\n    // @param oracleParams OracleUtils.SetPricesParams\n    function executeWithdrawal(\n        bytes32 key,\n        OracleUtils.SetPricesParams calldata oracleParams\n    )\n        external\n        globalNonReentrant\n        onlyOrderKeeper\n        withOraclePrices(oracleParams)\n    {\n        uint256 startingGas = gasleft();\n\n        oracle.validateSequencerUp();\n\n        Withdrawal.Props memory withdrawal = WithdrawalStoreUtils.get(dataStore, key);\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteWithdrawalGasLimit(dataStore, withdrawal);\n        GasUtils.validateExecutionGas(dataStore, startingGas, estimatedGasLimit);\n\n        uint256 executionGas = GasUtils.getExecutionGas(dataStore, startingGas);\n\n        try this._executeWithdrawal{ gas: executionGas }(\n            key,\n            withdrawal,\n            msg.sender,\n            ISwapPricingUtils.SwapPricingType.Withdrawal\n        ) {\n        } catch (bytes memory reasonBytes) {\n            _handleWithdrawalError(\n                key,\n                startingGas,\n                reasonBytes\n            );\n        }\n    }\n\n    // @notice this function can only be called for markets where Chainlink\n    // on-chain feeds are configured for all the tokens of the market\n    // for example, if the market has index token as DOGE, long token as WETH\n    // and short token as USDC, Chainlink on-chain feeds must be configured\n    // for DOGE, WETH, USDC for this method to be callable for the market\n    function executeAtomicWithdrawal(\n        address account,\n        WithdrawalUtils.CreateWithdrawalParams calldata params,\n        OracleUtils.SetPricesParams calldata oracleParams\n    )\n        external\n        globalNonReentrant\n        onlyController\n        withOraclePricesForAtomicAction(oracleParams)\n    {\n        FeatureUtils.validateFeature(dataStore, Keys.executeAtomicWithdrawalFeatureDisabledKey(address(this)));\n\n        oracle.validateSequencerUp();\n\n        if (\n            params.longTokenSwapPath.length != 0 ||\n            params.shortTokenSwapPath.length != 0\n        ) {\n            revert Errors.SwapsNotAllowedForAtomicWithdrawal(\n                params.longTokenSwapPath.length,\n                params.shortTokenSwapPath.length\n            );\n        }\n\n        bytes32 key = WithdrawalUtils.createWithdrawal(\n            dataStore,\n            eventEmitter,\n            withdrawalVault,\n            account,\n            params\n        );\n\n        Withdrawal.Props memory withdrawal = WithdrawalStoreUtils.get(dataStore, key);\n\n        this._executeWithdrawal(\n            key,\n            withdrawal,\n            account,\n            ISwapPricingUtils.SwapPricingType.AtomicWithdrawal\n        );\n    }\n\n    // @dev simulate execution of a withdrawal to check for any errors\n    // @param key the withdrawal key\n    // @param params OracleUtils.SimulatePricesParams\n    function simulateExecuteWithdrawal(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory params,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external\n        override\n        onlyController\n        withSimulatedOraclePrices(params)\n        globalNonReentrant\n    {\n        oracle.validateSequencerUp();\n\n        Withdrawal.Props memory withdrawal = WithdrawalStoreUtils.get(dataStore, key);\n\n        this._executeWithdrawal(\n            key,\n            withdrawal,\n            msg.sender,\n            swapPricingType\n        );\n    }\n\n    // @dev executes a withdrawal\n    // @param oracleParams OracleUtils.SetPricesParams\n    // @param keeper the keeper executing the withdrawal\n    // @param startingGas the starting gas\n    function _executeWithdrawal(\n        bytes32 key,\n        Withdrawal.Props memory withdrawal,\n        address keeper,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external onlySelf {\n        uint256 startingGas = gasleft();\n\n        FeatureUtils.validateFeature(dataStore, Keys.executeWithdrawalFeatureDisabledKey(address(this)));\n\n        ExecuteWithdrawalUtils.ExecuteWithdrawalParams memory params = ExecuteWithdrawalUtils.ExecuteWithdrawalParams(\n            dataStore,\n            eventEmitter,\n            withdrawalVault,\n            oracle,\n            key,\n            keeper,\n            startingGas,\n            swapPricingType\n        );\n\n        ExecuteWithdrawalUtils.executeWithdrawal(params, withdrawal);\n    }\n\n    function _handleWithdrawalError(\n        bytes32 key,\n        uint256 startingGas,\n        bytes memory reasonBytes\n    ) internal {\n        GasUtils.validateExecutionErrorGas(dataStore, reasonBytes);\n\n        bytes4 errorSelector = ErrorUtils.getErrorSelectorFromData(reasonBytes);\n\n        validateNonKeeperError(errorSelector, reasonBytes);\n\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n\n        WithdrawalUtils.cancelWithdrawal(\n            dataStore,\n            eventEmitter,\n            withdrawalVault,\n            key,\n            msg.sender,\n            startingGas,\n            reason,\n            reasonBytes\n        );\n    }\n}\n"
    },
    "contracts/external/ExternalHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./IExternalHandler.sol\";\nimport \"../error/Errors.sol\";\n\n// contracts with a CONTROLLER role or other roles may need to call external\n// contracts, since these roles may be able to directly change DataStore values\n// or perform other sensitive operations, these contracts should make these calls\n// through ExternalHandler instead\n//\n// note that anyone can make this contract call any function, this should be noted\n// to avoid assumptions of the contract's state in any protocol\n//\n// e.g. some tokens require the approved amount to be zero before the approved amount\n// can be changed, this should be taken into account if calling approve is required for\n// these tokens\ncontract ExternalHandler is IExternalHandler, ReentrancyGuard {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    // @notice refundTokens should be unique, this is because the refund loop\n    // sends the full refund token balance on each iteration, so if there are\n    // duplicate refund token addresses, then only the first refundReceiver\n    // for that token would receive the tokens\n    function makeExternalCalls(\n        address[] memory targets,\n        bytes[] memory dataList,\n        address[] memory refundTokens,\n        address[] memory refundReceivers\n    ) external nonReentrant {\n        if (targets.length != dataList.length) {\n            revert Errors.InvalidExternalCallInput(targets.length, dataList.length);\n        }\n\n        if (refundTokens.length != refundReceivers.length) {\n            revert Errors.InvalidExternalReceiversInput(refundTokens.length, refundReceivers.length);\n        }\n\n        for (uint256 i; i < targets.length; i++) {\n            _makeExternalCall(\n                targets[i],\n                dataList[i]\n            );\n        }\n\n        for (uint256 i; i < refundTokens.length; i++) {\n            IERC20 refundToken = IERC20(refundTokens[i]);\n            uint256 balance = refundToken.balanceOf(address(this));\n            if (balance > 0) {\n                refundToken.safeTransfer(refundReceivers[i], balance);\n            }\n        }\n    }\n\n    function _makeExternalCall(\n        address target,\n        bytes memory data\n    ) internal {\n        if (!target.isContract()) {\n            revert Errors.InvalidExternalCallTarget(target);\n        }\n\n        (bool success, bytes memory returndata) = target.call(data);\n\n        if (!success) {\n            revert Errors.ExternalCallFailed(returndata);\n        }\n    }\n}\n"
    },
    "contracts/external/IExternalHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IExternalHandler {\n    function makeExternalCalls(\n        address[] memory targets,\n        bytes[] memory dataList,\n        address[] memory refundTokens,\n        address[] memory refundReceivers\n    ) external;\n}\n"
    },
    "contracts/feature/FeatureUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\n\n// @title FeatureUtils\n// @dev Library to validate if a feature is enabled or disabled\n// disabling a feature should only be used if it is absolutely necessary\n// disabling of features could lead to unexpected effects, e.g. increasing / decreasing of orders\n// could be disabled while liquidations may remain enabled\n// this could also occur if the chain is not producing blocks and lead to liquidatable positions\n// when block production resumes\n// the effects of disabling features should be carefully considered\nlibrary FeatureUtils {\n    // @dev get whether a feature is disabled\n    // @param dataStore DataStore\n    // @param key the feature key\n    // @return whether the feature is disabled\n    function isFeatureDisabled(DataStore dataStore, bytes32 key) internal view returns (bool) {\n        return dataStore.getBool(key);\n    }\n\n    // @dev validate whether a feature is enabled, reverts if the feature is disabled\n    // @param dataStore DataStore\n    // @param key the feature key\n    function validateFeature(DataStore dataStore, bytes32 key) internal view {\n        if (isFeatureDisabled(dataStore, key)) {\n            revert Errors.DisabledFeature(key);\n        }\n    }\n}\n"
    },
    "contracts/fee/FeeBatch.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title FeeBatch\n// @dev Struct for fee batches\nlibrary FeeBatch {\n    struct Props {\n        address[] feeTokens;\n        uint256[] feeAmounts;\n        uint256[] remainingAmounts;\n        uint256 createdAt;\n    }\n}\n"
    },
    "contracts/fee/FeeBatchStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./FeeBatch.sol\";\n\n/**\n * @title FeeBatchStoreUtils\n * @dev Library for fee batch storage functions\n */\nlibrary FeeBatchStoreUtils {\n    using FeeBatch for FeeBatch.Props;\n\n    bytes32 public constant FEE_TOKENS = keccak256(abi.encode(\"FEE_TOKENS\"));\n    bytes32 public constant FEE_AMOUNTS = keccak256(abi.encode(\"FEE_AMOUNTS\"));\n    bytes32 public constant REMAINING_AMOUNTS = keccak256(abi.encode(\"REMAINING_AMOUNTS\"));\n    bytes32 public constant CREATED_AT = keccak256(abi.encode(\"CREATED_AT\"));\n\n    function get(DataStore dataStore, bytes32 key) public view returns (FeeBatch.Props memory) {\n        FeeBatch.Props memory feeBatch;\n        if (!dataStore.containsBytes32(Keys.FEE_BATCH_LIST, key)) {\n            return feeBatch;\n        }\n\n        feeBatch.feeTokens = dataStore.getAddressArray(\n            keccak256(abi.encode(key, FEE_TOKENS))\n        );\n\n        feeBatch.feeAmounts = dataStore.getUintArray(\n            keccak256(abi.encode(key, FEE_AMOUNTS))\n        );\n\n        feeBatch.remainingAmounts = dataStore.getUintArray(\n            keccak256(abi.encode(key, REMAINING_AMOUNTS))\n        );\n\n        feeBatch.createdAt = dataStore.getUint(\n            keccak256(abi.encode(key, CREATED_AT))\n        );\n\n        return feeBatch;\n    }\n\n    function set(DataStore dataStore, bytes32 key, FeeBatch.Props memory feeBatch) external {\n        dataStore.addBytes32(\n            Keys.FEE_BATCH_LIST,\n            key\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, FEE_TOKENS)),\n            feeBatch.feeTokens\n        );\n\n        dataStore.setUintArray(\n            keccak256(abi.encode(key, FEE_AMOUNTS)),\n            feeBatch.feeAmounts\n        );\n\n        dataStore.setUintArray(\n            keccak256(abi.encode(key, REMAINING_AMOUNTS)),\n            feeBatch.remainingAmounts\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CREATED_AT)),\n            feeBatch.createdAt\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key) external {\n        if (!dataStore.containsBytes32(Keys.FEE_BATCH_LIST, key)) {\n            revert Errors.FeeBatchNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.FEE_BATCH_LIST,\n            key\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, FEE_TOKENS))\n        );\n\n        dataStore.removeUintArray(\n            keccak256(abi.encode(key, FEE_AMOUNTS))\n        );\n\n        dataStore.removeUintArray(\n            keccak256(abi.encode(key, REMAINING_AMOUNTS))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CREATED_AT))\n        );\n    }\n\n    function getFeeBatchCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getAddressCount(Keys.FEE_BATCH_LIST);\n    }\n\n    function getFeeBatchKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.FEE_BATCH_LIST, start, end);\n    }\n}\n"
    },
    "contracts/fee/FeeDistributor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../v1/IVaultV1.sol\";\nimport \"../v1/IRouterV1.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../role/RoleModule.sol\";\nimport \"../fee/FeeUtils.sol\";\nimport \"../fee/FeeSwapUtils.sol\";\nimport \"../fee/FeeBatchStoreUtils.sol\";\nimport \"../market/Market.sol\";\nimport \"../nonce/NonceUtils.sol\";\nimport \"../router/IExchangeRouter.sol\";\n\n// @title FeeDistributor\ncontract FeeDistributor is ReentrancyGuard, RoleModule {\n    using Market for Market.Props;\n    using Order for Order.Props;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    IVaultV1 public immutable vaultV1;\n    IRouterV1 public immutable routerV1;\n\n    address public immutable routerV2;\n    IExchangeRouter public immutable exchangeRouterV2;\n\n    address public immutable bridgingToken;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        IVaultV1 _vaultV1,\n        IRouterV1 _routerV1,\n        address _routerV2,\n        IExchangeRouter _exchangeRouterV2,\n        address _bridgingToken\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n\n        vaultV1 = _vaultV1;\n        routerV1 = _routerV1;\n\n        routerV2 = _routerV2;\n        exchangeRouterV2 = _exchangeRouterV2;\n\n        bridgingToken = _bridgingToken;\n    }\n\n    // the startIndexV2 and endIndexV2 is passed into the function instead of iterating\n    // all markets in the market factory as there may be a large number of v2 markets\n    // which could cause the function to exceed the max block gas limit\n    // for v1 it is assumed that the total number of tokens to claim fees for is manageable\n    // so the tokens are directly iterated for v1\n    function claimFees(\n        uint256 startIndexV2,\n        uint256 endIndexV2\n    ) external nonReentrant onlyFeeDistributionKeeper {\n        FeeBatch.Props memory feeBatch;\n\n        uint256 countV1 = vaultV1.allWhitelistedTokensLength();\n\n        address[] memory marketKeysV2 = MarketStoreUtils.getMarketKeys(dataStore, startIndexV2, endIndexV2);\n        uint256 countV2 = marketKeysV2.length;\n\n        uint256 totalCount = countV1 + countV2 * 2;\n        feeBatch.feeTokens = new address[](totalCount);\n        feeBatch.feeAmounts = new uint256[](totalCount);\n        feeBatch.remainingAmounts = new uint256[](totalCount);\n\n        feeBatch = _claimFeesV1(feeBatch, countV1);\n        feeBatch = _claimFeesV2(feeBatch, marketKeysV2, countV1, countV2);\n        feeBatch.createdAt = Chain.currentTimestamp();\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n        FeeBatchStoreUtils.set(dataStore, key, feeBatch);\n    }\n\n    function swapFeesUsingV1(\n        bytes32 feeBatchKey,\n        uint256 tokenIndex,\n        address[] memory path,\n        uint256 swapAmount,\n        uint256 minOut\n    ) external {\n        FeeSwapUtils.swapFeesUsingV1(\n            dataStore,\n            routerV1,\n            bridgingToken,\n            feeBatchKey,\n            tokenIndex,\n            path,\n            swapAmount,\n            minOut\n        );\n    }\n\n    function swapFeesUsingV2(\n        bytes32 feeBatchKey,\n        uint256 tokenIndex,\n        address market,\n        address[] memory swapPath,\n        uint256 swapAmount,\n        uint256 executionFee,\n        uint256 minOut\n    ) external payable {\n        FeeSwapUtils.swapFeesUsingV2(\n            dataStore,\n            routerV2,\n            exchangeRouterV2,\n            bridgingToken,\n            feeBatchKey,\n            tokenIndex,\n            market,\n            swapPath,\n            swapAmount,\n            executionFee,\n            minOut\n        );\n    }\n\n    // handle order cancellation callbacks\n    function afterOrderCancellation(\n        bytes32 orderKey,\n        Order.Props memory order,\n        EventUtils.EventLogData memory /* eventData */\n    ) external {\n        // validate that the caller has a controller role, the only controller that\n        // should call this function is the OrderHandler\n        _validateRole(Role.CONTROLLER, \"CONTROLLER\");\n\n        bytes32 feeBatchKey = dataStore.getBytes32(Keys.feeDistributorSwapFeeBatchKey(orderKey));\n        uint256 tokenIndex = dataStore.getUint(Keys.feeDistributorSwapTokenIndexKey(orderKey));\n\n        FeeBatch.Props memory feeBatch = FeeBatchStoreUtils.get(dataStore, feeBatchKey);\n        feeBatch.remainingAmounts[tokenIndex] += order.initialCollateralDeltaAmount();\n        FeeBatchStoreUtils.set(dataStore, feeBatchKey, feeBatch);\n    }\n\n    function _claimFeesV1(FeeBatch.Props memory feeBatch, uint256 count) internal returns (FeeBatch.Props memory) {\n        for (uint256 i; i < count; i++) {\n            // it is possible for the token to be address(0) the withdrawFees\n            // function should just return 0 in that case\n            address token = vaultV1.allWhitelistedTokens(i);\n            uint256 amount = vaultV1.withdrawFees(token, address(this));\n\n            feeBatch.feeTokens[i] = token;\n            feeBatch.feeAmounts[i] = amount;\n            feeBatch.remainingAmounts[i] = amount;\n        }\n\n        return feeBatch;\n    }\n\n    function _claimFeesV2(\n        FeeBatch.Props memory feeBatch,\n        address[] memory marketKeys,\n        uint256 countV1,\n        uint256 countV2\n    ) internal returns (FeeBatch.Props memory) {\n        for (uint256 i; i < countV2; i++) {\n            address marketKey = marketKeys[i];\n            Market.Props memory market = MarketStoreUtils.get(dataStore, marketKey);\n\n            uint256 longTokenFeeAmount = FeeUtils.claimFees(\n                dataStore,\n                eventEmitter,\n                market.marketToken,\n                market.longToken,\n                address(this)\n            );\n\n            uint256 shortTokenFeeAmount = FeeUtils.claimFees(\n                dataStore,\n                eventEmitter,\n                market.marketToken,\n                market.shortToken,\n                address(this)\n            );\n\n            uint256 baseIndex = countV1 + i * 2;\n\n            feeBatch.feeTokens[baseIndex] = market.longToken;\n            feeBatch.feeAmounts[baseIndex] = longTokenFeeAmount;\n            feeBatch.remainingAmounts[baseIndex] = longTokenFeeAmount;\n\n            feeBatch.feeTokens[baseIndex + 1] = market.shortToken;\n            feeBatch.feeAmounts[baseIndex + 1] = shortTokenFeeAmount;\n            feeBatch.remainingAmounts[baseIndex + 1] = shortTokenFeeAmount;\n        }\n\n        return feeBatch;\n    }\n\n}\n"
    },
    "contracts/fee/FeeHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../role/RoleModule.sol\";\nimport \"../oracle/OracleModule.sol\";\nimport \"../utils/BasicMulticall.sol\";\nimport \"../fee/FeeUtils.sol\";\nimport \"../v1/IVaultV1.sol\";\nimport \"../v1/IVaultGovV1.sol\";\n\n// @title FeeHandler\ncontract FeeHandler is ReentrancyGuard, RoleModule, OracleModule, BasicMulticall {\n    using SafeERC20 for IERC20;\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n\n    struct FeeAmounts {\n        uint256 gmx;\n        uint256 wnt;\n    }\n\n    uint256 public constant v1 = 1;\n    uint256 public constant v2 = 2;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n    IVaultV1 public immutable vaultV1;\n    address public immutable gmx;\n\n    constructor(\n        RoleStore _roleStore,\n        Oracle _oracle,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        IVaultV1 _vaultV1,\n        address _gmx\n    ) RoleModule(_roleStore) OracleModule(_oracle) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n        vaultV1 = _vaultV1;\n        gmx = _gmx;\n    }\n\n    // @dev withdraw fees in buybackTokens from this contract\n    // note that claimFees should be called to claim pending fees if needed\n    // before calling this function\n    // @param marketTokens the markets from which to withdraw fees\n    // @param buybackToken the token for which to withdraw fees\n    function withdrawFees(address buybackToken) external nonReentrant onlyFeeKeeper {\n        _validateBuybackToken(_getBatchSize(buybackToken), buybackToken);\n\n        address receiver = dataStore.getAddress(Keys.FEE_RECEIVER);\n\n        uint256 amount = dataStore.getUint(Keys.withdrawableBuybackTokenAmountKey(buybackToken));\n        dataStore.setUint(Keys.withdrawableBuybackTokenAmountKey(buybackToken), 0);\n\n        IERC20(buybackToken).safeTransfer(receiver, amount);\n    }\n\n    // @dev claim fees in feeToken from the specified markets\n    // @param market the market from which to claim fees\n    // @param feeToken the fee tokens to claim from the market\n    function claimFees(address market, address feeToken, uint256 version) external nonReentrant {\n        uint256 feeAmount;\n        if (version == v1) {\n            uint256 balanceBefore = IERC20(feeToken).balanceOf(address(this));\n            IVaultGovV1(vaultV1.gov()).withdrawFees(address(vaultV1), feeToken, address(this));\n            uint256 balanceAfter = IERC20(feeToken).balanceOf(address(this));\n            feeAmount = balanceAfter - balanceBefore;\n        } else if (version == v2) {\n            _validateMarket(market);\n            feeAmount = FeeUtils.claimFees(dataStore, eventEmitter, market, feeToken, address(this));\n        } else {\n            revert Errors.InvalidVersion(version);\n        }\n\n        _incrementAvailableFeeAmounts(version, feeToken, feeAmount);\n    }\n\n    // @dev receive an amount in feeToken by depositing the batchSize amount of the buybackToken\n    // @param feeToken the token to receive with the fee amount calculated via an oracle price\n    // @param buybackToken the token to deposit in the amount of batchSize in return for fees\n    // @param minOutputAmount the minimum amount of the feeToken that the caller will receive\n    function buyback(\n        address feeToken,\n        address buybackToken,\n        uint256 minOutputAmount,\n        OracleUtils.SetPricesParams memory params\n    ) external nonReentrant withOraclePrices(params) {\n        if (feeToken == buybackToken) {\n            revert Errors.BuybackAndFeeTokenAreEqual(feeToken, buybackToken);\n        }\n\n        uint256 batchSize = _getBatchSize(buybackToken);\n        _validateBuybackToken(batchSize, buybackToken);\n\n        uint256 availableFeeAmount = _getAvailableFeeAmount(feeToken, buybackToken);\n        if (availableFeeAmount == 0) {\n            revert Errors.AvailableFeeAmountIsZero(feeToken, buybackToken, availableFeeAmount);\n        }\n\n        uint256 maxFeeTokenAmount = _getMaxFeeTokenAmount(feeToken, buybackToken, batchSize);\n        uint256 outputAmount = availableFeeAmount < maxFeeTokenAmount ? availableFeeAmount : maxFeeTokenAmount;\n\n        if (outputAmount < minOutputAmount) {\n            revert Errors.InsufficientBuybackOutputAmount(feeToken, buybackToken, outputAmount, minOutputAmount);\n        }\n\n        _buybackFees(feeToken, buybackToken, batchSize, outputAmount, availableFeeAmount);\n    }\n\n    // note that there should not be any duplicates in the markets array\n    // otherwise the returned output amount would not be accurate\n    function getOutputAmount(\n        address[] calldata markets,\n        address feeToken,\n        address buybackToken,\n        uint256 version,\n        uint256 feeTokenPrice,\n        uint256 buybackTokenPrice\n    ) external view returns (uint256) {\n        uint256 batchSize = _getBatchSize(buybackToken);\n        _validateBuybackToken(batchSize, buybackToken);\n\n        uint256 feeAmount;\n        uint256 availableFeeAmount = _getAvailableFeeAmount(feeToken, buybackToken);\n        FeeAmounts memory feeAmounts;\n\n        for (uint256 i; i < markets.length; i++) {\n            if (version == v1) {\n                feeAmount = vaultV1.feeReserves(feeToken);\n            } else if (version == v2) {\n                address market = markets[i];\n                _validateMarket(market);\n                feeAmount = _getUint(Keys.claimableFeeAmountKey(market, feeToken));\n            } else {\n                revert Errors.InvalidVersion(version);\n            }\n\n            feeAmounts = _getFeeAmounts(version, feeAmount);\n            feeAmount = buybackToken == gmx ? feeAmounts.gmx : feeAmounts.wnt;\n            availableFeeAmount = availableFeeAmount + feeAmount;\n        }\n\n        uint256 maxFeeTokenAmount = _getMaxFeeTokenAmount(\n            feeToken,\n            buybackToken,\n            batchSize,\n            feeTokenPrice,\n            buybackTokenPrice\n        );\n\n        if (availableFeeAmount > maxFeeTokenAmount) {\n            return maxFeeTokenAmount;\n        }\n\n        return availableFeeAmount;\n    }\n\n    function _buybackFees(\n        address feeToken,\n        address buybackToken,\n        uint256 batchSize,\n        uint256 buybackAmount,\n        uint256 availableFeeAmount\n    ) internal {\n        _incrementWithdrawableBuybackTokenAmount(buybackToken, batchSize);\n        _setAvailableFeeAmount(feeToken, buybackToken, availableFeeAmount - buybackAmount);\n\n        IERC20(buybackToken).safeTransferFrom(msg.sender, address(this), batchSize);\n        IERC20(feeToken).safeTransfer(msg.sender, buybackAmount);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"feeToken\", feeToken);\n        eventData.addressItems.setItem(1, \"buybackToken\", buybackToken);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"batchSize\", batchSize);\n        eventData.uintItems.setItem(1, \"buybackAmount\", buybackAmount);\n        eventData.uintItems.setItem(2, \"availableFeeAmount\", availableFeeAmount);\n\n        eventEmitter.emitEventLog(\"BuybackFees\", eventData);\n    }\n\n    function _incrementWithdrawableBuybackTokenAmount(address buybackToken, uint256 amount) internal {\n        uint256 withdrawableAmount = dataStore.getUint(Keys.withdrawableBuybackTokenAmountKey(buybackToken));\n        dataStore.setUint(Keys.withdrawableBuybackTokenAmountKey(buybackToken), withdrawableAmount + amount);\n    }\n\n    function _incrementAvailableFeeAmounts(uint256 version, address feeToken, uint256 feeAmount) internal {\n        address wnt = dataStore.getAddress(Keys.WNT);\n\n        FeeAmounts memory feeAmounts = _getFeeAmounts(version, feeAmount);\n\n        _incrementAvailableFeeAmount(feeToken, gmx, feeAmounts.gmx);\n        _incrementAvailableFeeAmount(feeToken, wnt, feeAmounts.wnt);\n    }\n\n    function _incrementAvailableFeeAmount(address feeToken, address buybackToken, uint256 amount) internal {\n        // if the feeToken is the same as the buybackToken then no buyback swap is needed\n        // increase the withdrawable buyback token amount directly in this case\n        if (feeToken == buybackToken) {\n            _incrementWithdrawableBuybackTokenAmount(buybackToken, amount);\n        } else {\n            uint256 availableFeeAmount = _getAvailableFeeAmount(feeToken, buybackToken);\n            _setAvailableFeeAmount(feeToken, buybackToken, availableFeeAmount + amount);\n        }\n    }\n\n    function _setAvailableFeeAmount(address feeToken, address buybackToken, uint256 availableFeeAmount) internal {\n        dataStore.setUint(Keys.buybackAvailableFeeAmountKey(feeToken, buybackToken), availableFeeAmount);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"feeToken\", feeToken);\n        eventData.addressItems.setItem(1, \"buybackToken\", buybackToken);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"availableFeeAmount\", availableFeeAmount);\n\n        eventEmitter.emitEventLog(\"SetAvailableFeeAmount\", eventData);\n    }\n\n    function _getAvailableFeeAmount(address feeToken, address buybackToken) internal view returns (uint256) {\n        return _getUint(Keys.buybackAvailableFeeAmountKey(feeToken, buybackToken));\n    }\n\n    function _getFeeAmounts(uint256 version, uint256 feeAmount) internal view returns (FeeAmounts memory) {\n        uint256 gmxFactor = _getUint(Keys.buybackGmxFactorKey(version));\n        FeeAmounts memory feeAmounts;\n\n        feeAmounts.gmx = Precision.applyFactor(feeAmount, gmxFactor);\n        feeAmounts.wnt = feeAmount - feeAmounts.gmx;\n        return feeAmounts;\n    }\n\n    function _getMaxFeeTokenAmount(\n        address feeToken,\n        address buybackToken,\n        uint256 batchSize\n    ) internal view returns (uint256) {\n        uint256 priceTimestamp = oracle.minTimestamp();\n        uint256 maxPriceAge = _getUint(Keys.BUYBACK_MAX_PRICE_AGE);\n        uint256 currentTimestamp = Chain.currentTimestamp();\n        if ((priceTimestamp + maxPriceAge) < currentTimestamp) {\n            revert Errors.MaxBuybackPriceAgeExceeded(priceTimestamp, maxPriceAge, currentTimestamp);\n        }\n\n        uint256 feeTokenPrice = oracle.getPrimaryPrice(feeToken).max;\n        uint256 buybackTokenPrice = oracle.getPrimaryPrice(buybackToken).min;\n\n        return _getMaxFeeTokenAmount(\n            feeToken,\n            buybackToken,\n            batchSize,\n            feeTokenPrice,\n            buybackTokenPrice\n        );\n    }\n\n    function _getMaxFeeTokenAmount(\n        address feeToken,\n        address buybackToken,\n        uint256 batchSize,\n        uint256 feeTokenPrice,\n        uint256 buybackTokenPrice\n    ) internal view returns (uint256) {\n        uint256 expectedFeeTokenAmount = Precision.mulDiv(batchSize, buybackTokenPrice, feeTokenPrice);\n        uint256 maxPriceImpactFactor = _getUint(Keys.buybackMaxPriceImpactFactorKey(feeToken)) +\n            _getUint(Keys.buybackMaxPriceImpactFactorKey(buybackToken));\n\n        return Precision.applyFactor(expectedFeeTokenAmount, maxPriceImpactFactor + Precision.FLOAT_PRECISION);\n    }\n\n    function _getBatchSize(address buybackToken) internal view returns (uint256) {\n        return _getUint(Keys.buybackBatchAmountKey(buybackToken));\n    }\n\n    function _getUint(bytes32 fullKey) internal view returns (uint256) {\n        return dataStore.getUint(fullKey);\n    }\n\n    function _validateBuybackToken(uint256 batchSize, address buybackToken) internal pure {\n        if (batchSize == 0) {\n            revert Errors.InvalidBuybackToken(buybackToken);\n        }\n    }\n\n    function _validateMarket(address market) internal pure {\n        if (market == address(0)) {\n            revert Errors.EmptyClaimFeesMarket();\n        }\n    }\n}\n"
    },
    "contracts/fee/FeeSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../v1/IRouterV1.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../fee/FeeBatchStoreUtils.sol\";\nimport \"../market/Market.sol\";\nimport \"../router/IExchangeRouter.sol\";\n\n// @title FeeSwapUtils\nlibrary FeeSwapUtils {\n    function swapFeesUsingV1(\n        DataStore dataStore,\n        IRouterV1 routerV1,\n        address bridgingToken,\n        bytes32 feeBatchKey,\n        uint256 tokenIndex,\n        address[] memory path,\n        uint256 swapAmount,\n        uint256 minOut\n    ) external {\n        (FeeBatch.Props memory feeBatch, address tokenIn) = _getSwapValues(\n            dataStore,\n            feeBatchKey,\n            tokenIndex,\n            swapAmount\n        );\n\n        if (path[path.length - 1] != bridgingToken) {\n            revert Errors.InvalidSwapPathForV1(path, bridgingToken);\n        }\n\n        feeBatch.remainingAmounts[tokenIndex] -= swapAmount;\n        FeeBatchStoreUtils.set(dataStore, feeBatchKey, feeBatch);\n\n        IERC20(tokenIn).approve(address(routerV1), swapAmount);\n        routerV1.swap(path, swapAmount, minOut, address(this));\n    }\n\n    function swapFeesUsingV2(\n        DataStore dataStore,\n        address routerV2,\n        IExchangeRouter exchangeRouterV2,\n        address bridgingToken,\n        bytes32 feeBatchKey,\n        uint256 tokenIndex,\n        address market,\n        address[] memory swapPath,\n        uint256 swapAmount,\n        uint256 executionFee,\n        uint256 minOut\n    ) external {\n        (FeeBatch.Props memory feeBatch, address tokenIn) = _getSwapValues(\n            dataStore,\n            feeBatchKey,\n            tokenIndex,\n            swapAmount\n        );\n\n        SwapUtils.validateSwapOutputToken(dataStore, swapPath, tokenIn, bridgingToken);\n\n        IBaseOrderUtils.CreateOrderParams memory params = _getSwapOrderParamsV2(\n            dataStore,\n            market,\n            tokenIn,\n            swapPath,\n            swapAmount,\n            executionFee,\n            minOut\n        );\n\n        feeBatch.remainingAmounts[tokenIndex] -= swapAmount;\n        FeeBatchStoreUtils.set(dataStore, feeBatchKey, feeBatch);\n\n        IERC20(tokenIn).approve(routerV2, swapAmount);\n        bytes32 orderKey = exchangeRouterV2.createOrder{ value: msg.value }(params);\n        dataStore.setBytes32(Keys.feeDistributorSwapFeeBatchKey(orderKey), feeBatchKey);\n        dataStore.setUint(Keys.feeDistributorSwapTokenIndexKey(orderKey), tokenIndex);\n    }\n\n    function _getSwapValues(\n        DataStore dataStore,\n        bytes32 feeBatchKey,\n        uint256 tokenIndex,\n        uint256 swapAmount\n    ) internal view returns (FeeBatch.Props memory, address) {\n        FeeBatch.Props memory feeBatch = FeeBatchStoreUtils.get(dataStore, feeBatchKey);\n\n        if (tokenIndex > feeBatch.feeTokens.length) {\n            revert Errors.InvalidFeeBatchTokenIndex(tokenIndex, feeBatch.feeTokens.length);\n        }\n\n        address tokenIn = feeBatch.feeTokens[tokenIndex];\n        uint256 remainingAmount = feeBatch.remainingAmounts[tokenIndex];\n        if (swapAmount > remainingAmount) {\n            revert Errors.InvalidAmountInForFeeBatch(swapAmount, remainingAmount);\n        }\n\n        return (feeBatch, tokenIn);\n    }\n\n    function _getSwapOrderParamsV2(\n        DataStore dataStore,\n        address market,\n        address tokenIn,\n        address[] memory swapPath,\n        uint256 swapAmount,\n        uint256 executionFee,\n        uint256 minOut\n    ) internal view returns (IBaseOrderUtils.CreateOrderParams memory) {\n        IBaseOrderUtils.CreateOrderParamsAddresses memory addresses = IBaseOrderUtils.CreateOrderParamsAddresses(\n            address(this), // receiver\n            address(this), // cancellationReceiver\n            address(this), // callbackContract\n            address(0), // uiFeeReceiver\n            market, // market\n            tokenIn, // initialCollateralToken\n            swapPath // swapPath\n        );\n\n        uint256 maxCallbackGasLimit = dataStore.getUint(Keys.MAX_CALLBACK_GAS_LIMIT);\n\n        IBaseOrderUtils.CreateOrderParamsNumbers memory numbers = IBaseOrderUtils.CreateOrderParamsNumbers(\n            0, // sizeDeltaUsd\n            swapAmount, // initialCollateralDeltaAmount\n            0, // triggerPrice\n            0, // acceptablePrice\n            executionFee, // executionFee\n            maxCallbackGasLimit, // callbackGasLimit\n            minOut, // minOutputAmount\n            0 // validFromTime\n        );\n\n        IBaseOrderUtils.CreateOrderParams memory params = IBaseOrderUtils.CreateOrderParams(\n            addresses, // addresses\n            numbers, // numbers\n            Order.OrderType.MarketSwap, // orderType\n            Order.DecreasePositionSwapType.NoSwap, // decreasePositionSwapType\n            false, // isLong\n            false, // shouldUnwrapNativeToken\n            false, // autoCancel\n            bytes32(0) // referralCode\n        );\n\n        return params;\n    }\n}\n"
    },
    "contracts/fee/FeeUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\nimport \"../utils/AccountUtils.sol\";\nimport \"../market/MarketUtils.sol\";\n\nimport \"../market/MarketToken.sol\";\n\n// @title FeeUtils\n// @dev Library for fee actions\nlibrary FeeUtils {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @dev increment the claimable fee amount\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to increment claimable fees for\n    // @param token the fee token\n    // @param delta the amount to increment\n    // @param feeType the type of the fee\n    function incrementClaimableFeeAmount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 delta,\n        bytes32 feeType\n    ) external {\n        if (delta == 0) {\n            return;\n        }\n\n        bytes32 key = Keys.claimableFeeAmountKey(market, token);\n\n        uint256 nextValue = dataStore.incrementUint(\n            key,\n            delta\n        );\n\n        emitClaimableFeeAmountUpdated(\n            eventEmitter,\n            market,\n            token,\n            delta,\n            nextValue,\n            feeType\n        );\n    }\n\n    function incrementClaimableUiFeeAmount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address uiFeeReceiver,\n        address market,\n        address token,\n        uint256 delta,\n        bytes32 feeType\n    ) external {\n        if (delta == 0) {\n            return;\n        }\n\n        uint256 nextValue = dataStore.incrementUint(\n            Keys.claimableUiFeeAmountKey(market, token, uiFeeReceiver),\n            delta\n        );\n\n        uint256 nextPoolValue = dataStore.incrementUint(\n            Keys.claimableUiFeeAmountKey(market, token),\n            delta\n        );\n\n        emitClaimableUiFeeAmountUpdated(\n            eventEmitter,\n            uiFeeReceiver,\n            market,\n            token,\n            delta,\n            nextValue,\n            nextPoolValue,\n            feeType\n        );\n    }\n\n    // @dev claim fees for the specified market\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to claim fees for\n    // @param token the fee token\n    // @param receiver the receiver of the claimed fees\n    function claimFees(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address receiver\n    ) internal returns (uint256) {\n        AccountUtils.validateReceiver(receiver);\n\n        bytes32 key = Keys.claimableFeeAmountKey(market, token);\n\n        uint256 feeAmount = dataStore.getUint(key);\n        dataStore.setUint(key, 0);\n\n        MarketToken(payable(market)).transferOut(\n            token,\n            receiver,\n            feeAmount\n        );\n\n        MarketUtils.validateMarketTokenBalance(dataStore, market);\n\n        emitFeesClaimed(\n            eventEmitter,\n            market,\n            receiver,\n            feeAmount\n        );\n\n        return feeAmount;\n    }\n\n    function claimUiFees(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address uiFeeReceiver,\n        address market,\n        address token,\n        address receiver\n    ) external returns (uint256) {\n        AccountUtils.validateReceiver(receiver);\n\n        bytes32 key = Keys.claimableUiFeeAmountKey(market, token, uiFeeReceiver);\n\n        uint256 feeAmount = dataStore.getUint(key);\n        dataStore.setUint(key, 0);\n\n        uint256 nextPoolValue = dataStore.decrementUint(\n            Keys.claimableUiFeeAmountKey(market, token),\n            feeAmount\n        );\n\n        MarketToken(payable(market)).transferOut(\n            token,\n            receiver,\n            feeAmount\n        );\n\n        MarketUtils.validateMarketTokenBalance(dataStore, market);\n\n        emitUiFeesClaimed(\n            eventEmitter,\n            uiFeeReceiver,\n            market,\n            receiver,\n            feeAmount,\n            nextPoolValue\n        );\n\n        return feeAmount;\n    }\n\n    function emitClaimableFeeAmountUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 delta,\n        uint256 nextValue,\n        bytes32 feeType\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"nextValue\", nextValue);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"feeType\", feeType);\n\n        eventEmitter.emitEventLog2(\n            \"ClaimableFeeAmountUpdated\",\n            Cast.toBytes32(market),\n            feeType,\n            eventData\n        );\n    }\n\n    function emitClaimableUiFeeAmountUpdated(\n        EventEmitter eventEmitter,\n        address uiFeeReceiver,\n        address market,\n        address token,\n        uint256 delta,\n        uint256 nextValue,\n        uint256 nextPoolValue,\n        bytes32 feeType\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"uiFeeReceiver\", uiFeeReceiver);\n        eventData.addressItems.setItem(1, \"market\", market);\n        eventData.addressItems.setItem(2, \"token\", token);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"nextValue\", nextValue);\n        eventData.uintItems.setItem(2, \"nextPoolValue\", nextPoolValue);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"feeType\", feeType);\n\n        eventEmitter.emitEventLog2(\n            \"ClaimableUiFeeAmountUpdated\",\n            Cast.toBytes32(market),\n            feeType,\n            eventData\n        );\n    }\n\n    function emitFeesClaimed(\n        EventEmitter eventEmitter,\n        address market,\n        address receiver,\n        uint256 feeAmount\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"receiver\", receiver);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"feeAmount\", feeAmount);\n\n        eventEmitter.emitEventLog1(\n            \"FeesClaimed\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitUiFeesClaimed(\n        EventEmitter eventEmitter,\n        address uiFeeReceiver,\n        address market,\n        address receiver,\n        uint256 feeAmount,\n        uint256 nextPoolValue\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"uiFeeReceiver\", uiFeeReceiver);\n        eventData.addressItems.setItem(1, \"market\", market);\n        eventData.addressItems.setItem(2, \"receiver\", receiver);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"feeAmount\", feeAmount);\n        eventData.uintItems.setItem(1, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog1(\n            \"UiFeesClaimed\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/gas/GasUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../callback/CallbackUtils.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../utils/Precision.sol\";\n\nimport \"../deposit/Deposit.sol\";\nimport \"../withdrawal/Withdrawal.sol\";\nimport \"../shift/Shift.sol\";\nimport \"../order/Order.sol\";\nimport \"../order/BaseOrderUtils.sol\";\nimport \"../glv/glvWithdrawal/GlvWithdrawal.sol\";\n\nimport \"../bank/StrictBank.sol\";\n\n// @title GasUtils\n// @dev Library for execution fee estimation and payments\nlibrary GasUtils {\n    using SafeERC20 for IERC20;\n\n    using Deposit for Deposit.Props;\n    using Withdrawal for Withdrawal.Props;\n    using Shift for Shift.Props;\n    using Order for Order.Props;\n    using GlvDeposit for GlvDeposit.Props;\n    using GlvWithdrawal for GlvWithdrawal.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @param keeper address of the keeper\n    // @param amount the amount of execution fee received\n    event KeeperExecutionFee(address keeper, uint256 amount);\n    // @param user address of the user\n    // @param amount the amount of execution fee refunded\n    event UserRefundFee(address user, uint256 amount);\n\n    function getMinHandleExecutionErrorGas(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getUint(Keys.MIN_HANDLE_EXECUTION_ERROR_GAS);\n    }\n\n    function getMinHandleExecutionErrorGasToForward(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getUint(Keys.MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD);\n    }\n\n    function getMinAdditionalGasForExecution(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getUint(Keys.MIN_ADDITIONAL_GAS_FOR_EXECUTION);\n    }\n\n    function getExecutionGas(DataStore dataStore, uint256 startingGas) internal view returns (uint256) {\n        uint256 minHandleExecutionErrorGasToForward = GasUtils.getMinHandleExecutionErrorGasToForward(dataStore);\n        if (startingGas < minHandleExecutionErrorGasToForward) {\n            revert Errors.InsufficientExecutionGasForErrorHandling(startingGas, minHandleExecutionErrorGasToForward);\n        }\n\n        return startingGas - minHandleExecutionErrorGasToForward;\n    }\n\n    function validateExecutionGas(DataStore dataStore, uint256 startingGas, uint256 estimatedGasLimit) internal view {\n        uint256 minAdditionalGasForExecution = getMinAdditionalGasForExecution(dataStore);\n        if (startingGas < estimatedGasLimit + minAdditionalGasForExecution) {\n            revert Errors.InsufficientExecutionGas(startingGas, estimatedGasLimit, minAdditionalGasForExecution);\n        }\n    }\n\n    // a minimum amount of gas is required to be left for cancellation\n    // to prevent potential blocking of cancellations by malicious contracts using e.g. large revert reasons\n    //\n    // during the estimateGas call by keepers, an insufficient amount of gas may be estimated\n    // the amount estimated may be insufficient for execution but sufficient for cancellaton\n    // this could lead to invalid cancellations due to insufficient gas used by keepers\n    //\n    // to help prevent this, out of gas errors are attempted to be caught and reverted for estimateGas calls\n    //\n    // a malicious user could cause the estimateGas call of a keeper to fail, in which case the keeper could\n    // still attempt to execute the transaction with a reasonable gas limit\n    function validateExecutionErrorGas(DataStore dataStore, bytes memory reasonBytes) internal view {\n        // skip the validation if the execution did not fail due to an out of gas error\n        // also skip the validation if this is not invoked in an estimateGas call (tx.origin != address(0))\n        if (reasonBytes.length != 0 || tx.origin != address(0)) {\n            return;\n        }\n\n        uint256 gas = gasleft();\n        uint256 minHandleExecutionErrorGas = getMinHandleExecutionErrorGas(dataStore);\n\n        if (gas < minHandleExecutionErrorGas) {\n            revert Errors.InsufficientHandleExecutionErrorGas(gas, minHandleExecutionErrorGas);\n        }\n    }\n\n    struct PayExecutionFeeCache {\n        uint256 refundFeeAmount;\n        bool refundWasSent;\n    }\n\n    // @dev pay the keeper the execution fee and refund any excess amount\n    //\n    // @param dataStore DataStore\n    // @param bank the StrictBank contract holding the execution fee\n    // @param executionFee the executionFee amount\n    // @param startingGas the starting gas\n    // @param oraclePriceCount number of oracle prices\n    // @param keeper the keeper to pay\n    // @param refundReceiver the account that should receive any excess gas refunds\n    // @param isSubaccount whether the order is a subaccount order\n    function payExecutionFee(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        StrictBank bank,\n        bytes32 key,\n        address callbackContract,\n        uint256 executionFee,\n        uint256 startingGas,\n        uint256 oraclePriceCount,\n        address keeper,\n        address refundReceiver\n    ) external {\n        if (executionFee == 0) {\n            return;\n        }\n\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        startingGas -= gasleft() / 63;\n        uint256 gasUsed = startingGas - gasleft();\n\n        // each external call forwards 63/64 of the remaining gas\n        uint256 executionFeeForKeeper = adjustGasUsage(dataStore, gasUsed, oraclePriceCount) * tx.gasprice;\n\n        if (executionFeeForKeeper > executionFee) {\n            executionFeeForKeeper = executionFee;\n        }\n\n        bank.transferOutNativeToken(keeper, executionFeeForKeeper);\n\n        emitKeeperExecutionFee(eventEmitter, keeper, executionFeeForKeeper);\n\n        PayExecutionFeeCache memory cache;\n\n        cache.refundFeeAmount = executionFee - executionFeeForKeeper;\n        if (cache.refundFeeAmount == 0) {\n            return;\n        }\n\n        address _wnt = dataStore.getAddress(Keys.WNT);\n        bank.transferOut(_wnt, address(this), cache.refundFeeAmount);\n\n        IWNT(_wnt).withdraw(cache.refundFeeAmount);\n\n        EventUtils.EventLogData memory eventData;\n\n        cache.refundWasSent = CallbackUtils.refundExecutionFee(\n            dataStore,\n            key,\n            callbackContract,\n            cache.refundFeeAmount,\n            eventData\n        );\n\n        if (cache.refundWasSent) {\n            emitExecutionFeeRefundCallback(eventEmitter, callbackContract, cache.refundFeeAmount);\n        } else {\n            TokenUtils.sendNativeToken(dataStore, refundReceiver, cache.refundFeeAmount);\n            emitExecutionFeeRefund(eventEmitter, refundReceiver, cache.refundFeeAmount);\n        }\n    }\n\n    // @dev validate that the provided executionFee is sufficient based on the estimatedGasLimit\n    // @param dataStore DataStore\n    // @param estimatedGasLimit the estimated gas limit\n    // @param executionFee the execution fee provided\n    // @param oraclePriceCount\n    function validateExecutionFee(\n        DataStore dataStore,\n        uint256 estimatedGasLimit,\n        uint256 executionFee,\n        uint256 oraclePriceCount\n    ) internal view returns (uint256, uint256) {\n        uint256 gasLimit = adjustGasLimitForEstimate(dataStore, estimatedGasLimit, oraclePriceCount);\n        uint256 minExecutionFee = gasLimit * tx.gasprice;\n        if (executionFee < minExecutionFee) {\n            revert Errors.InsufficientExecutionFee(minExecutionFee, executionFee);\n        }\n        return (gasLimit, minExecutionFee);\n    }\n\n    // @dev validate that the provided executionFee is sufficient based on the estimatedGasLimit\n    // @param dataStore DataStore\n    // @param estimatedGasLimit the estimated gas limit\n    // @param executionFee the execution fee provided\n    // @param oraclePriceCount\n    // @param shouldCapMaxExecutionFee whether to cap the max execution fee\n    function validateAndCapExecutionFee(\n        DataStore dataStore,\n        uint256 estimatedGasLimit,\n        uint256 executionFee,\n        uint256 oraclePriceCount,\n        bool shouldCapMaxExecutionFee\n    ) internal view returns (uint256, uint256) {\n        (uint256 gasLimit, uint256 minExecutionFee) = validateExecutionFee(\n            dataStore,\n            estimatedGasLimit,\n            executionFee,\n            oraclePriceCount\n        );\n\n        if (!shouldCapMaxExecutionFee) {\n            return (executionFee, 0);\n        }\n        // a malicious subaccount could provide a large executionFee\n        // and receive most of it as a refund sent to a callbackContract\n        // capping the max execution fee by multiplier * gasLimit * basefee should limit the potential loss\n\n        // this capping should be applied for subaccount orders with a callbackContract if execution fee is increased\n        // i.e. there is no need to cap the max execution fee for previously created orders even if it's high because it has already been capped\n\n        // some blockchains may not support EIP-1559 and will return 0 for block.basefee\n        // also block.basefee is 0 inside eth_call and eth_estimateGas\n        uint256 basefee = block.basefee != 0 ? block.basefee : tx.gasprice;\n\n        uint256 maxExecutionFeeMultiplierFactor = dataStore.getUint(Keys.MAX_EXECUTION_FEE_MULTIPLIER_FACTOR);\n        uint256 maxExecutionFee = Precision.applyFactor(gasLimit * basefee, maxExecutionFeeMultiplierFactor);\n\n        if (maxExecutionFee < minExecutionFee) {\n            revert Errors.InvalidExecutionFee(executionFee, minExecutionFee, maxExecutionFee);\n        }\n\n        if (executionFee <= maxExecutionFee) {\n            return (executionFee, 0);\n        }\n\n        uint256 executionFeeDiff = executionFee - maxExecutionFee;\n        return (maxExecutionFee, executionFeeDiff);\n    }\n\n    function transferExcessiveExecutionFee(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Bank bank,\n        address account,\n        uint256 executionFeeDiff\n    ) external {\n        address wnt = TokenUtils.wnt(dataStore);\n        address holdingAddress = dataStore.getAddress(Keys.HOLDING_ADDRESS);\n\n        if (holdingAddress == address(0)) {\n            revert Errors.EmptyHoldingAddress();\n        }\n\n        bank.transferOut(wnt, holdingAddress, executionFeeDiff);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"executionFeeDiff\", executionFeeDiff);\n\n        eventEmitter.emitEventLog1(\"ExcessiveExecutionFee\", Cast.toBytes32(account), eventData);\n    }\n\n    // @dev adjust the gas usage to pay a small amount to keepers\n    // @param dataStore DataStore\n    // @param gasUsed the amount of gas used\n    // @param oraclePriceCount number of oracle prices\n    function adjustGasUsage(\n        DataStore dataStore,\n        uint256 gasUsed,\n        uint256 oraclePriceCount\n    ) internal view returns (uint256) {\n        // gas measurements are done after the call to withOraclePrices\n        // withOraclePrices may consume a significant amount of gas\n        // the baseGasLimit used to calculate the execution cost\n        // should be adjusted to account for this\n        // additionally, a transaction could fail midway through an execution transaction\n        // before being cancelled, the possibility of this additional gas cost should\n        // be considered when setting the baseGasLimit\n        uint256 baseGasLimit = dataStore.getUint(Keys.EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1);\n        baseGasLimit += dataStore.getUint(Keys.EXECUTION_GAS_FEE_PER_ORACLE_PRICE) * oraclePriceCount;\n        // the gas cost is estimated based on the gasprice of the request txn\n        // the actual cost may be higher if the gasprice is higher in the execution txn\n        // the multiplierFactor should be adjusted to account for this\n        uint256 multiplierFactor = dataStore.getUint(Keys.EXECUTION_GAS_FEE_MULTIPLIER_FACTOR);\n        uint256 gasLimit = baseGasLimit + Precision.applyFactor(gasUsed, multiplierFactor);\n        return gasLimit;\n    }\n\n    // @dev adjust the estimated gas limit to help ensure the execution fee is sufficient during\n    // the actual execution\n    // @param dataStore DataStore\n    // @param estimatedGasLimit the estimated gas limit\n    function adjustGasLimitForEstimate(\n        DataStore dataStore,\n        uint256 estimatedGasLimit,\n        uint256 oraclePriceCount\n    ) internal view returns (uint256) {\n        uint256 baseGasLimit = dataStore.getUint(Keys.ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1);\n        baseGasLimit += dataStore.getUint(Keys.ESTIMATED_GAS_FEE_PER_ORACLE_PRICE) * oraclePriceCount;\n        uint256 multiplierFactor = dataStore.getUint(Keys.ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR);\n        uint256 gasLimit = baseGasLimit + Precision.applyFactor(estimatedGasLimit, multiplierFactor);\n        return gasLimit;\n    }\n\n    // @dev get estimated number of oracle prices for deposit\n    // @param swapsCount number of swaps in the deposit\n    function estimateDepositOraclePriceCount(uint256 swapsCount) internal pure returns (uint256) {\n        return 3 + swapsCount;\n    }\n\n    // @dev get estimated number of oracle prices for withdrawal\n    // @param swapsCount number of swaps in the withdrawal\n    function estimateWithdrawalOraclePriceCount(uint256 swapsCount) internal pure returns (uint256) {\n        return 3 + swapsCount;\n    }\n\n    // @dev get estimated number of oracle prices for order\n    // @param swapsCount number of swaps in the order\n    function estimateOrderOraclePriceCount(uint256 swapsCount) internal pure returns (uint256) {\n        return 3 + swapsCount;\n    }\n\n    // @dev get estimated number of oracle prices for shift\n    function estimateShiftOraclePriceCount() internal pure returns (uint256) {\n        // for single asset markets only 3 prices will be required\n        // and keeper will slightly overpay\n        // it should not be an issue because execution fee goes back to keeper\n        return 4;\n    }\n\n    function estimateGlvDepositOraclePriceCount(\n        uint256 marketCount,\n        uint256 swapsCount\n    ) internal pure returns (uint256) {\n        // for single asset markets oracle price count will be overestimated by 1\n        // it should not be an issue for GLV with multiple markets\n        // because relative difference would be insignificant\n        return 2 + marketCount + swapsCount;\n    }\n\n    function estimateGlvWithdrawalOraclePriceCount(\n        uint256 marketCount,\n        uint256 swapsCount\n    ) internal pure returns (uint256) {\n        // for single asset markets oracle price count will be overestimated by 1\n        // it should not be an issue for GLV with multiple markets\n        // because relative difference would be insignificant\n        return 2 + marketCount + swapsCount;\n    }\n\n    // @dev the estimated gas limit for deposits\n    // @param dataStore DataStore\n    // @param deposit the deposit to estimate the gas limit for\n    function estimateExecuteDepositGasLimit(\n        DataStore dataStore,\n        Deposit.Props memory deposit\n    ) internal view returns (uint256) {\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        uint256 swapCount = deposit.longTokenSwapPath().length + deposit.shortTokenSwapPath().length;\n        uint256 gasForSwaps = swapCount * gasPerSwap;\n\n        return dataStore.getUint(Keys.depositGasLimitKey()) + deposit.callbackGasLimit() + gasForSwaps;\n    }\n\n    // @dev the estimated gas limit for withdrawals\n    // @param dataStore DataStore\n    // @param withdrawal the withdrawal to estimate the gas limit for\n    function estimateExecuteWithdrawalGasLimit(\n        DataStore dataStore,\n        Withdrawal.Props memory withdrawal\n    ) internal view returns (uint256) {\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        uint256 swapCount = withdrawal.longTokenSwapPath().length + withdrawal.shortTokenSwapPath().length;\n        uint256 gasForSwaps = swapCount * gasPerSwap;\n\n        return dataStore.getUint(Keys.withdrawalGasLimitKey()) + withdrawal.callbackGasLimit() + gasForSwaps;\n    }\n\n    // @dev the estimated gas limit for shifts\n    // @param dataStore DataStore\n    // @param shift the shift to estimate the gas limit for\n    function estimateExecuteShiftGasLimit(\n        DataStore dataStore,\n        Shift.Props memory shift\n    ) internal view returns (uint256) {\n        return dataStore.getUint(Keys.shiftGasLimitKey()) + shift.callbackGasLimit();\n    }\n\n    // @dev the estimated gas limit for orders\n    // @param dataStore DataStore\n    // @param order the order to estimate the gas limit for\n    function estimateExecuteOrderGasLimit(\n        DataStore dataStore,\n        Order.Props memory order\n    ) internal view returns (uint256) {\n        if (BaseOrderUtils.isIncreaseOrder(order.orderType())) {\n            return estimateExecuteIncreaseOrderGasLimit(dataStore, order);\n        }\n\n        if (BaseOrderUtils.isDecreaseOrder(order.orderType())) {\n            return estimateExecuteDecreaseOrderGasLimit(dataStore, order);\n        }\n\n        if (BaseOrderUtils.isSwapOrder(order.orderType())) {\n            return estimateExecuteSwapOrderGasLimit(dataStore, order);\n        }\n\n        revert Errors.UnsupportedOrderType(uint256(order.orderType()));\n    }\n\n    // @dev the estimated gas limit for increase orders\n    // @param dataStore DataStore\n    // @param order the order to estimate the gas limit for\n    function estimateExecuteIncreaseOrderGasLimit(\n        DataStore dataStore,\n        Order.Props memory order\n    ) internal view returns (uint256) {\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        return\n            dataStore.getUint(Keys.increaseOrderGasLimitKey()) +\n            gasPerSwap *\n            order.swapPath().length +\n            order.callbackGasLimit();\n    }\n\n    // @dev the estimated gas limit for decrease orders\n    // @param dataStore DataStore\n    // @param order the order to estimate the gas limit for\n    function estimateExecuteDecreaseOrderGasLimit(\n        DataStore dataStore,\n        Order.Props memory order\n    ) internal view returns (uint256) {\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        uint256 swapCount = order.swapPath().length;\n        if (order.decreasePositionSwapType() != Order.DecreasePositionSwapType.NoSwap) {\n            swapCount += 1;\n        }\n\n        return dataStore.getUint(Keys.decreaseOrderGasLimitKey()) + gasPerSwap * swapCount + order.callbackGasLimit();\n    }\n\n    // @dev the estimated gas limit for swap orders\n    // @param dataStore DataStore\n    // @param order the order to estimate the gas limit for\n    function estimateExecuteSwapOrderGasLimit(\n        DataStore dataStore,\n        Order.Props memory order\n    ) internal view returns (uint256) {\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        return\n            dataStore.getUint(Keys.swapOrderGasLimitKey()) +\n            gasPerSwap *\n            order.swapPath().length +\n            order.callbackGasLimit();\n    }\n\n    // @dev the estimated gas limit for glv deposits\n    // @param dataStore DataStore\n    // @param deposit the deposit to estimate the gas limit for\n    function estimateExecuteGlvDepositGasLimit(\n        DataStore dataStore,\n        GlvDeposit.Props memory glvDeposit,\n        uint256 marketCount\n    ) internal view returns (uint256) {\n        // glv deposit execution gas consumption depends on the amount of markets\n        uint256 gasPerGlvPerMarket = dataStore.getUint(Keys.glvPerMarketGasLimitKey());\n        uint256 gasForGlvMarkets = gasPerGlvPerMarket * marketCount;\n        uint256 glvDepositGasLimit = dataStore.getUint(Keys.glvDepositGasLimitKey());\n\n        uint256 gasLimit = glvDepositGasLimit + glvDeposit.callbackGasLimit() + gasForGlvMarkets;\n\n        if (glvDeposit.isMarketTokenDeposit()) {\n            // user provided GM, no separate deposit will be created and executed in this case\n            return gasLimit;\n        }\n\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        uint256 swapCount = glvDeposit.longTokenSwapPath().length + glvDeposit.shortTokenSwapPath().length;\n        uint256 gasForSwaps = swapCount * gasPerSwap;\n\n        return gasLimit + dataStore.getUint(Keys.depositGasLimitKey()) + gasForSwaps;\n    }\n\n    // @dev the estimated gas limit for glv withdrawals\n    // @param dataStore DataStore\n    // @param withdrawal the withdrawal to estimate the gas limit for\n    function estimateExecuteGlvWithdrawalGasLimit(\n        DataStore dataStore,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        uint256 marketCount\n    ) internal view returns (uint256) {\n        // glv withdrawal execution gas consumption depends on the amount of markets\n        uint256 gasPerGlvPerMarket = dataStore.getUint(Keys.glvPerMarketGasLimitKey());\n        uint256 gasForGlvMarkets = gasPerGlvPerMarket * marketCount;\n        uint256 glvWithdrawalGasLimit = dataStore.getUint(Keys.glvWithdrawalGasLimitKey());\n\n        uint256 gasLimit = glvWithdrawalGasLimit + glvWithdrawal.callbackGasLimit() + gasForGlvMarkets;\n\n        uint256 gasPerSwap = dataStore.getUint(Keys.singleSwapGasLimitKey());\n        uint256 swapCount = glvWithdrawal.longTokenSwapPath().length + glvWithdrawal.shortTokenSwapPath().length;\n        uint256 gasForSwaps = swapCount * gasPerSwap;\n\n        return gasLimit + dataStore.getUint(Keys.withdrawalGasLimitKey()) + gasForSwaps;\n    }\n\n    function estimateExecuteGlvShiftGasLimit(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getUint(Keys.glvShiftGasLimitKey());\n    }\n\n    function emitKeeperExecutionFee(EventEmitter eventEmitter, address keeper, uint256 executionFeeAmount) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"keeper\", keeper);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"executionFeeAmount\", executionFeeAmount);\n\n        eventEmitter.emitEventLog1(\"KeeperExecutionFee\", Cast.toBytes32(keeper), eventData);\n    }\n\n    function emitExecutionFeeRefund(EventEmitter eventEmitter, address receiver, uint256 refundFeeAmount) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"receiver\", receiver);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"refundFeeAmount\", refundFeeAmount);\n\n        eventEmitter.emitEventLog1(\"ExecutionFeeRefund\", Cast.toBytes32(receiver), eventData);\n    }\n\n    function emitExecutionFeeRefundCallback(\n        EventEmitter eventEmitter,\n        address callbackContract,\n        uint256 refundFeeAmount\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"callbackContract\", callbackContract);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"refundFeeAmount\", refundFeeAmount);\n\n        eventEmitter.emitEventLog1(\"ExecutionFeeRefundCallback\", Cast.toBytes32(callbackContract), eventData);\n    }\n\n    function payGelatoRelayFee(\n        DataStore dataStore,\n        address wnt,\n        uint256 startingGas,\n        uint256 calldataLength,\n        uint256 availableFeeAmount\n    ) internal returns (uint256) {\n        address relayFeeAddress = dataStore.getAddress(Keys.RELAY_FEE_ADDRESS);\n        if (relayFeeAddress == address(0)) {\n            revert Errors.EmptyRelayFeeAddress();\n        }\n\n        uint256 relayFeeMultiplierFactor = dataStore.getUint(Keys.GELATO_RELAY_FEE_MULTIPLIER_FACTOR);\n        if (relayFeeMultiplierFactor == 0) {\n            relayFeeMultiplierFactor = Precision.FLOAT_PRECISION;\n        }\n\n        // relayFeeBaseAmount should include:\n        // - 21000 base gas\n        // - GelatoRelay contract gas\n        // - gas for 2 token transfers: to relay fee address and residual fee to the user\n        // - any other fixed gas costs before gasleft() and after the relay fee is calculated\n        uint256 relayFeeBaseAmount = dataStore.getUint(Keys.GELATO_RELAY_FEE_BASE_AMOUNT);\n\n        // would be non-zero for Arbitrum only\n        uint256 l1Fee = Chain.getCurrentTxL1GasFees();\n\n        uint256 l2Fee = (relayFeeBaseAmount + _getCalldataGas(calldataLength) + startingGas - gasleft()) * tx.gasprice;\n\n        uint256 relayFee = Precision.applyFactor(l1Fee + l2Fee, relayFeeMultiplierFactor);\n\n        if (relayFee > availableFeeAmount) {\n            revert Errors.InsufficientRelayFee(relayFee, availableFeeAmount);\n        }\n\n        IERC20(wnt).safeTransfer(relayFeeAddress, relayFee);\n\n        return relayFee;\n    }\n\n    function _getCalldataGas(uint256 calldataLength) internal pure returns (uint256) {\n        if (calldataLength > 50000) {\n            // we use 10 gas cost per byte for simplicity\n            // a malicious actor could send large calldata with non-zero bytes to force relay pay more\n            // this is unlikely to happen because the malicious actor would have to pay for the rest and wouldn't extra any profit\n            // but to reduce the risk we limit the calldata length\n            revert Errors.RelayCalldataTooLong(calldataLength);\n        }\n\n        // zero byte in call data costs 4 gas, non-zero byte costs 16 gas\n        // there are more zero bytes in transactions on average, we take 10 as a relatively safe estimate\n        // GelatoRelay contract receives calldata with a Call with fields like to, gasLimit, data, etc.\n        // the GMX contract receives only data.call\n        // in practice call fields are small compared to the call.data, so we only use msg.data received by GMX contract for simplicity\n        uint256 txCalldataGasUsed = calldataLength * 10;\n\n        // calculate words, apply ceiling\n        uint256 memoryWords = (calldataLength + 31) / 32;\n\n        // GelatoRelay contract calls GMX contract, CALL's gas depends on the calldata length\n        // approximate formula for CALL gas consumption (excluding fixed costs e.g. 700 gas for the CALL opcode):\n        //     memory_cost(n) = (n_words^2) / 512 + (3 * n_words)\n        //     memory_expansion_cost = memory_cost(new) - memory_cost(previous)\n        // we assume that previous memory_cost is 0 for simplicity\n        uint256 gmxCallGasUsed = memoryWords ** 2 / 512 + memoryWords * 3;\n\n        return txCalldataGasUsed + gmxCallGasUsed;\n    }\n}\n"
    },
    "contracts/glv/Glv.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\nlibrary Glv {\n    struct Props {\n        address glvToken;\n        address longToken;\n        address shortToken;\n    }\n}\n"
    },
    "contracts/glv/glvDeposit/GlvDeposit.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title GlvDeposit\n// @dev Struct for GLV deposits\nlibrary GlvDeposit {\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // large number of fields my also cause incorrect display in Tenderly\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account depositing liquidity\n    // @param receiver the address to send the liquidity tokens to\n    // @param callbackContract the callback contract\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the market to deposit to\n    struct Addresses {\n        address glv;\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param marketTokenAmount the amount of market tokens to deposit\n    // @param initialLongTokenAmount the amount of long tokens to deposit\n    // @param initialShortTokenAmount the amount of short tokens to deposit\n    // @param minGlvTokens the minimum acceptable number of Glv tokens\n    // sending funds back to the user in case the deposit gets cancelled\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n        uint256 minGlvTokens;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    // @param isMarketTokenDeposit whether to deposit market tokens or long/short tokens\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n        bool isMarketTokenDeposit;\n    }\n\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function glv(Props memory props) internal pure returns (address) {\n        return props.addresses.glv;\n    }\n\n    function setGlv(Props memory props, address value) internal pure {\n        props.addresses.glv = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function initialLongToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialLongToken;\n    }\n\n    function setInitialLongToken(Props memory props, address value) internal pure {\n        props.addresses.initialLongToken = value;\n    }\n\n    function initialShortToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialShortToken;\n    }\n\n    function setInitialShortToken(Props memory props, address value) internal pure {\n        props.addresses.initialShortToken = value;\n    }\n\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.longTokenSwapPath;\n    }\n\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.longTokenSwapPath = value;\n    }\n\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.shortTokenSwapPath;\n    }\n\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.shortTokenSwapPath = value;\n    }\n\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.marketTokenAmount;\n    }\n\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.marketTokenAmount = value;\n    }\n\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialLongTokenAmount;\n    }\n\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialLongTokenAmount = value;\n    }\n\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialShortTokenAmount;\n    }\n\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialShortTokenAmount = value;\n    }\n\n    function minGlvTokens(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minGlvTokens;\n    }\n\n    function setMinGlvTokens(Props memory props, uint256 value) internal pure {\n        props.numbers.minGlvTokens = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n\n    function isMarketTokenDeposit(Props memory props) internal pure returns (bool) {\n        return props.flags.isMarketTokenDeposit;\n    }\n\n    function setIsMarketTokenDeposit(Props memory props, bool value) internal pure {\n        props.flags.isMarketTokenDeposit = value;\n    }\n}\n"
    },
    "contracts/glv/glvDeposit/GlvDepositEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../event/EventEmitter.sol\";\nimport \"../../event/EventUtils.sol\";\nimport \"../../utils/Cast.sol\";\n\nimport \"./GlvDeposit.sol\";\n\nlibrary GlvDepositEventUtils {\n    using GlvDeposit for GlvDeposit.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitGlvDepositCreated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        GlvDeposit.Props memory glvDeposit\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(8);\n        eventData.addressItems.setItem(0, \"account\", glvDeposit.account());\n        eventData.addressItems.setItem(1, \"receiver\", glvDeposit.receiver());\n        eventData.addressItems.setItem(2, \"callbackContract\", glvDeposit.callbackContract());\n        eventData.addressItems.setItem(3, \"market\", glvDeposit.market());\n        eventData.addressItems.setItem(4, \"glv\", glvDeposit.glv());\n        eventData.addressItems.setItem(5, \"initialLongToken\", glvDeposit.initialLongToken());\n        eventData.addressItems.setItem(6, \"initialShortToken\", glvDeposit.initialShortToken());\n        eventData.addressItems.setItem(7, \"uiFeeReceiver\", glvDeposit.uiFeeReceiver());\n\n        eventData.addressItems.initArrayItems(2);\n        eventData.addressItems.setItem(0, \"longTokenSwapPath\", glvDeposit.longTokenSwapPath());\n        eventData.addressItems.setItem(1, \"shortTokenSwapPath\", glvDeposit.shortTokenSwapPath());\n\n        eventData.uintItems.initItems(7);\n        eventData.uintItems.setItem(0, \"initialLongTokenAmount\", glvDeposit.initialLongTokenAmount());\n        eventData.uintItems.setItem(1, \"initialShortTokenAmount\", glvDeposit.initialShortTokenAmount());\n        eventData.uintItems.setItem(2, \"minGlvTokens\", glvDeposit.minGlvTokens());\n        eventData.uintItems.setItem(3, \"updatedAtTime\", glvDeposit.updatedAtTime());\n        eventData.uintItems.setItem(4, \"executionFee\", glvDeposit.executionFee());\n        eventData.uintItems.setItem(5, \"callbackGasLimit\", glvDeposit.callbackGasLimit());\n        eventData.uintItems.setItem(6, \"marketTokenAmount\", glvDeposit.marketTokenAmount());\n\n        eventData.boolItems.initItems(2);\n        eventData.boolItems.setItem(0, \"shouldUnwrapNativeToken\", glvDeposit.shouldUnwrapNativeToken());\n        eventData.boolItems.setItem(1, \"isMarketTokenDeposit\", glvDeposit.isMarketTokenDeposit());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog2(\n            \"GlvDepositCreated\",\n            key,\n            Cast.toBytes32(glvDeposit.account()),\n            eventData\n        );\n    }\n\n    function emitGlvDepositExecuted(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        uint256 receivedGlvTokens\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"receivedGlvTokens\", receivedGlvTokens);\n\n        eventEmitter.emitEventLog2(\n            \"GlvDepositExecuted\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitGlvDepositCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\n            \"GlvDepositCancelled\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/glv/glvDeposit/GlvDepositStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../data/Keys.sol\";\nimport \"../../data/DataStore.sol\";\n\nimport \"./GlvDeposit.sol\";\n\n/**\n * @title GlvDepositStoreUtils\n * @dev Library for deposit storage functions\n */\nlibrary GlvDepositStoreUtils {\n    using GlvDeposit for GlvDeposit.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\"RECEIVER\"));\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\"CALLBACK_CONTRACT\"));\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\"UI_FEE_RECEIVER\"));\n    bytes32 public constant GLV = keccak256(abi.encode(\"GLV\"));\n    bytes32 public constant MARKET = keccak256(abi.encode(\"MARKET\"));\n    bytes32 public constant INITIAL_LONG_TOKEN = keccak256(abi.encode(\"INITIAL_LONG_TOKEN\"));\n    bytes32 public constant INITIAL_SHORT_TOKEN = keccak256(abi.encode(\"INITIAL_SHORT_TOKEN\"));\n    bytes32 public constant LONG_TOKEN_SWAP_PATH = keccak256(abi.encode(\"LONG_TOKEN_SWAP_PATH\"));\n    bytes32 public constant SHORT_TOKEN_SWAP_PATH = keccak256(abi.encode(\"SHORT_TOKEN_SWAP_PATH\"));\n\n    bytes32 public constant MARKET_TOKEN_AMOUNT = keccak256(abi.encode(\"MARKET_TOKEN_AMOUNT\"));\n    bytes32 public constant INITIAL_LONG_TOKEN_AMOUNT = keccak256(abi.encode(\"INITIAL_LONG_TOKEN_AMOUNT\"));\n    bytes32 public constant INITIAL_SHORT_TOKEN_AMOUNT = keccak256(abi.encode(\"INITIAL_SHORT_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_GLV_TOKENS = keccak256(abi.encode(\"MIN_GLV_TOKENS\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\"EXECUTION_FEE\"));\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"CALLBACK_GAS_LIMIT\"));\n\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\"SHOULD_UNWRAP_NATIVE_TOKEN\"));\n    bytes32 public constant IS_MARKET_TOKEN_DEPOSIT = keccak256(abi.encode(\"IS_MARKET_TOKEN_DEPOSIT\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (GlvDeposit.Props memory) {\n        GlvDeposit.Props memory glvDeposit;\n        if (!dataStore.containsBytes32(Keys.GLV_DEPOSIT_LIST, key)) {\n            return glvDeposit;\n        }\n\n        glvDeposit.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        glvDeposit.setReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        ));\n\n        glvDeposit.setCallbackContract(dataStore.getAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        ));\n\n        glvDeposit.setUiFeeReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        ));\n\n        glvDeposit.setGlv(dataStore.getAddress(\n            keccak256(abi.encode(key, GLV))\n        ));\n\n        glvDeposit.setMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET))\n        ));\n\n        glvDeposit.setInitialLongToken(dataStore.getAddress(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\n        ));\n\n        glvDeposit.setInitialShortToken(dataStore.getAddress(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\n        ));\n\n        glvDeposit.setLongTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        ));\n\n        glvDeposit.setShortTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        ));\n\n        glvDeposit.setMarketTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        ));\n\n        glvDeposit.setInitialLongTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\n        ));\n\n        glvDeposit.setInitialShortTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\n        ));\n\n        glvDeposit.setMinGlvTokens(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_GLV_TOKENS))\n        ));\n\n        glvDeposit.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        glvDeposit.setExecutionFee(dataStore.getUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        ));\n\n        glvDeposit.setCallbackGasLimit(dataStore.getUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        ));\n\n        glvDeposit.setShouldUnwrapNativeToken(dataStore.getBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        ));\n\n        glvDeposit.setIsMarketTokenDeposit(dataStore.getBool(\n            keccak256(abi.encode(key, IS_MARKET_TOKEN_DEPOSIT))\n        ));\n\n        return glvDeposit;\n    }\n\n    function set(DataStore dataStore, bytes32 key, GlvDeposit.Props memory glvDeposit) external {\n        dataStore.addBytes32(\n            Keys.GLV_DEPOSIT_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountGlvDepositListKey(glvDeposit.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            glvDeposit.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, RECEIVER)),\n            glvDeposit.receiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\n            glvDeposit.callbackContract()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\n            glvDeposit.uiFeeReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, GLV)),\n            glvDeposit.glv()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET)),\n            glvDeposit.market()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN)),\n            glvDeposit.initialLongToken()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN)),\n            glvDeposit.initialShortToken()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH)),\n            glvDeposit.longTokenSwapPath()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH)),\n            glvDeposit.shortTokenSwapPath()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT)),\n            glvDeposit.marketTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT)),\n            glvDeposit.initialLongTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT)),\n            glvDeposit.initialShortTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_GLV_TOKENS)),\n            glvDeposit.minGlvTokens()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            glvDeposit.updatedAtTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, EXECUTION_FEE)),\n            glvDeposit.executionFee()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\n            glvDeposit.callbackGasLimit()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\n            glvDeposit.shouldUnwrapNativeToken()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, IS_MARKET_TOKEN_DEPOSIT)),\n            glvDeposit.isMarketTokenDeposit()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.GLV_DEPOSIT_LIST, key)) {\n            revert Errors.GlvDepositNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.GLV_DEPOSIT_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountGlvDepositListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, GLV))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, INITIAL_LONG_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, INITIAL_SHORT_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_GLV_TOKENS))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, IS_MARKET_TOKEN_DEPOSIT))\n        );\n    }\n\n    function getGlvDepositCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.GLV_DEPOSIT_LIST);\n    }\n\n    function getGlvDepositKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.GLV_DEPOSIT_LIST, start, end);\n    }\n\n    function getAccountGlvDepositCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountGlvDepositListKey(account));\n    }\n\n    function getAccountGlvDepositKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountGlvDepositListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/glv/glvDeposit/GlvDepositUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../deposit/ExecuteDepositUtils.sol\";\n\nimport \"../../nonce/NonceUtils.sol\";\n\nimport \"../GlvVault.sol\";\nimport \"../GlvUtils.sol\";\nimport \"./GlvDepositEventUtils.sol\";\nimport \"./GlvDepositStoreUtils.sol\";\n\nlibrary GlvDepositUtils {\n    using GlvDeposit for GlvDeposit.Props;\n    using Deposit for Deposit.Props;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using EventUtils for EventUtils.UintItems;\n\n    struct CreateGlvDepositParams {\n        address glv;\n        address market;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minGlvTokens;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n        bool shouldUnwrapNativeToken;\n        bool isMarketTokenDeposit;\n    }\n\n    struct CreateGlvDepositCache {\n        uint256 marketTokenAmount;\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n    }\n\n    struct ExecuteGlvDepositParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        GlvVault glvVault;\n        Oracle oracle;\n        bytes32 key;\n        uint256 startingGas;\n        address keeper;\n    }\n\n    struct ExecuteGlvDepositCache {\n        Market.Props market;\n        MarketPoolValueInfo.Props marketPoolValueInfo;\n        uint256 marketTokenSupply;\n        uint256 receivedMarketTokens;\n        uint256 mintAmount;\n        uint256 marketCount;\n        uint256 oraclePriceCount;\n        uint256 glvValue;\n        uint256 glvSupply;\n    }\n\n    struct CancelGlvDepositParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        GlvVault glvVault;\n        bytes32 key;\n        address keeper;\n        uint256 startingGas;\n        string reason;\n        bytes reasonBytes;\n    }\n\n    address public constant RECEIVER_FOR_FIRST_GLV_DEPOSIT = address(1);\n\n    function createGlvDeposit(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        GlvVault glvVault,\n        address account,\n        CreateGlvDepositParams memory params\n    ) external returns (bytes32) {\n        AccountUtils.validateAccount(account);\n        GlvUtils.validateGlv(dataStore, params.glv);\n        GlvUtils.validateGlvMarket(dataStore, params.glv, params.market, true);\n\n        MarketUtils.validateEnabledMarket(dataStore, params.market);\n\n        CreateGlvDepositCache memory cache;\n\n        if (params.isMarketTokenDeposit) {\n            // user deposited GM tokens\n            if (params.initialLongToken != address(0)) {\n                revert Errors.InvalidGlvDepositInitialLongToken(params.initialLongToken);\n            }\n            if (params.initialShortToken != address(0)) {\n                revert Errors.InvalidGlvDepositInitialShortToken(params.initialShortToken);\n            }\n            if (params.longTokenSwapPath.length > 0 || params.shortTokenSwapPath.length > 0) {\n                revert Errors.InvalidGlvDepositSwapPath(\n                    params.longTokenSwapPath.length,\n                    params.shortTokenSwapPath.length\n                );\n            }\n            cache.marketTokenAmount = glvVault.recordTransferIn(params.market);\n\n            if (cache.marketTokenAmount == 0) {\n                revert Errors.EmptyGlvMarketAmount();\n            }\n        } else {\n            MarketUtils.validateSwapPath(dataStore, params.longTokenSwapPath);\n            MarketUtils.validateSwapPath(dataStore, params.shortTokenSwapPath);\n\n            if (params.initialLongToken == address(0)) {\n                revert Errors.InvalidGlvDepositInitialLongToken(params.initialLongToken);\n            }\n            if (params.initialShortToken == address(0)) {\n                revert Errors.InvalidGlvDepositInitialShortToken(params.initialShortToken);\n            }\n\n            // if the initialLongToken and initialShortToken are the same, only the initialLongTokenAmount would\n            // be non-zero, the initialShortTokenAmount would be zero\n            cache.initialLongTokenAmount = glvVault.recordTransferIn(params.initialLongToken);\n            if (params.initialShortToken != params.initialLongToken) {\n                cache.initialShortTokenAmount = glvVault.recordTransferIn(params.initialShortToken);\n            }\n        }\n\n        address wnt = TokenUtils.wnt(dataStore);\n        if (params.initialLongToken == wnt) {\n            if (cache.initialLongTokenAmount < params.executionFee) {\n                revert Errors.InsufficientWntAmountForExecutionFee(cache.initialLongTokenAmount, params.executionFee);\n            }\n            cache.initialLongTokenAmount -= params.executionFee;\n        } else if (params.initialShortToken == wnt) {\n            if (cache.initialShortTokenAmount < params.executionFee) {\n                revert Errors.InsufficientWntAmountForExecutionFee(cache.initialShortTokenAmount, params.executionFee);\n            }\n            cache.initialShortTokenAmount -= params.executionFee;\n        } else {\n            uint256 wntAmount = glvVault.recordTransferIn(wnt);\n            if (wntAmount < params.executionFee) {\n                revert Errors.InsufficientWntAmountForExecutionFee(wntAmount, params.executionFee);\n            }\n\n            params.executionFee = wntAmount;\n        }\n\n        if (!params.isMarketTokenDeposit && (cache.initialLongTokenAmount == 0 && cache.initialShortTokenAmount == 0)) {\n            revert Errors.EmptyGlvDepositAmounts();\n        }\n\n        AccountUtils.validateReceiver(params.receiver);\n\n        GlvDeposit.Props memory glvDeposit = GlvDeposit.Props(\n            GlvDeposit.Addresses({\n                account: account,\n                glv: params.glv,\n                receiver: params.receiver,\n                callbackContract: params.callbackContract,\n                uiFeeReceiver: params.uiFeeReceiver,\n                market: params.market,\n                initialLongToken: params.initialLongToken,\n                initialShortToken: params.initialShortToken,\n                longTokenSwapPath: params.longTokenSwapPath,\n                shortTokenSwapPath: params.shortTokenSwapPath\n            }),\n            GlvDeposit.Numbers({\n                marketTokenAmount: cache.marketTokenAmount,\n                initialLongTokenAmount: cache.initialLongTokenAmount,\n                initialShortTokenAmount: cache.initialShortTokenAmount,\n                minGlvTokens: params.minGlvTokens,\n                updatedAtTime: Chain.currentTimestamp(),\n                executionFee: params.executionFee,\n                callbackGasLimit: params.callbackGasLimit\n            }),\n            GlvDeposit.Flags({\n                shouldUnwrapNativeToken: params.shouldUnwrapNativeToken,\n                isMarketTokenDeposit: params.isMarketTokenDeposit\n            })\n        );\n\n        CallbackUtils.validateCallbackGasLimit(dataStore, params.callbackGasLimit);\n\n        uint256 marketCount = GlvUtils.getGlvMarketCount(dataStore, glvDeposit.glv());\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteGlvDepositGasLimit(dataStore, glvDeposit, marketCount);\n        uint256 oraclePriceCount = GasUtils.estimateGlvDepositOraclePriceCount(\n            marketCount,\n            params.longTokenSwapPath.length + params.shortTokenSwapPath.length\n        );\n        GasUtils.validateExecutionFee(dataStore, estimatedGasLimit, params.executionFee, oraclePriceCount);\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n\n        GlvDepositStoreUtils.set(dataStore, key, glvDeposit);\n\n        GlvDepositEventUtils.emitGlvDepositCreated(eventEmitter, key, glvDeposit);\n\n        return key;\n    }\n\n    function executeGlvDeposit(\n        ExecuteGlvDepositParams memory params,\n        GlvDeposit.Props memory glvDeposit\n    ) external returns (uint256) {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        GlvDepositStoreUtils.remove(params.dataStore, params.key, glvDeposit.account());\n\n        // should be called before any tokens are minted\n        _validateFirstGlvDeposit(params, glvDeposit);\n\n        ExecuteGlvDepositCache memory cache;\n\n        cache.receivedMarketTokens = _processMarketDeposit(params, glvDeposit, params.glvVault);\n\n        // glvValue should be calculated after funds are deposited into GM market\n        // but before GLV syncs GM token balance for glvValue to account for\n        // slightly increased GM market price because of paid fees\n        cache.glvValue = GlvUtils.getGlvValue(\n            params.dataStore,\n            params.oracle,\n            glvDeposit.glv(),\n            true // maximize\n        );\n        GlvToken(payable(glvDeposit.glv())).syncTokenBalance(glvDeposit.market());\n\n        cache.glvSupply = GlvToken(payable(glvDeposit.glv())).totalSupply();\n        cache.mintAmount = _getMintAmount(\n            params.dataStore,\n            params.oracle,\n            glvDeposit,\n            cache.receivedMarketTokens,\n            cache.glvValue,\n            cache.glvSupply\n        );\n        if (cache.mintAmount < glvDeposit.minGlvTokens()) {\n            revert Errors.MinGlvTokens(cache.mintAmount, glvDeposit.minGlvTokens());\n        }\n\n        GlvToken(payable(glvDeposit.glv())).mint(glvDeposit.receiver(), cache.mintAmount);\n\n        cache.market = MarketUtils.getEnabledMarket(params.dataStore, glvDeposit.market());\n        cache.marketPoolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            cache.market,\n            params.oracle.getPrimaryPrice(cache.market.indexToken),\n            params.oracle.getPrimaryPrice(cache.market.longToken),\n            params.oracle.getPrimaryPrice(cache.market.shortToken),\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            true // maximize\n        );\n        cache.marketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(glvDeposit.market())));\n\n        GlvUtils.validateGlvMarketTokenBalance(\n            params.dataStore,\n            glvDeposit.glv(),\n            cache.market,\n            cache.marketPoolValueInfo.poolValue.toUint256(),\n            cache.marketTokenSupply\n        );\n\n        GlvDepositEventUtils.emitGlvDepositExecuted(\n            params.eventEmitter,\n            params.key,\n            glvDeposit.account(),\n            cache.mintAmount\n        );\n\n        cache.glvValue = GlvUtils.getGlvValue(\n            params.dataStore,\n            params.oracle,\n            glvDeposit.glv(),\n            true // maximize\n        );\n        cache.glvSupply = GlvToken(payable(glvDeposit.glv())).totalSupply();\n        GlvEventUtils.emitGlvValueUpdated(params.eventEmitter, glvDeposit.glv(), cache.glvValue, cache.glvSupply);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"receivedGlvTokens\", cache.mintAmount);\n        CallbackUtils.afterGlvDepositExecution(params.key, glvDeposit, eventData);\n\n        cache.marketCount = GlvUtils.getGlvMarketCount(params.dataStore, glvDeposit.glv());\n        cache.oraclePriceCount = GasUtils.estimateGlvDepositOraclePriceCount(\n            cache.marketCount,\n            glvDeposit.longTokenSwapPath().length + glvDeposit.shortTokenSwapPath().length\n        );\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.glvVault,\n            params.key,\n            glvDeposit.callbackContract(),\n            glvDeposit.executionFee(),\n            params.startingGas,\n            cache.oraclePriceCount,\n            params.keeper,\n            glvDeposit.receiver()\n        );\n\n        return cache.mintAmount;\n    }\n\n    function _validateFirstGlvDeposit(\n        ExecuteGlvDepositParams memory params,\n        GlvDeposit.Props memory glvDeposit\n    ) internal view {\n        address glv = glvDeposit.glv();\n        uint256 initialGlvTokenSupply = GlvToken(payable(glv)).totalSupply();\n\n        // return if this is not the first glv deposit\n        if (initialGlvTokenSupply != 0) {\n            return;\n        }\n\n        uint256 minGlvTokens = params.dataStore.getUint(Keys.minGlvTokensForFirstGlvDepositKey(glv));\n\n        // return if there is no minGlvTokens requirement\n        if (minGlvTokens == 0) {\n            return;\n        }\n\n        if (glvDeposit.receiver() != RECEIVER_FOR_FIRST_GLV_DEPOSIT) {\n            revert Errors.InvalidReceiverForFirstGlvDeposit(glvDeposit.receiver(), RECEIVER_FOR_FIRST_GLV_DEPOSIT);\n        }\n\n        if (glvDeposit.minGlvTokens() < minGlvTokens) {\n            revert Errors.InvalidMinGlvTokensForFirstGlvDeposit(glvDeposit.minGlvTokens(), minGlvTokens);\n        }\n    }\n\n    function _getMintAmount(\n        DataStore dataStore,\n        Oracle oracle,\n        GlvDeposit.Props memory glvDeposit,\n        uint256 receivedMarketTokens,\n        uint256 glvValue,\n        uint256 glvSupply\n    ) internal view returns (uint256) {\n        Market.Props memory market = MarketUtils.getEnabledMarket(dataStore, glvDeposit.market());\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            dataStore,\n            market,\n            oracle.getPrimaryPrice(market.indexToken),\n            oracle.getPrimaryPrice(market.longToken),\n            oracle.getPrimaryPrice(market.shortToken),\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            false // maximize\n        );\n        uint256 marketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\n        uint256 receivedMarketTokensUsd = MarketUtils.marketTokenAmountToUsd(\n            receivedMarketTokens,\n            poolValueInfo.poolValue.toUint256(),\n            marketTokenSupply\n        );\n        return GlvUtils.usdToGlvTokenAmount(receivedMarketTokensUsd, glvValue, glvSupply);\n    }\n\n    function _processMarketDeposit(\n        ExecuteGlvDepositParams memory params,\n        GlvDeposit.Props memory glvDeposit,\n        GlvVault glvVault\n    ) private returns (uint256) {\n        if (glvDeposit.isMarketTokenDeposit()) {\n            Market.Props memory market = MarketUtils.getEnabledMarket(params.dataStore, glvDeposit.market());\n\n            MarketUtils.MarketPrices memory marketPrices = MarketUtils.MarketPrices(\n                params.oracle.getPrimaryPrice(market.indexToken),\n                params.oracle.getPrimaryPrice(market.longToken),\n                params.oracle.getPrimaryPrice(market.shortToken)\n            );\n            MarketUtils.validateMaxPnl(\n                params.dataStore,\n                market,\n                marketPrices,\n                Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n                Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS\n            );\n\n            // user deposited GM tokens\n            glvVault.transferOut(glvDeposit.market(), glvDeposit.glv(), glvDeposit.marketTokenAmount());\n            return glvDeposit.marketTokenAmount();\n        }\n\n        Deposit.Props memory deposit = Deposit.Props(\n            Deposit.Addresses({\n                account: glvDeposit.glv(),\n                receiver: glvDeposit.glv(),\n                callbackContract: address(0),\n                uiFeeReceiver: glvDeposit.uiFeeReceiver(),\n                market: glvDeposit.market(),\n                initialLongToken: glvDeposit.initialLongToken(),\n                initialShortToken: glvDeposit.initialShortToken(),\n                longTokenSwapPath: glvDeposit.longTokenSwapPath(),\n                shortTokenSwapPath: glvDeposit.shortTokenSwapPath()\n            }),\n            Deposit.Numbers({\n                initialLongTokenAmount: glvDeposit.initialLongTokenAmount(),\n                initialShortTokenAmount: glvDeposit.initialShortTokenAmount(),\n                minMarketTokens: 0,\n                updatedAtTime: glvDeposit.updatedAtTime(),\n                executionFee: 0,\n                callbackGasLimit: 0\n            }),\n            Deposit.Flags({shouldUnwrapNativeToken: false})\n        );\n\n        bytes32 depositKey = NonceUtils.getNextKey(params.dataStore);\n        params.dataStore.addBytes32(Keys.DEPOSIT_LIST, depositKey);\n        DepositEventUtils.emitDepositCreated(params.eventEmitter, depositKey, deposit, Deposit.DepositType.Glv);\n\n        ExecuteDepositUtils.ExecuteDepositParams memory executeDepositParams = ExecuteDepositUtils.ExecuteDepositParams(\n                params.dataStore,\n                params.eventEmitter,\n                DepositVault(payable(params.glvVault)),\n                params.oracle,\n                depositKey,\n                params.keeper,\n                params.startingGas,\n                ISwapPricingUtils.SwapPricingType.Deposit,\n                true // includeVirtualInventoryImpact\n            );\n\n        uint256 receivedMarketTokens = ExecuteDepositUtils.executeDeposit(executeDepositParams, deposit);\n        return receivedMarketTokens;\n    }\n\n    function cancelGlvDeposit(CancelGlvDepositParams memory params) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(params.dataStore, params.key);\n        GlvDepositStoreUtils.remove(params.dataStore, params.key, glvDeposit.account());\n\n        if (glvDeposit.isMarketTokenDeposit()) {\n            // in this case marketTokenAmount > 0\n            params.glvVault.transferOut(\n                glvDeposit.market(),\n                glvDeposit.account(),\n                glvDeposit.marketTokenAmount(),\n                glvDeposit.shouldUnwrapNativeToken()\n            );\n        } else {\n            if (glvDeposit.initialLongTokenAmount() > 0) {\n                params.glvVault.transferOut(\n                    glvDeposit.initialLongToken(),\n                    glvDeposit.account(),\n                    glvDeposit.initialLongTokenAmount(),\n                    glvDeposit.shouldUnwrapNativeToken()\n                );\n            }\n\n            if (glvDeposit.initialShortTokenAmount() > 0) {\n                params.glvVault.transferOut(\n                    glvDeposit.initialShortToken(),\n                    glvDeposit.account(),\n                    glvDeposit.initialShortTokenAmount(),\n                    glvDeposit.shouldUnwrapNativeToken()\n                );\n            }\n        }\n\n        GlvDepositEventUtils.emitGlvDepositCancelled(\n            params.eventEmitter,\n            params.key,\n            glvDeposit.account(),\n            params.reason,\n            params.reasonBytes\n        );\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterGlvDepositCancellation(params.key, glvDeposit, eventData);\n\n        uint256 marketCount = GlvUtils.getGlvMarketCount(params.dataStore, glvDeposit.glv());\n        uint256 oraclePriceCount = GasUtils.estimateGlvDepositOraclePriceCount(\n            marketCount,\n            glvDeposit.longTokenSwapPath().length + glvDeposit.shortTokenSwapPath().length\n        );\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.glvVault,\n            params.key,\n            glvDeposit.callbackContract(),\n            glvDeposit.executionFee(),\n            params.startingGas,\n            oraclePriceCount,\n            params.keeper,\n            glvDeposit.receiver()\n        );\n    }\n}\n"
    },
    "contracts/glv/glvDeposit/GlvTestUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/* import \"../../deposit/ExecuteDepositUtils.sol\"; */\n\nimport \"../GlvVault.sol\";\nimport \"../GlvUtils.sol\";\nimport \"./GlvDepositEventUtils.sol\";\nimport \"./GlvDepositStoreUtils.sol\";\n\nlibrary GlvTestUtils {\n}\n"
    },
    "contracts/glv/GlvEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nlibrary GlvEventUtils {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitGlvMarketAdded(EventEmitter eventEmitter, address glv, address market) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"glv\", glv);\n        eventData.addressItems.setItem(1, \"market\", market);\n\n        eventEmitter.emitEventLog2(\"GlvMarketAdded\", Cast.toBytes32(glv), Cast.toBytes32(market), eventData);\n    }\n\n    function emitGlvMarketRemoved(EventEmitter eventEmitter, address glv, address market) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"glv\", glv);\n        eventData.addressItems.setItem(1, \"market\", market);\n\n        eventEmitter.emitEventLog2(\"GlvMarketRemoved\", Cast.toBytes32(glv), Cast.toBytes32(market), eventData);\n    }\n\n    function emitGlvValueUpdated(EventEmitter eventEmitter, address glv, uint256 value, uint256 supply) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"glv\", glv);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"value\", value);\n        eventData.uintItems.setItem(1, \"supply\", supply);\n\n        eventEmitter.emitEventLog1(\"GlvValueUpdated\", Cast.toBytes32(glv), eventData);\n    }\n}\n"
    },
    "contracts/glv/GlvFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./GlvToken.sol\";\nimport \"./Glv.sol\";\nimport \"./GlvStoreUtils.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/Cast.sol\";\n\n// @title GlvFactory\n// @dev Contract to create glv\ncontract GlvFactory is RoleModule {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    constructor(RoleStore _roleStore, DataStore _dataStore, EventEmitter _eventEmitter) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n    }\n\n    function createGlv(\n        address longToken,\n        address shortToken,\n        bytes32 glvType,\n        string memory name,\n        string memory symbol\n    ) external onlyMarketKeeper returns (Glv.Props memory) {\n        // not the same as length in characters\n        if (bytes(symbol).length > 30) {\n            revert Errors.GlvSymbolTooLong();\n        }\n        if (bytes(name).length > 100) {\n            revert Errors.GlvNameTooLong();\n        }\n\n        bytes32 salt = keccak256(abi.encode(\"GMX_GLV\", longToken, shortToken, glvType));\n\n        address existingGlvAddress = dataStore.getAddress(GlvStoreUtils.getGlvSaltHash(salt));\n        if (existingGlvAddress != address(0)) {\n            revert Errors.GlvAlreadyExists(glvType, existingGlvAddress);\n        }\n\n        GlvToken glvToken = new GlvToken{salt: salt}(roleStore, dataStore, name, symbol);\n\n        Glv.Props memory glv = Glv.Props({glvToken: address(glvToken), longToken: longToken, shortToken: shortToken});\n\n        GlvStoreUtils.set(dataStore, address(glvToken), salt, glv);\n\n        emitGlvCreated(address(glvToken), salt, longToken, shortToken, glvType);\n\n        return glv;\n    }\n\n    function emitGlvCreated(address glvAddress, bytes32 salt, address longToken, address shortToken, bytes32 glvType) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"glvToken\", glvAddress);\n        eventData.addressItems.setItem(1, \"longToken\", longToken);\n        eventData.addressItems.setItem(2, \"shortToken\", shortToken);\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"salt\", salt);\n        eventData.bytes32Items.setItem(1, \"glvType\", glvType);\n\n        eventEmitter.emitEventLog1(\"GlvCreated\", Cast.toBytes32(glvAddress), eventData);\n    }\n}\n"
    },
    "contracts/glv/glvShift/GlvShift.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary GlvShift {\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n    }\n\n    struct Addresses {\n        address glv;\n        address fromMarket;\n        address toMarket;\n    }\n\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 minMarketTokens;\n        uint256 updatedAtTime;\n    }\n\n    function glv(Props memory props) internal pure returns (address) {\n        return props.addresses.glv;\n    }\n\n    function setGlv(Props memory props, address value) internal pure {\n        props.addresses.glv = value;\n    }\n\n    function fromMarket(Props memory props) internal pure returns (address) {\n        return props.addresses.fromMarket;\n    }\n\n    function setFromMarket(Props memory props, address value) internal pure {\n        props.addresses.fromMarket = value;\n    }\n\n    function toMarket(Props memory props) internal pure returns (address) {\n        return props.addresses.toMarket;\n    }\n\n    function setToMarket(Props memory props, address value) internal pure {\n        props.addresses.toMarket = value;\n    }\n\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.marketTokenAmount;\n    }\n\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.marketTokenAmount = value;\n    }\n\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minMarketTokens;\n    }\n\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\n        props.numbers.minMarketTokens = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n}\n"
    },
    "contracts/glv/glvShift/GlvShiftEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../event/EventEmitter.sol\";\nimport \"../../event/EventUtils.sol\";\n\nimport \"./GlvShift.sol\";\n\nlibrary GlvShiftEventUtils {\n    using GlvShift for GlvShift.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitGlvShiftCreated(EventEmitter eventEmitter, bytes32 key, GlvShift.Props memory glvShift) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"fromMarket\", glvShift.fromMarket());\n        eventData.addressItems.setItem(1, \"toMarket\", glvShift.toMarket());\n        eventData.addressItems.setItem(2, \"glv\", glvShift.glv());\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"marketTokenAmount\", glvShift.marketTokenAmount());\n        eventData.uintItems.setItem(1, \"minMarketTokens\", glvShift.minMarketTokens());\n        eventData.uintItems.setItem(2, \"updatedAtTime\", glvShift.updatedAtTime());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog1(\"GlvShiftCreated\", key, eventData);\n    }\n\n    function emitGlvShiftExecuted(EventEmitter eventEmitter, bytes32 key, uint256 receivedMarketTokens) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"receivedMarketTokens\", receivedMarketTokens);\n\n        eventEmitter.emitEventLog1(\"GlvShiftExecuted\", key, eventData);\n    }\n\n    function emitGlvShiftCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog1(\"GlvShiftCancelled\", key, eventData);\n    }\n}\n"
    },
    "contracts/glv/glvShift/GlvShiftStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../data/Keys.sol\";\nimport \"../../data/DataStore.sol\";\n\nimport \"./GlvShift.sol\";\n\nlibrary GlvShiftStoreUtils {\n    using GlvShift for GlvShift.Props;\n\n    bytes32 public constant GLV = keccak256(abi.encode(\"GLV\"));\n    bytes32 public constant FROM_MARKET = keccak256(abi.encode(\"FROM_MARKET\"));\n    bytes32 public constant TO_MARKET = keccak256(abi.encode(\"TO_MARKET\"));\n\n    bytes32 public constant MARKET_TOKEN_AMOUNT = keccak256(abi.encode(\"MARKET_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_MARKET_TOKENS = keccak256(abi.encode(\"MIN_MARKET_TOKENS\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (GlvShift.Props memory) {\n        GlvShift.Props memory glvShift;\n        if (!dataStore.containsBytes32(Keys.GLV_SHIFT_LIST, key)) {\n            return glvShift;\n        }\n\n        glvShift.setGlv(dataStore.getAddress(\n            keccak256(abi.encode(key, GLV))\n        ));\n\n        glvShift.setFromMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, FROM_MARKET))\n        ));\n\n        glvShift.setToMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, TO_MARKET))\n        ));\n\n        glvShift.setMarketTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        ));\n\n        glvShift.setMinMarketTokens(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\n        ));\n\n        glvShift.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        return glvShift;\n    }\n\n    function set(DataStore dataStore, bytes32 key, GlvShift.Props memory glvShift) external {\n        dataStore.addBytes32(\n            Keys.GLV_SHIFT_LIST,\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, GLV)),\n            glvShift.glv()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, FROM_MARKET)),\n            glvShift.fromMarket()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, TO_MARKET)),\n            glvShift.toMarket()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT)),\n            glvShift.marketTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS)),\n            glvShift.minMarketTokens()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            glvShift.updatedAtTime()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key) external {\n        if (!dataStore.containsBytes32(Keys.GLV_SHIFT_LIST, key)) {\n            revert Errors.GlvShiftNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.GLV_SHIFT_LIST,\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, GLV))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, FROM_MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, TO_MARKET))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n    }\n\n    function getGlvShiftCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.GLV_SHIFT_LIST);\n    }\n\n    function getGlvShiftKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.GLV_SHIFT_LIST, start, end);\n    }\n}\n"
    },
    "contracts/glv/glvShift/GlvShiftUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../event/EventEmitter.sol\";\nimport \"../../shift/ShiftUtils.sol\";\nimport \"../GlvUtils.sol\";\nimport \"../GlvVault.sol\";\n\nimport \"./GlvShiftStoreUtils.sol\";\nimport \"./GlvShiftEventUtils.sol\";\n\nlibrary GlvShiftUtils {\n    using GlvShift for GlvShift.Props;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    struct CreateGlvShiftParams {\n        address glv;\n        address fromMarket;\n        address toMarket;\n        uint256 marketTokenAmount;\n        uint256 minMarketTokens;\n    }\n\n    struct ExecuteGlvShiftParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        Oracle oracle;\n        ShiftVault shiftVault;\n        GlvVault glvVault;\n        bytes32 key;\n        address keeper;\n    }\n\n    struct ExecuteGlvShiftCache {\n        Market.Props fromMarket;\n        Market.Props toMarket;\n        Shift.Props shift;\n        MarketPoolValueInfo.Props fromMarketPoolValueInfo;\n        uint256 fromMarketTokenSupply;\n        MarketPoolValueInfo.Props toMarketPoolValueInfo;\n        uint256 toMarketTokenSupply;\n        uint256 marketTokensUsd;\n        uint256 receivedMarketTokens;\n        uint256 receivedMarketTokensUsd;\n        bytes32 shiftKey;\n        uint256 glvValue;\n        uint256 glvSupply;\n    }\n\n    function createGlvShift(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        CreateGlvShiftParams memory params\n    ) external returns (bytes32) {\n        GlvUtils.validateGlv(dataStore, params.glv);\n        GlvUtils.validateGlvMarket(dataStore, params.glv, params.fromMarket, false);\n        GlvUtils.validateGlvMarket(dataStore, params.glv, params.toMarket, true);\n\n        validateGlvShiftInterval(dataStore, params.glv);\n\n        uint256 fromMarketTokenBalance = GlvToken(payable(params.glv)).tokenBalances(params.fromMarket);\n        if (fromMarketTokenBalance < params.marketTokenAmount) {\n            revert Errors.GlvInsufficientMarketTokenBalance(\n                params.glv,\n                params.fromMarket,\n                fromMarketTokenBalance,\n                params.marketTokenAmount\n            );\n        }\n\n        MarketUtils.validateEnabledMarket(dataStore, params.fromMarket);\n        MarketUtils.validateEnabledMarket(dataStore, params.toMarket);\n\n        GlvShift.Props memory glvShift = GlvShift.Props(\n            GlvShift.Addresses({glv: params.glv, fromMarket: params.fromMarket, toMarket: params.toMarket}),\n            GlvShift.Numbers({\n                marketTokenAmount: params.marketTokenAmount,\n                minMarketTokens: params.minMarketTokens,\n                updatedAtTime: Chain.currentTimestamp()\n            })\n        );\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n\n        GlvShiftStoreUtils.set(dataStore, key, glvShift);\n\n        GlvShiftEventUtils.emitGlvShiftCreated(eventEmitter, key, glvShift);\n\n        return key;\n    }\n\n    function validateGlvShiftInterval(DataStore dataStore, address glv) internal view {\n        uint256 glvShiftMinInterval = dataStore.getUint(Keys.glvShiftMinIntervalKey(glv));\n        if (glvShiftMinInterval == 0) {\n            return;\n        }\n\n        uint256 glvShiftLastExecutedAt = dataStore.getUint(Keys.glvShiftLastExecutedAtKey(glv));\n        if (Chain.currentTimestamp() < glvShiftLastExecutedAt + glvShiftMinInterval) {\n            revert Errors.GlvShiftIntervalNotYetPassed(\n                Chain.currentTimestamp(),\n                glvShiftLastExecutedAt,\n                glvShiftMinInterval\n            );\n        }\n    }\n\n    function executeGlvShift(\n        ExecuteGlvShiftParams memory params,\n        GlvShift.Props memory glvShift\n    ) external returns (uint256) {\n        GlvShiftStoreUtils.remove(params.dataStore, params.key);\n\n        validateGlvShiftInterval(params.dataStore, glvShift.glv());\n        params.dataStore.setUint(Keys.glvShiftLastExecutedAtKey(glvShift.glv()), Chain.currentTimestamp());\n\n        Bank(payable(glvShift.glv())).transferOut(\n            glvShift.fromMarket(),\n            address(params.shiftVault),\n            glvShift.marketTokenAmount()\n        );\n        params.shiftVault.syncTokenBalance(glvShift.fromMarket());\n\n        ExecuteGlvShiftCache memory cache;\n        cache.shift = Shift.Props(\n            Shift.Addresses({\n                account: glvShift.glv(),\n                receiver: glvShift.glv(),\n                callbackContract: address(0),\n                uiFeeReceiver: address(0),\n                fromMarket: glvShift.fromMarket(),\n                toMarket: glvShift.toMarket()\n            }),\n            Shift.Numbers({\n                minMarketTokens: glvShift.minMarketTokens(),\n                marketTokenAmount: glvShift.marketTokenAmount(),\n                updatedAtTime: glvShift.updatedAtTime(),\n                executionFee: 0,\n                callbackGasLimit: 0\n            })\n        );\n\n        cache.shiftKey = NonceUtils.getNextKey(params.dataStore);\n        params.dataStore.addBytes32(Keys.SHIFT_LIST, cache.shiftKey);\n        ShiftEventUtils.emitShiftCreated(params.eventEmitter, cache.shiftKey, cache.shift);\n\n        ShiftUtils.ExecuteShiftParams memory executeShiftParams = ShiftUtils.ExecuteShiftParams({\n            dataStore: params.dataStore,\n            eventEmitter: params.eventEmitter,\n            shiftVault: params.shiftVault,\n            oracle: params.oracle,\n            key: cache.shiftKey,\n            keeper: params.keeper,\n\n            // executionFee is not used for GlvShift's\n            // pass gasleft() not to break startGas calculations inside ShiftUtils\n            startingGas: gasleft()\n        });\n\n        cache.receivedMarketTokens = ShiftUtils.executeShift(executeShiftParams, cache.shift);\n\n        GlvToken(payable(glvShift.glv())).syncTokenBalance(glvShift.toMarket());\n\n        cache.toMarket = MarketStoreUtils.get(params.dataStore, glvShift.toMarket());\n\n        cache.toMarketPoolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            cache.toMarket,\n            params.oracle.getPrimaryPrice(cache.toMarket.indexToken),\n            params.oracle.getPrimaryPrice(cache.toMarket.longToken),\n            params.oracle.getPrimaryPrice(cache.toMarket.shortToken),\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            true // maximize\n        );\n        cache.toMarketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(glvShift.toMarket())));\n\n        GlvUtils.validateGlvMarketTokenBalance(\n            params.dataStore,\n            glvShift.glv(),\n            cache.toMarket,\n            cache.toMarketPoolValueInfo.poolValue.toUint256(),\n            cache.toMarketTokenSupply\n        );\n        cache.receivedMarketTokensUsd = MarketUtils.marketTokenAmountToUsd(\n            cache.receivedMarketTokens,\n            cache.toMarketPoolValueInfo.poolValue.toUint256(),\n            cache.toMarketTokenSupply\n        );\n\n        cache.fromMarket = MarketStoreUtils.get(params.dataStore, glvShift.fromMarket());\n        cache.fromMarketPoolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            cache.fromMarket,\n            params.oracle.getPrimaryPrice(cache.fromMarket.indexToken),\n            params.oracle.getPrimaryPrice(cache.fromMarket.longToken),\n            params.oracle.getPrimaryPrice(cache.fromMarket.shortToken),\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            true // maximize\n        );\n        cache.fromMarketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(glvShift.fromMarket())));\n\n        cache.marketTokensUsd = MarketUtils.marketTokenAmountToUsd(\n            glvShift.marketTokenAmount(),\n            cache.fromMarketPoolValueInfo.poolValue.toUint256(),\n            cache.fromMarketTokenSupply\n        );\n\n        validatePriceImpact(params.dataStore, glvShift.glv(), cache.marketTokensUsd, cache.receivedMarketTokensUsd);\n\n        GlvShiftEventUtils.emitGlvShiftExecuted(params.eventEmitter, params.key, cache.receivedMarketTokens);\n\n        cache.glvValue = GlvUtils.getGlvValue(\n            params.dataStore,\n            params.oracle,\n            glvShift.glv(),\n            true // maximize\n        );\n        cache.glvSupply = GlvToken(payable(glvShift.glv())).totalSupply();\n        GlvEventUtils.emitGlvValueUpdated(params.eventEmitter, glvShift.glv(), cache.glvValue, cache.glvSupply);\n\n        return cache.receivedMarketTokens;\n    }\n\n    function cancelGlvShift(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        bytes32 key,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        GlvShiftStoreUtils.remove(dataStore, key);\n\n        GlvShiftEventUtils.emitGlvShiftCancelled(eventEmitter, key, reason, reasonBytes);\n    }\n\n    function validatePriceImpact(\n        DataStore dataStore,\n        address glv,\n        uint256 marketTokensUsd,\n        uint256 receivedMarketTokensUsd\n    ) internal view {\n        if (marketTokensUsd < receivedMarketTokensUsd) {\n            // price impact is positive, no need to validate it\n            return;\n        }\n\n        uint256 glvMaxShiftPriceImpactFactor = dataStore.getUint(Keys.glvShiftMaxPriceImpactFactorKey(glv));\n\n        uint256 effectivePriceImpactFactor = Precision.toFactor(\n            marketTokensUsd - receivedMarketTokensUsd,\n            marketTokensUsd\n        );\n        if (effectivePriceImpactFactor > glvMaxShiftPriceImpactFactor) {\n            revert Errors.GlvShiftMaxPriceImpactExceeded(effectivePriceImpactFactor, glvMaxShiftPriceImpactFactor);\n        }\n    }\n}\n"
    },
    "contracts/glv/GlvStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Glv.sol\";\n\nlibrary GlvStoreUtils {\n    using Glv for Glv.Props;\n\n    bytes32 public constant GLV_SALT = keccak256(abi.encode(\"GLV_SALT\"));\n    bytes32 public constant GLV_TOKEN = keccak256(abi.encode(\"GLV_TOKEN\"));\n    bytes32 public constant LONG_TOKEN = keccak256(abi.encode(\"LONG_TOKEN\"));\n    bytes32 public constant SHORT_TOKEN = keccak256(abi.encode(\"SHORT_TOKEN\"));\n\n    function get(DataStore dataStore, address key) public view returns (Glv.Props memory) {\n        Glv.Props memory glv;\n        if (!dataStore.containsAddress(Keys.GLV_LIST, key)) {\n            return glv;\n        }\n\n        glv.glvToken = dataStore.getAddress(\n            keccak256(abi.encode(key, GLV_TOKEN))\n        );\n\n        glv.longToken = dataStore.getAddress(\n            keccak256(abi.encode(key, LONG_TOKEN))\n        );\n\n        glv.shortToken = dataStore.getAddress(\n            keccak256(abi.encode(key, SHORT_TOKEN))\n        );\n\n        return glv;\n    }\n\n    function getBySalt(DataStore dataStore, bytes32 salt) external view returns (Glv.Props memory) {\n        address key = dataStore.getAddress(getGlvSaltHash(salt));\n        return get(dataStore, key);\n    }\n\n    function set(DataStore dataStore, address key, bytes32 salt, Glv.Props memory glv) external {\n        dataStore.addAddress(\n            Keys.GLV_LIST,\n            key\n        );\n\n        // the salt is based on the glv props while the key gives the glv's address\n        // use the salt to store a reference to the key to allow the key to be retrieved\n        // using just the salt value\n        dataStore.setAddress(\n            getGlvSaltHash(salt),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, GLV_TOKEN)),\n            glv.glvToken\n        );\n\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, LONG_TOKEN)),\n            glv.longToken\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, SHORT_TOKEN)),\n            glv.shortToken\n        );\n    }\n\n    function remove(DataStore dataStore, address key) external {\n        if (!dataStore.containsAddress(Keys.GLV_LIST, key)) {\n            revert Errors.GlvNotFound(key);\n        }\n\n        dataStore.removeAddress(\n            Keys.GLV_LIST,\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, GLV_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, LONG_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, SHORT_TOKEN))\n        );\n    }\n\n    function getGlvSaltHash(bytes32 salt) internal pure returns (bytes32) {\n        return keccak256(abi.encode(GLV_SALT, salt));\n    }\n\n    function getGlvCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getAddressCount(Keys.GLV_LIST);\n    }\n\n    function getGlvKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (address[] memory) {\n        return dataStore.getAddressValuesAt(Keys.GLV_LIST, start, end);\n    }\n}\n"
    },
    "contracts/glv/GlvToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../bank/StrictBank.sol\";\n\ncontract GlvToken is ERC20, StrictBank {\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) StrictBank(_roleStore, _dataStore) {}\n\n    function mint(address account, uint256 amount) external onlyController {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external onlyController {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/glv/GlvUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../market/Market.sol\";\nimport \"../market/MarketUtils.sol\";\nimport \"./GlvToken.sol\";\nimport \"./GlvEventUtils.sol\";\nimport \"./GlvStoreUtils.sol\";\n\nlibrary GlvUtils {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    struct GetGlvValueCache {\n        bytes32 marketListKey;\n        uint256 marketCount;\n        uint256 glvValue;\n        Price.Props indexTokenPrice;\n        Price.Props longTokenPrice;\n        Price.Props shortTokenPrice;\n        Market.Props market;\n    }\n\n    // @dev get the USD value of the Glv\n    // @param dataStore DataStore\n    // @param oracle Oracle\n    // @param glv Glv\n    // @param maximize\n    // @return the USD value of the Glv\n    function getGlvValue(\n        DataStore dataStore,\n        Oracle oracle,\n        address glv,\n        bool maximize\n    ) public view returns (uint256) {\n        GetGlvValueCache memory cache;\n        cache.marketListKey = Keys.glvSupportedMarketListKey(glv);\n        cache.marketCount = dataStore.getAddressCount(cache.marketListKey);\n\n        address[] memory marketAddresses = dataStore.getAddressValuesAt(cache.marketListKey, 0, cache.marketCount);\n        for (uint256 i = 0; i < marketAddresses.length; i++) {\n            address marketAddress = marketAddresses[i];\n            Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n            if (i == 0) {\n                cache.longTokenPrice = oracle.getPrimaryPrice(market.longToken);\n                cache.shortTokenPrice = oracle.getPrimaryPrice(market.shortToken);\n            }\n            cache.glvValue += _getGlvMarketValue(\n                dataStore,\n                glv,\n                marketAddress,\n                oracle.getPrimaryPrice(market.indexToken),\n                cache.longTokenPrice,\n                cache.shortTokenPrice,\n                maximize\n            );\n        }\n\n        return cache.glvValue;\n    }\n\n    function getGlvValue(\n        DataStore dataStore,\n        address[] memory marketAddresses,\n        Price.Props[] memory indexTokenPrices,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        address glv,\n        bool maximize\n    ) public view returns (uint256) {\n        GetGlvValueCache memory cache;\n\n        for (uint256 i = 0; i < marketAddresses.length; i++) {\n            address marketAddress = marketAddresses[i];\n            cache.indexTokenPrice = indexTokenPrices[i];\n\n            cache.glvValue += _getGlvMarketValue(\n                dataStore,\n                glv,\n                marketAddress,\n                cache.indexTokenPrice,\n                longTokenPrice,\n                shortTokenPrice,\n                maximize\n            );\n        }\n\n        return cache.glvValue;\n    }\n\n    function _getGlvMarketValue(\n        DataStore dataStore,\n        address glv,\n        address marketAddress,\n        Price.Props memory indexTokenPrice,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        bool maximize\n    ) internal view returns (uint256) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n\n        uint256 marketTokenSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(marketAddress)));\n        uint256 balance = GlvToken(payable(glv)).tokenBalances(marketAddress);\n\n        if (balance == 0) {\n            return 0;\n        }\n\n        MarketPoolValueInfo.Props memory marketPoolValueInfo = MarketUtils.getPoolValueInfo(\n            dataStore,\n            market,\n            indexTokenPrice,\n            longTokenPrice,\n            shortTokenPrice,\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            maximize\n        );\n\n        if (marketPoolValueInfo.poolValue < 0) {\n            revert Errors.GlvNegativeMarketPoolValue(glv, marketAddress);\n        }\n\n        return\n            MarketUtils.marketTokenAmountToUsd(balance, marketPoolValueInfo.poolValue.toUint256(), marketTokenSupply);\n    }\n\n    function getGlvTokenPrice(\n        DataStore dataStore,\n        Oracle oracle,\n        address glv,\n        bool maximize\n    ) internal view returns (uint256, uint256, uint256) {\n        uint256 value = getGlvValue(dataStore, oracle, glv, maximize);\n        uint256 supply = ERC20(glv).totalSupply();\n\n        return _getGlvTokenPrice(value, supply);\n    }\n\n    function getGlvTokenPrice(\n        DataStore dataStore,\n        address[] memory marketAddresses,\n        Price.Props[] memory indexTokenPrices,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        address glv,\n        bool maximize\n    ) internal view returns (uint256, uint256, uint256) {\n        uint256 value = getGlvValue(\n            dataStore,\n            marketAddresses,\n            indexTokenPrices,\n            longTokenPrice,\n            shortTokenPrice,\n            glv,\n            maximize\n        );\n        uint256 supply = ERC20(glv).totalSupply();\n\n        return _getGlvTokenPrice(value, supply);\n    }\n\n    function _getGlvTokenPrice(uint256 value, uint256 supply) internal pure returns (uint256, uint256, uint256) {\n        // if the supply is zero then treat the market token price as 1 USD\n        if (supply == 0) {\n            return (Precision.FLOAT_PRECISION, value, supply);\n        }\n        if (value == 0) {\n            return (0, value, supply);\n        }\n        return (Precision.mulDiv(Precision.WEI_PRECISION, value, supply), value, supply);\n    }\n\n    function usdToGlvTokenAmount(\n        uint256 usdValue,\n        uint256 glvValue,\n        uint256 glvSupply\n    ) internal pure returns (uint256) {\n        // if the supply and glvValue is zero, use 1 USD as the token price\n        if (glvSupply == 0 && glvValue == 0) {\n            return Precision.floatToWei(usdValue);\n        }\n\n        // if the supply is zero and the glvValue is more than zero,\n        // then include the glvValue for the amount of tokens minted so that\n        // the market token price after mint would be 1 USD\n        if (glvSupply == 0 && glvValue > 0) {\n            return Precision.floatToWei(glvValue + usdValue);\n        }\n\n        // round market tokens down\n        return Precision.mulDiv(glvSupply, usdValue, glvValue);\n    }\n\n    function glvTokenAmountToUsd(\n        uint256 glvTokenAmount,\n        uint256 glvValue,\n        uint256 glvSupply\n    ) internal pure returns (uint256) {\n        if (glvSupply == 0) {\n            revert Errors.EmptyGlvTokenSupply();\n        }\n\n        return Precision.mulDiv(glvValue, glvTokenAmount, glvSupply);\n    }\n\n    function validateGlvMarket(DataStore dataStore, address glv, address market, bool shouldBeEnabled) public view {\n        if (!dataStore.containsAddress(Keys.glvSupportedMarketListKey(glv), market)) {\n            revert Errors.GlvUnsupportedMarket(glv, market);\n        }\n\n        if (shouldBeEnabled && dataStore.getBool(Keys.isGlvMarketDisabledKey(glv, market))) {\n            revert Errors.GlvDisabledMarket(glv, market);\n        }\n    }\n\n    function validateGlv(DataStore dataStore, address glv) public view {\n        if (!dataStore.containsAddress(Keys.GLV_LIST, glv)) {\n            revert Errors.EmptyGlv(glv);\n        }\n    }\n\n    function getGlvMarketCount(DataStore dataStore, address glv) external view returns (uint256) {\n        return dataStore.getAddressCount(Keys.glvSupportedMarketListKey(glv));\n    }\n\n    function validateGlvMarketTokenBalance(\n        DataStore dataStore,\n        address glv,\n        Market.Props memory market,\n        uint256 marketPoolValue,\n        uint256 marketTokenSupply\n    ) external view {\n        uint256 maxMarketTokenBalanceUsd = dataStore.getUint(\n            Keys.glvMaxMarketTokenBalanceUsdKey(glv, market.marketToken)\n        );\n        uint256 maxMarketTokenBalanceAmount = dataStore.getUint(\n            Keys.glvMaxMarketTokenBalanceAmountKey(glv, market.marketToken)\n        );\n\n        if (maxMarketTokenBalanceAmount == 0 && maxMarketTokenBalanceUsd == 0) {\n            return;\n        }\n\n        uint256 marketTokenBalanceAmount = GlvToken(payable(glv)).tokenBalances(market.marketToken);\n        if (maxMarketTokenBalanceAmount > 0 && marketTokenBalanceAmount > maxMarketTokenBalanceAmount) {\n            revert Errors.GlvMaxMarketTokenBalanceAmountExceeded(\n                glv,\n                market.marketToken,\n                maxMarketTokenBalanceAmount,\n                marketTokenBalanceAmount\n            );\n        }\n\n        if (maxMarketTokenBalanceUsd > 0) {\n            uint256 marketTokenBalanceUsd = MarketUtils.marketTokenAmountToUsd(\n                marketTokenBalanceAmount,\n                marketPoolValue,\n                marketTokenSupply\n            );\n            if (marketTokenBalanceUsd > maxMarketTokenBalanceUsd) {\n                revert Errors.GlvMaxMarketTokenBalanceUsdExceeded(\n                    glv,\n                    market.marketToken,\n                    maxMarketTokenBalanceUsd,\n                    marketTokenBalanceUsd\n                );\n            }\n        }\n    }\n\n    function addMarketToGlv(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address glvAddress,\n        address marketAddress\n    ) external {\n        validateGlv(dataStore, glvAddress);\n\n        Market.Props memory market = MarketUtils.getEnabledMarket(dataStore, marketAddress);\n        Glv.Props memory glv = GlvStoreUtils.get(dataStore, glvAddress);\n        if (market.longToken != glv.longToken) {\n            revert Errors.GlvInvalidLongToken(glvAddress, market.longToken, glv.longToken);\n        }\n        if (market.shortToken != glv.shortToken) {\n            revert Errors.GlvInvalidShortToken(glvAddress, market.shortToken, glv.shortToken);\n        }\n\n        bytes32 key = Keys.glvSupportedMarketListKey(glvAddress);\n        if (dataStore.containsAddress(key, marketAddress)) {\n            revert Errors.GlvMarketAlreadyExists(glvAddress, marketAddress);\n        }\n        dataStore.addAddress(key, marketAddress);\n\n        validateGlvMarketCount(dataStore, glvAddress);\n\n        GlvEventUtils.emitGlvMarketAdded(eventEmitter, glvAddress, market.marketToken);\n    }\n\n    function validateGlvMarketCount(DataStore dataStore, address glvAddress) internal view {\n        uint256 glvMaxMarketCount = dataStore.getUint(Keys.GLV_MAX_MARKET_COUNT);\n        if (glvMaxMarketCount > 0) {\n            bytes32 key = Keys.glvSupportedMarketListKey(glvAddress);\n            uint256 glvMarketCount = dataStore.getAddressCount(key);\n            if (glvMarketCount > glvMaxMarketCount) {\n                revert Errors.GlvMaxMarketCountExceeded(glvAddress, glvMaxMarketCount);\n            }\n        }\n    }\n\n    function removeMarketFromGlv(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address glvAddress,\n        address marketAddress\n    ) external {\n        validateGlv(dataStore, glvAddress);\n        validateGlvMarket(dataStore, glvAddress, marketAddress, false);\n\n        if (!dataStore.getBool(Keys.isGlvMarketDisabledKey(glvAddress, marketAddress))) {\n            revert Errors.GlvEnabledMarket(glvAddress, marketAddress);\n        }\n\n        uint256 balance = GlvToken(payable(glvAddress)).tokenBalances(marketAddress);\n        if (balance != 0) {\n            revert Errors.GlvNonZeroMarketBalance(glvAddress, marketAddress);\n        }\n\n        bytes32 key = Keys.glvSupportedMarketListKey(glvAddress);\n        dataStore.removeAddress(key, marketAddress);\n\n        GlvEventUtils.emitGlvMarketRemoved(eventEmitter, glvAddress, marketAddress);\n    }\n}\n"
    },
    "contracts/glv/GlvVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../bank/StrictBank.sol\";\n\ncontract GlvVault is StrictBank {\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\n}\n"
    },
    "contracts/glv/glvWithdrawal/GlvWithdrawal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title Withdrawal\n * @dev Struct for withdrawals\n */\nlibrary GlvWithdrawal {\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n     // @param account The account to withdraw for.\n     // @param receiver The address that will receive the withdrawn tokens.\n     // @param callbackContract The contract that will be called back.\n     // @param uiFeeReceiver The ui fee receiver.\n     // @param market The market on which the withdrawal will be executed.\n     // @param glv\n    struct Addresses {\n        address glv;\n        address market;\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n     // @param glvTokenAmount The amount of market tokens that will be withdrawn.\n     // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n     // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n     // @param executionFee The execution fee for the withdrawal.\n     // @param callbackGasLimit The gas limit for calling the callback contract.\n    struct Numbers {\n        uint256 glvTokenAmount;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function glv(Props memory props) internal pure returns (address) {\n        return props.addresses.glv;\n    }\n\n    function setGlv(Props memory props, address value) internal pure {\n        props.addresses.glv = value;\n    }\n\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.longTokenSwapPath;\n    }\n\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.longTokenSwapPath = value;\n    }\n\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.shortTokenSwapPath;\n    }\n\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.shortTokenSwapPath = value;\n    }\n\n    function glvTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.glvTokenAmount;\n    }\n\n    function setGlvTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.glvTokenAmount = value;\n    }\n\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minLongTokenAmount;\n    }\n\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minLongTokenAmount = value;\n    }\n\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minShortTokenAmount;\n    }\n\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minShortTokenAmount = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n}\n"
    },
    "contracts/glv/glvWithdrawal/GlvWithdrawalEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../event/EventEmitter.sol\";\nimport \"../../event/EventUtils.sol\";\nimport \"../../utils/Cast.sol\";\n\nimport \"./GlvWithdrawal.sol\";\n\nlibrary GlvWithdrawalEventUtils {\n    using GlvWithdrawal for GlvWithdrawal.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitGlvWithdrawalCreated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        GlvWithdrawal.Props memory glvWithdrawal\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(6);\n        eventData.addressItems.setItem(0, \"account\", glvWithdrawal.account());\n        eventData.addressItems.setItem(1, \"receiver\", glvWithdrawal.receiver());\n        eventData.addressItems.setItem(2, \"callbackContract\", glvWithdrawal.callbackContract());\n        eventData.addressItems.setItem(3, \"market\", glvWithdrawal.market());\n        eventData.addressItems.setItem(4, \"glv\", glvWithdrawal.glv());\n        eventData.addressItems.setItem(5, \"uiFeeReceiver\", glvWithdrawal.uiFeeReceiver());\n\n        eventData.addressItems.initArrayItems(2);\n        eventData.addressItems.setItem(0, \"longTokenSwapPath\", glvWithdrawal.longTokenSwapPath());\n        eventData.addressItems.setItem(1, \"shortTokenSwapPath\", glvWithdrawal.shortTokenSwapPath());\n\n        eventData.uintItems.initItems(6);\n        eventData.uintItems.setItem(0, \"glvTokenAmount\", glvWithdrawal.glvTokenAmount());\n        eventData.uintItems.setItem(1, \"minLongTokenAmount\", glvWithdrawal.minLongTokenAmount());\n        eventData.uintItems.setItem(2, \"minShortTokenAmount\", glvWithdrawal.minShortTokenAmount());\n        eventData.uintItems.setItem(3, \"updatedAtTime\", glvWithdrawal.updatedAtTime());\n        eventData.uintItems.setItem(4, \"executionFee\", glvWithdrawal.executionFee());\n        eventData.uintItems.setItem(5, \"callbackGasLimit\", glvWithdrawal.callbackGasLimit());\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"shouldUnwrapNativeToken\", glvWithdrawal.shouldUnwrapNativeToken());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog2(\"GlvWithdrawalCreated\", key, Cast.toBytes32(glvWithdrawal.account()), eventData);\n    }\n\n    function emitGlvWithdrawalExecuted(EventEmitter eventEmitter, bytes32 key, address account) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventEmitter.emitEventLog2(\"GlvWithdrawalExecuted\", key, Cast.toBytes32(account), eventData);\n    }\n\n    function emitGlvWithdrawalCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\"GlvWithdrawalCancelled\", key, Cast.toBytes32(account), eventData);\n    }\n}\n"
    },
    "contracts/glv/glvWithdrawal/GlvWithdrawalStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../data/Keys.sol\";\nimport \"../../data/DataStore.sol\";\n\nimport \"./GlvWithdrawal.sol\";\n\n/**\n * @title GlvWithdrawalStoreUtils\n * @dev Library for withdrawal storage functions\n */\nlibrary GlvWithdrawalStoreUtils {\n    using GlvWithdrawal for GlvWithdrawal.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\"RECEIVER\"));\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\"CALLBACK_CONTRACT\"));\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\"UI_FEE_RECEIVER\"));\n    bytes32 public constant MARKET = keccak256(abi.encode(\"MARKET\"));\n    bytes32 public constant GLV = keccak256(abi.encode(\"GLV\"));\n    bytes32 public constant LONG_TOKEN_SWAP_PATH = keccak256(abi.encode(\"LONG_TOKEN_SWAP_PATH\"));\n    bytes32 public constant SHORT_TOKEN_SWAP_PATH = keccak256(abi.encode(\"SHORT_TOKEN_SWAP_PATH\"));\n\n    bytes32 public constant GLV_TOKEN_AMOUNT = keccak256(abi.encode(\"GLV_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_LONG_TOKEN_AMOUNT = keccak256(abi.encode(\"MIN_LONG_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_SHORT_TOKEN_AMOUNT = keccak256(abi.encode(\"MIN_SHORT_TOKEN_AMOUNT\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\"EXECUTION_FEE\"));\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"CALLBACK_GAS_LIMIT\"));\n\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\"SHOULD_UNWRAP_NATIVE_TOKEN\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (GlvWithdrawal.Props memory) {\n        GlvWithdrawal.Props memory withdrawal;\n        if (!dataStore.containsBytes32(Keys.GLV_WITHDRAWAL_LIST, key)) {\n            return withdrawal;\n        }\n\n        withdrawal.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        withdrawal.setReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        ));\n\n        withdrawal.setCallbackContract(dataStore.getAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        ));\n\n        withdrawal.setUiFeeReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        ));\n\n        withdrawal.setMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET))\n        ));\n\n        withdrawal.setGlv(dataStore.getAddress(\n            keccak256(abi.encode(key, GLV))\n        ));\n\n        withdrawal.setLongTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        ));\n\n        withdrawal.setShortTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        ));\n\n        withdrawal.setGlvTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, GLV_TOKEN_AMOUNT))\n        ));\n\n        withdrawal.setMinLongTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_LONG_TOKEN_AMOUNT))\n        ));\n\n        withdrawal.setMinShortTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_SHORT_TOKEN_AMOUNT))\n        ));\n\n        withdrawal.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        withdrawal.setExecutionFee(dataStore.getUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        ));\n\n        withdrawal.setCallbackGasLimit(dataStore.getUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        ));\n\n        withdrawal.setShouldUnwrapNativeToken(dataStore.getBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        ));\n\n        return withdrawal;\n    }\n\n    function set(DataStore dataStore, bytes32 key, GlvWithdrawal.Props memory withdrawal) external {\n        dataStore.addBytes32(\n            Keys.GLV_WITHDRAWAL_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountGlvWithdrawalListKey(withdrawal.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            withdrawal.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, RECEIVER)),\n            withdrawal.receiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\n            withdrawal.callbackContract()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\n            withdrawal.uiFeeReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET)),\n            withdrawal.market()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, GLV)),\n            withdrawal.glv()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH)),\n            withdrawal.longTokenSwapPath()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH)),\n            withdrawal.shortTokenSwapPath()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, GLV_TOKEN_AMOUNT)),\n            withdrawal.glvTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_LONG_TOKEN_AMOUNT)),\n            withdrawal.minLongTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_SHORT_TOKEN_AMOUNT)),\n            withdrawal.minShortTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            withdrawal.updatedAtTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, EXECUTION_FEE)),\n            withdrawal.executionFee()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\n            withdrawal.callbackGasLimit()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\n            withdrawal.shouldUnwrapNativeToken()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.GLV_WITHDRAWAL_LIST, key)) {\n            revert Errors.GlvWithdrawalNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.GLV_WITHDRAWAL_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountGlvWithdrawalListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, GLV))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, GLV_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_LONG_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_SHORT_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        );\n    }\n\n    function getGlvWithdrawalCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.GLV_WITHDRAWAL_LIST);\n    }\n\n    function getGlvWithdrawalKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.GLV_WITHDRAWAL_LIST, start, end);\n    }\n\n    function getAccountGlvWithdrawalCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountGlvWithdrawalListKey(account));\n    }\n\n    function getAccountGlvWithdrawalKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountGlvWithdrawalListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/glv/glvWithdrawal/GlvWithdrawalUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../withdrawal/ExecuteWithdrawalUtils.sol\";\n\nimport \"../../nonce/NonceUtils.sol\";\n\nimport \"../GlvVault.sol\";\nimport \"../GlvUtils.sol\";\nimport \"./GlvWithdrawalStoreUtils.sol\";\nimport \"./GlvWithdrawalEventUtils.sol\";\n\nlibrary GlvWithdrawalUtils {\n    using GlvWithdrawal for GlvWithdrawal.Props;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.AddressItems;\n\n    struct CreateGlvWithdrawalParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address glv;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    struct ExecuteGlvWithdrawalParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        GlvVault glvVault;\n        Oracle oracle;\n        bytes32 key;\n        uint256 startingGas;\n        address keeper;\n    }\n\n    struct ExecuteGlvWithdrawalCache {\n        uint256 glvValue;\n        uint256 marketCount;\n        uint256 oraclePriceCount;\n        uint256 marketTokenAmount;\n    }\n\n    struct CancelGlvWithdrawalParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        GlvVault glvVault;\n        bytes32 key;\n        address keeper;\n        uint256 startingGas;\n        string reason;\n        bytes reasonBytes;\n    }\n\n    function createGlvWithdrawal(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        GlvVault glvVault,\n        address account,\n        CreateGlvWithdrawalParams memory params\n    ) external returns (bytes32) {\n        AccountUtils.validateAccount(account);\n        GlvUtils.validateGlv(dataStore, params.glv);\n        GlvUtils.validateGlvMarket(dataStore, params.glv, params.market, false);\n\n        MarketUtils.validateEnabledMarket(dataStore, params.market);\n        MarketUtils.validateSwapPath(dataStore, params.longTokenSwapPath);\n        MarketUtils.validateSwapPath(dataStore, params.shortTokenSwapPath);\n\n        address wnt = TokenUtils.wnt(dataStore);\n        uint256 wntAmount = glvVault.recordTransferIn(wnt);\n        if (wntAmount < params.executionFee) {\n            revert Errors.InsufficientWntAmountForExecutionFee(wntAmount, params.executionFee);\n        }\n        params.executionFee = wntAmount;\n\n        AccountUtils.validateReceiver(params.receiver);\n\n        uint256 glvTokenAmount = glvVault.recordTransferIn(params.glv);\n\n        if (glvTokenAmount == 0) {\n            revert Errors.EmptyGlvWithdrawalAmount();\n        }\n\n        GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawal.Props(\n            GlvWithdrawal.Addresses({\n                account: account,\n                glv: params.glv,\n                receiver: params.receiver,\n                callbackContract: params.callbackContract,\n                uiFeeReceiver: params.uiFeeReceiver,\n                market: params.market,\n                longTokenSwapPath: params.longTokenSwapPath,\n                shortTokenSwapPath: params.shortTokenSwapPath\n            }),\n            GlvWithdrawal.Numbers({\n                glvTokenAmount: glvTokenAmount,\n                minLongTokenAmount: params.minLongTokenAmount,\n                minShortTokenAmount: params.minShortTokenAmount,\n                updatedAtTime: Chain.currentTimestamp(),\n                executionFee: params.executionFee,\n                callbackGasLimit: params.callbackGasLimit\n            }),\n            GlvWithdrawal.Flags({shouldUnwrapNativeToken: params.shouldUnwrapNativeToken})\n        );\n\n        CallbackUtils.validateCallbackGasLimit(dataStore, params.callbackGasLimit);\n\n        uint256 marketCount = GlvUtils.getGlvMarketCount(dataStore, glvWithdrawal.glv());\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteGlvWithdrawalGasLimit(\n            dataStore,\n            glvWithdrawal,\n            marketCount\n        );\n        uint256 oraclePriceCount = GasUtils.estimateGlvWithdrawalOraclePriceCount(\n            marketCount,\n            params.longTokenSwapPath.length + params.shortTokenSwapPath.length\n        );\n        GasUtils.validateExecutionFee(dataStore, estimatedGasLimit, params.executionFee, oraclePriceCount);\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n\n        GlvWithdrawalStoreUtils.set(dataStore, key, glvWithdrawal);\n\n        GlvWithdrawalEventUtils.emitGlvWithdrawalCreated(eventEmitter, key, glvWithdrawal);\n\n        return key;\n    }\n\n    function executeGlvWithdrawal(\n        ExecuteGlvWithdrawalParams memory params,\n        GlvWithdrawal.Props memory glvWithdrawal\n    ) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        GlvWithdrawalStoreUtils.remove(params.dataStore, params.key, glvWithdrawal.account());\n\n        ExecuteGlvWithdrawalCache memory cache;\n        cache.marketTokenAmount = _getMarketTokenAmount(params.dataStore, params.oracle, glvWithdrawal);\n\n        // burn GLV tokens before executing withdrawal\n        // for both GLV amount and token amounts will be correct inside the receive() function\n        // if receiver is a contract\n        GlvToken(payable(glvWithdrawal.glv())).burn(address(params.glvVault), glvWithdrawal.glvTokenAmount());\n        params.glvVault.syncTokenBalance(glvWithdrawal.glv());\n\n        ExecuteWithdrawalUtils.ExecuteWithdrawalResult memory withdrawalResult = _processMarketWithdrawal(\n            params,\n            glvWithdrawal,\n            cache.marketTokenAmount\n        );\n\n        GlvWithdrawalEventUtils.emitGlvWithdrawalExecuted(params.eventEmitter, params.key, glvWithdrawal.account());\n\n        cache.glvValue = GlvUtils.getGlvValue(\n            params.dataStore,\n            params.oracle,\n            glvWithdrawal.glv(),\n            true\n        );\n        GlvEventUtils.emitGlvValueUpdated(\n            params.eventEmitter,\n            glvWithdrawal.glv(),\n            cache.glvValue,\n            GlvToken(payable(glvWithdrawal.glv())).totalSupply()\n        );\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"outputToken\", withdrawalResult.outputToken);\n        eventData.addressItems.setItem(1, \"secondaryOutputToken\", withdrawalResult.secondaryOutputToken);\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"outputAmount\", withdrawalResult.outputAmount);\n        eventData.uintItems.setItem(1, \"secondaryOutputAmount\", withdrawalResult.secondaryOutputAmount);\n        CallbackUtils.afterGlvWithdrawalExecution(params.key, glvWithdrawal, eventData);\n\n        cache.marketCount = GlvUtils.getGlvMarketCount(params.dataStore, glvWithdrawal.glv());\n        cache.oraclePriceCount = GasUtils.estimateGlvWithdrawalOraclePriceCount(\n            cache.marketCount,\n            glvWithdrawal.longTokenSwapPath().length + glvWithdrawal.shortTokenSwapPath().length\n        );\n\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.glvVault,\n            params.key,\n            glvWithdrawal.callbackContract(),\n            glvWithdrawal.executionFee(),\n            params.startingGas,\n            cache.oraclePriceCount,\n            params.keeper,\n            glvWithdrawal.receiver()\n        );\n    }\n\n    function _processMarketWithdrawal(\n        ExecuteGlvWithdrawalParams memory params,\n        GlvWithdrawal.Props memory glvWithdrawal,\n        uint256 marketTokenAmount\n    ) private returns (ExecuteWithdrawalUtils.ExecuteWithdrawalResult memory) {\n\n        Withdrawal.Props memory withdrawal = Withdrawal.Props(\n            Withdrawal.Addresses({\n                account: glvWithdrawal.glv(),\n                receiver: glvWithdrawal.receiver(),\n                callbackContract: address(0),\n                uiFeeReceiver: glvWithdrawal.uiFeeReceiver(),\n                market: glvWithdrawal.market(),\n                longTokenSwapPath: glvWithdrawal.longTokenSwapPath(),\n                shortTokenSwapPath: glvWithdrawal.shortTokenSwapPath()\n            }),\n            Withdrawal.Numbers({\n                minLongTokenAmount: glvWithdrawal.minLongTokenAmount(),\n                minShortTokenAmount: glvWithdrawal.minShortTokenAmount(),\n                marketTokenAmount: marketTokenAmount,\n                updatedAtTime: glvWithdrawal.updatedAtTime(),\n                executionFee: 0,\n                callbackGasLimit: 0\n            }),\n            Withdrawal.Flags({shouldUnwrapNativeToken: glvWithdrawal.shouldUnwrapNativeToken()})\n        );\n\n        bytes32 withdrawalKey = NonceUtils.getNextKey(params.dataStore);\n        params.dataStore.addBytes32(Keys.WITHDRAWAL_LIST, withdrawalKey);\n        WithdrawalEventUtils.emitWithdrawalCreated(\n            params.eventEmitter,\n            withdrawalKey,\n            withdrawal,\n            Withdrawal.WithdrawalType.Glv\n        );\n\n        Bank(payable(glvWithdrawal.glv())).transferOut(\n            glvWithdrawal.market(),\n            address(params.glvVault),\n            marketTokenAmount\n        );\n        params.glvVault.syncTokenBalance(glvWithdrawal.market());\n\n        ExecuteWithdrawalUtils.ExecuteWithdrawalParams memory executeWithdrawalParams = ExecuteWithdrawalUtils\n            .ExecuteWithdrawalParams({\n                dataStore: params.dataStore,\n                eventEmitter: params.eventEmitter,\n                withdrawalVault: WithdrawalVault(payable(params.glvVault)),\n                oracle: params.oracle,\n                key: withdrawalKey,\n                keeper: params.keeper,\n                startingGas: params.startingGas,\n                swapPricingType: ISwapPricingUtils.SwapPricingType.Withdrawal\n            });\n\n        return ExecuteWithdrawalUtils.executeWithdrawal(executeWithdrawalParams, withdrawal);\n    }\n\n    function _getMarketTokenAmount(\n        DataStore dataStore,\n        Oracle oracle,\n        GlvWithdrawal.Props memory glvWithdrawal\n    ) internal view returns (uint256) {\n        uint256 glvValue = GlvUtils.getGlvValue(\n            dataStore,\n            oracle,\n            glvWithdrawal.glv(),\n            false // maximize\n        );\n        uint256 glvSupply = GlvToken(payable(glvWithdrawal.glv())).totalSupply();\n        uint256 glvTokenUsd = GlvUtils.glvTokenAmountToUsd(glvWithdrawal.glvTokenAmount(), glvValue, glvSupply);\n\n        Market.Props memory market = MarketUtils.getEnabledMarket(dataStore, glvWithdrawal.market());\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            dataStore,\n            market,\n            oracle.getPrimaryPrice(market.indexToken),\n            oracle.getPrimaryPrice(market.longToken),\n            oracle.getPrimaryPrice(market.shortToken),\n            Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n            true // maximize\n        );\n        uint256 marketTokenAmount = MarketUtils.usdToMarketTokenAmount(\n            glvTokenUsd,\n            poolValueInfo.poolValue.toUint256(),\n            ERC20(market.marketToken).totalSupply()\n        );\n\n        return marketTokenAmount;\n    }\n\n    function cancelGlvWithdrawal(CancelGlvWithdrawalParams memory params) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(params.dataStore, params.key);\n        GlvWithdrawalStoreUtils.remove(params.dataStore, params.key, glvWithdrawal.account());\n\n        params.glvVault.transferOut(\n            glvWithdrawal.glv(),\n            glvWithdrawal.account(),\n            glvWithdrawal.glvTokenAmount(),\n            false // shouldUnwrapNativeToken\n        );\n\n        GlvWithdrawalEventUtils.emitGlvWithdrawalCancelled(\n            params.eventEmitter,\n            params.key,\n            glvWithdrawal.account(),\n            params.reason,\n            params.reasonBytes\n        );\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterGlvWithdrawalCancellation(params.key, glvWithdrawal, eventData);\n\n        uint256 marketCount = GlvUtils.getGlvMarketCount(params.dataStore, glvWithdrawal.glv());\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.glvVault,\n            params.key,\n            glvWithdrawal.callbackContract(),\n            glvWithdrawal.executionFee(),\n            params.startingGas,\n            GasUtils.estimateGlvWithdrawalOraclePriceCount(\n                marketCount,\n                glvWithdrawal.longTokenSwapPath().length + glvWithdrawal.shortTokenSwapPath().length\n            ),\n            params.keeper,\n            glvWithdrawal.receiver()\n        );\n    }\n}\n"
    },
    "contracts/gov/GovToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n\nimport \"../chain/Chain.sol\";\nimport \"../role/RoleModule.sol\";\n\ncontract GovToken is ERC20, ERC20Permit, ERC20Votes, RoleModule {\n    uint8 private _decimals;\n\n    constructor(\n        RoleStore roleStore_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    )\n        ERC20(name_, symbol_)\n        ERC20Permit(name_)\n        RoleModule(roleStore_)\n    {\n        _decimals = decimals_;\n    }\n\n    function clock() public view override returns (uint48) {\n        return SafeCast.toUint48(Chain.currentTimestamp());\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view override returns (string memory) {\n        // Check that the clock was not modified\n        require(clock() == Chain.currentTimestamp(), \"ERC20Votes: broken clock mode\");\n        return \"mode=timestamp\";\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    // @dev mint tokens to an account\n    // @param account the account to mint to\n    // @param amount the amount of tokens to mint\n    function mint(address account, uint256 amount) external onlyGovTokenController {\n        _mint(account, amount);\n    }\n\n    // @dev burn tokens from an account\n    // @param account the account to burn tokens for\n    // @param amount the amount of tokens to burn\n    function burn(address account, uint256 amount) external onlyGovTokenController {\n        _burn(account, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal override {\n        // only allow GOV_TOKEN_CONTROLLERs to make transfers\n        // the user would need to approve the GOV_TOKEN_CONTROLLER contract\n        // the GOV_TOKEN_CONTROLLER contract can then call transferFrom to transfer tokens\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \"GOV_TOKEN_CONTROLLER\");\n\n        super._transfer(from, to, amount);\n    }\n\n    // The functions below are overrides required by Solidity.\n\n   function _afterTokenTransfer(address from, address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n       super._afterTokenTransfer(from, to, amount);\n   }\n\n   function _mint(address to, uint256 amount) internal override(ERC20, ERC20Votes) {\n       super._mint(to, amount);\n   }\n\n   function _burn(address account, uint256 amount) internal override(ERC20, ERC20Votes) {\n       super._burn(account, amount);\n   }\n}\n"
    },
    "contracts/gov/ProtocolGovernor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/governance/Governor.sol\";\nimport \"@openzeppelin/contracts/governance/compatibility/GovernorCompatibilityBravo.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\";\nimport \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\";\n\nimport \"../chain/Chain.sol\";\n\ncontract ProtocolGovernor is\n    Governor,\n    GovernorSettings,\n    GovernorCompatibilityBravo,\n    GovernorVotes,\n    GovernorVotesQuorumFraction,\n    GovernorTimelockControl\n{\n\n    string private _version;\n\n    constructor(\n        IVotes token_,\n        TimelockController timelock_,\n        string memory name_,\n        string memory version_,\n        uint256 votingDelay_,\n        uint256 votingPeriod_,\n        uint256 proposalThreshold_,\n        uint256 quorumNumeratorValue_\n    )\n        Governor(name_)\n        GovernorVotes(token_)\n        GovernorSettings(votingDelay_, votingPeriod_, proposalThreshold_)\n        GovernorVotesQuorumFraction(quorumNumeratorValue_)\n        GovernorTimelockControl(timelock_)\n    {\n        _version = version_;\n    }\n\n    function clock() public view override(GovernorVotes, IGovernor) returns (uint48) {\n        return SafeCast.toUint48(Chain.currentTimestamp());\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CLOCK_MODE() public view override(GovernorVotes, IGovernor) returns (string memory) {\n        // Check that the clock was not modified\n        require(clock() == Chain.currentTimestamp(), \"ERC20Votes: broken clock mode\");\n        return \"mode=timestamp\";\n    }\n\n    function version() public view override(Governor, IGovernor) returns (string memory) {\n        return _version;\n    }\n\n    // The functions below are overrides required by Solidity.\n\n    function proposalThreshold() public view override(Governor, GovernorSettings) returns (uint256) {\n        return super.proposalThreshold();\n    }\n\n    function state(\n        uint256 proposalId\n    ) public view override(Governor, IGovernor, GovernorTimelockControl) returns (ProposalState) {\n        return super.state(proposalId);\n    }\n\n    function propose(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        string memory description\n    ) public override(Governor, GovernorCompatibilityBravo, IGovernor) returns (uint256) {\n        return super.propose(targets, values, calldatas, description);\n    }\n\n    function cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) public override(Governor, GovernorCompatibilityBravo, IGovernor) returns (uint256) {\n        return super.cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _execute(\n        uint256 proposalId,\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) {\n        super._execute(proposalId, targets, values, calldatas, descriptionHash);\n    }\n\n    function _cancel(\n        address[] memory targets,\n        uint256[] memory values,\n        bytes[] memory calldatas,\n        bytes32 descriptionHash\n    ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\n        return super._cancel(targets, values, calldatas, descriptionHash);\n    }\n\n    function _executor() internal view override(Governor, GovernorTimelockControl) returns (address) {\n        return super._executor();\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(Governor, IERC165, GovernorTimelockControl) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/liquidation/LiquidationUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../position/PositionStoreUtils.sol\";\nimport \"../order/OrderStoreUtils.sol\";\nimport \"../order/OrderEventUtils.sol\";\nimport \"../nonce/NonceUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\n\n// @title LiquidationUtils\n// @dev Library to help with liquidations\nlibrary LiquidationUtils {\n    using Position for Position.Props;\n    using Order for Order.Props;\n\n    // @dev creates a liquidation order for a position\n    // @param dataStore DataStore\n    // @param account the position's account\n    // @param market the position's market\n    // @param collateralToken the position's collateralToken\n    // @param isLong whether the position is long or short\n    function createLiquidationOrder(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        address market,\n        address collateralToken,\n        bool isLong\n    ) external returns (bytes32) {\n        bytes32 positionKey = Position.getPositionKey(account, market, collateralToken, isLong);\n        Position.Props memory position = PositionStoreUtils.get(dataStore, positionKey);\n\n        Order.Addresses memory addresses = Order.Addresses(\n            account, // account\n            account, // receiver\n            account, // cancellationReceiver\n            CallbackUtils.getSavedCallbackContract(dataStore, account, market), // callbackContract\n            address(0), // uiFeeReceiver\n            market, // market\n            position.collateralToken(), // initialCollateralToken\n            new address[](0) // swapPath\n        );\n\n        // no slippage is set for this order, in case of a liquidation the amount\n        // of collateral being swapped should not be too large\n        // in case of large price impact, the user could be refunded\n        // through a protocol fund if required, this amount could later be claimed\n        // from the price impact pool, this claiming process should be added if\n        // required\n        //\n        // setting a maximum price impact that will work for majority of cases\n        // may also be challenging since the price impact would vary based on the\n        // amount of collateral being swapped\n        //\n        // note that the decreasePositionSwapType should be SwapPnlTokenToCollateralToken\n        // because fees are calculated with reference to the collateral token\n        // fees are deducted from the output amount if the output token is the same as the\n        // collateral token\n        // swapping the pnl token to the collateral token helps to ensure fees can be paid\n        // using the realized profit\n        Order.Numbers memory numbers = Order.Numbers(\n            Order.OrderType.Liquidation, // orderType\n            Order.DecreasePositionSwapType.SwapPnlTokenToCollateralToken, // decreasePositionSwapType\n            position.sizeInUsd(), // sizeDeltaUsd\n            0, // initialCollateralDeltaAmount\n            0, // triggerPrice\n            position.isLong() ? 0 : type(uint256).max, // acceptablePrice\n            0, // executionFee\n            dataStore.getUint(Keys.MAX_CALLBACK_GAS_LIMIT), // callbackGasLimit\n            0, // minOutputAmount\n            Chain.currentTimestamp(), // updatedAtTime\n            0 // validFromTime\n        );\n\n        Order.Flags memory flags = Order.Flags(\n            position.isLong(), // isLong\n            true, // shouldUnwrapNativeToken\n            false, // isFrozen\n            false // autoCancel\n        );\n\n        Order.Props memory order = Order.Props(\n            addresses,\n            numbers,\n            flags\n        );\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n        OrderStoreUtils.set(dataStore, key, order);\n\n        OrderEventUtils.emitOrderCreated(eventEmitter, key, order);\n\n        return key;\n    }\n}\n"
    },
    "contracts/market/Market.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title Market\n// @dev Struct for markets\n//\n// Markets support both spot and perp trading, they are created by specifying a\n// long collateral token, short collateral token and index token.\n//\n// Examples:\n//\n// - ETH/USD market with long collateral as ETH, short collateral as a stablecoin, index token as ETH\n// - BTC/USD market with long collateral as WBTC, short collateral as a stablecoin, index token as BTC\n// - SOL/USD market with long collateral as ETH, short collateral as a stablecoin, index token as SOL\n//\n// Liquidity providers can deposit either the long or short collateral token or\n// both to mint liquidity tokens.\n//\n// The long collateral token is used to back long positions, while the short\n// collateral token is used to back short positions.\n//\n// Liquidity providers take on the profits and losses of traders for the market\n// that they provide liquidity for.\n//\n// Having separate markets allows for risk isolation, liquidity providers are\n// only exposed to the markets that they deposit into, this potentially allow\n// for permissionless listings.\n//\n// Traders can use either the long or short token as collateral for the market.\nlibrary Market {\n    // @param marketToken address of the market token for the market\n    // @param indexToken address of the index token for the market\n    // @param longToken address of the long token for the market\n    // @param shortToken address of the short token for the market\n    // @param data for any additional data\n    struct Props {\n        address marketToken;\n        address indexToken;\n        address longToken;\n        address shortToken;\n    }\n}\n"
    },
    "contracts/market/MarketEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nimport \"./MarketPoolValueInfo.sol\";\n\nlibrary MarketEventUtils {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // this event is emitted before a deposit or withdrawal\n    // it provides information of the pool state so that the amount\n    // of market tokens minted or amount withdrawn from the pool can be checked\n    function emitMarketPoolValueInfo(\n        EventEmitter eventEmitter,\n        bytes32 tradeKey,\n        address market,\n        MarketPoolValueInfo.Props memory props,\n        uint256 marketTokensSupply\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"tradeKey\", tradeKey);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.intItems.initItems(4);\n        eventData.intItems.setItem(0, \"poolValue\", props.poolValue);\n        eventData.intItems.setItem(1, \"longPnl\", props.longPnl);\n        eventData.intItems.setItem(2, \"shortPnl\", props.shortPnl);\n        eventData.intItems.setItem(3, \"netPnl\", props.netPnl);\n\n        eventData.uintItems.initItems(8);\n        eventData.uintItems.setItem(0, \"longTokenAmount\", props.longTokenAmount);\n        eventData.uintItems.setItem(1, \"shortTokenAmount\", props.shortTokenAmount);\n        eventData.uintItems.setItem(2, \"longTokenUsd\", props.longTokenUsd);\n        eventData.uintItems.setItem(3, \"shortTokenUsd\", props.shortTokenUsd);\n        eventData.uintItems.setItem(4, \"totalBorrowingFees\", props.totalBorrowingFees);\n        eventData.uintItems.setItem(5, \"borrowingFeePoolFactor\", props.borrowingFeePoolFactor);\n        eventData.uintItems.setItem(6, \"impactPoolAmount\", props.impactPoolAmount);\n        eventData.uintItems.setItem(7, \"marketTokensSupply\", marketTokensSupply);\n\n        eventEmitter.emitEventLog1(\n            \"MarketPoolValueInfo\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    // this event is emitted after a deposit or withdrawal\n    // it provides information of the updated pool state\n    // note that the pool state can change even without a deposit / withdrawal\n    // e.g. borrowing fees can increase the pool's value with time, trader pnl\n    // will change as index prices change\n    function emitMarketPoolValueUpdated(\n        EventEmitter eventEmitter,\n        bytes32 actionType,\n        bytes32 tradeKey,\n        address market,\n        MarketPoolValueInfo.Props memory props,\n        uint256 marketTokensSupply\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"actionType\", actionType);\n        eventData.bytes32Items.setItem(1, \"tradeKey\", tradeKey);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.intItems.initItems(4);\n        eventData.intItems.setItem(0, \"poolValue\", props.poolValue);\n        eventData.intItems.setItem(1, \"longPnl\", props.longPnl);\n        eventData.intItems.setItem(2, \"shortPnl\", props.shortPnl);\n        eventData.intItems.setItem(3, \"netPnl\", props.netPnl);\n\n        eventData.uintItems.initItems(8);\n        eventData.uintItems.setItem(0, \"longTokenAmount\", props.longTokenAmount);\n        eventData.uintItems.setItem(1, \"shortTokenAmount\", props.shortTokenAmount);\n        eventData.uintItems.setItem(2, \"longTokenUsd\", props.longTokenUsd);\n        eventData.uintItems.setItem(3, \"shortTokenUsd\", props.shortTokenUsd);\n        eventData.uintItems.setItem(4, \"totalBorrowingFees\", props.totalBorrowingFees);\n        eventData.uintItems.setItem(5, \"borrowingFeePoolFactor\", props.borrowingFeePoolFactor);\n        eventData.uintItems.setItem(6, \"impactPoolAmount\", props.impactPoolAmount);\n        eventData.uintItems.setItem(7, \"marketTokensSupply\", marketTokensSupply);\n\n        eventEmitter.emitEventLog1(\n            \"MarketPoolValueUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitPoolAmountUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"PoolAmountUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitSwapImpactPoolAmountUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"SwapImpactPoolAmountUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitPositionImpactPoolDistributed(\n        EventEmitter eventEmitter,\n        address market,\n        uint256 distributionAmount,\n        uint256 nextPositionImpactPoolAmount\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"distributionAmount\", distributionAmount);\n        eventData.uintItems.setItem(1, \"nextPositionImpactPoolAmount\", nextPositionImpactPoolAmount);\n\n        eventEmitter.emitEventLog1(\n            \"PositionImpactPoolDistributed\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitPositionImpactPoolAmountUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"PositionImpactPoolAmountUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitOpenInterestUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"collateralToken\", collateralToken);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"OpenInterestUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitVirtualSwapInventoryUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        bool isLongToken,\n        bytes32 virtualMarketId,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLongToken\", isLongToken);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"virtualMarketId\", virtualMarketId);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog2(\n            \"VirtualSwapInventoryUpdated\",\n            Cast.toBytes32(market),\n            virtualMarketId,\n            eventData\n        );\n    }\n\n    function emitVirtualPositionInventoryUpdated(\n        EventEmitter eventEmitter,\n        address token,\n        bytes32 virtualTokenId,\n        int256 delta,\n        int256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"token\", token);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"virtualTokenId\", virtualTokenId);\n\n        eventData.intItems.initItems(2);\n        eventData.intItems.setItem(0, \"delta\", delta);\n        eventData.intItems.setItem(1, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog2(\n            \"VirtualPositionInventoryUpdated\",\n            Cast.toBytes32(token),\n            virtualTokenId,\n            eventData\n        );\n    }\n\n    function emitOpenInterestInTokensUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"collateralToken\", collateralToken);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"OpenInterestInTokensUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitCollateralSumUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        int256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"collateralToken\", collateralToken);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"delta\", delta);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"CollateralSumUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitBorrowingFactorUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        bool isLong,\n        uint256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"market\", market);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"CumulativeBorrowingFactorUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitFundingFeeAmountPerSizeUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 delta,\n        uint256 value\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"collateralToken\", collateralToken);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"value\", value);\n\n        eventEmitter.emitEventLog1(\n            \"FundingFeeAmountPerSizeUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitClaimableFundingAmountPerSizeUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 delta,\n        uint256 value\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"collateralToken\", collateralToken);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", isLong);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"value\", value);\n\n        eventEmitter.emitEventLog1(\n            \"ClaimableFundingAmountPerSizeUpdated\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitClaimableFundingUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address account,\n        uint256 delta,\n        uint256 nextValue,\n        uint256 nextPoolValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"account\", account);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"nextValue\", nextValue);\n        eventData.uintItems.setItem(2, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog1(\n            \"ClaimableFundingUpdated\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitFundingFeesClaimed(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address account,\n        address receiver,\n        uint256 amount,\n        uint256 nextPoolValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(4);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"account\", account);\n        eventData.addressItems.setItem(3, \"receiver\", receiver);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"amount\", amount);\n        eventData.uintItems.setItem(1, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog1(\n            \"FundingFeesClaimed\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitClaimableFundingUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 timeKey,\n        address account,\n        uint256 delta,\n        uint256 nextValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"account\", account);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"timeKey\", timeKey);\n        eventData.uintItems.setItem(1, \"delta\", delta);\n        eventData.uintItems.setItem(2, \"nextValue\", nextValue);\n\n        eventEmitter.emitEventLog1(\n            \"ClaimableFundingUpdated\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitClaimableCollateralUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 timeKey,\n        address account,\n        uint256 delta,\n        uint256 nextValue,\n        uint256 nextPoolValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"account\", account);\n\n        eventData.uintItems.initItems(4);\n        eventData.uintItems.setItem(0, \"timeKey\", timeKey);\n        eventData.uintItems.setItem(1, \"delta\", delta);\n        eventData.uintItems.setItem(2, \"nextValue\", nextValue);\n        eventData.uintItems.setItem(3, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog1(\n            \"ClaimableCollateralUpdated\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitCollateralClaimed(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 timeKey,\n        address account,\n        address receiver,\n        uint256 amount,\n        uint256 nextPoolValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(4);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"account\", account);\n        eventData.addressItems.setItem(3, \"receiver\", receiver);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"timeKey\", timeKey);\n        eventData.uintItems.setItem(1, \"amount\", amount);\n        eventData.uintItems.setItem(2, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog1(\n            \"CollateralClaimed\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitUiFeeFactorUpdated(\n        EventEmitter eventEmitter,\n        address account,\n        uint256 uiFeeFactor\n    ) external {\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"uiFeeFactor\", uiFeeFactor);\n\n        eventEmitter.emitEventLog1(\n            \"UiFeeFactorUpdated\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/market/MarketFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./MarketToken.sol\";\nimport \"./Market.sol\";\nimport \"./MarketStoreUtils.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/Cast.sol\";\n\n// @title MarketFactory\n// @dev Contract to create markets\ncontract MarketFactory is RoleModule {\n    using Market for Market.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n    }\n\n    // @dev creates a market\n    // @param indexToken address of the index token for the market\n    // @param longToken address of the long token for the market\n    // @param shortToken address of the short token for the market\n    // @param marketType the type of the market\n    function createMarket(\n        address indexToken,\n        address longToken,\n        address shortToken,\n        bytes32 marketType\n    ) external onlyMarketKeeper returns (Market.Props memory) {\n        bytes32 salt = keccak256(abi.encode(\n            \"GMX_MARKET\",\n            indexToken,\n            longToken,\n            shortToken,\n            marketType\n        ));\n\n        address existingMarketAddress = dataStore.getAddress(MarketStoreUtils.getMarketSaltHash(salt));\n        if (existingMarketAddress != address(0)) {\n            revert Errors.MarketAlreadyExists(salt, existingMarketAddress);\n        }\n\n        MarketToken marketToken = new MarketToken{salt: salt}(roleStore, dataStore);\n\n        // the marketType is not stored with the market, it is mainly used to ensure\n        // markets with the same indexToken, longToken and shortToken can be created if needed\n        Market.Props memory market = Market.Props(\n            address(marketToken),\n            indexToken,\n            longToken,\n            shortToken\n        );\n\n        MarketStoreUtils.set(dataStore, address(marketToken), salt, market);\n\n        emitMarketCreated(address(marketToken), salt, indexToken, longToken, shortToken, marketType);\n\n        return market;\n    }\n\n    function emitMarketCreated(\n        address marketToken,\n        bytes32 salt,\n        address indexToken,\n        address longToken,\n        address shortToken,\n        bytes32 marketType\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(4);\n        eventData.addressItems.setItem(0, \"marketToken\", marketToken);\n        eventData.addressItems.setItem(1, \"indexToken\", indexToken);\n        eventData.addressItems.setItem(2, \"longToken\", longToken);\n        eventData.addressItems.setItem(3, \"shortToken\", shortToken);\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"salt\", salt);\n        eventData.bytes32Items.setItem(1, \"marketType\", marketType);\n\n        eventEmitter.emitEventLog1(\n            \"MarketCreated\",\n            Cast.toBytes32(marketToken),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/market/MarketPoolValueInfo.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title MarketPoolInfo\nlibrary MarketPoolValueInfo {\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\n    // @param value the pool value\n    // @param longTokenAmount the amount of long token in the pool\n    // @param shortTokenAmount the amount of short token in the pool\n    // @param longTokenUsd the USD value of the long tokens in the pool\n    // @param shortTokenUsd the USD value of the short tokens in the pool\n    // @param totalBorrowingFees the total pending borrowing fees for the market\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\n    // @param impactPoolAmount the amount of tokens in the impact pool\n    // @param longPnl the pending pnl of long positions\n    // @param shortPnl the pending pnl of short positions\n    // @param netPnl the net pnl of long and short positions\n    struct Props {\n        int256 poolValue;\n        int256 longPnl;\n        int256 shortPnl;\n        int256 netPnl;\n\n        uint256 longTokenAmount;\n        uint256 shortTokenAmount;\n        uint256 longTokenUsd;\n        uint256 shortTokenUsd;\n\n        uint256 totalBorrowingFees;\n        uint256 borrowingFeePoolFactor;\n\n        uint256 impactPoolAmount;\n    }\n}\n"
    },
    "contracts/market/MarketStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Market.sol\";\n\n/**\n * @title MarketStoreUtils\n * @dev Library for market storage functions\n */\nlibrary MarketStoreUtils {\n    using Market for Market.Props;\n\n    bytes32 public constant MARKET_SALT = keccak256(abi.encode(\"MARKET_SALT\"));\n    bytes32 public constant MARKET_KEY = keccak256(abi.encode(\"MARKET_KEY\"));\n    bytes32 public constant MARKET_TOKEN = keccak256(abi.encode(\"MARKET_TOKEN\"));\n    bytes32 public constant INDEX_TOKEN = keccak256(abi.encode(\"INDEX_TOKEN\"));\n    bytes32 public constant LONG_TOKEN = keccak256(abi.encode(\"LONG_TOKEN\"));\n    bytes32 public constant SHORT_TOKEN = keccak256(abi.encode(\"SHORT_TOKEN\"));\n\n    function get(DataStore dataStore, address key) public view returns (Market.Props memory) {\n        Market.Props memory market;\n        if (!dataStore.containsAddress(Keys.MARKET_LIST, key)) {\n            return market;\n        }\n\n        market.marketToken = dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET_TOKEN))\n        );\n\n        market.indexToken = dataStore.getAddress(\n            keccak256(abi.encode(key, INDEX_TOKEN))\n        );\n\n        market.longToken = dataStore.getAddress(\n            keccak256(abi.encode(key, LONG_TOKEN))\n        );\n\n        market.shortToken = dataStore.getAddress(\n            keccak256(abi.encode(key, SHORT_TOKEN))\n        );\n\n        return market;\n    }\n\n    function getBySalt(DataStore dataStore, bytes32 salt) external view returns (Market.Props memory) {\n        address key = dataStore.getAddress(getMarketSaltHash(salt));\n        return get(dataStore, key);\n    }\n\n    function set(DataStore dataStore, address key, bytes32 salt, Market.Props memory market) external {\n        dataStore.addAddress(\n            Keys.MARKET_LIST,\n            key\n        );\n\n        // the salt is based on the market props while the key gives the market's address\n        // use the salt to store a reference to the key to allow the key to be retrieved\n        // using just the salt value\n        dataStore.setAddress(\n            getMarketSaltHash(salt),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET_TOKEN)),\n            market.marketToken\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, INDEX_TOKEN)),\n            market.indexToken\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, LONG_TOKEN)),\n            market.longToken\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, SHORT_TOKEN)),\n            market.shortToken\n        );\n    }\n\n    function remove(DataStore dataStore, address key) external {\n        if (!dataStore.containsAddress(Keys.MARKET_LIST, key)) {\n            revert Errors.MarketNotFound(key);\n        }\n\n        dataStore.removeAddress(\n            Keys.MARKET_LIST,\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, INDEX_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, LONG_TOKEN))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, SHORT_TOKEN))\n        );\n    }\n\n    function getMarketSaltHash(bytes32 salt) internal pure returns (bytes32) {\n        return keccak256(abi.encode(MARKET_SALT, salt));\n    }\n\n    function getMarketCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getAddressCount(Keys.MARKET_LIST);\n    }\n\n    function getMarketKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (address[] memory) {\n        return dataStore.getAddressValuesAt(Keys.MARKET_LIST, start, end);\n    }\n}\n"
    },
    "contracts/market/MarketToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../bank/Bank.sol\";\n\n// @title MarketToken\n// @dev The market token for a market, stores funds for the market and keeps track\n// of the liquidity owners\ncontract MarketToken is ERC20, Bank {\n    constructor(RoleStore _roleStore, DataStore _dataStore) ERC20(\"GMX Market\", \"GM\") Bank(_roleStore, _dataStore) {\n    }\n\n    // @dev mint market tokens to an account\n    // @param account the account to mint to\n    // @param amount the amount of tokens to mint\n    function mint(address account, uint256 amount) external onlyController {\n        _mint(account, amount);\n    }\n\n    // @dev burn market tokens from an account\n    // @param account the account to burn tokens for\n    // @param amount the amount of tokens to burn\n    function burn(address account, uint256 amount) external onlyController {\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/market/MarketUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"./Market.sol\";\nimport \"./MarketPoolValueInfo.sol\";\nimport \"./MarketToken.sol\";\nimport \"./MarketEventUtils.sol\";\nimport \"./MarketStoreUtils.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../order/Order.sol\";\n\nimport \"../oracle/Oracle.sol\";\nimport \"../price/Price.sol\";\n\nimport \"../utils/Calc.sol\";\nimport \"../utils/Precision.sol\";\n\n// @title MarketUtils\n// @dev Library for market functions\nlibrary MarketUtils {\n    using SignedMath for int256;\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    using Market for Market.Props;\n    using Position for Position.Props;\n    using Order for Order.Props;\n    using Price for Price.Props;\n\n    enum FundingRateChangeType {\n        NoChange,\n        Increase,\n        Decrease\n    }\n\n    // @dev struct to store the prices of tokens of a market\n    // @param indexTokenPrice price of the market's index token\n    // @param longTokenPrice price of the market's long token\n    // @param shortTokenPrice price of the market's short token\n    struct MarketPrices {\n        Price.Props indexTokenPrice;\n        Price.Props longTokenPrice;\n        Price.Props shortTokenPrice;\n    }\n\n    struct CollateralType {\n        uint256 longToken;\n        uint256 shortToken;\n    }\n\n    struct PositionType {\n        CollateralType long;\n        CollateralType short;\n    }\n\n    // @dev struct for the result of the getNextFundingAmountPerSize call\n    // note that abs(nextSavedFundingFactorPerSecond) may not equal the fundingFactorPerSecond\n    // see getNextFundingFactorPerSecond for more info\n    struct GetNextFundingAmountPerSizeResult {\n        bool longsPayShorts;\n        uint256 fundingFactorPerSecond;\n        int256 nextSavedFundingFactorPerSecond;\n\n        PositionType fundingFeeAmountPerSizeDelta;\n        PositionType claimableFundingAmountPerSizeDelta;\n    }\n\n    struct GetNextFundingAmountPerSizeCache {\n        PositionType openInterest;\n\n        uint256 longOpenInterest;\n        uint256 shortOpenInterest;\n\n        uint256 durationInSeconds;\n\n        uint256 sizeOfLargerSide;\n        uint256 fundingUsd;\n\n        uint256 fundingUsdForLongCollateral;\n        uint256 fundingUsdForShortCollateral;\n    }\n\n    struct GetNextFundingFactorPerSecondCache {\n        uint256 diffUsd;\n        uint256 totalOpenInterest;\n\n        uint256 fundingFactor;\n        uint256 fundingExponentFactor;\n\n        uint256 diffUsdAfterExponent;\n        uint256 diffUsdToOpenInterestFactor;\n\n        int256 savedFundingFactorPerSecond;\n        uint256 savedFundingFactorPerSecondMagnitude;\n\n        int256 nextSavedFundingFactorPerSecond;\n        int256 nextSavedFundingFactorPerSecondWithMinBound;\n    }\n\n    struct FundingConfigCache {\n        uint256 thresholdForStableFunding;\n        uint256 thresholdForDecreaseFunding;\n\n        uint256 fundingIncreaseFactorPerSecond;\n        uint256 fundingDecreaseFactorPerSecond;\n\n        uint256 minFundingFactorPerSecond;\n        uint256 maxFundingFactorPerSecond;\n    }\n\n    struct GetExpectedMinTokenBalanceCache {\n        uint256 poolAmount;\n        uint256 swapImpactPoolAmount;\n        uint256 claimableCollateralAmount;\n        uint256 claimableFeeAmount;\n        uint256 claimableUiFeeAmount;\n        uint256 affiliateRewardAmount;\n    }\n\n    // @dev get the market token's price\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longTokenPrice the price of the long token\n    // @param shortTokenPrice the price of the short token\n    // @param indexTokenPrice the price of the index token\n    // @param maximize whether to maximize or minimize the market token price\n    // @return returns (the market token's price, MarketPoolValueInfo.Props)\n    function getMarketTokenPrice(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        bytes32 pnlFactorType,\n        bool maximize\n    ) external view returns (int256, MarketPoolValueInfo.Props memory) {\n        uint256 supply = getMarketTokenSupply(MarketToken(payable(market.marketToken)));\n\n        MarketPoolValueInfo.Props memory poolValueInfo = getPoolValueInfo(\n            dataStore,\n            market,\n            indexTokenPrice,\n            longTokenPrice,\n            shortTokenPrice,\n            pnlFactorType,\n            maximize\n        );\n\n        // if the supply is zero then treat the market token price as 1 USD\n        if (supply == 0) {\n            return (Precision.FLOAT_PRECISION.toInt256(), poolValueInfo);\n        }\n\n        if (poolValueInfo.poolValue == 0) { return (0, poolValueInfo); }\n\n        int256 marketTokenPrice = Precision.mulDiv(Precision.WEI_PRECISION, poolValueInfo.poolValue, supply);\n        return (marketTokenPrice, poolValueInfo);\n    }\n\n    // @dev get the total supply of the marketToken\n    // @param marketToken the marketToken\n    // @return the total supply of the marketToken\n    function getMarketTokenSupply(MarketToken marketToken) internal view returns (uint256) {\n        return marketToken.totalSupply();\n    }\n\n    // @dev get the opposite token of the market\n    // if the inputToken is the longToken return the shortToken and vice versa\n    // @param inputToken the input token\n    // @param market the market values\n    // @return the opposite token\n    function getOppositeToken(address inputToken, Market.Props memory market) internal pure returns (address) {\n        if (inputToken == market.longToken) {\n            return market.shortToken;\n        }\n\n        if (inputToken == market.shortToken) {\n            return market.longToken;\n        }\n\n        revert Errors.UnableToGetOppositeToken(inputToken, market.marketToken);\n    }\n\n    function validateSwapMarket(DataStore dataStore, address marketAddress) internal view {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n        validateSwapMarket(dataStore, market);\n    }\n\n    function validateSwapMarket(DataStore dataStore, Market.Props memory market) internal view {\n        validateEnabledMarket(dataStore, market);\n\n        if (market.longToken == market.shortToken) {\n            revert Errors.InvalidSwapMarket(market.marketToken);\n        }\n    }\n\n    // @dev get the token price from the stored MarketPrices\n    // @param token the token to get the price for\n    // @param the market values\n    // @param the market token prices\n    // @return the token price from the stored MarketPrices\n    function getCachedTokenPrice(address token, Market.Props memory market, MarketPrices memory prices) internal pure returns (Price.Props memory) {\n        if (token == market.longToken) {\n            return prices.longTokenPrice;\n        }\n        if (token == market.shortToken) {\n            return prices.shortTokenPrice;\n        }\n        if (token == market.indexToken) {\n            return prices.indexTokenPrice;\n        }\n\n        revert Errors.UnableToGetCachedTokenPrice(token, market.marketToken);\n    }\n\n    // @dev return the primary prices for the market tokens\n    // @param oracle Oracle\n    // @param market the market values\n    function getMarketPrices(Oracle oracle, Market.Props memory market) internal view returns (MarketPrices memory) {\n        return MarketPrices(\n            oracle.getPrimaryPrice(market.indexToken),\n            oracle.getPrimaryPrice(market.longToken),\n            oracle.getPrimaryPrice(market.shortToken)\n        );\n    }\n\n    // @dev get the usd value of either the long or short tokens in the pool\n    // without accounting for the pnl of open positions\n    // @param dataStore DataStore\n    // @param market the market values\n    // @param prices the prices of the market tokens\n    // @param whether to return the value for the long or short token\n    // @return the usd value of either the long or short tokens in the pool\n    function getPoolUsdWithoutPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong,\n        bool maximize\n    ) internal view returns (uint256) {\n        address token = isLong ? market.longToken : market.shortToken;\n        // note that if it is a single token market, the poolAmount returned will be\n        // the amount of tokens in the pool divided by 2\n        uint256 poolAmount = getPoolAmount(dataStore, market, token);\n        uint256 tokenPrice;\n\n        if (maximize) {\n            tokenPrice = isLong ? prices.longTokenPrice.max : prices.shortTokenPrice.max;\n        } else {\n            tokenPrice = isLong ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\n        }\n\n        return poolAmount * tokenPrice;\n    }\n\n    // @dev get the USD value of a pool\n    // the value of a pool is the worth of the liquidity provider tokens in the pool - pending trader pnl\n    // we use the token index prices to calculate this and ignore price impact since if all positions were closed the\n    // net price impact should be zero\n    // @param dataStore DataStore\n    // @param market the market values\n    // @param longTokenPrice price of the long token\n    // @param shortTokenPrice price of the short token\n    // @param indexTokenPrice price of the index token\n    // @param maximize whether to maximize or minimize the pool value\n    // @return the value information of a pool\n    function getPoolValueInfo(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        bytes32 pnlFactorType,\n        bool maximize\n    ) public view returns (MarketPoolValueInfo.Props memory) {\n        MarketPoolValueInfo.Props memory result;\n\n        result.longTokenAmount = getPoolAmount(dataStore, market, market.longToken);\n        result.shortTokenAmount = getPoolAmount(dataStore, market, market.shortToken);\n\n        result.longTokenUsd = result.longTokenAmount * longTokenPrice.pickPrice(maximize);\n        result.shortTokenUsd = result.shortTokenAmount * shortTokenPrice.pickPrice(maximize);\n\n        result.poolValue = (result.longTokenUsd + result.shortTokenUsd).toInt256();\n\n        MarketPrices memory prices = MarketPrices(\n            indexTokenPrice,\n            longTokenPrice,\n            shortTokenPrice\n        );\n\n        result.totalBorrowingFees = getTotalPendingBorrowingFees(\n            dataStore,\n            market,\n            prices,\n            true\n        );\n\n        result.totalBorrowingFees += getTotalPendingBorrowingFees(\n            dataStore,\n            market,\n            prices,\n            false\n        );\n\n        result.borrowingFeePoolFactor = Precision.FLOAT_PRECISION - dataStore.getUint(Keys.BORROWING_FEE_RECEIVER_FACTOR);\n        result.poolValue += Precision.applyFactor(result.totalBorrowingFees, result.borrowingFeePoolFactor).toInt256();\n\n        // !maximize should be used for net pnl as a larger pnl leads to a smaller pool value\n        // and a smaller pnl leads to a larger pool value\n        //\n        // while positions will always be closed at the less favourable price\n        // using the inverse of maximize for the getPnl calls would help prevent\n        // gaming of market token values by increasing the spread\n        //\n        // liquidations could be triggered by manipulating a large spread but\n        // that should be more difficult to execute\n\n        result.longPnl = getPnl(\n            dataStore,\n            market,\n            indexTokenPrice,\n            true, // isLong\n            !maximize // maximize\n        );\n\n        result.longPnl = getCappedPnl(\n            dataStore,\n            market.marketToken,\n            true,\n            result.longPnl,\n            result.longTokenUsd,\n            pnlFactorType\n        );\n\n        result.shortPnl = getPnl(\n            dataStore,\n            market,\n            indexTokenPrice,\n            false, // isLong\n            !maximize // maximize\n        );\n\n        result.shortPnl = getCappedPnl(\n            dataStore,\n            market.marketToken,\n            false,\n            result.shortPnl,\n            result.shortTokenUsd,\n            pnlFactorType\n        );\n\n        result.netPnl = result.longPnl + result.shortPnl;\n        result.poolValue = result.poolValue - result.netPnl;\n\n        result.impactPoolAmount = getNextPositionImpactPoolAmount(dataStore, market.marketToken);\n        // use !maximize for pickPrice since the impactPoolUsd is deducted from the poolValue\n        uint256 impactPoolUsd = result.impactPoolAmount * indexTokenPrice.pickPrice(!maximize);\n\n        result.poolValue -= impactPoolUsd.toInt256();\n\n        return result;\n    }\n\n    // @dev get the net pending pnl for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param indexTokenPrice the price of the index token\n    // @param maximize whether to maximize or minimize the net pnl\n    // @return the net pending pnl for a market\n    function getNetPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        bool maximize\n    ) internal view returns (int256) {\n        int256 longPnl = getPnl(dataStore, market, indexTokenPrice, true, maximize);\n        int256 shortPnl = getPnl(dataStore, market, indexTokenPrice, false, maximize);\n\n        return longPnl + shortPnl;\n    }\n\n    // @dev get the capped pending pnl for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check for the long or short side\n    // @param pnl the uncapped pnl of the market\n    // @param poolUsd the USD value of the pool\n    // @param pnlFactorType the pnl factor type to use\n    function getCappedPnl(\n        DataStore dataStore,\n        address market,\n        bool isLong,\n        int256 pnl,\n        uint256 poolUsd,\n        bytes32 pnlFactorType\n    ) internal view returns (int256) {\n        if (pnl < 0) { return pnl; }\n\n        uint256 maxPnlFactor = getMaxPnlFactor(dataStore, pnlFactorType, market, isLong);\n        int256 maxPnl = Precision.applyFactor(poolUsd, maxPnlFactor).toInt256();\n\n        return pnl > maxPnl ? maxPnl : pnl;\n    }\n\n    // @dev get the pending pnl for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param indexTokenPrice the price of the index token\n    // @param isLong whether to check for the long or short side\n    // @param maximize whether to maximize or minimize the pnl\n    function getPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        uint256 indexTokenPrice,\n        bool isLong,\n        bool maximize\n    ) internal view returns (int256) {\n        Price.Props memory _indexTokenPrice = Price.Props(indexTokenPrice, indexTokenPrice);\n\n        return getPnl(\n            dataStore,\n            market,\n            _indexTokenPrice,\n            isLong,\n            maximize\n        );\n    }\n\n    // @dev get the pending pnl for a market for either longs or shorts\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param indexTokenPrice the price of the index token\n    // @param isLong whether to get the pnl for longs or shorts\n    // @param maximize whether to maximize or minimize the net pnl\n    // @return the pending pnl for a market for either longs or shorts\n    function getPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        bool isLong,\n        bool maximize\n    ) internal view returns (int256) {\n        int256 openInterest = getOpenInterest(dataStore, market, isLong).toInt256();\n        uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, isLong);\n        if (openInterest == 0 || openInterestInTokens == 0) {\n            return 0;\n        }\n\n        uint256 price = indexTokenPrice.pickPriceForPnl(isLong, maximize);\n\n        // openInterest is the cost of all positions, openInterestValue is the current worth of all positions\n        int256 openInterestValue = (openInterestInTokens * price).toInt256();\n        int256 pnl = isLong ? openInterestValue - openInterest : openInterest - openInterestValue;\n\n        return pnl;\n    }\n\n    // @dev get the amount of tokens in the pool\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param token the token to check\n    // @return the amount of tokens in the pool\n    function getPoolAmount(DataStore dataStore, Market.Props memory market, address token) internal view returns (uint256) {\n        /* Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress); */\n        // if the longToken and shortToken are the same, return half of the token amount, so that\n        // calculations of pool value, etc would be correct\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\n        return dataStore.getUint(Keys.poolAmountKey(market.marketToken, token)) / divisor;\n    }\n\n    // @dev get the max amount of tokens allowed to be in the pool\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param token the token to check\n    // @return the max amount of tokens that are allowed in the pool\n    function getMaxPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\n        return dataStore.getUint(Keys.maxPoolAmountKey(market, token));\n    }\n\n    function getMaxPoolUsdForDeposit(DataStore dataStore, address market, address token) internal view returns (uint256) {\n        return dataStore.getUint(Keys.maxPoolUsdForDepositKey(market, token));\n    }\n\n    function getUsageFactor(\n        DataStore dataStore,\n        Market.Props memory market,\n        bool isLong,\n        uint256 reservedUsd,\n        uint256 poolUsd\n    ) internal view returns (uint256) {\n        uint256 reserveFactor = getOpenInterestReserveFactor(dataStore, market.marketToken, isLong);\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\n        uint256 reserveUsageFactor = Precision.toFactor(reservedUsd, maxReservedUsd);\n\n        if (dataStore.getBool(Keys.IGNORE_OPEN_INTEREST_FOR_USAGE_FACTOR)) {\n            return reserveUsageFactor;\n        }\n\n        uint256 maxOpenInterest = getMaxOpenInterest(dataStore, market.marketToken, isLong);\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\n        uint256 openInterestUsageFactor = Precision.toFactor(openInterest, maxOpenInterest);\n\n        return reserveUsageFactor > openInterestUsageFactor ? reserveUsageFactor : openInterestUsageFactor;\n    }\n\n    // @dev get the max open interest allowed for the market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether this is for the long or short side\n    // @return the max open interest allowed for the market\n    function getMaxOpenInterest(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.maxOpenInterestKey(market, isLong));\n    }\n\n    // @dev increment the claimable collateral amount\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to increment the claimable collateral for\n    // @param token the claimable token\n    // @param account the account to increment the claimable collateral for\n    // @param delta the amount to increment\n    function incrementClaimableCollateralAmount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address account,\n        uint256 delta\n    ) internal {\n        uint256 divisor = dataStore.getUint(Keys.CLAIMABLE_COLLATERAL_TIME_DIVISOR);\n        uint256 timeKey = Chain.currentTimestamp() / divisor;\n\n        uint256 nextValue = dataStore.incrementUint(\n            Keys.claimableCollateralAmountKey(market, token, timeKey, account),\n            delta\n        );\n\n        uint256 nextPoolValue = dataStore.incrementUint(\n            Keys.claimableCollateralAmountKey(market, token),\n            delta\n        );\n\n        MarketEventUtils.emitClaimableCollateralUpdated(\n            eventEmitter,\n            market,\n            token,\n            timeKey,\n            account,\n            delta,\n            nextValue,\n            nextPoolValue\n        );\n    }\n\n    // @dev increment the claimable funding amount\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the trading market\n    // @param token the claimable token\n    // @param account the account to increment for\n    // @param delta the amount to increment\n    function incrementClaimableFundingAmount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address account,\n        uint256 delta\n    ) internal {\n        uint256 nextValue = dataStore.incrementUint(\n            Keys.claimableFundingAmountKey(market, token, account),\n            delta\n        );\n\n        uint256 nextPoolValue = dataStore.incrementUint(\n            Keys.claimableFundingAmountKey(market, token),\n            delta\n        );\n\n        MarketEventUtils.emitClaimableFundingUpdated(\n            eventEmitter,\n            market,\n            token,\n            account,\n            delta,\n            nextValue,\n            nextPoolValue\n        );\n    }\n\n    // @dev claim funding fees\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to claim for\n    // @param token the token to claim\n    // @param account the account to claim for\n    // @param receiver the receiver to send the amount to\n    function claimFundingFees(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address account,\n        address receiver\n    ) internal returns (uint256) {\n        bytes32 key = Keys.claimableFundingAmountKey(market, token, account);\n\n        uint256 claimableAmount = dataStore.getUint(key);\n        dataStore.setUint(key, 0);\n\n        uint256 nextPoolValue = dataStore.decrementUint(\n            Keys.claimableFundingAmountKey(market, token),\n            claimableAmount\n        );\n\n        MarketToken(payable(market)).transferOut(\n            token,\n            receiver,\n            claimableAmount\n        );\n\n        validateMarketTokenBalance(dataStore, market);\n\n        MarketEventUtils.emitFundingFeesClaimed(\n            eventEmitter,\n            market,\n            token,\n            account,\n            receiver,\n            claimableAmount,\n            nextPoolValue\n        );\n\n        return claimableAmount;\n    }\n\n    // @dev claim collateral\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to claim for\n    // @param token the token to claim\n    // @param timeKey the time key\n    // @param account the account to claim for\n    // @param receiver the receiver to send the amount to\n    function claimCollateral(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 timeKey,\n        address account,\n        address receiver\n    ) internal returns (uint256) {\n        uint256 claimableAmount = dataStore.getUint(Keys.claimableCollateralAmountKey(market, token, timeKey, account));\n\n        uint256 claimableFactor;\n\n        {\n            uint256 claimableFactorForTime = dataStore.getUint(Keys.claimableCollateralFactorKey(market, token, timeKey));\n            uint256 claimableFactorForAccount = dataStore.getUint(Keys.claimableCollateralFactorKey(market, token, timeKey, account));\n            claimableFactor = claimableFactorForTime > claimableFactorForAccount ? claimableFactorForTime : claimableFactorForAccount;\n        }\n\n        if (claimableFactor > Precision.FLOAT_PRECISION) {\n            revert Errors.InvalidClaimableFactor(claimableFactor);\n        }\n\n        uint256 claimedAmount = dataStore.getUint(Keys.claimedCollateralAmountKey(market, token, timeKey, account));\n\n        uint256 adjustedClaimableAmount = Precision.applyFactor(claimableAmount, claimableFactor);\n        if (adjustedClaimableAmount <= claimedAmount) {\n            revert Errors.CollateralAlreadyClaimed(adjustedClaimableAmount, claimedAmount);\n        }\n\n        uint256 amountToBeClaimed = adjustedClaimableAmount - claimedAmount;\n\n        dataStore.setUint(\n            Keys.claimedCollateralAmountKey(market, token, timeKey, account),\n            adjustedClaimableAmount\n        );\n\n        uint256 nextPoolValue = dataStore.decrementUint(\n            Keys.claimableCollateralAmountKey(market, token),\n            amountToBeClaimed\n        );\n\n        MarketToken(payable(market)).transferOut(\n            token,\n            receiver,\n            amountToBeClaimed\n        );\n\n        validateMarketTokenBalance(dataStore, market);\n\n        MarketEventUtils.emitCollateralClaimed(\n            eventEmitter,\n            market,\n            token,\n            timeKey,\n            account,\n            receiver,\n            amountToBeClaimed,\n            nextPoolValue\n        );\n\n        return amountToBeClaimed;\n    }\n\n    // @dev apply a delta to the pool amount\n    // validatePoolAmount is not called in this function since applyDeltaToPoolAmount\n    // is called when receiving fees\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param token the token to apply to\n    // @param delta the delta amount\n    function applyDeltaToPoolAmount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Market.Props memory market,\n        address token,\n        int256 delta\n    ) internal returns (uint256) {\n        uint256 nextValue = dataStore.applyDeltaToUint(\n            Keys.poolAmountKey(market.marketToken, token),\n            delta,\n            \"Invalid state, negative poolAmount\"\n        );\n\n        applyDeltaToVirtualInventoryForSwaps(\n            dataStore,\n            eventEmitter,\n            market,\n            token,\n            delta\n        );\n\n        MarketEventUtils.emitPoolAmountUpdated(eventEmitter, market.marketToken, token, delta, nextValue);\n\n        return nextValue;\n    }\n\n    function getAdjustedSwapImpactFactor(DataStore dataStore, address market, bool isPositive) internal view returns (uint256) {\n        (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = getAdjustedSwapImpactFactors(dataStore, market);\n\n        return isPositive ? positiveImpactFactor : negativeImpactFactor;\n    }\n\n    function getAdjustedSwapImpactFactors(DataStore dataStore, address market) internal view returns (uint256, uint256) {\n        uint256 positiveImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, true));\n        uint256 negativeImpactFactor = dataStore.getUint(Keys.swapImpactFactorKey(market, false));\n\n        // if the positive impact factor is more than the negative impact factor, positions could be opened\n        // and closed immediately for a profit if the difference is sufficient to cover the position fees\n        if (positiveImpactFactor > negativeImpactFactor) {\n            positiveImpactFactor = negativeImpactFactor;\n        }\n\n        return (positiveImpactFactor, negativeImpactFactor);\n    }\n\n    function getAdjustedPositionImpactFactor(DataStore dataStore, address market, bool isPositive) internal view returns (uint256) {\n        (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = getAdjustedPositionImpactFactors(dataStore, market);\n\n        return isPositive ? positiveImpactFactor : negativeImpactFactor;\n    }\n\n    function getAdjustedPositionImpactFactors(DataStore dataStore, address market) internal view returns (uint256, uint256) {\n        uint256 positiveImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, true));\n        uint256 negativeImpactFactor = dataStore.getUint(Keys.positionImpactFactorKey(market, false));\n\n        // if the positive impact factor is more than the negative impact factor, positions could be opened\n        // and closed immediately for a profit if the difference is sufficient to cover the position fees\n        if (positiveImpactFactor > negativeImpactFactor) {\n            positiveImpactFactor = negativeImpactFactor;\n        }\n\n        return (positiveImpactFactor, negativeImpactFactor);\n    }\n\n    // @dev cap the input priceImpactUsd by the available amount in the position\n    // impact pool and the max positive position impact factor\n    // @param dataStore DataStore\n    // @param market the trading market\n    // @param tokenPrice the price of the token\n    // @param priceImpactUsd the calculated USD price impact\n    // @return the capped priceImpactUsd\n    function getCappedPositionImpactUsd(\n        DataStore dataStore,\n        address market,\n        Price.Props memory indexTokenPrice,\n        int256 priceImpactUsd,\n        uint256 sizeDeltaUsd\n    ) internal view returns (int256) {\n        if (priceImpactUsd < 0) {\n            return priceImpactUsd;\n        }\n\n        uint256 impactPoolAmount = getPositionImpactPoolAmount(dataStore, market);\n        int256 maxPriceImpactUsdBasedOnImpactPool = (impactPoolAmount * indexTokenPrice.min).toInt256();\n\n        if (priceImpactUsd > maxPriceImpactUsdBasedOnImpactPool) {\n            priceImpactUsd = maxPriceImpactUsdBasedOnImpactPool;\n        }\n\n        uint256 maxPriceImpactFactor = getMaxPositionImpactFactor(dataStore, market, true);\n        int256 maxPriceImpactUsdBasedOnMaxPriceImpactFactor = Precision.applyFactor(sizeDeltaUsd, maxPriceImpactFactor).toInt256();\n\n        if (priceImpactUsd > maxPriceImpactUsdBasedOnMaxPriceImpactFactor) {\n            priceImpactUsd = maxPriceImpactUsdBasedOnMaxPriceImpactFactor;\n        }\n\n        return priceImpactUsd;\n    }\n\n    // @dev get the position impact pool amount\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @return the position impact pool amount\n    function getPositionImpactPoolAmount(DataStore dataStore, address market) internal view returns (uint256) {\n        return dataStore.getUint(Keys.positionImpactPoolAmountKey(market));\n    }\n\n    // @dev get the swap impact pool amount\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param token the token to check\n    // @return the swap impact pool amount\n    function getSwapImpactPoolAmount(DataStore dataStore, address market, address token) internal view returns (uint256) {\n        return dataStore.getUint(Keys.swapImpactPoolAmountKey(market, token));\n    }\n\n    // @dev apply a delta to the swap impact pool\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param token the token to apply to\n    // @param delta the delta amount\n    function applyDeltaToSwapImpactPool(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        int256 delta\n    ) internal returns (uint256) {\n        uint256 nextValue = dataStore.applyBoundedDeltaToUint(\n            Keys.swapImpactPoolAmountKey(market, token),\n            delta\n        );\n\n        MarketEventUtils.emitSwapImpactPoolAmountUpdated(eventEmitter, market, token, delta, nextValue);\n\n        return nextValue;\n    }\n\n    // @dev apply a delta to the position impact pool\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param delta the delta amount\n    function applyDeltaToPositionImpactPool(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        int256 delta\n    ) internal returns (uint256) {\n        uint256 nextValue = dataStore.applyBoundedDeltaToUint(\n            Keys.positionImpactPoolAmountKey(market),\n            delta\n        );\n\n        MarketEventUtils.emitPositionImpactPoolAmountUpdated(eventEmitter, market, delta, nextValue);\n\n        return nextValue;\n    }\n\n    // @dev apply a delta to the open interest\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param collateralToken the collateralToken to apply to\n    // @param isLong whether to apply to the long or short side\n    // @param delta the delta amount\n    function applyDeltaToOpenInterest(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Market.Props memory market,\n        address collateralToken,\n        bool isLong,\n        int256 delta\n    ) internal returns (uint256) {\n        if (market.indexToken == address(0)) {\n            revert Errors.OpenInterestCannotBeUpdatedForSwapOnlyMarket(market.marketToken);\n        }\n\n        uint256 nextValue = dataStore.applyDeltaToUint(\n            Keys.openInterestKey(market.marketToken, collateralToken, isLong),\n            delta,\n            \"Invalid state: negative open interest\"\n        );\n\n        // if the open interest for longs is increased then tokens were virtually bought from the pool\n        // so the virtual inventory should be decreased\n        // if the open interest for longs is decreased then tokens were virtually sold to the pool\n        // so the virtual inventory should be increased\n        // if the open interest for shorts is increased then tokens were virtually sold to the pool\n        // so the virtual inventory should be increased\n        // if the open interest for shorts is decreased then tokens were virtually bought from the pool\n        // so the virtual inventory should be decreased\n        applyDeltaToVirtualInventoryForPositions(\n            dataStore,\n            eventEmitter,\n            market.indexToken,\n            isLong ? -delta : delta\n        );\n\n        if (delta > 0) {\n            validateOpenInterest(\n                dataStore,\n                market,\n                isLong\n            );\n        }\n\n        MarketEventUtils.emitOpenInterestUpdated(eventEmitter, market.marketToken, collateralToken, isLong, delta, nextValue);\n\n        return nextValue;\n    }\n\n    // @dev apply a delta to the open interest in tokens\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param collateralToken the collateralToken to apply to\n    // @param isLong whether to apply to the long or short side\n    // @param delta the delta amount\n    function applyDeltaToOpenInterestInTokens(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        int256 delta\n    ) internal returns (uint256) {\n        uint256 nextValue = dataStore.applyDeltaToUint(\n            Keys.openInterestInTokensKey(market, collateralToken, isLong),\n            delta,\n            \"Invalid state: negative open interest in tokens\"\n        );\n\n        MarketEventUtils.emitOpenInterestInTokensUpdated(eventEmitter, market, collateralToken, isLong, delta, nextValue);\n\n        return nextValue;\n    }\n\n    // @dev apply a delta to the collateral sum\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param collateralToken the collateralToken to apply to\n    // @param isLong whether to apply to the long or short side\n    // @param delta the delta amount\n    function applyDeltaToCollateralSum(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        int256 delta\n    ) internal returns (uint256) {\n        uint256 nextValue = dataStore.applyDeltaToUint(\n            Keys.collateralSumKey(market, collateralToken, isLong),\n            delta,\n            \"Invalid state: negative collateralSum\"\n        );\n\n        MarketEventUtils.emitCollateralSumUpdated(eventEmitter, market, collateralToken, isLong, delta, nextValue);\n\n        return nextValue;\n    }\n\n    // @dev update the funding state\n    // @param dataStore DataStore\n    // @param market the market to update\n    // @param prices the prices of the market tokens\n    function updateFundingState(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Market.Props memory market,\n        MarketPrices memory prices\n    ) external {\n        GetNextFundingAmountPerSizeResult memory result = getNextFundingAmountPerSize(dataStore, market, prices);\n\n        applyDeltaToFundingFeeAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.longToken,\n            true,\n            result.fundingFeeAmountPerSizeDelta.long.longToken\n        );\n\n        applyDeltaToFundingFeeAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.longToken,\n            false,\n            result.fundingFeeAmountPerSizeDelta.short.longToken\n        );\n\n        applyDeltaToFundingFeeAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.shortToken,\n            true,\n            result.fundingFeeAmountPerSizeDelta.long.shortToken\n        );\n\n        applyDeltaToFundingFeeAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.shortToken,\n            false,\n            result.fundingFeeAmountPerSizeDelta.short.shortToken\n        );\n\n        applyDeltaToClaimableFundingAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.longToken,\n            true,\n            result.claimableFundingAmountPerSizeDelta.long.longToken\n        );\n\n        applyDeltaToClaimableFundingAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.longToken,\n            false,\n            result.claimableFundingAmountPerSizeDelta.short.longToken\n        );\n\n        applyDeltaToClaimableFundingAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.shortToken,\n            true,\n            result.claimableFundingAmountPerSizeDelta.long.shortToken\n        );\n\n        applyDeltaToClaimableFundingAmountPerSize(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            market.shortToken,\n            false,\n            result.claimableFundingAmountPerSizeDelta.short.shortToken\n        );\n\n        setSavedFundingFactorPerSecond(dataStore, market.marketToken, result.nextSavedFundingFactorPerSecond);\n\n        dataStore.setUint(Keys.fundingUpdatedAtKey(market.marketToken), Chain.currentTimestamp());\n    }\n\n    // @dev get the next funding amount per size values\n    // @param dataStore DataStore\n    // @param prices the prices of the market tokens\n    // @param market the market to update\n    // @param longToken the market's long token\n    // @param shortToken the market's short token\n    function getNextFundingAmountPerSize(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices\n    ) internal view returns (GetNextFundingAmountPerSizeResult memory) {\n        GetNextFundingAmountPerSizeResult memory result;\n        GetNextFundingAmountPerSizeCache memory cache;\n\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\n\n        // get the open interest values by long / short and by collateral used\n        cache.openInterest.long.longToken = getOpenInterest(dataStore, market.marketToken, market.longToken, true, divisor);\n        cache.openInterest.long.shortToken = getOpenInterest(dataStore, market.marketToken, market.shortToken, true, divisor);\n        cache.openInterest.short.longToken = getOpenInterest(dataStore, market.marketToken, market.longToken, false, divisor);\n        cache.openInterest.short.shortToken = getOpenInterest(dataStore, market.marketToken, market.shortToken, false, divisor);\n\n        // sum the open interest values to get the total long and short open interest values\n        cache.longOpenInterest = cache.openInterest.long.longToken + cache.openInterest.long.shortToken;\n        cache.shortOpenInterest = cache.openInterest.short.longToken + cache.openInterest.short.shortToken;\n\n        // if either long or short open interest is zero, then funding should not be updated\n        // as there would not be any user to pay the funding to\n        if (cache.longOpenInterest == 0 || cache.shortOpenInterest == 0) {\n            return result;\n        }\n\n        // if the blockchain is not progressing / a market is disabled, funding fees\n        // will continue to accumulate\n        // this should be a rare occurrence so funding fees are not adjusted for this case\n        cache.durationInSeconds = getSecondsSinceFundingUpdated(dataStore, market.marketToken);\n\n        cache.sizeOfLargerSide = cache.longOpenInterest > cache.shortOpenInterest ? cache.longOpenInterest : cache.shortOpenInterest;\n\n        (result.fundingFactorPerSecond, result.longsPayShorts, result.nextSavedFundingFactorPerSecond) = getNextFundingFactorPerSecond(\n            dataStore,\n            market.marketToken,\n            cache.longOpenInterest,\n            cache.shortOpenInterest,\n            cache.durationInSeconds\n        );\n\n        // for single token markets, if there is $200,000 long open interest\n        // and $100,000 short open interest and if the fundingUsd is $8:\n        // fundingUsdForLongCollateral: $4\n        // fundingUsdForShortCollateral: $4\n        // fundingFeeAmountPerSizeDelta.long.longToken: 4 / 100,000\n        // fundingFeeAmountPerSizeDelta.long.shortToken: 4 / 100,000\n        // claimableFundingAmountPerSizeDelta.short.longToken: 4 / 100,000\n        // claimableFundingAmountPerSizeDelta.short.shortToken: 4 / 100,000\n        //\n        // the divisor for fundingFeeAmountPerSizeDelta is 100,000 because the\n        // cache.openInterest.long.longOpenInterest and cache.openInterest.long.shortOpenInterest is divided by 2\n        //\n        // when the fundingFeeAmountPerSize value is incremented, it would be incremented twice:\n        // 4 / 100,000 + 4 / 100,000 = 8 / 100,000\n        //\n        // since the actual long open interest is $200,000, this would result in a total of 8 / 100,000 * 200,000 = $16 being charged\n        //\n        // when the claimableFundingAmountPerSize value is incremented, it would similarly be incremented twice:\n        // 4 / 100,000 + 4 / 100,000 = 8 / 100,000\n        //\n        // when calculating the amount to be claimed, the longTokenClaimableFundingAmountPerSize and shortTokenClaimableFundingAmountPerSize\n        // are compared against the market's claimableFundingAmountPerSize for the longToken and claimableFundingAmountPerSize for the shortToken\n        //\n        // since both these values will be duplicated, the amount claimable would be:\n        // (8 / 100,000 + 8 / 100,000) * 100,000 = $16\n        //\n        // due to these, the fundingUsd should be divided by the divisor\n\n        cache.fundingUsd = Precision.applyFactor(cache.sizeOfLargerSide, cache.durationInSeconds * result.fundingFactorPerSecond);\n        cache.fundingUsd = cache.fundingUsd / divisor;\n\n        // split the fundingUsd value by long and short collateral\n        // e.g. if the fundingUsd value is $500, and there is $1000 of long open interest using long collateral and $4000 of long open interest\n        // with short collateral, then $100 of funding fees should be paid from long positions using long collateral, $400 of funding fees\n        // should be paid from long positions using short collateral\n        // short positions should receive $100 of funding fees in long collateral and $400 of funding fees in short collateral\n        if (result.longsPayShorts) {\n            cache.fundingUsdForLongCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.long.longToken, cache.longOpenInterest);\n            cache.fundingUsdForShortCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.long.shortToken, cache.longOpenInterest);\n        } else {\n            cache.fundingUsdForLongCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.short.longToken, cache.shortOpenInterest);\n            cache.fundingUsdForShortCollateral = Precision.mulDiv(cache.fundingUsd, cache.openInterest.short.shortToken, cache.shortOpenInterest);\n        }\n\n        // calculate the change in funding amount per size values\n        // for example, if the fundingUsdForLongCollateral is $100, the longToken price is $2000, the longOpenInterest is $10,000, shortOpenInterest is $5000\n        // if longs pay shorts then the fundingFeeAmountPerSize.long.longToken should be increased by 0.05 tokens per $10,000 or 0.000005 tokens per $1\n        // the claimableFundingAmountPerSize.short.longToken should be increased by 0.05 tokens per $5000 or 0.00001 tokens per $1\n        if (result.longsPayShorts) {\n            // use the same longTokenPrice.max and shortTokenPrice.max to calculate the amount to be paid and received\n            // positions only pay funding in the position's collateral token\n            // so the fundingUsdForLongCollateral is divided by the total long open interest for long positions using the longToken as collateral\n            // and the fundingUsdForShortCollateral is divided by the total long open interest for long positions using the shortToken as collateral\n            result.fundingFeeAmountPerSizeDelta.long.longToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForLongCollateral,\n                cache.openInterest.long.longToken,\n                prices.longTokenPrice.max,\n                true // roundUpMagnitude\n            );\n\n            result.fundingFeeAmountPerSizeDelta.long.shortToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForShortCollateral,\n                cache.openInterest.long.shortToken,\n                prices.shortTokenPrice.max,\n                true // roundUpMagnitude\n            );\n\n            // positions receive funding in both the longToken and shortToken\n            // so the fundingUsdForLongCollateral and fundingUsdForShortCollateral is divided by the total short open interest\n            result.claimableFundingAmountPerSizeDelta.short.longToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForLongCollateral,\n                cache.shortOpenInterest,\n                prices.longTokenPrice.max,\n                false // roundUpMagnitude\n            );\n\n            result.claimableFundingAmountPerSizeDelta.short.shortToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForShortCollateral,\n                cache.shortOpenInterest,\n                prices.shortTokenPrice.max,\n                false // roundUpMagnitude\n            );\n        } else {\n            // use the same longTokenPrice.max and shortTokenPrice.max to calculate the amount to be paid and received\n            // positions only pay funding in the position's collateral token\n            // so the fundingUsdForLongCollateral is divided by the total short open interest for short positions using the longToken as collateral\n            // and the fundingUsdForShortCollateral is divided by the total short open interest for short positions using the shortToken as collateral\n            result.fundingFeeAmountPerSizeDelta.short.longToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForLongCollateral,\n                cache.openInterest.short.longToken,\n                prices.longTokenPrice.max,\n                true // roundUpMagnitude\n            );\n\n            result.fundingFeeAmountPerSizeDelta.short.shortToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForShortCollateral,\n                cache.openInterest.short.shortToken,\n                prices.shortTokenPrice.max,\n                true // roundUpMagnitude\n            );\n\n            // positions receive funding in both the longToken and shortToken\n            // so the fundingUsdForLongCollateral and fundingUsdForShortCollateral is divided by the total long open interest\n            result.claimableFundingAmountPerSizeDelta.long.longToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForLongCollateral,\n                cache.longOpenInterest,\n                prices.longTokenPrice.max,\n                false // roundUpMagnitude\n            );\n\n            result.claimableFundingAmountPerSizeDelta.long.shortToken = getFundingAmountPerSizeDelta(\n                cache.fundingUsdForShortCollateral,\n                cache.longOpenInterest,\n                prices.shortTokenPrice.max,\n                false // roundUpMagnitude\n            );\n        }\n\n        return result;\n    }\n\n    // @dev get the next funding factor per second\n    // in case the minFundingFactorPerSecond is not zero, and the long / short skew has flipped\n    // if orders are being created frequently it is possible that the minFundingFactorPerSecond prevents\n    // the nextSavedFundingFactorPerSecond from being decreased fast enough for the sign to eventually flip\n    // if it is bound by minFundingFactorPerSecond\n    // for that reason, only the nextFundingFactorPerSecond is bound by minFundingFactorPerSecond\n    // and the nextSavedFundingFactorPerSecond is not bound by minFundingFactorPerSecond\n    // @return nextFundingFactorPerSecond, longsPayShorts, nextSavedFundingFactorPerSecond\n    function getNextFundingFactorPerSecond(\n        DataStore dataStore,\n        address market,\n        uint256 longOpenInterest,\n        uint256 shortOpenInterest,\n        uint256 durationInSeconds\n    ) internal view returns (uint256, bool, int256) {\n        GetNextFundingFactorPerSecondCache memory cache;\n\n        cache.diffUsd = Calc.diff(longOpenInterest, shortOpenInterest);\n        cache.totalOpenInterest = longOpenInterest + shortOpenInterest;\n\n        FundingConfigCache memory configCache;\n        configCache.fundingIncreaseFactorPerSecond = dataStore.getUint(Keys.fundingIncreaseFactorPerSecondKey(market));\n\n        // if the open interest difference is zero and adaptive funding\n        // is not enabled, then return zero as the funding factor\n        if (cache.diffUsd == 0 && configCache.fundingIncreaseFactorPerSecond == 0) {\n            return (0, true, 0);\n        }\n\n        if (cache.totalOpenInterest == 0) {\n            revert Errors.UnableToGetFundingFactorEmptyOpenInterest();\n        }\n\n        cache.fundingExponentFactor = getFundingExponentFactor(dataStore, market);\n\n        cache.diffUsdAfterExponent = Precision.applyExponentFactor(cache.diffUsd, cache.fundingExponentFactor);\n        cache.diffUsdToOpenInterestFactor = Precision.toFactor(cache.diffUsdAfterExponent, cache.totalOpenInterest);\n\n        if (configCache.fundingIncreaseFactorPerSecond == 0) {\n            cache.fundingFactor = getFundingFactor(dataStore, market);\n            uint256 maxFundingFactorPerSecond = dataStore.getUint(Keys.maxFundingFactorPerSecondKey(market));\n\n            // if there is no fundingIncreaseFactorPerSecond then return the static fundingFactor based on open interest difference\n            uint256 fundingFactorPerSecond = Precision.applyFactor(cache.diffUsdToOpenInterestFactor, cache.fundingFactor);\n\n            if (fundingFactorPerSecond > maxFundingFactorPerSecond) {\n                fundingFactorPerSecond = maxFundingFactorPerSecond;\n            }\n\n            return (\n                fundingFactorPerSecond,\n                longOpenInterest > shortOpenInterest,\n                0\n            );\n        }\n\n        // if the savedFundingFactorPerSecond is positive then longs pay shorts\n        // if the savedFundingFactorPerSecond is negative then shorts pay longs\n        cache.savedFundingFactorPerSecond = getSavedFundingFactorPerSecond(dataStore, market);\n        cache.savedFundingFactorPerSecondMagnitude = cache.savedFundingFactorPerSecond.abs();\n\n        configCache.thresholdForStableFunding = dataStore.getUint(Keys.thresholdForStableFundingKey(market));\n        configCache.thresholdForDecreaseFunding = dataStore.getUint(Keys.thresholdForDecreaseFundingKey(market));\n\n        // set the default of nextSavedFundingFactorPerSecond as the savedFundingFactorPerSecond\n        cache.nextSavedFundingFactorPerSecond = cache.savedFundingFactorPerSecond;\n\n        // the default will be NoChange\n        FundingRateChangeType fundingRateChangeType;\n\n        bool isSkewTheSameDirectionAsFunding = (cache.savedFundingFactorPerSecond > 0 && longOpenInterest > shortOpenInterest) || (cache.savedFundingFactorPerSecond < 0 && shortOpenInterest > longOpenInterest);\n\n        if (isSkewTheSameDirectionAsFunding) {\n            if (cache.diffUsdToOpenInterestFactor > configCache.thresholdForStableFunding) {\n                fundingRateChangeType = FundingRateChangeType.Increase;\n            } else if (cache.diffUsdToOpenInterestFactor < configCache.thresholdForDecreaseFunding) {\n                // if thresholdForDecreaseFunding is zero and diffUsdToOpenInterestFactor is also zero\n                // then the fundingRateChangeType would be NoChange\n                fundingRateChangeType = FundingRateChangeType.Decrease;\n            }\n        } else {\n            // if the skew has changed, then the funding should increase in the opposite direction\n            fundingRateChangeType = FundingRateChangeType.Increase;\n        }\n\n        if (fundingRateChangeType == FundingRateChangeType.Increase) {\n            // increase funding rate\n            int256 increaseValue = Precision.applyFactor(cache.diffUsdToOpenInterestFactor, configCache.fundingIncreaseFactorPerSecond).toInt256() * durationInSeconds.toInt256();\n\n            // if there are more longs than shorts, then the savedFundingFactorPerSecond should increase\n            // otherwise the savedFundingFactorPerSecond should increase in the opposite direction / decrease\n            if (longOpenInterest < shortOpenInterest) {\n                increaseValue = -increaseValue;\n            }\n\n            cache.nextSavedFundingFactorPerSecond = cache.savedFundingFactorPerSecond + increaseValue;\n        }\n\n        if (fundingRateChangeType == FundingRateChangeType.Decrease && cache.savedFundingFactorPerSecondMagnitude != 0) {\n            configCache.fundingDecreaseFactorPerSecond = dataStore.getUint(Keys.fundingDecreaseFactorPerSecondKey(market));\n            uint256 decreaseValue = configCache.fundingDecreaseFactorPerSecond * durationInSeconds;\n\n            if (cache.savedFundingFactorPerSecondMagnitude <= decreaseValue) {\n                // set the funding factor to 1 or -1 depending on the original savedFundingFactorPerSecond\n                cache.nextSavedFundingFactorPerSecond = cache.savedFundingFactorPerSecond / cache.savedFundingFactorPerSecondMagnitude.toInt256();\n            } else {\n                // reduce the original savedFundingFactorPerSecond while keeping the original sign of the savedFundingFactorPerSecond\n                int256 sign = cache.savedFundingFactorPerSecond / cache.savedFundingFactorPerSecondMagnitude.toInt256();\n                cache.nextSavedFundingFactorPerSecond = (cache.savedFundingFactorPerSecondMagnitude - decreaseValue).toInt256() * sign;\n            }\n        }\n\n        configCache.minFundingFactorPerSecond = dataStore.getUint(Keys.minFundingFactorPerSecondKey(market));\n        configCache.maxFundingFactorPerSecond = dataStore.getUint(Keys.maxFundingFactorPerSecondKey(market));\n\n        cache.nextSavedFundingFactorPerSecond = Calc.boundMagnitude(\n            cache.nextSavedFundingFactorPerSecond,\n            0,\n            configCache.maxFundingFactorPerSecond\n        );\n\n        cache.nextSavedFundingFactorPerSecondWithMinBound = Calc.boundMagnitude(\n            cache.nextSavedFundingFactorPerSecond,\n            configCache.minFundingFactorPerSecond,\n            configCache.maxFundingFactorPerSecond\n        );\n\n        return (\n            cache.nextSavedFundingFactorPerSecondWithMinBound.abs(),\n            cache.nextSavedFundingFactorPerSecondWithMinBound > 0,\n            cache.nextSavedFundingFactorPerSecond\n        );\n    }\n\n    // store funding values as token amount per (Precision.FLOAT_PRECISION_SQRT / Precision.FLOAT_PRECISION) of USD size\n    function getFundingAmountPerSizeDelta(\n        uint256 fundingUsd,\n        uint256 openInterest,\n        uint256 tokenPrice,\n        bool roundUpMagnitude\n    ) internal pure returns (uint256) {\n        if (fundingUsd == 0 || openInterest == 0) { return 0; }\n\n        uint256 fundingUsdPerSize = Precision.mulDiv(\n            fundingUsd,\n            Precision.FLOAT_PRECISION * Precision.FLOAT_PRECISION_SQRT,\n            openInterest,\n            roundUpMagnitude\n        );\n\n        if (roundUpMagnitude) {\n            return Calc.roundUpDivision(fundingUsdPerSize, tokenPrice);\n        } else {\n            return fundingUsdPerSize / tokenPrice;\n        }\n    }\n\n    // @dev update the cumulative borrowing factor for a market\n    // @param dataStore DataStore\n    // @param market the market to update\n    // @param longToken the market's long token\n    // @param shortToken the market's short token\n    // @param prices the prices of the market tokens\n    // @param isLong whether to update the long or short side\n    function updateCumulativeBorrowingFactor(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) external {\n        (/* uint256 nextCumulativeBorrowingFactor */, uint256 delta) = getNextCumulativeBorrowingFactor(\n            dataStore,\n            market,\n            prices,\n            isLong\n        );\n\n        incrementCumulativeBorrowingFactor(\n            dataStore,\n            eventEmitter,\n            market.marketToken,\n            isLong,\n            delta\n        );\n\n        dataStore.setUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market.marketToken, isLong), Chain.currentTimestamp());\n    }\n\n    // @dev get the ratio of pnl to pool value\n    // @param dataStore DataStore\n    // @param oracle Oracle\n    // @param market the trading market\n    // @param isLong whether to get the value for the long or short side\n    // @param maximize whether to maximize the factor\n    // @return (pnl of positions) / (long or short pool value)\n    function getPnlToPoolFactor(\n        DataStore dataStore,\n        Oracle oracle,\n        address market,\n        bool isLong,\n        bool maximize\n    ) internal view returns (int256) {\n        Market.Props memory _market = getEnabledMarket(dataStore, market);\n        MarketPrices memory prices = MarketPrices(\n            oracle.getPrimaryPrice(_market.indexToken),\n            oracle.getPrimaryPrice(_market.longToken),\n            oracle.getPrimaryPrice(_market.shortToken)\n        );\n\n        return getPnlToPoolFactor(dataStore, _market, prices, isLong, maximize);\n    }\n\n    // @dev get the ratio of pnl to pool value\n    // @param dataStore DataStore\n    // @param market the market values\n    // @param prices the prices of the market tokens\n    // @param isLong whether to get the value for the long or short side\n    // @param maximize whether to maximize the factor\n    // @return (pnl of positions) / (long or short pool value)\n    function getPnlToPoolFactor(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong,\n        bool maximize\n    ) internal view returns (int256) {\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, !maximize);\n\n        if (poolUsd == 0) {\n            return 0;\n        }\n\n        int256 pnl = getPnl(\n            dataStore,\n            market,\n            prices.indexTokenPrice,\n            isLong,\n            maximize\n        );\n\n        return Precision.toFactor(pnl, poolUsd);\n    }\n\n    function validateOpenInterest(\n        DataStore dataStore,\n        Market.Props memory market,\n        bool isLong\n    ) internal view {\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\n        uint256 maxOpenInterest = getMaxOpenInterest(dataStore, market.marketToken, isLong);\n\n        if (openInterest > maxOpenInterest) {\n            revert Errors.MaxOpenInterestExceeded(openInterest, maxOpenInterest);\n        }\n    }\n\n    // @dev validate that the pool amount is within the max allowed amount\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param token the token to check\n    function validatePoolAmount(\n        DataStore dataStore,\n        Market.Props memory market,\n        address token\n    ) internal view {\n        uint256 poolAmount = getPoolAmount(dataStore, market, token);\n        uint256 maxPoolAmount = getMaxPoolAmount(dataStore, market.marketToken, token);\n\n        if (poolAmount > maxPoolAmount) {\n            revert Errors.MaxPoolAmountExceeded(poolAmount, maxPoolAmount);\n        }\n    }\n\n    function validatePoolUsdForDeposit(\n        DataStore dataStore,\n        Market.Props memory market,\n        address token,\n        uint256 tokenPrice\n    ) internal view {\n        uint256 poolAmount = getPoolAmount(dataStore, market, token);\n        uint256 poolUsd = poolAmount * tokenPrice;\n        uint256 maxPoolUsd = getMaxPoolUsdForDeposit(dataStore, market.marketToken, token);\n\n        if (poolUsd > maxPoolUsd) {\n            revert Errors.MaxPoolUsdForDepositExceeded(poolUsd, maxPoolUsd);\n        }\n    }\n\n    // @dev validate that the amount of tokens required to be reserved\n    // is below the configured threshold\n    // @param dataStore DataStore\n    // @param market the market values\n    // @param prices the prices of the market tokens\n    // @param isLong whether to check the long or short side\n    function validateReserve(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) internal view {\n        // poolUsd is used instead of pool amount as the indexToken may not match the longToken\n        // additionally, the shortToken may not be a stablecoin\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, false);\n        uint256 reserveFactor = getReserveFactor(dataStore, market.marketToken, isLong);\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\n\n        uint256 reservedUsd = getReservedUsd(\n            dataStore,\n            market,\n            prices,\n            isLong\n        );\n\n        if (reservedUsd > maxReservedUsd) {\n            revert Errors.InsufficientReserve(reservedUsd, maxReservedUsd);\n        }\n    }\n\n    // @dev validate that the amount of tokens required to be reserved for open interest\n    // is below the configured threshold\n    // @param dataStore DataStore\n    // @param market the market values\n    // @param prices the prices of the market tokens\n    // @param isLong whether to check the long or short side\n    function validateOpenInterestReserve(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) internal view {\n        // poolUsd is used instead of pool amount as the indexToken may not match the longToken\n        // additionally, the shortToken may not be a stablecoin\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, false);\n        uint256 reserveFactor = getOpenInterestReserveFactor(dataStore, market.marketToken, isLong);\n        uint256 maxReservedUsd = Precision.applyFactor(poolUsd, reserveFactor);\n\n        uint256 reservedUsd = getReservedUsd(\n            dataStore,\n            market,\n            prices,\n            isLong\n        );\n\n        if (reservedUsd > maxReservedUsd) {\n            revert Errors.InsufficientReserveForOpenInterest(reservedUsd, maxReservedUsd);\n        }\n    }\n\n    // @dev update the swap impact pool amount, if it is a positive impact amount\n    // cap the impact amount to the amount available in the swap impact pool\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to apply to\n    // @param token the token to apply to\n    // @param tokenPrice the price of the token\n    // @param priceImpactUsd the USD price impact\n    function applySwapImpactWithCap(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        Price.Props memory tokenPrice,\n        int256 priceImpactUsd\n    ) internal returns (int256, uint256) {\n        (int256 impactAmount, uint256 cappedDiffUsd) = getSwapImpactAmountWithCap(\n            dataStore,\n            market,\n            token,\n            tokenPrice,\n            priceImpactUsd\n        );\n\n        // if there is a positive impact, the impact pool amount should be reduced\n        // if there is a negative impact, the impact pool amount should be increased\n        applyDeltaToSwapImpactPool(\n            dataStore,\n            eventEmitter,\n            market,\n            token,\n            -impactAmount\n        );\n\n        return (impactAmount, cappedDiffUsd);\n    }\n\n    function getSwapImpactAmountWithCap(\n        DataStore dataStore,\n        address market,\n        address token,\n        Price.Props memory tokenPrice,\n        int256 priceImpactUsd\n    ) internal view returns (int256, uint256) {\n        int256 impactAmount;\n        uint256 cappedDiffUsd;\n\n        if (priceImpactUsd > 0) {\n            // positive impact: minimize impactAmount, use tokenPrice.max\n            // round positive impactAmount down, this will be deducted from the swap impact pool for the user\n            impactAmount = priceImpactUsd / tokenPrice.max.toInt256();\n\n            int256 maxImpactAmount = getSwapImpactPoolAmount(dataStore, market, token).toInt256();\n            if (impactAmount > maxImpactAmount) {\n                cappedDiffUsd = (impactAmount - maxImpactAmount).toUint256() * tokenPrice.max;\n                impactAmount = maxImpactAmount;\n            }\n        } else {\n            // negative impact: maximize impactAmount, use tokenPrice.min\n            // round negative impactAmount up, this will be deducted from the user\n            impactAmount = Calc.roundUpMagnitudeDivision(priceImpactUsd, tokenPrice.min);\n        }\n\n        return (impactAmount, cappedDiffUsd);\n    }\n\n    // @dev get the funding amount to be deducted or distributed\n    //\n    // @param latestFundingAmountPerSize the latest funding amount per size\n    // @param positionFundingAmountPerSize the funding amount per size for the position\n    // @param positionSizeInUsd the position size in USD\n    // @param roundUpMagnitude whether the round up the result\n    //\n    // @return fundingAmount\n    function getFundingAmount(\n        uint256 latestFundingAmountPerSize,\n        uint256 positionFundingAmountPerSize,\n        uint256 positionSizeInUsd,\n        bool roundUpMagnitude\n    ) internal pure returns (uint256) {\n        uint256 fundingDiffFactor = (latestFundingAmountPerSize - positionFundingAmountPerSize);\n\n        // a user could avoid paying funding fees by continually updating the position\n        // before the funding fee becomes large enough to be chargeable\n        // to avoid this, funding fee amounts should be rounded up\n        //\n        // this could lead to large additional charges if the token has a low number of decimals\n        // or if the token's value is very high, so care should be taken to inform users of this\n        //\n        // if the calculation is for the claimable amount, the amount should be rounded down instead\n\n        // divide the result by Precision.FLOAT_PRECISION * Precision.FLOAT_PRECISION_SQRT as the fundingAmountPerSize values\n        // are stored based on FLOAT_PRECISION_SQRT values\n        return Precision.mulDiv(\n            positionSizeInUsd,\n            fundingDiffFactor,\n            Precision.FLOAT_PRECISION * Precision.FLOAT_PRECISION_SQRT,\n            roundUpMagnitude\n        );\n    }\n\n    // @dev get the borrowing fees for a position, assumes that cumulativeBorrowingFactor\n    // has already been updated to the latest value\n    // @param dataStore DataStore\n    // @param position Position.Props\n    // @return the borrowing fees for a position\n    function getBorrowingFees(DataStore dataStore, Position.Props memory position) internal view returns (uint256) {\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, position.market(), position.isLong());\n        if (position.borrowingFactor() > cumulativeBorrowingFactor) {\n            revert Errors.UnexpectedBorrowingFactor(position.borrowingFactor(), cumulativeBorrowingFactor);\n        }\n        uint256 diffFactor = cumulativeBorrowingFactor - position.borrowingFactor();\n        return Precision.applyFactor(position.sizeInUsd(), diffFactor);\n    }\n\n    // @dev get the borrowing fees for a position by calculating the latest cumulativeBorrowingFactor\n    // @param dataStore DataStore\n    // @param position Position.Props\n    // @param market the position's market\n    // @param prices the prices of the market tokens\n    // @return the borrowing fees for a position\n    function getNextBorrowingFees(DataStore dataStore, Position.Props memory position, Market.Props memory market, MarketPrices memory prices) internal view returns (uint256) {\n        (uint256 nextCumulativeBorrowingFactor, /* uint256 delta */) = getNextCumulativeBorrowingFactor(\n            dataStore,\n            market,\n            prices,\n            position.isLong()\n        );\n\n        if (position.borrowingFactor() > nextCumulativeBorrowingFactor) {\n            revert Errors.UnexpectedBorrowingFactor(position.borrowingFactor(), nextCumulativeBorrowingFactor);\n        }\n        uint256 diffFactor = nextCumulativeBorrowingFactor - position.borrowingFactor();\n        return Precision.applyFactor(position.sizeInUsd(), diffFactor);\n    }\n\n    // @dev get the total reserved USD required for positions\n    // @param market the market to check\n    // @param prices the prices of the market tokens\n    // @param isLong whether to get the value for the long or short side\n    function getReservedUsd(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 reservedUsd;\n        if (isLong) {\n            // for longs calculate the reserved USD based on the open interest and current indexTokenPrice\n            // this works well for e.g. an ETH / USD market with long collateral token as WETH\n            // the available amount to be reserved would scale with the price of ETH\n            // this also works for e.g. a SOL / USD market with long collateral token as WETH\n            // if the price of SOL increases more than the price of ETH, additional amounts would be\n            // automatically reserved\n            uint256 openInterestInTokens = getOpenInterestInTokens(dataStore, market, isLong);\n            reservedUsd = openInterestInTokens * prices.indexTokenPrice.max;\n        } else {\n            // for shorts use the open interest as the reserved USD value\n            // this works well for e.g. an ETH / USD market with short collateral token as USDC\n            // the available amount to be reserved would not change with the price of ETH\n            reservedUsd = getOpenInterest(dataStore, market, isLong);\n        }\n\n        return reservedUsd;\n    }\n\n    // @dev get the virtual inventory for swaps\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @return returns (has virtual inventory, virtual long token inventory, virtual short token inventory)\n    function getVirtualInventoryForSwaps(DataStore dataStore, address market) internal view returns (bool, uint256, uint256) {\n        bytes32 virtualMarketId = dataStore.getBytes32(Keys.virtualMarketIdKey(market));\n        if (virtualMarketId == bytes32(0)) {\n            return (false, 0, 0);\n        }\n\n        return (\n            true,\n            dataStore.getUint(Keys.virtualInventoryForSwapsKey(virtualMarketId, true)),\n            dataStore.getUint(Keys.virtualInventoryForSwapsKey(virtualMarketId, false))\n        );\n    }\n\n    function getIsLongToken(Market.Props memory market, address token) internal pure returns (bool) {\n        if (token != market.longToken && token != market.shortToken) {\n            revert Errors.UnexpectedTokenForVirtualInventory(token, market.marketToken);\n        }\n\n        return token == market.longToken;\n    }\n\n    // @dev get the virtual inventory for positions\n    // @param dataStore DataStore\n    // @param token the token to check\n    function getVirtualInventoryForPositions(DataStore dataStore, address token) internal view returns (bool, int256) {\n        bytes32 virtualTokenId = dataStore.getBytes32(Keys.virtualTokenIdKey(token));\n        if (virtualTokenId == bytes32(0)) {\n            return (false, 0);\n        }\n\n        return (true, dataStore.getInt(Keys.virtualInventoryForPositionsKey(virtualTokenId)));\n    }\n\n    // @dev update the virtual inventory for swaps\n    // @param dataStore DataStore\n    // @param marketAddress the market to update\n    // @param token the token to update\n    // @param delta the update amount\n    function applyDeltaToVirtualInventoryForSwaps(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Market.Props memory market,\n        address token,\n        int256 delta\n    ) internal returns (bool, uint256) {\n        bytes32 virtualMarketId = dataStore.getBytes32(Keys.virtualMarketIdKey(market.marketToken));\n        if (virtualMarketId == bytes32(0)) {\n            return (false, 0);\n        }\n\n        bool isLongToken = getIsLongToken(market, token);\n\n        uint256 nextValue = dataStore.applyBoundedDeltaToUint(\n            Keys.virtualInventoryForSwapsKey(virtualMarketId, isLongToken),\n            delta\n        );\n\n        MarketEventUtils.emitVirtualSwapInventoryUpdated(eventEmitter, market.marketToken, isLongToken, virtualMarketId, delta, nextValue);\n\n        return (true, nextValue);\n    }\n\n    // @dev update the virtual inventory for positions\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param token the token to update\n    // @param delta the update amount\n    function applyDeltaToVirtualInventoryForPositions(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address token,\n        int256 delta\n    ) internal returns (bool, int256) {\n        bytes32 virtualTokenId = dataStore.getBytes32(Keys.virtualTokenIdKey(token));\n        if (virtualTokenId == bytes32(0)) {\n            return (false, 0);\n        }\n\n        int256 nextValue = dataStore.applyDeltaToInt(\n            Keys.virtualInventoryForPositionsKey(virtualTokenId),\n            delta\n        );\n\n        MarketEventUtils.emitVirtualPositionInventoryUpdated(eventEmitter, token, virtualTokenId, delta, nextValue);\n\n        return (true, nextValue);\n    }\n\n    // @dev get the open interest of a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    function getOpenInterest(\n        DataStore dataStore,\n        Market.Props memory market\n    ) internal view returns (uint256) {\n        uint256 longOpenInterest = getOpenInterest(dataStore, market, true);\n        uint256 shortOpenInterest = getOpenInterest(dataStore, market, false);\n\n        return longOpenInterest + shortOpenInterest;\n    }\n\n    // @dev get either the long or short open interest for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param isLong whether to get the long or short open interest\n    // @return the long or short open interest for a market\n    function getOpenInterest(\n        DataStore dataStore,\n        Market.Props memory market,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\n        uint256 openInterestUsingLongTokenAsCollateral = getOpenInterest(dataStore, market.marketToken, market.longToken, isLong, divisor);\n        uint256 openInterestUsingShortTokenAsCollateral = getOpenInterest(dataStore, market.marketToken, market.shortToken, isLong, divisor);\n\n        return openInterestUsingLongTokenAsCollateral + openInterestUsingShortTokenAsCollateral;\n    }\n\n    // @dev the long and short open interest for a market based on the collateral token used\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param collateralToken the collateral token to check\n    // @param isLong whether to check the long or short side\n    function getOpenInterest(\n        DataStore dataStore,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 divisor\n    ) internal view returns (uint256) {\n        return dataStore.getUint(Keys.openInterestKey(market, collateralToken, isLong)) / divisor;\n    }\n\n    // this is used to divide the values of getPoolAmount and getOpenInterest\n    // if the longToken and shortToken are the same, then these values have to be divided by two\n    // to avoid double counting\n    function getPoolDivisor(address longToken, address shortToken) internal pure returns (uint256) {\n        return longToken == shortToken ? 2 : 1;\n    }\n\n    // @dev the long and short open interest in tokens for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param isLong whether to check the long or short side\n    function getOpenInterestInTokens(\n        DataStore dataStore,\n        Market.Props memory market,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 divisor = getPoolDivisor(market.longToken, market.shortToken);\n        uint256 openInterestUsingLongTokenAsCollateral = getOpenInterestInTokens(dataStore, market.marketToken, market.longToken, isLong, divisor);\n        uint256 openInterestUsingShortTokenAsCollateral = getOpenInterestInTokens(dataStore, market.marketToken, market.shortToken, isLong, divisor);\n\n        return openInterestUsingLongTokenAsCollateral + openInterestUsingShortTokenAsCollateral;\n    }\n\n    // @dev the long and short open interest in tokens for a market based on the collateral token used\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param collateralToken the collateral token to check\n    // @param isLong whether to check the long or short side\n    function getOpenInterestInTokens(\n        DataStore dataStore,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 divisor\n    ) internal view returns (uint256) {\n        return dataStore.getUint(Keys.openInterestInTokensKey(market, collateralToken, isLong)) / divisor;\n    }\n\n    // @dev get the sum of open interest and pnl for a market\n    // getOpenInterestInTokens * tokenPrice would not reflect pending positive pnl\n    // for short positions, so getOpenInterestWithPnl should be used if that info is needed\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param indexTokenPrice the price of the index token\n    // @param isLong whether to check the long or short side\n    // @param maximize whether to maximize or minimize the value\n    // @return the sum of open interest and pnl for a market\n    function getOpenInterestWithPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        bool isLong,\n        bool maximize\n    ) internal view returns (int256) {\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\n        int256 pnl = getPnl(dataStore, market, indexTokenPrice, isLong, maximize);\n        return Calc.sumReturnInt256(openInterest, pnl);\n    }\n\n    // @dev get the max position impact factor for decreasing position\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isPositive whether the price impact is positive or negative\n    function getMaxPositionImpactFactor(DataStore dataStore, address market, bool isPositive) internal view returns (uint256) {\n        (uint256 maxPositiveImpactFactor, uint256 maxNegativeImpactFactor) = getMaxPositionImpactFactors(dataStore, market);\n\n        return isPositive ? maxPositiveImpactFactor : maxNegativeImpactFactor;\n    }\n\n    function getMaxPositionImpactFactors(DataStore dataStore, address market) internal view returns (uint256, uint256) {\n        uint256 maxPositiveImpactFactor = dataStore.getUint(Keys.maxPositionImpactFactorKey(market, true));\n        uint256 maxNegativeImpactFactor = dataStore.getUint(Keys.maxPositionImpactFactorKey(market, false));\n\n        if (maxPositiveImpactFactor > maxNegativeImpactFactor) {\n            maxPositiveImpactFactor = maxNegativeImpactFactor;\n        }\n\n        return (maxPositiveImpactFactor, maxNegativeImpactFactor);\n    }\n\n    // @dev get the max position impact factor for liquidations\n    // @param dataStore DataStore\n    // @param market the market to check\n    function getMaxPositionImpactFactorForLiquidations(DataStore dataStore, address market) internal view returns (uint256) {\n        return dataStore.getUint(Keys.maxPositionImpactFactorForLiquidationsKey(market));\n    }\n\n    // @dev get the min collateral factor\n    // @param dataStore DataStore\n    // @param market the market to check\n    function getMinCollateralFactor(DataStore dataStore, address market) internal view returns (uint256) {\n        return dataStore.getUint(Keys.minCollateralFactorKey(market));\n    }\n\n    // @dev get the min collateral factor for open interest multiplier\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether it is for the long or short side\n    function getMinCollateralFactorForOpenInterestMultiplier(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.minCollateralFactorForOpenInterestMultiplierKey(market, isLong));\n    }\n\n    // @dev get the min collateral factor for open interest\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param openInterestDelta the change in open interest\n    // @param isLong whether it is for the long or short side\n    function getMinCollateralFactorForOpenInterest(\n        DataStore dataStore,\n        Market.Props memory market,\n        int256 openInterestDelta,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 openInterest = getOpenInterest(dataStore, market, isLong);\n        openInterest = Calc.sumReturnUint256(openInterest, openInterestDelta);\n        uint256 multiplierFactor = getMinCollateralFactorForOpenInterestMultiplier(dataStore, market.marketToken, isLong);\n        return Precision.applyFactor(openInterest, multiplierFactor);\n    }\n\n    // @dev get the total amount of position collateral for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param collateralToken the collateralToken to check\n    // @param isLong whether to get the value for longs or shorts\n    // @return the total amount of position collateral for a market\n    function getCollateralSum(DataStore dataStore, address market, address collateralToken, bool isLong, uint256 divisor) internal view returns (uint256) {\n        return dataStore.getUint(Keys.collateralSumKey(market, collateralToken, isLong)) / divisor;\n    }\n\n    // @dev get the reserve factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to get the value for longs or shorts\n    // @return the reserve factor for a market\n    function getReserveFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.reserveFactorKey(market, isLong));\n    }\n\n    // @dev get the open interest reserve factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to get the value for longs or shorts\n    // @return the open interest reserve factor for a market\n    function getOpenInterestReserveFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.openInterestReserveFactorKey(market, isLong));\n    }\n\n    // @dev get the max pnl factor for a market\n    // @param dataStore DataStore\n    // @param pnlFactorType the type of the pnl factor\n    // @param market the market to check\n    // @param isLong whether to get the value for longs or shorts\n    // @return the max pnl factor for a market\n    function getMaxPnlFactor(DataStore dataStore, bytes32 pnlFactorType, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.maxPnlFactorKey(pnlFactorType, market, isLong));\n    }\n\n    // @dev get the min pnl factor after ADL\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    function getMinPnlFactorAfterAdl(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.minPnlFactorAfterAdlKey(market, isLong));\n    }\n\n    // @dev get the funding factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @return the funding factor for a market\n    function getFundingFactor(DataStore dataStore, address market) internal view returns (uint256) {\n        return dataStore.getUint(Keys.fundingFactorKey(market));\n    }\n\n    // @dev get the saved funding factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @return the saved funding factor for a market\n    function getSavedFundingFactorPerSecond(DataStore dataStore, address market) internal view returns (int256) {\n        return dataStore.getInt(Keys.savedFundingFactorPerSecondKey(market));\n    }\n\n    // @dev set the saved funding factor\n    // @param dataStore DataStore\n    // @param market the market to set the funding factor for\n    function setSavedFundingFactorPerSecond(DataStore dataStore, address market, int256 value) internal returns (int256) {\n        return dataStore.setInt(Keys.savedFundingFactorPerSecondKey(market), value);\n    }\n\n    // @dev get the funding exponent factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @return the funding exponent factor for a market\n    function getFundingExponentFactor(DataStore dataStore, address market) internal view returns (uint256) {\n        return dataStore.getUint(Keys.fundingExponentFactorKey(market));\n    }\n\n    // @dev get the funding fee amount per size for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param collateralToken the collateralToken to check\n    // @param isLong whether to check the long or short size\n    // @return the funding fee amount per size for a market based on collateralToken\n    function getFundingFeeAmountPerSize(DataStore dataStore, address market, address collateralToken, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.fundingFeeAmountPerSizeKey(market, collateralToken, isLong));\n    }\n\n    // @dev get the claimable funding amount per size for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param collateralToken the collateralToken to check\n    // @param isLong whether to check the long or short size\n    // @return the claimable funding amount per size for a market based on collateralToken\n    function getClaimableFundingAmountPerSize(DataStore dataStore, address market, address collateralToken, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.claimableFundingAmountPerSizeKey(market, collateralToken, isLong));\n    }\n\n    // @dev apply delta to the funding fee amount per size for a market\n    // @param dataStore DataStore\n    // @param market the market to set\n    // @param collateralToken the collateralToken to set\n    // @param isLong whether to set it for the long or short side\n    // @param delta the delta to increment by\n    function applyDeltaToFundingFeeAmountPerSize(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 delta\n    ) internal {\n        if (delta == 0) { return; }\n\n        uint256 nextValue = dataStore.applyDeltaToUint(\n            Keys.fundingFeeAmountPerSizeKey(market, collateralToken, isLong),\n            delta\n        );\n\n        MarketEventUtils.emitFundingFeeAmountPerSizeUpdated(\n            eventEmitter,\n            market,\n            collateralToken,\n            isLong,\n            delta,\n            nextValue\n        );\n    }\n\n    // @dev apply delta to the claimable funding amount per size for a market\n    // @param dataStore DataStore\n    // @param market the market to set\n    // @param collateralToken the collateralToken to set\n    // @param isLong whether to set it for the long or short side\n    // @param delta the delta to increment by\n    function applyDeltaToClaimableFundingAmountPerSize(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address collateralToken,\n        bool isLong,\n        uint256 delta\n    ) internal {\n        if (delta == 0) { return; }\n\n        uint256 nextValue = dataStore.applyDeltaToUint(\n            Keys.claimableFundingAmountPerSizeKey(market, collateralToken, isLong),\n            delta\n        );\n\n        MarketEventUtils.emitClaimableFundingAmountPerSizeUpdated(\n            eventEmitter,\n            market,\n            collateralToken,\n            isLong,\n            delta,\n            nextValue\n        );\n    }\n\n    // @dev get the number of seconds since funding was updated for a market\n    // @param market the market to check\n    // @return the number of seconds since funding was updated for a market\n    function getSecondsSinceFundingUpdated(DataStore dataStore, address market) internal view returns (uint256) {\n        uint256 updatedAt = dataStore.getUint(Keys.fundingUpdatedAtKey(market));\n        if (updatedAt == 0) { return 0; }\n        return Chain.currentTimestamp() - updatedAt;\n    }\n\n    // @dev get the borrowing factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @return the borrowing factor for a market\n    function getBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.borrowingFactorKey(market, isLong));\n    }\n\n    function getOptimalUsageFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.optimalUsageFactorKey(market, isLong));\n    }\n\n    // @dev get the borrowing exponent factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @return the borrowing exponent factor for a market\n    function getBorrowingExponentFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.borrowingExponentFactorKey(market, isLong));\n    }\n\n    // @dev get the cumulative borrowing factor for a market\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @return the cumulative borrowing factor for a market\n    function getCumulativeBorrowingFactor(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorKey(market, isLong));\n    }\n\n    // @dev increase the cumulative borrowing factor\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param market the market to increment the borrowing factor for\n    // @param isLong whether to increment the long or short side\n    // @param delta the increase amount\n    function incrementCumulativeBorrowingFactor(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        bool isLong,\n        uint256 delta\n    ) internal {\n        uint256 nextCumulativeBorrowingFactor = dataStore.incrementUint(\n            Keys.cumulativeBorrowingFactorKey(market, isLong),\n            delta\n        );\n\n        MarketEventUtils.emitBorrowingFactorUpdated(\n            eventEmitter,\n            market,\n            isLong,\n            delta,\n            nextCumulativeBorrowingFactor\n        );\n    }\n\n    // @dev get the timestamp of when the cumulative borrowing factor was last updated\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @return the timestamp of when the cumulative borrowing factor was last updated\n    function getCumulativeBorrowingFactorUpdatedAt(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.cumulativeBorrowingFactorUpdatedAtKey(market, isLong));\n    }\n\n    // @dev get the number of seconds since the cumulative borrowing factor was last updated\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @return the number of seconds since the cumulative borrowing factor was last updated\n    function getSecondsSinceCumulativeBorrowingFactorUpdated(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        uint256 updatedAt = getCumulativeBorrowingFactorUpdatedAt(dataStore, market, isLong);\n        if (updatedAt == 0) { return 0; }\n        return Chain.currentTimestamp() - updatedAt;\n    }\n\n    // @dev update the total borrowing amount after a position changes size\n    // this is the sum of all position.borrowingFactor * position.sizeInUsd\n    // @param dataStore DataStore\n    // @param market the market to update\n    // @param isLong whether to update the long or short side\n    // @param prevPositionSizeInUsd the previous position size in USD\n    // @param prevPositionBorrowingFactor the previous position borrowing factor\n    // @param nextPositionSizeInUsd the next position size in USD\n    // @param nextPositionBorrowingFactor the next position borrowing factor\n    function updateTotalBorrowing(\n        DataStore dataStore,\n        address market,\n        bool isLong,\n        uint256 prevPositionSizeInUsd,\n        uint256 prevPositionBorrowingFactor,\n        uint256 nextPositionSizeInUsd,\n        uint256 nextPositionBorrowingFactor\n    ) external {\n        uint256 totalBorrowing = getNextTotalBorrowing(\n            dataStore,\n            market,\n            isLong,\n            prevPositionSizeInUsd,\n            prevPositionBorrowingFactor,\n            nextPositionSizeInUsd,\n            nextPositionBorrowingFactor\n        );\n\n        setTotalBorrowing(dataStore, market, isLong, totalBorrowing);\n    }\n\n    // @dev get the next total borrowing amount after a position changes size\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @param prevPositionSizeInUsd the previous position size in USD\n    // @param prevPositionBorrowingFactor the previous position borrowing factor\n    // @param nextPositionSizeInUsd the next position size in USD\n    // @param nextPositionBorrowingFactor the next position borrowing factor\n    function getNextTotalBorrowing(\n        DataStore dataStore,\n        address market,\n        bool isLong,\n        uint256 prevPositionSizeInUsd,\n        uint256 prevPositionBorrowingFactor,\n        uint256 nextPositionSizeInUsd,\n        uint256 nextPositionBorrowingFactor\n    ) internal view returns (uint256) {\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market, isLong);\n        totalBorrowing -= Precision.applyFactor(prevPositionSizeInUsd, prevPositionBorrowingFactor);\n        totalBorrowing += Precision.applyFactor(nextPositionSizeInUsd, nextPositionBorrowingFactor);\n\n        return totalBorrowing;\n    }\n\n    // @dev get the next cumulative borrowing factor\n    // @param dataStore DataStore\n    // @param prices the prices of the market tokens\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param isLong whether to check the long or short side\n    function getNextCumulativeBorrowingFactor(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) internal view returns (uint256, uint256) {\n        uint256 durationInSeconds = getSecondsSinceCumulativeBorrowingFactorUpdated(dataStore, market.marketToken, isLong);\n        uint256 borrowingFactorPerSecond = getBorrowingFactorPerSecond(\n            dataStore,\n            market,\n            prices,\n            isLong\n        );\n\n        uint256 cumulativeBorrowingFactor = getCumulativeBorrowingFactor(dataStore, market.marketToken, isLong);\n\n        uint256 delta = durationInSeconds * borrowingFactorPerSecond;\n        uint256 nextCumulativeBorrowingFactor = cumulativeBorrowingFactor + delta;\n        return (nextCumulativeBorrowingFactor, delta);\n    }\n\n    // @dev get the borrowing factor per second\n    // @param dataStore DataStore\n    // @param market the market to get the borrowing factor per second for\n    // @param prices the prices of the market tokens\n    // @param isLong whether to get the factor for the long or short side\n    function getBorrowingFactorPerSecond(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 reservedUsd = getReservedUsd(\n            dataStore,\n            market,\n            prices,\n            isLong\n        );\n\n        if (reservedUsd == 0) { return 0; }\n\n        // check if the borrowing fee for the smaller side should be skipped\n        // if skipBorrowingFeeForSmallerSide is true, and the longOpenInterest is exactly the same as the shortOpenInterest\n        // then the borrowing fee would be charged for both sides, this should be very rare\n        bool skipBorrowingFeeForSmallerSide = dataStore.getBool(Keys.SKIP_BORROWING_FEE_FOR_SMALLER_SIDE);\n        if (skipBorrowingFeeForSmallerSide) {\n            uint256 longOpenInterest = getOpenInterest(dataStore, market, true);\n            uint256 shortOpenInterest = getOpenInterest(dataStore, market, false);\n\n            // if getting the borrowing factor for longs and if the longOpenInterest\n            // is smaller than the shortOpenInterest, then return zero\n            if (isLong && longOpenInterest < shortOpenInterest) {\n                return 0;\n            }\n\n            // if getting the borrowing factor for shorts and if the shortOpenInterest\n            // is smaller than the longOpenInterest, then return zero\n            if (!isLong && shortOpenInterest < longOpenInterest) {\n                return 0;\n            }\n        }\n\n        uint256 poolUsd = getPoolUsdWithoutPnl(dataStore, market, prices, isLong, false);\n\n        if (poolUsd == 0) {\n            revert Errors.UnableToGetBorrowingFactorEmptyPoolUsd();\n        }\n\n        uint256 optimalUsageFactor = getOptimalUsageFactor(dataStore, market.marketToken, isLong);\n\n        if (optimalUsageFactor != 0) {\n            return getKinkBorrowingFactor(\n                dataStore,\n                market,\n                isLong,\n                reservedUsd,\n                poolUsd,\n                optimalUsageFactor\n            );\n        }\n\n        uint256 borrowingExponentFactor = getBorrowingExponentFactor(dataStore, market.marketToken, isLong);\n        uint256 reservedUsdAfterExponent = Precision.applyExponentFactor(reservedUsd, borrowingExponentFactor);\n\n        uint256 reservedUsdToPoolFactor = Precision.toFactor(reservedUsdAfterExponent, poolUsd);\n        uint256 borrowingFactor = getBorrowingFactor(dataStore, market.marketToken, isLong);\n\n        return Precision.applyFactor(reservedUsdToPoolFactor, borrowingFactor);\n    }\n\n    function getKinkBorrowingFactor(\n        DataStore dataStore,\n        Market.Props memory market,\n        bool isLong,\n        uint256 reservedUsd,\n        uint256 poolUsd,\n        uint256 optimalUsageFactor\n    ) internal view returns (uint256) {\n        uint256 usageFactor = getUsageFactor(\n            dataStore,\n            market,\n            isLong,\n            reservedUsd,\n            poolUsd\n        );\n\n        uint256 baseBorrowingFactor = dataStore.getUint(Keys.baseBorrowingFactorKey(market.marketToken, isLong));\n\n        uint256 borrowingFactorPerSecond = Precision.applyFactor(\n            usageFactor,\n            baseBorrowingFactor\n        );\n\n        if (usageFactor > optimalUsageFactor && Precision.FLOAT_PRECISION > optimalUsageFactor) {\n            uint256 diff = usageFactor - optimalUsageFactor;\n\n            uint256 aboveOptimalUsageBorrowingFactor = dataStore.getUint(Keys.aboveOptimalUsageBorrowingFactorKey(market.marketToken, isLong));\n            uint256 additionalBorrowingFactorPerSecond;\n\n            if (aboveOptimalUsageBorrowingFactor > baseBorrowingFactor) {\n                additionalBorrowingFactorPerSecond = aboveOptimalUsageBorrowingFactor - baseBorrowingFactor;\n            }\n\n            uint256 divisor = Precision.FLOAT_PRECISION - optimalUsageFactor;\n\n            borrowingFactorPerSecond += additionalBorrowingFactorPerSecond * diff / divisor;\n        }\n\n        return borrowingFactorPerSecond;\n    }\n\n    function distributePositionImpactPool(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market\n    ) external {\n        (uint256 distributionAmount, uint256 nextPositionImpactPoolAmount) = getPendingPositionImpactPoolDistributionAmount(dataStore, market);\n\n        if (distributionAmount != 0) {\n            applyDeltaToPositionImpactPool(\n                dataStore,\n                eventEmitter,\n                market,\n                -distributionAmount.toInt256()\n            );\n\n            MarketEventUtils.emitPositionImpactPoolDistributed(\n                eventEmitter,\n                market,\n                distributionAmount,\n                nextPositionImpactPoolAmount\n            );\n        }\n\n        dataStore.setUint(Keys.positionImpactPoolDistributedAtKey(market), Chain.currentTimestamp());\n    }\n\n    function getNextPositionImpactPoolAmount(\n        DataStore dataStore,\n        address market\n    ) internal view returns (uint256) {\n        (/* uint256 distributionAmount */, uint256 nextPositionImpactPoolAmount) = getPendingPositionImpactPoolDistributionAmount(dataStore, market);\n\n        return nextPositionImpactPoolAmount;\n    }\n\n    // @return (distributionAmount, nextPositionImpactPoolAmount)\n    function getPendingPositionImpactPoolDistributionAmount(\n        DataStore dataStore,\n        address market\n    ) internal view returns (uint256, uint256) {\n        uint256 positionImpactPoolAmount = getPositionImpactPoolAmount(dataStore, market);\n        if (positionImpactPoolAmount == 0) { return (0, positionImpactPoolAmount); }\n\n        uint256 distributionRate = dataStore.getUint(Keys.positionImpactPoolDistributionRateKey(market));\n        if (distributionRate == 0) { return (0, positionImpactPoolAmount); }\n\n        uint256 minPositionImpactPoolAmount = dataStore.getUint(Keys.minPositionImpactPoolAmountKey(market));\n        if (positionImpactPoolAmount <= minPositionImpactPoolAmount) { return (0, positionImpactPoolAmount); }\n\n        uint256 maxDistributionAmount = positionImpactPoolAmount - minPositionImpactPoolAmount;\n\n        uint256 durationInSeconds = getSecondsSincePositionImpactPoolDistributed(dataStore, market);\n        uint256 distributionAmount = Precision.applyFactor(durationInSeconds, distributionRate);\n\n        if (distributionAmount > maxDistributionAmount) {\n            distributionAmount = maxDistributionAmount;\n        }\n\n        return (distributionAmount, positionImpactPoolAmount - distributionAmount);\n    }\n\n    function getSecondsSincePositionImpactPoolDistributed(\n        DataStore dataStore,\n        address market\n    ) internal view returns (uint256) {\n        uint256 distributedAt = dataStore.getUint(Keys.positionImpactPoolDistributedAtKey(market));\n        if (distributedAt == 0) { return 0; }\n        return Chain.currentTimestamp() - distributedAt;\n    }\n\n    // @dev get the total pending borrowing fees\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param isLong whether to check the long or short side\n    function getTotalPendingBorrowingFees(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong\n    ) internal view returns (uint256) {\n        uint256 openInterest = getOpenInterest(\n            dataStore,\n            market,\n            isLong\n        );\n\n        (uint256 nextCumulativeBorrowingFactor, /* uint256 delta */) = getNextCumulativeBorrowingFactor(\n            dataStore,\n            market,\n            prices,\n            isLong\n        );\n\n        uint256 totalBorrowing = getTotalBorrowing(dataStore, market.marketToken, isLong);\n\n        return Precision.applyFactor(openInterest, nextCumulativeBorrowingFactor) - totalBorrowing;\n    }\n\n    // @dev get the total borrowing value\n    // the total borrowing value is the sum of position.borrowingFactor * position.size / (10 ^ 30)\n    // for all positions of the market\n    // if borrowing APR is 1000% for 100 years, the cumulativeBorrowingFactor could be as high as 100 * 10 * (10 ** 30)\n    // (100% is 10 ** 30 so 1000% is 10 * (10 ** 30))\n    // since position.size is a USD value with 30 decimals, under this scenario, there may be overflow issues\n    // if open interest exceeds (2 ** 256) / (10 ** 30) / (100 * 10 * (10 ** 30)) => 115,792,090,000,000 USD\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @return the total borrowing value\n    function getTotalBorrowing(DataStore dataStore, address market, bool isLong) internal view returns (uint256) {\n        return dataStore.getUint(Keys.totalBorrowingKey(market, isLong));\n    }\n\n    // @dev set the total borrowing value\n    // @param dataStore DataStore\n    // @param market the market to set\n    // @param isLong whether to set the long or short side\n    // @param value the value to set to\n    function setTotalBorrowing(DataStore dataStore, address market, bool isLong, uint256 value) internal returns (uint256) {\n        return dataStore.setUint(Keys.totalBorrowingKey(market, isLong), value);\n    }\n\n    // @dev convert a USD value to number of market tokens\n    // @param usdValue the input USD value\n    // @param poolValue the value of the pool\n    // @param supply the supply of market tokens\n    // @return the number of market tokens\n    function usdToMarketTokenAmount(\n        uint256 usdValue,\n        uint256 poolValue,\n        uint256 supply\n    ) internal pure returns (uint256) {\n        // if the supply and poolValue is zero, use 1 USD as the token price\n        if (supply == 0 && poolValue == 0) {\n            return Precision.floatToWei(usdValue);\n        }\n\n        // if the supply is zero and the poolValue is more than zero,\n        // then include the poolValue for the amount of tokens minted so that\n        // the market token price after mint would be 1 USD\n        if (supply == 0 && poolValue > 0) {\n            return Precision.floatToWei(poolValue + usdValue);\n        }\n\n        // round market tokens down\n        return Precision.mulDiv(supply, usdValue, poolValue);\n    }\n\n    // @dev convert a number of market tokens to its USD value\n    // @param marketTokenAmount the input number of market tokens\n    // @param poolValue the value of the pool\n    // @param supply the supply of market tokens\n    // @return the USD value of the market tokens\n    function marketTokenAmountToUsd(\n        uint256 marketTokenAmount,\n        uint256 poolValue,\n        uint256 supply\n    ) internal pure returns (uint256) {\n        if (supply == 0) { revert Errors.EmptyMarketTokenSupply(); }\n\n        return Precision.mulDiv(poolValue, marketTokenAmount, supply);\n    }\n\n    // @dev validate that the specified market exists and is enabled\n    // @param dataStore DataStore\n    // @param marketAddress the address of the market\n    function validateEnabledMarket(DataStore dataStore, address marketAddress) internal view {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n        validateEnabledMarket(dataStore, market);\n    }\n\n    // @dev validate that the specified market exists and is enabled\n    // @param dataStore DataStore\n    // @param market the market to check\n    function validateEnabledMarket(DataStore dataStore, Market.Props memory market) internal view {\n        if (market.marketToken == address(0)) {\n            revert Errors.EmptyMarket();\n        }\n\n        bool isMarketDisabled = dataStore.getBool(Keys.isMarketDisabledKey(market.marketToken));\n        if (isMarketDisabled) {\n            revert Errors.DisabledMarket(market.marketToken);\n        }\n    }\n\n    // @dev validate that the positions can be opened in the given market\n    // @param market the market to check\n    function validatePositionMarket(DataStore dataStore, Market.Props memory market) internal view {\n        validateEnabledMarket(dataStore, market);\n\n        if (isSwapOnlyMarket(market)) {\n            revert Errors.InvalidPositionMarket(market.marketToken);\n        }\n    }\n\n    function validatePositionMarket(DataStore dataStore, address marketAddress) internal view {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n        validatePositionMarket(dataStore, market);\n    }\n\n    // @dev check if a market only supports swaps and not positions\n    // @param market the market to check\n    function isSwapOnlyMarket(Market.Props memory market) internal pure returns (bool) {\n        return market.indexToken == address(0);\n    }\n\n    // @dev check if the given token is a collateral token of the market\n    // @param market the market to check\n    // @param token the token to check\n    function isMarketCollateralToken(Market.Props memory market, address token) internal pure returns (bool) {\n        return token == market.longToken || token == market.shortToken;\n    }\n\n    // @dev validate if the given token is a collateral token of the market\n    // @param market the market to check\n    // @param token the token to check\n    function validateMarketCollateralToken(Market.Props memory market, address token) internal pure {\n        if (!isMarketCollateralToken(market, token)) {\n            revert Errors.InvalidCollateralTokenForMarket(market.marketToken, token);\n        }\n    }\n\n    // @dev get the enabled market, revert if the market does not exist or is not enabled\n    // @param dataStore DataStore\n    // @param marketAddress the address of the market\n    function getEnabledMarket(DataStore dataStore, address marketAddress) internal view returns (Market.Props memory) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n        validateEnabledMarket(dataStore, market);\n        return market;\n    }\n\n    function getSwapPathMarket(DataStore dataStore, address marketAddress) internal view returns (Market.Props memory) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n        validateSwapMarket(dataStore, market);\n        return market;\n    }\n\n    // @dev get a list of market values based on an input array of market addresses\n    // @param swapPath list of market addresses\n    function getSwapPathMarkets(DataStore dataStore, address[] memory swapPath) internal view returns (Market.Props[] memory) {\n        Market.Props[] memory markets = new Market.Props[](swapPath.length);\n\n        for (uint256 i; i < swapPath.length; i++) {\n            address marketAddress = swapPath[i];\n            markets[i] = getSwapPathMarket(dataStore, marketAddress);\n        }\n\n        return markets;\n    }\n\n    function validateSwapPath(DataStore dataStore, address[] memory swapPath) internal view {\n        uint256 maxSwapPathLength = dataStore.getUint(Keys.MAX_SWAP_PATH_LENGTH);\n        if (swapPath.length > maxSwapPathLength) {\n            revert Errors.MaxSwapPathLengthExceeded(swapPath.length, maxSwapPathLength);\n        }\n\n        for (uint256 i; i < swapPath.length; i++) {\n            address marketAddress = swapPath[i];\n            validateSwapMarket(dataStore, marketAddress);\n        }\n    }\n\n    // @dev validate that the pending pnl is below the allowed amount\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param prices the prices of the market tokens\n    // @param pnlFactorType the pnl factor type to check\n    function validateMaxPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bytes32 pnlFactorTypeForLongs,\n        bytes32 pnlFactorTypeForShorts\n    ) internal view {\n        (bool isPnlFactorExceededForLongs, int256 pnlToPoolFactorForLongs, uint256 maxPnlFactorForLongs) = isPnlFactorExceeded(\n            dataStore,\n            market,\n            prices,\n            true,\n            pnlFactorTypeForLongs\n        );\n\n        if (isPnlFactorExceededForLongs) {\n            revert Errors.PnlFactorExceededForLongs(pnlToPoolFactorForLongs, maxPnlFactorForLongs);\n        }\n\n        (bool isPnlFactorExceededForShorts, int256 pnlToPoolFactorForShorts, uint256 maxPnlFactorForShorts) = isPnlFactorExceeded(\n            dataStore,\n            market,\n            prices,\n            false,\n            pnlFactorTypeForShorts\n        );\n\n        if (isPnlFactorExceededForShorts) {\n            revert Errors.PnlFactorExceededForShorts(pnlToPoolFactorForShorts, maxPnlFactorForShorts);\n        }\n    }\n\n    // @dev check if the pending pnl exceeds the allowed amount\n    // @param dataStore DataStore\n    // @param oracle Oracle\n    // @param market the market to check\n    // @param isLong whether to check the long or short side\n    // @param pnlFactorType the pnl factor type to check\n    function isPnlFactorExceeded(\n        DataStore dataStore,\n        Oracle oracle,\n        address market,\n        bool isLong,\n        bytes32 pnlFactorType\n    ) internal view returns (bool, int256, uint256) {\n        Market.Props memory _market = getEnabledMarket(dataStore, market);\n        MarketPrices memory prices = getMarketPrices(oracle, _market);\n\n        return isPnlFactorExceeded(\n            dataStore,\n            _market,\n            prices,\n            isLong,\n            pnlFactorType\n        );\n    }\n\n    // @dev check if the pending pnl exceeds the allowed amount\n    // @param dataStore DataStore\n    // @param _market the market to check\n    // @param prices the prices of the market tokens\n    // @param isLong whether to check the long or short side\n    // @param pnlFactorType the pnl factor type to check\n    function isPnlFactorExceeded(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketPrices memory prices,\n        bool isLong,\n        bytes32 pnlFactorType\n    ) internal view returns (bool, int256, uint256) {\n        int256 pnlToPoolFactor = getPnlToPoolFactor(dataStore, market, prices, isLong, true);\n        uint256 maxPnlFactor = getMaxPnlFactor(dataStore, pnlFactorType, market.marketToken, isLong);\n\n        bool isExceeded = pnlToPoolFactor > 0 && pnlToPoolFactor.toUint256() > maxPnlFactor;\n\n        return (isExceeded, pnlToPoolFactor, maxPnlFactor);\n    }\n\n    function getUiFeeFactor(DataStore dataStore, address account) internal view returns (uint256) {\n        uint256 maxUiFeeFactor = dataStore.getUint(Keys.MAX_UI_FEE_FACTOR);\n        uint256 uiFeeFactor = dataStore.getUint(Keys.uiFeeFactorKey(account));\n\n        return uiFeeFactor < maxUiFeeFactor ? uiFeeFactor : maxUiFeeFactor;\n    }\n\n    function setUiFeeFactor(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        uint256 uiFeeFactor\n    ) internal {\n        uint256 maxUiFeeFactor = dataStore.getUint(Keys.MAX_UI_FEE_FACTOR);\n\n        if (uiFeeFactor > maxUiFeeFactor) {\n            revert Errors.InvalidUiFeeFactor(uiFeeFactor, maxUiFeeFactor);\n        }\n\n        dataStore.setUint(\n            Keys.uiFeeFactorKey(account),\n            uiFeeFactor\n        );\n\n        MarketEventUtils.emitUiFeeFactorUpdated(eventEmitter, account, uiFeeFactor);\n    }\n\n    function validateMarketTokenBalance(\n        DataStore dataStore,\n        Market.Props[] memory markets\n    ) public view {\n        for (uint256 i; i < markets.length; i++) {\n            validateMarketTokenBalance(dataStore, markets[i]);\n        }\n    }\n\n    function validateMarketTokenBalance(\n        DataStore dataStore,\n        address _market\n    ) public view {\n        Market.Props memory market = getEnabledMarket(dataStore, _market);\n        validateMarketTokenBalance(dataStore, market);\n    }\n\n    function validateMarketTokenBalance(\n        DataStore dataStore,\n        Market.Props memory market\n    ) public view {\n        validateMarketTokenBalance(dataStore, market, market.longToken);\n\n        if (market.longToken == market.shortToken) {\n            return;\n        }\n\n        validateMarketTokenBalance(dataStore, market, market.shortToken);\n    }\n\n    function validateMarketTokenBalance(\n        DataStore dataStore,\n        Market.Props memory market,\n        address token\n    ) internal view {\n        if (market.marketToken == address(0) || token == address(0)) {\n            revert Errors.EmptyAddressInMarketTokenBalanceValidation(market.marketToken, token);\n        }\n\n        uint256 balance = IERC20(token).balanceOf(market.marketToken);\n        uint256 expectedMinBalance = getExpectedMinTokenBalance(dataStore, market, token);\n\n        if (balance < expectedMinBalance) {\n            revert Errors.InvalidMarketTokenBalance(market.marketToken, token, balance, expectedMinBalance);\n        }\n\n        // funding fees can be claimed even if the collateral for positions that should pay funding fees\n        // hasn't been reduced yet\n        // due to that, funding fees and collateral is excluded from the expectedMinBalance calculation\n        // and validated separately\n\n        // use 1 for the getCollateralSum divisor since getCollateralSum does not sum over both the\n        // longToken and shortToken\n        uint256 collateralAmount = getCollateralSum(dataStore, market.marketToken, token, true, 1);\n        collateralAmount += getCollateralSum(dataStore, market.marketToken, token, false, 1);\n\n        if (balance < collateralAmount) {\n            revert Errors.InvalidMarketTokenBalanceForCollateralAmount(market.marketToken, token, balance, collateralAmount);\n        }\n\n        uint256 claimableFundingFeeAmount = dataStore.getUint(Keys.claimableFundingAmountKey(market.marketToken, token));\n\n        // in case of late liquidations, it may be possible for the claimableFundingFeeAmount to exceed the market token balance\n        // but this should be very rare\n        if (balance < claimableFundingFeeAmount) {\n            revert Errors.InvalidMarketTokenBalanceForClaimableFunding(market.marketToken, token, balance, claimableFundingFeeAmount);\n        }\n    }\n\n    function getExpectedMinTokenBalance(\n        DataStore dataStore,\n        Market.Props memory market,\n        address token\n    ) internal view returns (uint256) {\n        GetExpectedMinTokenBalanceCache memory cache;\n\n        // get the pool amount directly as MarketUtils.getPoolAmount will divide the amount by 2\n        // for markets with the same long and short token\n        cache.poolAmount = dataStore.getUint(Keys.poolAmountKey(market.marketToken, token));\n        cache.swapImpactPoolAmount = getSwapImpactPoolAmount(dataStore, market.marketToken, token);\n        cache.claimableCollateralAmount = dataStore.getUint(Keys.claimableCollateralAmountKey(market.marketToken, token));\n        cache.claimableFeeAmount = dataStore.getUint(Keys.claimableFeeAmountKey(market.marketToken, token));\n        cache.claimableUiFeeAmount = dataStore.getUint(Keys.claimableUiFeeAmountKey(market.marketToken, token));\n        cache.affiliateRewardAmount = dataStore.getUint(Keys.affiliateRewardKey(market.marketToken, token));\n\n        // funding fees are excluded from this summation as claimable funding fees\n        // are incremented without a corresponding decrease of the collateral of\n        // other positions, the collateral of other positions is decreased when\n        // those positions are updated\n        return\n            cache.poolAmount\n            + cache.swapImpactPoolAmount\n            + cache.claimableCollateralAmount\n            + cache.claimableFeeAmount\n            + cache.claimableUiFeeAmount\n            + cache.affiliateRewardAmount;\n    }\n}\n"
    },
    "contracts/migration/GlpMigrator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./IGlpVault.sol\";\nimport \"./IGlpTimelock.sol\";\nimport \"./IGlpRewardRouter.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"../deposit/DepositVault.sol\";\nimport \"../exchange/DepositHandler.sol\";\nimport \"../external/ExternalHandler.sol\";\n\ncontract GlpMigrator is ReentrancyGuard, RoleModule {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    using SafeERC20 for IERC20;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n    DepositVault public immutable depositVault;\n    DepositHandler public immutable depositHandler;\n    ExternalHandler public immutable externalHandler;\n\n    IERC20 public immutable stakedGlp;\n    IGlpVault public immutable glpVault;\n    IGlpTimelock public immutable glpTimelock;\n    IGlpRewardRouter public immutable glpRewardRouter;\n\n    uint256 public reducedMintBurnFeeBasisPoints;\n\n    struct GlpRedemption {\n        address token;\n        uint256 glpAmount;\n        uint256 minOut;\n\n        address receiver;\n        address[] externalCallTargets;\n        bytes[] externalCallDataList;\n        address[] refundTokens;\n        address[] refundReceivers;\n    }\n\n    struct MigrationItem {\n        address market;\n\n        GlpRedemption long;\n        GlpRedemption short;\n\n        uint256 minMarketTokens;\n        uint256 executionFee;\n    }\n\n    struct MigrateCache {\n        Market.Props market;\n        uint256 redeemedLongTokenAmount;\n        uint256 redeemedShortTokenAmount;\n        bytes32 depositKey;\n    }\n\n    modifier withReducedRedemptionFees() {\n        uint256 taxBasisPoints = glpVault.taxBasisPoints();\n        uint256 stableTaxBasisPoints = glpVault.stableTaxBasisPoints();\n        uint256 mintBurnFeeBasisPoints = glpVault.mintBurnFeeBasisPoints();\n        uint256 swapFeeBasisPoints = glpVault.swapFeeBasisPoints();\n        uint256 stableSwapFeeBasisPoints = glpVault.stableSwapFeeBasisPoints();\n        uint256 _reducedMintBurnFeeBasisPoints = reducedMintBurnFeeBasisPoints;\n\n        bool shouldUpdateFees = _reducedMintBurnFeeBasisPoints < mintBurnFeeBasisPoints;\n\n        if (shouldUpdateFees) {\n            glpTimelock.setSwapFees(\n                address(glpVault),\n                taxBasisPoints,\n                stableTaxBasisPoints,\n                _reducedMintBurnFeeBasisPoints,\n                swapFeeBasisPoints,\n                stableSwapFeeBasisPoints\n            );\n        }\n\n        _;\n\n        if (shouldUpdateFees) {\n            glpTimelock.setSwapFees(\n                address(glpVault),\n                taxBasisPoints,\n                stableTaxBasisPoints,\n                mintBurnFeeBasisPoints,\n                swapFeeBasisPoints,\n                stableSwapFeeBasisPoints\n            );\n        }\n    }\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        DepositVault _depositVault,\n        DepositHandler _depositHandler,\n        ExternalHandler _externalHandler,\n        IERC20 _stakedGlp,\n        IGlpVault _glpVault,\n        IGlpTimelock _glpTimelock,\n        IGlpRewardRouter _glpRewardRouter,\n        uint256 _reducedMintBurnFeeBasisPoints\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n        depositVault = _depositVault;\n        depositHandler = _depositHandler;\n        externalHandler = _externalHandler;\n\n        stakedGlp = _stakedGlp;\n        glpVault = _glpVault;\n        glpTimelock = _glpTimelock;\n        glpRewardRouter = _glpRewardRouter;\n\n        reducedMintBurnFeeBasisPoints = _reducedMintBurnFeeBasisPoints;\n    }\n\n    function setReducedMintBurnFeeBasisPoints(uint256 _reducedMintBurnFeeBasisPoints) external onlyConfigKeeper {\n        reducedMintBurnFeeBasisPoints = _reducedMintBurnFeeBasisPoints;\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"reducedMintBurnFeeBasisPoints\", _reducedMintBurnFeeBasisPoints);\n\n        eventEmitter.emitEventLog(\n            \"SetReducedMintBurnFeeBasisPoints\",\n            eventData\n        );\n    }\n\n    function migrate(\n        uint256 totalGlpAmount,\n        MigrationItem[] memory migrationItems\n    ) external payable nonReentrant withReducedRedemptionFees {\n        address account = msg.sender;\n        stakedGlp.transferFrom(account, address(this), totalGlpAmount);\n\n        uint256 totalGlpAmountToRedeem;\n        uint256 totalExecutionFee;\n\n        for (uint256 i = 0; i < migrationItems.length; i++) {\n            MigrationItem memory migrationItem = migrationItems[i];\n            totalGlpAmountToRedeem += migrationItem.long.glpAmount;\n            totalGlpAmountToRedeem += migrationItem.short.glpAmount;\n\n            totalExecutionFee += migrationItem.executionFee;\n        }\n\n        if (totalGlpAmountToRedeem != totalGlpAmount) {\n            revert Errors.InvalidGlpAmount(totalGlpAmountToRedeem, totalGlpAmount);\n        }\n\n        if (msg.value != totalExecutionFee) {\n            revert Errors.InvalidExecutionFeeForMigration(totalExecutionFee, msg.value);\n        }\n\n        for (uint256 i = 0; i < migrationItems.length; i++) {\n            MigrationItem memory migrationItem = migrationItems[i];\n            MigrateCache memory cache;\n\n            cache.market = MarketUtils.getEnabledMarket(dataStore, migrationItem.market);\n\n            cache.redeemedLongTokenAmount = _redeemGlp(migrationItem.long);\n            cache.redeemedShortTokenAmount = _redeemGlp(migrationItem.short);\n\n            TokenUtils.depositAndSendWrappedNativeToken(\n                dataStore,\n                address(depositVault),\n                migrationItem.executionFee\n            );\n\n            // a user could set a minMarketTokens to force the deposit to fail\n            // or set a market where the deposited amount would exceed the caps and\n            // the deposit would fail\n            // or use the externalHandler calls to set the receiver of tokens\n            // directly to an account they own or control\n            // glp should be adjusted such that only redemptions are allowed so\n            // any arbitrage / benefit of doing this should be minimal\n            // glp mint fees should also help to discourage this\n            DepositUtils.CreateDepositParams memory depositParams =  DepositUtils.CreateDepositParams(\n                account, // receiver;\n                address(0), // callbackContract;\n                address(0), // uiFeeReceiver;\n                migrationItem.market, // market;\n                cache.market.longToken, // initialLongToken;\n                cache.market.shortToken, // initialShortToken;\n                new address[](0), // longTokenSwapPath;\n                new address[](0), // shortTokenSwapPath;\n                migrationItem.minMarketTokens, // minMarketTokens;\n                false, // shouldUnwrapNativeToken;\n                migrationItem.executionFee, // executionFee;\n                0 // callbackGasLimit;\n            );\n\n            cache.depositKey = depositHandler.createDeposit(\n                account,\n                depositParams\n            );\n\n            EventUtils.EventLogData memory eventData;\n\n            eventData.bytes32Items.initItems(1);\n            eventData.bytes32Items.setItem(0, \"depositKey\", cache.depositKey);\n\n            eventData.addressItems.initItems(3);\n            eventData.addressItems.setItem(0, \"market\", cache.market.marketToken);\n            eventData.addressItems.setItem(1, \"redeemedLongToken\", migrationItem.long.token);\n            eventData.addressItems.setItem(2, \"redeemedShortToken\", migrationItem.short.token);\n\n            eventData.uintItems.initItems(4);\n            eventData.uintItems.setItem(0, \"glpLongAmount\", migrationItem.long.glpAmount);\n            eventData.uintItems.setItem(1, \"glpShortAmount\", migrationItem.short.glpAmount);\n            eventData.uintItems.setItem(2, \"redeemedLongTokenAmount\", cache.redeemedLongTokenAmount);\n            eventData.uintItems.setItem(3, \"redeemedShortTokenAmount\", cache.redeemedShortTokenAmount);\n\n            eventEmitter.emitEventLog1(\n                \"GlpMigration\",\n                Cast.toBytes32(cache.market.marketToken),\n                eventData\n            );\n        }\n    }\n\n    function _redeemGlp(\n        GlpRedemption memory redemptionInfo\n    ) internal returns (uint256) {\n        if (redemptionInfo.glpAmount == 0) {\n            return 0;\n        }\n\n        uint256 redeemedTokenAmount = glpRewardRouter.unstakeAndRedeemGlp(\n            redemptionInfo.token, // tokenOut\n            redemptionInfo.glpAmount, // glpAmount\n            redemptionInfo.minOut, // minOut\n            redemptionInfo.receiver // receiver\n        );\n\n        externalHandler.makeExternalCalls(\n            redemptionInfo.externalCallTargets,\n            redemptionInfo.externalCallDataList,\n            redemptionInfo.refundTokens,\n            redemptionInfo.refundReceivers\n        );\n\n        return redeemedTokenAmount;\n    }\n}\n"
    },
    "contracts/migration/IGlpRewardRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IGlpRewardRouter {\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\n}\n"
    },
    "contracts/migration/IGlpTimelock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IGlpTimelock {\n    function setSwapFees(\n        address _vault,\n        uint256 _taxBasisPoints,\n        uint256 _stableTaxBasisPoints,\n        uint256 _mintBurnFeeBasisPoints,\n        uint256 _swapFeeBasisPoints,\n        uint256 _stableSwapFeeBasisPoints\n    ) external;\n}\n"
    },
    "contracts/migration/IGlpVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IGlpVault {\n    function taxBasisPoints() external view returns (uint256);\n    function stableTaxBasisPoints() external view returns (uint256);\n    function mintBurnFeeBasisPoints() external view returns (uint256);\n    function swapFeeBasisPoints() external view returns (uint256);\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n}\n"
    },
    "contracts/migration/TimestampInitializer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../chain/Chain.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../role/RoleModule.sol\";\nimport \"../order/OrderStoreUtils.sol\";\nimport \"../position/PositionStoreUtils.sol\";\n\ncontract TimestampInitializer is RoleModule {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n    }\n\n\n    function initializeOrderTimestamps(uint256 start, uint256 end) external onlyConfigKeeper {\n        bytes32[] memory keys = dataStore.getBytes32ValuesAt(Keys.ORDER_LIST, start, end);\n        uint256 currentTimestamp = Chain.currentTimestamp();\n\n        for (uint256 i; i < keys.length; i++) {\n            bytes32 key = keys[i];\n\n            uint256 updatedAtTime = dataStore.getUint(\n                keccak256(abi.encode(key, OrderStoreUtils.UPDATED_AT_TIME))\n            );\n\n            if (updatedAtTime == 0) {\n\n                dataStore.setUint(\n                    keccak256(abi.encode(key, OrderStoreUtils.UPDATED_AT_TIME)),\n                    currentTimestamp\n                );\n\n                EventUtils.EventLogData memory eventData;\n                eventData.bytes32Items.initItems(1);\n                eventData.bytes32Items.setItem(0, \"key\", key);\n\n                eventData.uintItems.initItems(1);\n                eventData.uintItems.setItem(0, \"updatedAtTime\", currentTimestamp);\n\n                eventEmitter.emitEventLog(\n                    \"InitializeOrderUpdatedAtTime\",\n                    eventData\n                );\n            }\n        }\n    }\n\n    function initializePositionTimestamps(uint256 start, uint256 end) external onlyConfigKeeper {\n        bytes32[] memory keys = dataStore.getBytes32ValuesAt(Keys.POSITION_LIST, start, end);\n        uint256 currentTimestamp = Chain.currentTimestamp();\n\n        for (uint256 i; i < keys.length; i++) {\n            bytes32 key = keys[i];\n\n            uint256 increasedAtTime = dataStore.getUint(\n                keccak256(abi.encode(key, PositionStoreUtils.INCREASED_AT_TIME))\n            );\n\n            if (increasedAtTime == 0) {\n                dataStore.setUint(\n                    keccak256(abi.encode(key, PositionStoreUtils.INCREASED_AT_TIME)),\n                    currentTimestamp\n                );\n\n                EventUtils.EventLogData memory eventData;\n                eventData.bytes32Items.initItems(1);\n                eventData.bytes32Items.setItem(0, \"key\", key);\n\n                eventData.uintItems.initItems(1);\n                eventData.uintItems.setItem(0, \"increasedAtTime\", currentTimestamp);\n\n                eventEmitter.emitEventLog(\n                    \"InitializePositionIncreasedAtTime\",\n                    eventData\n                );\n            }\n\n            uint256 decreasedAtTime = dataStore.getUint(\n                keccak256(abi.encode(key, PositionStoreUtils.DECREASED_AT_TIME))\n            );\n\n            if (decreasedAtTime == 0) {\n                dataStore.setUint(\n                    keccak256(abi.encode(key, PositionStoreUtils.DECREASED_AT_TIME)),\n                    currentTimestamp\n                );\n\n                EventUtils.EventLogData memory eventData;\n                eventData.bytes32Items.initItems(1);\n                eventData.bytes32Items.setItem(0, \"key\", key);\n\n                eventData.uintItems.initItems(1);\n                eventData.uintItems.setItem(0, \"decreasedAtTime\", currentTimestamp);\n\n                eventEmitter.emitEventLog(\n                    \"InitializePositionDecreasedAtTime\",\n                    eventData\n                );\n            }\n        }\n    }\n\n}\n"
    },
    "contracts/mock/Governable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../error/Errors.sol\";\n\n// @title Governable\n// @dev Contract to allow for governance restricted functions\ncontract Governable {\n    address public gov;\n    address public pendingGov;\n\n    event SetGov(address prevGov, address nextGov);\n\n    constructor() {\n        _setGov(msg.sender);\n    }\n\n    modifier onlyGov() {\n        if (msg.sender != gov) {\n            revert Errors.Unauthorized(msg.sender, \"GOV\");\n        }\n        _;\n    }\n\n    function transferOwnership(address _newGov) external onlyGov {\n        pendingGov = _newGov;\n    }\n\n    function acceptOwnership() external {\n        if (msg.sender != pendingGov) {\n            revert Errors.Unauthorized(msg.sender, \"PendingGov\");\n        }\n\n        _setGov(msg.sender);\n    }\n\n    // @dev updates the gov value to the input _gov value\n    // @param _gov the value to update to\n    function _setGov(address _gov) internal {\n        address prevGov = gov;\n        gov = _gov;\n\n        emit SetGov(prevGov, _gov);\n    }\n}\n"
    },
    "contracts/mock/MockCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../callback/IOrderCallbackReceiver.sol\";\nimport \"../callback/IGasFeeCallbackReceiver.sol\";\nimport \"../callback/IGlvDepositCallbackReceiver.sol\";\nimport \"../callback/IGlvWithdrawalCallbackReceiver.sol\";\n\ncontract MockCallbackReceiver is IOrderCallbackReceiver, IGasFeeCallbackReceiver, IGlvDepositCallbackReceiver, IGlvWithdrawalCallbackReceiver {\n    uint public called;\n\n    uint public glvDepositExecutionCalled;\n    uint public glvDepositCancellationCalled;\n    uint public glvWithdrawalExecutionCalled;\n    uint public glvWithdrawalCancellationCalled;\n\n    function afterOrderExecution(bytes32 /* key */, Order.Props memory /* order */, EventUtils.EventLogData memory /* eventData */) external {\n        ++called;\n    }\n\n    function afterOrderCancellation(bytes32 /* key */, Order.Props memory /* order */, EventUtils.EventLogData memory /* eventData */) external {\n        ++called;\n    }\n\n    function afterOrderFrozen(bytes32 /* key */, Order.Props memory /* order */, EventUtils.EventLogData memory /* eventData */) external {\n        ++called;\n    }\n\n    function refundExecutionFee(bytes32 /* key */, EventUtils.EventLogData memory /* eventData */) external payable {\n        ++called;\n    }\n\n    function afterGlvDepositExecution(bytes32 /* key */, GlvDeposit.Props memory /* glv deposit */, EventUtils.EventLogData memory /* eventData */) external {\n        ++glvDepositExecutionCalled;\n    }\n\n    function afterGlvDepositCancellation(bytes32 /* key */, GlvDeposit.Props memory /* glv deposit */, EventUtils.EventLogData memory /* eventData */) external {\n        ++glvDepositCancellationCalled;\n    }\n\n    function afterGlvWithdrawalExecution(bytes32 /* key */, GlvWithdrawal.Props memory /* glv withdrawal */, EventUtils.EventLogData memory /* eventData */) external {\n        ++glvWithdrawalExecutionCalled;\n    }\n\n    function afterGlvWithdrawalCancellation(bytes32 /* key */, GlvWithdrawal.Props memory /* glv withdrawal */, EventUtils.EventLogData memory /* eventData */) external {\n        ++glvWithdrawalCancellationCalled;\n    }\n}\n"
    },
    "contracts/mock/MockGelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../exchange/IOrderHandler.sol\";\nimport \"../order/OrderVault.sol\";\nimport \"../router/Router.sol\";\nimport \"../router/relay/GelatoRelayRouter.sol\";\n\ncontract MockGelatoRelayRouter is GelatoRelayRouter {\n    struct Nested {\n        uint256 foo;\n        bool bar;\n    }\n\n    constructor(\n        Router _router,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        IOrderHandler _orderHandler,\n        OrderVault _orderVault,\n        IExternalHandler _externalHandler\n    ) GelatoRelayRouter(_router, _dataStore, _eventEmitter, _oracle, _orderHandler, _orderVault, _externalHandler) {}\n\n    function testCancelOrderSignature(\n        RelayParams calldata relayParams,\n        bytes32 key,\n        address account,\n        uint256 chainId\n    ) external view {\n        bytes32 structHash = RelayUtils.getCancelOrderStructHash(relayParams, key);\n        _handleSignature(structHash, relayParams.signature, account, chainId);\n    }\n\n    function testSimpleSignature(address account, bytes calldata signature, uint256 chainId) external view {\n        bytes32 structHash = keccak256(abi.encode(keccak256(bytes(\"PrimaryStruct(address account)\")), account));\n        _handleSignature(structHash, signature, account, chainId);\n    }\n\n    function testNestedSignature(\n        Nested memory nested,\n        address account,\n        bytes calldata signature,\n        uint256 chainId\n    ) external view {\n        bytes32 nestedStructHash = keccak256(\n            abi.encode(keccak256(bytes(\"Nested(uint256 foo,bool bar)\")), nested.foo, nested.bar)\n        );\n        bytes32 structHash = keccak256(\n            abi.encode(\n                keccak256(bytes(\"PrimaryStruct(address account,Nested nested)Nested(uint256 foo,bool bar)\")),\n                account,\n                nestedStructHash\n            )\n        );\n        _handleSignature(structHash, signature, account, chainId);\n    }\n\n    function testArraySignature(\n        address[] memory array,\n        address account,\n        bytes calldata signature,\n        uint256 chainId\n    ) external view {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                keccak256(bytes(\"PrimaryStruct(address account,address[] array)\")),\n                account,\n                keccak256(abi.encodePacked(array))\n            )\n        );\n        _handleSignature(structHash, signature, account, chainId);\n    }\n\n    function _handleSignature(\n        bytes32 structHash,\n        bytes calldata signature,\n        address account,\n        uint256 chainId\n    ) internal view {\n        bytes32 domainSeparator = _getDomainSeparator(chainId);\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, structHash);\n\n        _validateSignature(digest, signature, account, \"call\");\n    }\n}\n"
    },
    "contracts/mock/ReferralStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../referral/IReferralStorage.sol\";\nimport \"./Governable.sol\";\nimport \"../referral/ReferralTier.sol\";\n\n// @title ReferralStorage\n// @dev Mock referral storage for testing and testnets\ncontract ReferralStorage is IReferralStorage, Governable {\n    uint256 public constant BASIS_POINTS = 10000;\n\n    // @dev mapping of affiliate to discount share for trader\n    // this overrides the default value in the affiliate's tier\n    mapping (address => uint256) public override referrerDiscountShares;\n    // @dev mapping of affiliate to tier\n    mapping (address => uint256) public override referrerTiers;\n    // @dev mapping tier level to tier values\n    mapping (uint256 => ReferralTier.Props) public override tiers;\n\n    // @dev handlers for access control\n    mapping (address => bool) public isHandler;\n\n    // @dev mapping of referral code to affiliate\n    mapping (bytes32 => address) public override codeOwners;\n    // @dev mapping of trader to referral code\n    mapping (address => bytes32) public override traderReferralCodes;\n\n    // @param handler the handler being set\n    // @param isActive whether the handler is being set to active or inactive\n    event SetHandler(address handler, bool isActive);\n    // @param account address of the trader\n    // @param code the referral code\n    event SetTraderReferralCode(address account, bytes32 code);\n    // @param tierId the tier level\n    // @param totalRebate the total rebate for the tier (affiliate reward + trader discount)\n    // @param discountShare the share of the totalRebate for traders\n    event SetTier(uint256 tierId, uint256 totalRebate, uint256 discountShare);\n    // @param referrer the affiliate\n    // @param tierId the new tier level\n    event SetReferrerTier(address referrer, uint256 tierId);\n    // @param referrer the affiliate\n    // @param discountShare the share of the totalRebate for traders\n    event SetReferrerDiscountShare(address referrer, uint256 discountShare);\n    // @param account the address of the affiliate\n    // @param code the referral code\n    event RegisterCode(address account, bytes32 code);\n    // @param account the previous owner of the referral code\n    // @param newAccount the new owner of the referral code\n    // @param code the referral code\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\n    // @param newAccount the new owner of the referral code\n    // @param code the referral code\n    event GovSetCodeOwner(bytes32 code, address newAccount);\n\n    modifier onlyHandler() {\n        require(isHandler[msg.sender], \"ReferralStorage: forbidden\");\n        _;\n    }\n\n    // @dev set an address as a handler\n    // @param _handler address of the handler\n    // @param _isActive whether to set the handler as active or inactive\n    function setHandler(address _handler, bool _isActive) external onlyGov {\n        isHandler[_handler] = _isActive;\n        emit SetHandler(_handler, _isActive);\n    }\n\n    // @dev set values for a tier\n    // @param _tierId the ID of the tier to set\n    // @param _totalRebate the total rebate\n    // @param _discountShare the discount share\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external override onlyGov {\n        require(_totalRebate <= BASIS_POINTS, \"ReferralStorage: invalid totalRebate\");\n        require(_discountShare <= BASIS_POINTS, \"ReferralStorage: invalid discountShare\");\n\n        ReferralTier.Props memory tier = tiers[_tierId];\n        tier.totalRebate = _totalRebate;\n        tier.discountShare = _discountShare;\n        tiers[_tierId] = tier;\n        emit SetTier(_tierId, _totalRebate, _discountShare);\n    }\n\n    // @dev set the tier for an affiliate\n    // @param _referrer the address of the affiliate\n    // @param _tierId the tier to set to\n    function setReferrerTier(address _referrer, uint256 _tierId) external override onlyGov {\n        referrerTiers[_referrer] = _tierId;\n        emit SetReferrerTier(_referrer, _tierId);\n    }\n\n    // @dev set the discount share for an affiliate\n    // @param _discountShare the discount share to set to\n    function setReferrerDiscountShare(uint256 _discountShare) external {\n        require(_discountShare <= BASIS_POINTS, \"ReferralStorage: invalid discountShare\");\n\n        referrerDiscountShares[msg.sender] = _discountShare;\n        emit SetReferrerDiscountShare(msg.sender, _discountShare);\n    }\n\n    // @dev set the referral code for a trader\n    // @param _account the address of the trader\n    // @param _code the referral code to set to\n    function setTraderReferralCode(address _account, bytes32 _code) external override onlyHandler {\n        _setTraderReferralCode(_account, _code);\n    }\n\n    // @dev set the referral code for a trader\n    // @param _code the referral code to set to\n    function setTraderReferralCodeByUser(bytes32 _code) external {\n        _setTraderReferralCode(msg.sender, _code);\n    }\n\n    // @dev register a referral code\n    // @param _code the referral code to register\n    function registerCode(bytes32 _code) external {\n        require(_code != bytes32(0), \"ReferralStorage: invalid _code\");\n        require(codeOwners[_code] == address(0), \"ReferralStorage: code already exists\");\n\n        codeOwners[_code] = msg.sender;\n        emit RegisterCode(msg.sender, _code);\n    }\n\n    // @dev for affiliates to set a new owner for a referral code they own\n    // @param _code the referral code\n    // @param _newAccount the new owner\n    function setCodeOwner(bytes32 _code, address _newAccount) external {\n        require(_code != bytes32(0), \"ReferralStorage: invalid _code\");\n\n        address account = codeOwners[_code];\n        require(msg.sender == account, \"ReferralStorage: forbidden\");\n\n        codeOwners[_code] = _newAccount;\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\n    }\n\n    // @dev set the owner of a referral code\n    // @param _code the referral code\n    // @param _newAccount the new owner\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external override onlyGov {\n        require(_code != bytes32(0), \"ReferralStorage: invalid _code\");\n\n        codeOwners[_code] = _newAccount;\n        emit GovSetCodeOwner(_code, _newAccount);\n    }\n\n    // @dev get the referral info for a trader\n    // @param _account the address of the trader\n    function getTraderReferralInfo(address _account) external override view returns (bytes32, address) {\n        bytes32 code = traderReferralCodes[_account];\n        address referrer;\n        if (code != bytes32(0)) {\n            referrer = codeOwners[code];\n        }\n        return (code, referrer);\n    }\n\n    // @dev set the referral code for a trader\n    // @param _account the address of the trader\n    // @param _code the referral code\n    function _setTraderReferralCode(address _account, bytes32 _code) private {\n        traderReferralCodes[_account] = _code;\n        emit SetTraderReferralCode(_account, _code);\n    }\n}\n"
    },
    "contracts/nonce/NonceUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\n\n// @title NonceUtils\n// @dev Library to keep track of an incrementing nonce value\nlibrary NonceUtils {\n    // @dev get the current nonce value\n    // @param dataStore DataStore\n    function getCurrentNonce(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getUint(Keys.NONCE);\n    }\n\n    // @dev increment the current nonce value\n    // @param dataStore DataStore\n    // @return the new nonce value\n    function incrementNonce(DataStore dataStore) internal returns (uint256) {\n        return dataStore.incrementUint(Keys.NONCE, 1);\n    }\n\n    // @dev convenience function to create a bytes32 hash using the next nonce\n    // it would be possible to use the nonce directly as an ID / key\n    // however, for positions the key is a bytes32 value based on a hash of\n    // the position values\n    // so bytes32 is used instead for a standard key type\n    // @param dataStore DataStore\n    // @return bytes32 hash using the next nonce value\n    function getNextKey(DataStore dataStore) internal returns (bytes32) {\n        uint256 nonce = incrementNonce(dataStore);\n        bytes32 key = getKey(dataStore, nonce);\n\n        return key;\n    }\n\n    function getCurrentKey(DataStore dataStore) internal view returns (bytes32) {\n        uint256 nonce = getCurrentNonce(dataStore);\n        bytes32 key = getKey(dataStore, nonce);\n\n        return key;\n    }\n\n    function getKey(DataStore dataStore, uint256 nonce) internal pure returns (bytes32) {\n        return keccak256(abi.encode(address(dataStore), nonce));\n    }\n}\n"
    },
    "contracts/oracle/ChainlinkDataStreamProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"./IOracleProvider.sol\";\nimport \"./IChainlinkDataStreamVerifier.sol\";\nimport \"../utils/Precision.sol\";\nimport \"../chain/Chain.sol\";\n\ncontract ChainlinkDataStreamProvider is IOracleProvider {\n\n    DataStore public immutable dataStore;\n    address public immutable oracle;\n    IChainlinkDataStreamVerifier public immutable verifier;\n\n    // bid: min price, highest buy price\n    // ask: max price, lowest sell price\n    struct Report {\n        bytes32 feedId; // The feed ID the report has data for\n        uint32 validFromTimestamp; // Earliest timestamp for which price is applicable\n        uint32 observationsTimestamp; // Latest timestamp for which price is applicable\n        uint192 nativeFee; // Base cost to validate a transaction using the report, denominated in the chain’s native token (WETH/ETH)\n        uint192 linkFee; // Base cost to validate a transaction using the report, denominated in LINK\n        uint32 expiresAt; // Latest timestamp where the report can be verified onchain\n        int192 price; // DON consensus median price, carried to 8 decimal places\n        int192 bid; // Simulated price impact of a buy order up to the X% depth of liquidity utilisation\n        int192 ask; // Simulated price impact of a sell order up to the X% depth of liquidity utilisation\n    }\n\n    modifier onlyOracle() {\n        if (msg.sender != oracle) {\n            revert Errors.Unauthorized(msg.sender, \"Oracle\");\n        }\n        _;\n    }\n\n    constructor(\n        DataStore _dataStore,\n        address _oracle,\n        IChainlinkDataStreamVerifier _verifier\n    ) {\n        dataStore = _dataStore;\n        oracle = _oracle;\n        verifier = _verifier;\n    }\n\n    function getOraclePrice(\n        address token,\n        bytes memory data\n    ) external onlyOracle returns (OracleUtils.ValidatedPrice memory) {\n\n        bytes32 feedId = dataStore.getBytes32(Keys.dataStreamIdKey(token));\n        if (feedId == bytes32(0)) {\n            revert Errors.EmptyDataStreamFeedId(token);\n        }\n\n        bytes memory payloadParameter = _getPayloadParameter();\n        bytes memory verifierResponse = verifier.verify(data, payloadParameter);\n\n        Report memory report = abi.decode(verifierResponse, (Report));\n\n        if (feedId != report.feedId) {\n            revert Errors.InvalidDataStreamFeedId(token, report.feedId, feedId);\n        }\n\n        if (report.bid <= 0 || report.ask <= 0) {\n            revert Errors.InvalidDataStreamPrices(token, report.bid, report.ask);\n        }\n\n        if (report.bid > report.ask) {\n            revert Errors.InvalidDataStreamBidAsk(token, report.bid, report.ask);\n        }\n\n        uint256 precision = _getDataStreamMultiplier(token);\n        uint256 adjustedBidPrice = Precision.mulDiv(uint256(uint192(report.bid)), precision, Precision.FLOAT_PRECISION);\n        uint256 adjustedAskPrice = Precision.mulDiv(uint256(uint192(report.ask)), precision, Precision.FLOAT_PRECISION);\n\n        uint256 spreadReductionFactor = _getDataStreamSpreadReductionFactor(token);\n        if (spreadReductionFactor != 0) {\n            // small optimization for full reduction\n            if (spreadReductionFactor == Precision.FLOAT_PRECISION) {\n                adjustedBidPrice = (adjustedAskPrice + adjustedBidPrice) / 2;\n                adjustedAskPrice = adjustedBidPrice;\n            } else {\n                uint256 halfSpread = (adjustedAskPrice - adjustedBidPrice) / 2;\n                adjustedBidPrice = adjustedBidPrice + Precision.applyFactor(halfSpread, spreadReductionFactor);\n                adjustedAskPrice = adjustedAskPrice - Precision.applyFactor(halfSpread, spreadReductionFactor);\n            }\n        }\n\n        return OracleUtils.ValidatedPrice({\n            token: token,\n            min: adjustedBidPrice,\n            max: adjustedAskPrice,\n            timestamp: report.observationsTimestamp,\n            provider: address(this)\n        });\n    }\n\n    function _getDataStreamSpreadReductionFactor(address token) internal view returns (uint256) {\n        uint256 spreadReductionFactor = dataStore.getUint(Keys.dataStreamSpreadReductionFactorKey(token));\n        if (spreadReductionFactor > Precision.FLOAT_PRECISION) {\n            revert Errors.InvalidDataStreamSpreadReductionFactor(token, spreadReductionFactor);\n        }\n\n        return spreadReductionFactor;\n    }\n\n    function _getDataStreamMultiplier(address token) internal view returns (uint256) {\n        uint256 multiplier = dataStore.getUint(Keys.dataStreamMultiplierKey(token));\n\n        if (multiplier == 0) {\n            revert Errors.EmptyDataStreamMultiplier(token);\n        }\n\n        return multiplier;\n    }\n\n    function _getPayloadParameter() internal view returns (bytes memory) {\n        // LINK token address\n        address feeToken = dataStore.getAddress(Keys.CHAINLINK_PAYMENT_TOKEN);\n\n        if (feeToken == address(0)) {\n            revert Errors.EmptyChainlinkPaymentToken();\n        }\n\n        return abi.encode(feeToken);\n    }\n}\n"
    },
    "contracts/oracle/ChainlinkPriceFeedProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"./IOracleProvider.sol\";\nimport \"./ChainlinkPriceFeedUtils.sol\";\n\ncontract ChainlinkPriceFeedProvider is IOracleProvider {\n    DataStore public immutable dataStore;\n\n    constructor(DataStore _dataStore) {\n        dataStore = _dataStore;\n    }\n\n    // @dev the timestamp returned is based on the current blockchain timestamp\n    // this is because Chainlink on-chain price feeds have a lower update frequency\n    // if a Chainlink on-chain price feed is used, it is assumed that the feed\n    // is sufficiently updated for the intended usage\n    //\n    // if an on-chain Chainlink price is used together with other price feeds\n    // and if the timestamp of the other price feeds are older, this could cause\n    // a MaxTimestampRangeExceeded error\n    // if this occurs, the MAX_TIMESTAMP_RANGE value may need to be increased\n    function getOraclePrice(\n        address token,\n        bytes memory /* data */\n    ) external view returns (OracleUtils.ValidatedPrice memory) {\n        (bool hasPriceFeed, uint256 price) = ChainlinkPriceFeedUtils.getPriceFeedPrice(dataStore, token);\n\n        if (!hasPriceFeed) {\n            revert Errors.EmptyChainlinkPriceFeed(token);\n        }\n\n        uint256 stablePrice = dataStore.getUint(Keys.stablePriceKey(token));\n\n        Price.Props memory priceProps;\n\n        if (stablePrice > 0) {\n            priceProps = Price.Props(\n                price < stablePrice ? price : stablePrice,\n                price < stablePrice ? stablePrice : price\n            );\n        } else {\n            priceProps = Price.Props(\n                price,\n                price\n            );\n        }\n\n        return OracleUtils.ValidatedPrice({\n            token: token,\n            min: priceProps.min,\n            max: priceProps.max,\n            timestamp: Chain.currentTimestamp(),\n            provider: address(this)\n        });\n    }\n}\n"
    },
    "contracts/oracle/ChainlinkPriceFeedUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../chain/Chain.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../utils/Precision.sol\";\n\nimport \"./IPriceFeed.sol\";\n\n// @title ChainlinkPriceFeedProviderUtils\n// @dev Library for Chainlink price feed\nlibrary ChainlinkPriceFeedUtils {\n    // there is a small risk of stale pricing due to latency in price updates or if the chain is down\n    // this is meant to be for temporary use until low latency price feeds are supported for all tokens\n    function getPriceFeedPrice(DataStore dataStore, address token) internal view returns (bool, uint256) {\n        address priceFeedAddress = dataStore.getAddress(Keys.priceFeedKey(token));\n        if (priceFeedAddress == address(0)) {\n            return (false, 0);\n        }\n\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\n\n        (\n            /* uint80 roundID */,\n            int256 _price,\n            /* uint256 startedAt */,\n            uint256 timestamp,\n            /* uint80 answeredInRound */\n        ) = priceFeed.latestRoundData();\n\n        if (_price <= 0) {\n            revert Errors.InvalidFeedPrice(token, _price);\n        }\n\n        uint256 heartbeatDuration = dataStore.getUint(Keys.priceFeedHeartbeatDurationKey(token));\n        if (Chain.currentTimestamp() > timestamp && Chain.currentTimestamp() - timestamp > heartbeatDuration) {\n            revert Errors.ChainlinkPriceFeedNotUpdated(token, timestamp, heartbeatDuration);\n        }\n\n        uint256 price = SafeCast.toUint256(_price);\n        uint256 precision = getPriceFeedMultiplier(dataStore, token);\n\n        uint256 adjustedPrice = Precision.mulDiv(price, precision, Precision.FLOAT_PRECISION);\n\n        return (true, adjustedPrice);\n    }\n\n    // @dev get the multiplier value to convert the external price feed price to the price of 1 unit of the token\n    // represented with 30 decimals\n    // for example, if USDC has 6 decimals and a price of 1 USD, one unit of USDC would have a price of\n    // 1 / (10 ^ 6) * (10 ^ 30) => 1 * (10 ^ 24)\n    // if the external price feed has 8 decimals, the price feed price would be 1 * (10 ^ 8)\n    // in this case the priceFeedMultiplier should be 10 ^ 46\n    // the conversion of the price feed price would be 1 * (10 ^ 8) * (10 ^ 46) / (10 ^ 30) => 1 * (10 ^ 24)\n    // formula for decimals for price feed multiplier: 60 - (external price feed decimals) - (token decimals)\n    //\n    // @param dataStore DataStore\n    // @param token the token to get the price feed multiplier for\n    // @return the price feed multipler\n    function getPriceFeedMultiplier(DataStore dataStore, address token) internal view returns (uint256) {\n        uint256 multiplier = dataStore.getUint(Keys.priceFeedMultiplierKey(token));\n\n        if (multiplier == 0) {\n            revert Errors.EmptyChainlinkPriceFeedMultiplier(token);\n        }\n\n        return multiplier;\n    }\n}\n"
    },
    "contracts/oracle/GmOracleProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../role/RoleModule.sol\";\n\nimport \"./OracleStore.sol\";\nimport \"./OracleUtils.sol\";\nimport \"../price/Price.sol\";\nimport \"./GmOracleUtils.sol\";\nimport \"./IOracleProvider.sol\";\n\nimport \"../chain/Chain.sol\";\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"../utils/Bits.sol\";\nimport \"../utils/Array.sol\";\nimport \"../utils/Precision.sol\";\nimport \"../utils/Uint256Mask.sol\";\n\n// @title Oracle\n// @dev Contract to validate and store signed values\n// Some calculations e.g. calculating the size in tokens for a position\n// may not work with zero / negative prices\n// as a result, zero / negative prices are considered empty / invalid\n// A market may need to be manually settled in this case\ncontract GmOracleProvider is RoleModule, IOracleProvider {\n    using Price for Price.Props;\n    using Uint256Mask for Uint256Mask.Mask;\n\n    uint256 public constant SIGNER_INDEX_LENGTH = 16;\n    // subtract 1 as the first slot is used to store number of signers\n    uint256 public constant MAX_SIGNERS = 256 / SIGNER_INDEX_LENGTH - 1;\n    // signer indexes are recorded in a signerIndexFlags uint256 value to check for uniqueness\n    uint256 public constant MAX_SIGNER_INDEX = 256;\n\n    DataStore public immutable dataStore;\n    OracleStore public immutable oracleStore;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        OracleStore _oracleStore\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        oracleStore = _oracleStore;\n    }\n\n    // @dev Oracle prices are signed as a value together with a precision, this allows\n    // prices to be compacted as uint32 values.\n    //\n    // The signed prices represent the price of one unit of the token using a value\n    // with 30 decimals of precision.\n    //\n    // Representing the prices in this way allows for conversions between token amounts\n    // and fiat values to be simplified, e.g. to calculate the fiat value of a given\n    // number of tokens the calculation would just be: `token amount * oracle price`,\n    // to calculate the token amount for a fiat value it would be: `fiat value / oracle price`.\n    //\n    // The trade-off of this simplicity in calculation is that tokens with a small USD\n    // price and a lot of decimals may have precision issues it is also possible that\n    // a token's price changes significantly and results in requiring higher precision.\n    //\n    // ## Example 1\n    //\n    // The price of ETH is 5000, and ETH has 18 decimals.\n    //\n    // The price of one unit of ETH is `5000 / (10 ^ 18), 5 * (10 ^ -15)`.\n    //\n    // To handle the decimals, multiply the value by `(10 ^ 30)`.\n    //\n    // Price would be stored as `5000 / (10 ^ 18) * (10 ^ 30) => 5000 * (10 ^ 12)`.\n    //\n    // For gas optimization, these prices are sent to the oracle in the form of a uint8\n    // decimal multiplier value and uint32 price value.\n    //\n    // If the decimal multiplier value is set to 8, the uint32 value would be `5000 * (10 ^ 12) / (10 ^ 8) => 5000 * (10 ^ 4)`.\n    //\n    // With this config, ETH prices can have a maximum value of `(2 ^ 32) / (10 ^ 4) => 4,294,967,296 / (10 ^ 4) => 429,496.7296` with 4 decimals of precision.\n    //\n    // ## Example 2\n    //\n    // The price of BTC is 60,000, and BTC has 8 decimals.\n    //\n    // The price of one unit of BTC is `60,000 / (10 ^ 8), 6 * (10 ^ -4)`.\n    //\n    // Price would be stored as `60,000 / (10 ^ 8) * (10 ^ 30) => 6 * (10 ^ 26) => 60,000 * (10 ^ 22)`.\n    //\n    // BTC prices maximum value: `(2 ^ 32) / (10 ^ 2) => 4,294,967,296 / (10 ^ 2) => 42,949,672.96`.\n    //\n    // Decimals of precision: 2.\n    //\n    // ## Example 3\n    //\n    // The price of USDC is 1, and USDC has 6 decimals.\n    //\n    // The price of one unit of USDC is `1 / (10 ^ 6), 1 * (10 ^ -6)`.\n    //\n    // Price would be stored as `1 / (10 ^ 6) * (10 ^ 30) => 1 * (10 ^ 24)`.\n    //\n    // USDC prices maximum value: `(2 ^ 64) / (10 ^ 6) => 4,294,967,296 / (10 ^ 6) => 4294.967296`.\n    //\n    // Decimals of precision: 6.\n    //\n    // ## Example 4\n    //\n    // The price of DG is 0.00000001, and DG has 18 decimals.\n    //\n    // The price of one unit of DG is `0.00000001 / (10 ^ 18), 1 * (10 ^ -26)`.\n    //\n    // Price would be stored as `1 * (10 ^ -26) * (10 ^ 30) => 1 * (10 ^ 3)`.\n    //\n    // DG prices maximum value: `(2 ^ 64) / (10 ^ 11) => 4,294,967,296 / (10 ^ 11) => 0.04294967296`.\n    //\n    // Decimals of precision: 11.\n    //\n    // ## Decimal Multiplier\n    //\n    // The formula to calculate what the decimal multiplier value should be set to:\n    //\n    // Decimals: 30 - (token decimals) - (number of decimals desired for precision)\n    //\n    // - ETH: 30 - 18 - 4 => 8\n    // - BTC: 30 - 8 - 2 => 20\n    // - USDC: 30 - 6 - 6 => 18\n    // - DG: 30 - 18 - 11 => 1\n    function getOraclePrice(\n        address token,\n        bytes memory data\n    ) external view returns (OracleUtils.ValidatedPrice memory) {\n        GmOracleUtils.Report memory report = abi.decode(data, (GmOracleUtils.Report));\n        address[] memory signers = _getSigners(report.signerInfo);\n\n        if (report.minOracleBlockNumber > report.maxOracleBlockNumber) {\n            revert Errors.GmInvalidMinMaxBlockNumber(report.minOracleBlockNumber, report.maxOracleBlockNumber);\n        }\n\n        if (report.maxOracleBlockNumber >= Chain.currentBlockNumber()) {\n            revert Errors.GmInvalidBlockNumber(report.maxOracleBlockNumber, Chain.currentBlockNumber());\n        }\n\n        bytes32 tokenOracleType = dataStore.getBytes32(Keys.oracleTypeKey(token));\n\n        for (uint256 i = 0; i < signers.length; i++) {\n            if (i == 0) { continue; }\n\n            // validate that minPrices are sorted in ascending order\n            if (report.minPrices[i - 1] > report.minPrices[i]) {\n                revert Errors.GmMinPricesNotSorted(token, report.minPrices[i], report.minPrices[i - 1]);\n            }\n\n            // validate that maxPrices are sorted in ascending order\n            if (report.maxPrices[i - 1] > report.maxPrices[i]) {\n                revert Errors.GmMaxPricesNotSorted(token, report.maxPrices[i], report.maxPrices[i - 1]);\n            }\n        }\n\n        bytes32 salt = _getSalt();\n\n        for (uint256 i = 0; i < signers.length; i++) {\n            uint256 minPrice = report.minPrices[i];\n            uint256 maxPrice = report.maxPrices[i];\n\n            if (minPrice > maxPrice) {\n                revert Errors.InvalidGmSignerMinMaxPrice(minPrice, maxPrice);\n            }\n\n            GmOracleUtils.validateSigner(\n                salt,\n                report,\n                token,\n                minPrice,\n                maxPrice,\n                tokenOracleType,\n                report.signatures[i],\n                signers[i]\n            );\n        }\n\n        uint256 medianMinPrice = Array.getMedian(report.minPrices) * (10 ** report.precision);\n        uint256 medianMaxPrice = Array.getMedian(report.maxPrices) * (10 ** report.precision);\n\n        if (medianMinPrice == 0 || medianMaxPrice == 0) {\n            revert Errors.InvalidGmOraclePrice(token);\n        }\n\n        if (medianMinPrice > medianMaxPrice) {\n            revert Errors.InvalidGmMedianMinMaxPrice(medianMinPrice, medianMaxPrice);\n        }\n\n        return OracleUtils.ValidatedPrice({\n            token: token,\n            min: medianMinPrice,\n            max: medianMaxPrice,\n            timestamp: report.oracleTimestamp,\n            provider: address(this)\n        });\n    }\n\n    function _getSigners(\n        uint256 signerInfo\n    ) internal view returns (address[] memory) {\n        // first 16 bits of signer info contains the number of signers\n        address[] memory signers = new address[](signerInfo & Bits.BITMASK_16);\n\n        if (signers.length < dataStore.getUint(Keys.MIN_ORACLE_SIGNERS)) {\n            revert Errors.GmMinOracleSigners(signers.length, dataStore.getUint(Keys.MIN_ORACLE_SIGNERS));\n        }\n\n        if (signers.length > MAX_SIGNERS) {\n            revert Errors.GmMaxOracleSigners(signers.length, MAX_SIGNERS);\n        }\n\n        Uint256Mask.Mask memory signerIndexMask;\n\n        for (uint256 i; i < signers.length; i++) {\n            uint256 signerIndex = signerInfo >> (16 + 16 * i) & Bits.BITMASK_16;\n\n            if (signerIndex >= MAX_SIGNER_INDEX) {\n                revert Errors.GmMaxSignerIndex(signerIndex, MAX_SIGNER_INDEX);\n            }\n\n            signerIndexMask.validateUniqueAndSetIndex(signerIndex, \"signerIndex\");\n\n            signers[i] = oracleStore.getSigner(signerIndex);\n\n            if (signers[i] == address(0)) {\n                revert Errors.GmEmptySigner(signerIndex);\n            }\n        }\n\n        return signers;\n    }\n\n    // it might be possible for the block.chainid to change due to a fork or similar\n    // for this reason, this salt is not cached\n    function _getSalt() internal view returns (bytes32) {\n        return keccak256(abi.encode(block.chainid, \"xget-oracle-v1\"));\n    }\n}\n"
    },
    "contracts/oracle/GmOracleUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../error/Errors.sol\";\n\n// @title GmOracleUtils\n// @dev Library for GmOracle functions\nlibrary GmOracleUtils {\n    struct Report {\n        address token;\n        uint256 signerInfo;\n        uint256 precision;\n        uint256 minOracleBlockNumber;\n        uint256 maxOracleBlockNumber;\n        uint256 oracleTimestamp;\n        bytes32 blockHash;\n        uint256[] minPrices;\n        uint256[] maxPrices;\n        bytes[] signatures;\n    }\n\n    // @dev validate the signer of a price\n    // before calling this function, the expectedSigner should be validated to\n    // ensure that it is not the zero address\n    // @param report the oracle Report data\n    // @param token the token used for the signed message hash\n    // @param minPrice the min price used for the signed message hash\n    // @param maxPrice the max price used for the signed message hash\n    // @param tokenOracleType the token oracle type used for the signed message hash\n    // @param signature the signer's signature\n    // @param expectedSigner the address of the expected signer\n    function validateSigner(\n        bytes32 salt,\n        Report memory report,\n        address token,\n        uint256 minPrice,\n        uint256 maxPrice,\n        bytes32 tokenOracleType,\n        bytes memory signature,\n        address expectedSigner\n    ) internal pure {\n        bytes32 digest = ECDSA.toEthSignedMessageHash(\n            keccak256(abi.encode(\n                salt,\n                report.minOracleBlockNumber,\n                report.maxOracleBlockNumber,\n                report.oracleTimestamp,\n                report.blockHash,\n                token,\n                tokenOracleType,\n                10 ** report.precision,\n                minPrice,\n                maxPrice\n            ))\n        );\n\n        address recoveredSigner = ECDSA.recover(digest, signature);\n        if (recoveredSigner != expectedSigner) {\n            revert Errors.InvalidGmSignature(recoveredSigner, expectedSigner);\n        }\n    }\n}\n"
    },
    "contracts/oracle/IChainlinkDataStreamVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IChainlinkDataStreamVerifier {\n    /**\n    * @notice Verifies that the data encoded has been signed\n    * correctly by routing to the correct verifier, and bills the user if applicable.\n    * @param payload The encoded data to be verified, including the signed\n    * report.\n    * @param parameterPayload fee metadata for billing. For the current implementation this is just the abi-encoded fee token ERC-20 address\n    * @return verifierResponse The encoded report from the verifier.\n    */\n    function verify(\n        bytes calldata payload,\n        bytes calldata parameterPayload\n    ) external payable returns (bytes memory verifierResponse);\n}\n"
    },
    "contracts/oracle/IOracleProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OracleUtils.sol\";\n\n// @title IOracleProvider\n// @dev Interface for an oracle provider\ninterface IOracleProvider {\n    function getOraclePrice(\n        address token,\n        bytes memory data\n    ) external returns (OracleUtils.ValidatedPrice memory);\n}\n"
    },
    "contracts/oracle/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// @title IPriceFeed\n// @dev Interface for a price feed\ninterface IPriceFeed {\n    function latestRoundData() external view returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/oracle/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport { AggregatorV2V3Interface } from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol\";\n\nimport \"../role/RoleModule.sol\";\n\nimport \"./OracleUtils.sol\";\nimport \"./IOracleProvider.sol\";\nimport \"./ChainlinkPriceFeedUtils.sol\";\nimport \"../price/Price.sol\";\n\nimport \"../chain/Chain.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\n\nimport \"../utils/Precision.sol\";\nimport \"../utils/Cast.sol\";\nimport \"../utils/Uint256Mask.sol\";\n\n// @title Oracle\n// @dev Contract to validate and store signed values\n// Some calculations e.g. calculating the size in tokens for a position\n// may not work with zero / negative prices\n// as a result, zero / negative prices are considered empty / invalid\n// A market may need to be manually settled in this case\ncontract Oracle is RoleModule {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using Price for Price.Props;\n    using Uint256Mask for Uint256Mask.Mask;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n    AggregatorV2V3Interface public immutable sequencerUptimeFeed;\n\n    // tokensWithPrices stores the tokens with prices that have been set\n    // this is used in clearAllPrices to help ensure that all token prices\n    // set in setPrices are cleared after use\n    EnumerableSet.AddressSet internal tokensWithPrices;\n    mapping(address => Price.Props) public primaryPrices;\n\n    uint256 public minTimestamp;\n    uint256 public maxTimestamp;\n\n    constructor(\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        AggregatorV2V3Interface _sequencerUptimeFeed\n    ) RoleModule(_roleStore) {\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n        sequencerUptimeFeed = _sequencerUptimeFeed;\n    }\n\n    // this can be used to help ensure that on-chain prices are updated\n    // before actions dependent on those on-chain prices are allowed\n    // additionally, this can also be used to provide a grace period for\n    // users to top up collateral before liquidations occur\n    function validateSequencerUp() external view {\n        if (address(sequencerUptimeFeed) == address(0)) {\n            return;\n        }\n\n        (\n            /*uint80 roundID*/,\n            int256 answer,\n            uint256 startedAt,\n            /*uint256 updatedAt*/,\n            /*uint80 answeredInRound*/\n        ) = sequencerUptimeFeed.latestRoundData();\n\n        // answer == 0: sequencer is up\n        // answer == 1: sequencer is down\n        bool isSequencerUp = answer == 0;\n        if (!isSequencerUp) {\n            revert Errors.SequencerDown();\n        }\n\n        uint256 sequencerGraceDuration = dataStore.getUint(Keys.SEQUENCER_GRACE_DURATION);\n\n        // ensure the grace duration has passed after the\n        // sequencer is back up.\n        uint256 timeSinceUp = block.timestamp - startedAt;\n        if (timeSinceUp <= sequencerGraceDuration) {\n            revert Errors.SequencerGraceDurationNotYetPassed(timeSinceUp, sequencerGraceDuration);\n        }\n    }\n\n    function setPrices(\n        OracleUtils.SetPricesParams memory params\n    ) external onlyController {\n        OracleUtils.ValidatedPrice[] memory prices = _validatePrices(params, false);\n\n        _setPrices(prices);\n    }\n\n    function setPricesForAtomicAction(\n        OracleUtils.SetPricesParams memory params\n    ) external onlyController {\n        OracleUtils.ValidatedPrice[] memory prices = _validatePrices(params, true);\n\n        _setPrices(prices);\n    }\n\n    // @dev set the primary price\n    // @param token the token to set the price for\n    // @param price the price value to set to\n    function setPrimaryPrice(address token, Price.Props memory price) external onlyController {\n        _setPrimaryPrice(token, price);\n    }\n\n    function setTimestamps(uint256 _minTimestamp, uint256 _maxTimestamp) external onlyController {\n        minTimestamp = _minTimestamp;\n        maxTimestamp = _maxTimestamp;\n    }\n\n    // @dev clear all prices\n    function clearAllPrices() external onlyController {\n        uint256 length = tokensWithPrices.length();\n        for (uint256 i; i < length; i++) {\n            address token = tokensWithPrices.at(0);\n            _removePrimaryPrice(token);\n        }\n\n        minTimestamp = 0;\n        maxTimestamp = 0;\n    }\n\n    // @dev get the length of tokensWithPrices\n    // @return the length of tokensWithPrices\n    function getTokensWithPricesCount() external view returns (uint256) {\n        return tokensWithPrices.length();\n    }\n\n    // @dev get the tokens of tokensWithPrices for the specified indexes\n    // @param start the start index, the value for this index will be included\n    // @param end the end index, the value for this index will not be included\n    // @return the tokens of tokensWithPrices for the specified indexes\n    function getTokensWithPrices(uint256 start, uint256 end) external view returns (address[] memory) {\n        return tokensWithPrices.valuesAt(start, end);\n    }\n\n    // @dev get the primary price of a token\n    // @param token the token to get the price for\n    // @return the primary price of a token\n    function getPrimaryPrice(address token) external view returns (Price.Props memory) {\n        if (token == address(0)) { return Price.Props(0, 0); }\n\n        Price.Props memory price = primaryPrices[token];\n        if (price.isEmpty()) {\n            revert Errors.EmptyPrimaryPrice(token);\n        }\n\n        return price;\n    }\n\n    function validatePrices(\n        OracleUtils.SetPricesParams memory params,\n        bool forAtomicAction\n    ) external onlyController returns (OracleUtils.ValidatedPrice[] memory) {\n        return _validatePrices(params, forAtomicAction);\n    }\n\n    // @dev validate and set prices\n    // @param params OracleUtils.SetPricesParams\n    function _setPrices(\n        OracleUtils.ValidatedPrice[] memory prices\n    ) internal {\n        // in case of gasless relay the prices are not required if there is no need to swap fee tokens\n        if (prices.length == 0) {\n            return;\n        }\n\n        if (tokensWithPrices.length() != 0) {\n            revert Errors.NonEmptyTokensWithPrices(tokensWithPrices.length());\n        }\n\n        uint256 _minTimestamp = prices[0].timestamp;\n        uint256 _maxTimestamp = prices[0].timestamp;\n\n        for (uint256 i; i < prices.length; i++) {\n            OracleUtils.ValidatedPrice memory validatedPrice = prices[i];\n\n            _setPrimaryPrice(validatedPrice.token, Price.Props(\n                validatedPrice.min,\n                validatedPrice.max\n            ));\n\n            if (validatedPrice.timestamp < _minTimestamp) {\n                _minTimestamp = validatedPrice.timestamp;\n            }\n\n            if (validatedPrice.timestamp > _maxTimestamp) {\n                _maxTimestamp = validatedPrice.timestamp;\n            }\n\n            _emitOraclePriceUpdated(\n                validatedPrice.token,\n                validatedPrice.min,\n                validatedPrice.max,\n                validatedPrice.timestamp,\n                validatedPrice.provider\n            );\n        }\n\n        uint256 maxRange = dataStore.getUint(Keys.MAX_ORACLE_TIMESTAMP_RANGE);\n        if (_maxTimestamp - _minTimestamp > maxRange) {\n            revert Errors.MaxOracleTimestampRangeExceeded(_maxTimestamp - _minTimestamp, maxRange);\n        }\n\n        minTimestamp = _minTimestamp;\n        maxTimestamp = _maxTimestamp;\n    }\n\n    function _validatePrices(\n        OracleUtils.SetPricesParams memory params,\n        bool forAtomicAction\n    ) internal returns (OracleUtils.ValidatedPrice[] memory) {\n        if (params.tokens.length != params.providers.length) {\n            revert Errors.InvalidOracleSetPricesProvidersParam(params.tokens.length, params.providers.length);\n        }\n\n        if (params.tokens.length != params.data.length) {\n            revert Errors.InvalidOracleSetPricesDataParam(params.tokens.length, params.data.length);\n        }\n\n        OracleUtils.ValidatedPrice[] memory prices = new OracleUtils.ValidatedPrice[](params.tokens.length);\n\n        if (params.tokens.length == 0) {\n            return prices;\n        }\n\n        uint256 maxPriceAge = dataStore.getUint(Keys.MAX_ORACLE_PRICE_AGE);\n        uint256 maxRefPriceDeviationFactor = dataStore.getUint(Keys.MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR);\n\n        for (uint256 i; i < params.tokens.length; i++) {\n            address provider = params.providers[i];\n\n            if (!dataStore.getBool(Keys.isOracleProviderEnabledKey(provider))) {\n                revert Errors.InvalidOracleProvider(provider);\n            }\n\n            address token = params.tokens[i];\n\n            bool isAtomicProvider = dataStore.getBool(Keys.isAtomicOracleProviderKey(provider));\n\n            // if the action is atomic then only validate that the provider is an\n            // atomic provider\n            // else, validate that the provider matches the oracleProviderForToken\n            //\n            // since for atomic actions, any atomic provider can be used, it is\n            // recommended that only one atomic provider is configured per token\n            // otherwise there is a risk that if there is a difference in pricing\n            // between atomic oracle providers for a token, a user could use that\n            // to gain a profit by alternating actions between the two atomic\n            // providers\n            if (forAtomicAction) {\n                if (!isAtomicProvider) {\n                    revert Errors.NonAtomicOracleProvider(provider);\n                }\n            } else {\n                address expectedProvider = dataStore.getAddress(Keys.oracleProviderForTokenKey(token));\n                if (provider != expectedProvider) {\n                    revert Errors.InvalidOracleProviderForToken(provider, expectedProvider);\n                }\n            }\n\n            bytes memory data = params.data[i];\n\n            OracleUtils.ValidatedPrice memory validatedPrice = IOracleProvider(provider).getOraclePrice(\n                token,\n                data\n            );\n\n            // for atomic providers, the timestamp will be the current block's timestamp\n            // the timestamp should not be adjusted\n            if (!isAtomicProvider) {\n                uint256 timestampAdjustment = dataStore.getUint(Keys.oracleTimestampAdjustmentKey(provider, token));\n                validatedPrice.timestamp -= timestampAdjustment;\n            }\n\n            if (validatedPrice.timestamp + maxPriceAge < Chain.currentTimestamp()) {\n                revert Errors.MaxPriceAgeExceeded(validatedPrice.timestamp, Chain.currentTimestamp());\n            }\n\n            // for atomic providers, assume that Chainlink would be the main provider\n            // so it would be redundant to re-fetch the Chainlink price for validation\n            if (!isAtomicProvider) {\n                (bool hasRefPrice, uint256 refPrice) = ChainlinkPriceFeedUtils.getPriceFeedPrice(dataStore, token);\n\n                if (hasRefPrice) {\n                    _validateRefPrice(\n                        token,\n                        validatedPrice.min,\n                        refPrice,\n                        maxRefPriceDeviationFactor\n                    );\n\n                    _validateRefPrice(\n                        token,\n                        validatedPrice.max,\n                        refPrice,\n                        maxRefPriceDeviationFactor\n                    );\n                }\n            }\n\n            prices[i] = validatedPrice;\n        }\n\n        return prices;\n    }\n\n    function _validateRefPrice(\n        address token,\n        uint256 price,\n        uint256 refPrice,\n        uint256 maxRefPriceDeviationFactor\n    ) internal pure {\n        uint256 diff = Calc.diff(price, refPrice);\n        uint256 diffFactor = Precision.toFactor(diff, refPrice);\n\n        if (diffFactor > maxRefPriceDeviationFactor) {\n            revert Errors.MaxRefPriceDeviationExceeded(\n                token,\n                price,\n                refPrice,\n                maxRefPriceDeviationFactor\n            );\n        }\n    }\n\n    function _setPrimaryPrice(address token, Price.Props memory price) internal {\n        if (price.min > price.max) {\n            revert Errors.InvalidMinMaxForPrice(token, price.min, price.max);\n        }\n\n        Price.Props memory existingPrice = primaryPrices[token];\n\n        if (!existingPrice.isEmpty()) {\n            revert Errors.PriceAlreadySet(token, existingPrice.min, existingPrice.max);\n        }\n\n        primaryPrices[token] = price;\n        tokensWithPrices.add(token);\n    }\n\n    function _removePrimaryPrice(address token) internal {\n        delete primaryPrices[token];\n        tokensWithPrices.remove(token);\n    }\n\n    function _emitOraclePriceUpdated(\n        address token,\n        uint256 minPrice,\n        uint256 maxPrice,\n        uint256 timestamp,\n        address provider\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"token\", token);\n        eventData.addressItems.setItem(1, \"provider\", provider);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"minPrice\", minPrice);\n        eventData.uintItems.setItem(1, \"maxPrice\", maxPrice);\n        eventData.uintItems.setItem(2, \"timestamp\", timestamp);\n\n        eventEmitter.emitEventLog1(\n            \"OraclePriceUpdate\",\n            Cast.toBytes32(token),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/oracle/OracleModule.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./Oracle.sol\";\n\n// @title OracleModule\n// @dev Provides convenience functions for interacting with the Oracle\ncontract OracleModule {\n    Oracle public immutable oracle;\n\n    constructor(Oracle _oracle) {\n        oracle = _oracle;\n    }\n\n    // @dev sets oracle prices, perform any additional tasks required,\n    // and clear the oracle prices after\n    //\n    // care should be taken to avoid re-entrancy while using this call\n    // since re-entrancy could allow functions to be called with prices\n    // meant for a different type of transaction\n    // the tokensWithPrices.length check in oracle.setPrices should help\n    // mitigate this\n    //\n    // @param params OracleUtils.SetPricesParams\n    modifier withOraclePrices(\n        OracleUtils.SetPricesParams memory params\n    ) {\n        oracle.setPrices(params);\n        _;\n        oracle.clearAllPrices();\n    }\n\n    modifier withOraclePricesForAtomicAction(\n        OracleUtils.SetPricesParams memory params\n    ) {\n        oracle.setPricesForAtomicAction(params);\n        _;\n        oracle.clearAllPrices();\n    }\n\n    // @dev set oracle prices for a simulation\n    // tokensWithPrices is not set in this function\n    // it is possible for withSimulatedOraclePrices to be called and a function\n    // using withOraclePrices to be called after\n    // or for a function using withOraclePrices to be called and withSimulatedOraclePrices\n    // called after\n    // this should not cause an issue because this transaction should always revert\n    // and any state changes based on simulated prices as well as the setting of simulated\n    // prices should not be persisted\n    // @param params OracleUtils.SimulatePricesParams\n    modifier withSimulatedOraclePrices(\n        OracleUtils.SimulatePricesParams memory params\n    ) {\n        if (params.primaryTokens.length != params.primaryPrices.length) {\n            revert Errors.InvalidPrimaryPricesForSimulation(params.primaryTokens.length, params.primaryPrices.length);\n        }\n\n        for (uint256 i; i < params.primaryTokens.length; i++) {\n            address token = params.primaryTokens[i];\n            Price.Props memory price = params.primaryPrices[i];\n            oracle.setPrimaryPrice(token, price);\n        }\n\n        oracle.setTimestamps(params.minTimestamp, params.maxTimestamp);\n\n        _;\n\n        revert Errors.EndOfOracleSimulation();\n    }\n}\n"
    },
    "contracts/oracle/OracleStore.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../role/RoleModule.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\n// @title OracleStore\n// @dev Stores the list of oracle signers\ncontract OracleStore is RoleModule {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.AddressSet;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    EventEmitter public immutable eventEmitter;\n\n    EnumerableSet.AddressSet internal signers;\n\n    constructor(RoleStore _roleStore, EventEmitter _eventEmitter) RoleModule(_roleStore) {\n        eventEmitter = _eventEmitter;\n    }\n\n    // @dev adds a signer\n    // @param account address of the signer to add\n    function addSigner(address account) external onlyController {\n        signers.add(account);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventEmitter.emitEventLog1(\n            \"SignerAdded\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    // @dev removes a signer\n    // @param account address of the signer to remove\n    function removeSigner(address account) external onlyController {\n        signers.remove(account);\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventEmitter.emitEventLog1(\n            \"SignerRemoved\",\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    // @dev get the total number of signers\n    // @return the total number of signers\n    function getSignerCount() external view returns (uint256) {\n        return signers.length();\n    }\n\n    // @dev get the signer at the specified index\n    // @param index the index of the signer to get\n    // @return the signer at the specified index\n    function getSigner(uint256 index) external view returns (address) {\n        return signers.at(index);\n    }\n\n    // @dev get the signers for the specified indexes\n    // @param start the start index, the value for this index will be included\n    // @param end the end index, the value for this index will not be included\n    // @return the signers for the specified indexes\n    function getSigners(uint256 start, uint256 end) external view returns (address[] memory) {\n        return signers.valuesAt(start, end);\n    }\n}\n"
    },
    "contracts/oracle/OracleUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Array.sol\";\nimport \"../price/Price.sol\";\n\n// @title OracleUtils\n// @dev Library for oracle functions\nlibrary OracleUtils {\n    using Array for uint256[];\n\n    struct SetPricesParams {\n        address[] tokens;\n        address[] providers;\n        bytes[] data;\n    }\n\n    struct ValidatedPrice {\n        address token;\n        uint256 min;\n        uint256 max;\n        uint256 timestamp;\n        address provider;\n    }\n\n    struct SimulatePricesParams {\n        address[] primaryTokens;\n        Price.Props[] primaryPrices;\n        uint256 minTimestamp;\n        uint256 maxTimestamp;\n    }\n\n    function isOracleError(bytes4 errorSelector) internal pure returns (bool) {\n        if (isOracleTimestampError(errorSelector)) {\n            return true;\n        }\n\n        if (isEmptyPriceError(errorSelector)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function isEmptyPriceError(bytes4 errorSelector) internal pure returns (bool) {\n        if (errorSelector == Errors.EmptyPrimaryPrice.selector) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function isOracleTimestampError(bytes4 errorSelector) internal pure returns (bool) {\n        if (errorSelector == Errors.OracleTimestampsAreLargerThanRequestExpirationTime.selector) {\n            return true;\n        }\n\n        if (errorSelector == Errors.OracleTimestampsAreSmallerThanRequired.selector) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/order/AutoCancelUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../error/Errors.sol\";\n\nlibrary AutoCancelUtils {\n    function addAutoCancelOrderKey(DataStore dataStore, bytes32 positionKey, bytes32 orderKey) internal {\n        bytes32 listKey = Keys.autoCancelOrderListKey(positionKey);\n        dataStore.addBytes32(listKey, orderKey);\n\n        uint256 maxAutoCancelOrders = getMaxAutoCancelOrders(dataStore);\n        uint256 count = dataStore.getBytes32Count(listKey);\n        if (count > maxAutoCancelOrders) {\n            revert Errors.MaxAutoCancelOrdersExceeded(count, maxAutoCancelOrders);\n        }\n    }\n\n    function removeAutoCancelOrderKey(DataStore dataStore, bytes32 positionKey, bytes32 orderKey) internal {\n        bytes32 listKey = Keys.autoCancelOrderListKey(positionKey);\n        dataStore.removeBytes32(listKey, orderKey);\n    }\n\n    function getAutoCancelOrderKeys(DataStore dataStore, bytes32 positionKey) internal view returns (bytes32[] memory) {\n        bytes32 listKey = Keys.autoCancelOrderListKey(positionKey);\n        uint256 maxAutoCancelOrders = getMaxAutoCancelOrders(dataStore);\n        return dataStore.getBytes32ValuesAt(listKey, 0, maxAutoCancelOrders);\n    }\n\n    function getMaxAutoCancelOrders(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getUint(Keys.MAX_AUTO_CANCEL_ORDERS);\n    }\n}\n"
    },
    "contracts/order/BaseOrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./Order.sol\";\nimport \"../market/Market.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../referral/IReferralStorage.sol\";\n\nimport \"../order/OrderVault.sol\";\n\nimport \"../oracle/Oracle.sol\";\nimport \"../swap/SwapHandler.sol\";\n\n// @title Order\n// @dev Library for common order functions used in OrderUtils, IncreaseOrderUtils\n// DecreaseOrderUtils, SwapOrderUtils\nlibrary BaseOrderUtils {\n    using SafeCast for int256;\n    using SafeCast for uint256;\n\n    using Order for Order.Props;\n    using Price for Price.Props;\n\n    // @dev ExecuteOrderParams struct used in executeOrder to avoid stack\n    // too deep errors\n    //\n    // @param contracts ExecuteOrderParamsContracts\n    // @param key the key of the order to execute\n    // @param order the order to execute\n    // @param swapPathMarkets the market values of the markets in the swapPath\n    // @param minOracleTimestamp the min oracle timestamp\n    // @param maxOracleTimestamp the max oracle timestamp\n    // @param market market values of the trading market\n    // @param keeper the keeper sending the transaction\n    // @param startingGas the starting gas\n    // @param secondaryOrderType the secondary order type\n    struct ExecuteOrderParams {\n        ExecuteOrderParamsContracts contracts;\n        bytes32 key;\n        Order.Props order;\n        Market.Props[] swapPathMarkets;\n        uint256 minOracleTimestamp;\n        uint256 maxOracleTimestamp;\n        Market.Props market;\n        address keeper;\n        uint256 startingGas;\n        Order.SecondaryOrderType secondaryOrderType;\n    }\n\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param orderVault OrderVault\n    // @param oracle Oracle\n    // @param swapHandler SwapHandler\n    // @param referralStorage IReferralStorage\n    struct ExecuteOrderParamsContracts {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        OrderVault orderVault;\n        Oracle oracle;\n        SwapHandler swapHandler;\n        IReferralStorage referralStorage;\n    }\n\n    struct GetExecutionPriceCache {\n        uint256 price;\n        uint256 executionPrice;\n        int256 adjustedPriceImpactUsd;\n    }\n\n    function isSupportedOrder(Order.OrderType orderType) internal pure returns (bool) {\n        return orderType == Order.OrderType.MarketSwap ||\n               orderType == Order.OrderType.LimitSwap ||\n               orderType == Order.OrderType.MarketIncrease ||\n               orderType == Order.OrderType.MarketDecrease ||\n               orderType == Order.OrderType.LimitIncrease ||\n               orderType == Order.OrderType.LimitDecrease ||\n               orderType == Order.OrderType.StopIncrease ||\n               orderType == Order.OrderType.StopLossDecrease ||\n               orderType == Order.OrderType.Liquidation;\n    }\n\n    // @dev check if an orderType is a market order\n    // @param orderType the order type\n    // @return whether an orderType is a market order\n    function isMarketOrder(Order.OrderType orderType) internal pure returns (bool) {\n        // a liquidation order is not considered as a market order\n        return orderType == Order.OrderType.MarketSwap ||\n               orderType == Order.OrderType.MarketIncrease ||\n               orderType == Order.OrderType.MarketDecrease;\n    }\n\n    // @dev check if an orderType is a swap order\n    // @param orderType the order type\n    // @return whether an orderType is a swap order\n    function isSwapOrder(Order.OrderType orderType) internal pure returns (bool) {\n        return orderType == Order.OrderType.MarketSwap ||\n               orderType == Order.OrderType.LimitSwap;\n    }\n\n    // @dev check if an orderType is a position order\n    // @param orderType the order type\n    // @return whether an orderType is a position order\n    function isPositionOrder(Order.OrderType orderType) internal pure returns (bool) {\n        return isIncreaseOrder(orderType) || isDecreaseOrder(orderType);\n    }\n\n    // @dev check if an orderType is an increase order\n    // @param orderType the order type\n    // @return whether an orderType is an increase order\n    function isIncreaseOrder(Order.OrderType orderType) internal pure returns (bool) {\n        return orderType == Order.OrderType.MarketIncrease ||\n               orderType == Order.OrderType.LimitIncrease ||\n               orderType == Order.OrderType.StopIncrease;\n    }\n\n    // @dev check if an orderType is a decrease order\n    // @param orderType the order type\n    // @return whether an orderType is a decrease order\n    function isDecreaseOrder(Order.OrderType orderType) internal pure returns (bool) {\n        return orderType == Order.OrderType.MarketDecrease ||\n               orderType == Order.OrderType.LimitDecrease ||\n               orderType == Order.OrderType.StopLossDecrease ||\n               orderType == Order.OrderType.Liquidation;\n    }\n\n    // @dev check if an orderType is a liquidation order\n    // @param orderType the order type\n    // @return whether an orderType is a liquidation order\n    function isLiquidationOrder(Order.OrderType orderType) internal pure returns (bool) {\n        return orderType == Order.OrderType.Liquidation;\n    }\n\n    // @dev validate the price for increase / decrease orders based on the triggerPrice\n    // the acceptablePrice for increase / decrease orders is validated in getExecutionPrice\n    //\n    // it is possible to update the oracle to support a primaryPrice and a secondaryPrice\n    // which would allow for stop-loss orders to be executed at exactly the triggerPrice\n    //\n    // however, this may lead to gaming issues, an example:\n    // - the current price is $2020\n    // - a user has a long position and creates a stop-loss decrease order for < $2010\n    // - if the order has a swap from ETH to USDC and the user is able to cause the order\n    // to be frozen / unexecutable by manipulating state or otherwise\n    // - then if price decreases to $2000, and the user is able to manipulate state such that\n    // the order becomes executable with $2010 being used as the price instead\n    // - then the user would be able to perform the swap at a higher price than should possible\n    //\n    // additionally, using the exact order's triggerPrice could lead to gaming issues during times\n    // of volatility due to users setting tight stop-losses to minimize loss while betting on a\n    // directional price movement, fees and price impact should help a bit with this, but there\n    // still may be some probability of success\n    //\n    // the order keepers can use the closest oracle price to the triggerPrice for execution, which\n    // should lead to similar order execution prices with reduced gaming risks\n    //\n    // if an order is frozen, the frozen order keepers should use the most recent price for order\n    // execution instead\n    //\n    // @param oracle Oracle\n    // @param indexToken the index token\n    // @param orderType the order type\n    // @param triggerPrice the order's triggerPrice\n    // @param isLong whether the order is for a long or short\n    function validateOrderTriggerPrice(\n        Oracle oracle,\n        address indexToken,\n        Order.OrderType orderType,\n        uint256 triggerPrice,\n        bool isLong\n    ) internal view {\n        if (\n            isSwapOrder(orderType) ||\n            isMarketOrder(orderType) ||\n            isLiquidationOrder(orderType)\n        ) {\n            return;\n        }\n\n        Price.Props memory primaryPrice = oracle.getPrimaryPrice(indexToken);\n\n        // for limit increase long positions:\n        //      - the order should be executed when the oracle price is <= triggerPrice\n        //      - primaryPrice.max should be used for the oracle price\n        // for limit increase short positions:\n        //      - the order should be executed when the oracle price is >= triggerPrice\n        //      - primaryPrice.min should be used for the oracle price\n        if (orderType == Order.OrderType.LimitIncrease) {\n            bool ok = isLong ? primaryPrice.max <= triggerPrice : primaryPrice.min >= triggerPrice;\n\n            if (!ok) {\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\n            }\n\n            return;\n        }\n\n        // for stop increase long positions:\n        //      - the order should be executed when the oracle price is >= triggerPrice\n        //      - primaryPrice.max should be used for the oracle price\n        // for stop increase short positions:\n        //      - the order should be executed when the oracle price is <= triggerPrice\n        //      - primaryPrice.min should be used for the oracle price\n        if (orderType == Order.OrderType.StopIncrease) {\n            bool ok = isLong ? primaryPrice.max >= triggerPrice : primaryPrice.min <= triggerPrice;\n\n            if (!ok) {\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\n            }\n\n            return;\n        }\n\n        // for limit decrease long positions:\n        //      - the order should be executed when the oracle price is >= triggerPrice\n        //      - primaryPrice.min should be used for the oracle price\n        // for limit decrease short positions:\n        //      - the order should be executed when the oracle price is <= triggerPrice\n        //      - primaryPrice.max should be used for the oracle price\n        if (orderType == Order.OrderType.LimitDecrease) {\n            bool ok = isLong ? primaryPrice.min >= triggerPrice : primaryPrice.max <= triggerPrice;\n\n            if (!ok) {\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\n            }\n\n            return;\n        }\n\n        // for stop-loss decrease long positions:\n        //      - the order should be executed when the oracle price is <= triggerPrice\n        //      - primaryPrice.min should be used for the oracle price\n        // for stop-loss decrease short positions:\n        //      - the order should be executed when the oracle price is >= triggerPrice\n        //      - primaryPrice.max should be used for the oracle price\n        if (orderType == Order.OrderType.StopLossDecrease) {\n            bool ok = isLong ? primaryPrice.min <= triggerPrice : primaryPrice.max >= triggerPrice;\n\n            if (!ok) {\n                revert Errors.InvalidOrderPrices(primaryPrice.min, primaryPrice.max, triggerPrice, uint256(orderType));\n            }\n\n            return;\n        }\n\n        revert Errors.UnsupportedOrderType(uint256(orderType));\n    }\n\n    function validateOrderValidFromTime(\n        Order.OrderType orderType,\n        uint256 validFromTime\n    ) internal view {\n        if (isMarketOrder(orderType)) {\n            return;\n        }\n\n        uint256 currentTimestamp = Chain.currentTimestamp();\n        if (validFromTime > currentTimestamp) {\n            revert Errors.OrderValidFromTimeNotReached(validFromTime, currentTimestamp);\n        }\n    }\n\n    function getExecutionPriceForIncrease(\n        uint256 sizeDeltaUsd,\n        uint256 sizeDeltaInTokens,\n        uint256 acceptablePrice,\n        bool isLong\n    ) internal pure returns (uint256) {\n        if (sizeDeltaInTokens == 0) {\n            revert Errors.EmptySizeDeltaInTokens();\n        }\n\n        uint256 executionPrice = sizeDeltaUsd / sizeDeltaInTokens;\n\n        // increase order:\n        //     - long: executionPrice should be smaller than acceptablePrice\n        //     - short: executionPrice should be larger than acceptablePrice\n        if (\n            (isLong && executionPrice <= acceptablePrice)  ||\n            (!isLong && executionPrice >= acceptablePrice)\n        ) {\n            return executionPrice;\n        }\n\n        // the validateOrderTriggerPrice function should have validated if the price fulfills\n        // the order's trigger price\n        //\n        // for increase orders, the negative price impact is not capped\n        //\n        // for both increase and decrease orders, if it is due to price impact that the\n        // order cannot be fulfilled then the order should be frozen\n        //\n        // this is to prevent gaming by manipulation of the price impact value\n        //\n        // usually it should be costly to game the price impact value\n        // however, for certain cases, e.g. a user already has a large position opened\n        // the user may create limit orders that would only trigger after they close\n        // their position, this gives the user the option to cancel the pending order if\n        // prices do not move in their favour or to close their position and let the order\n        // execute if prices move in their favour\n        //\n        // it may also be possible for users to prevent the execution of orders from other users\n        // by manipulating the price impact, though this should be costly\n        revert Errors.OrderNotFulfillableAtAcceptablePrice(executionPrice, acceptablePrice);\n    }\n\n    function getExecutionPriceForDecrease(\n        Price.Props memory indexTokenPrice,\n        uint256 positionSizeInUsd,\n        uint256 positionSizeInTokens,\n        uint256 sizeDeltaUsd,\n        int256 priceImpactUsd,\n        uint256 acceptablePrice,\n        bool isLong\n    ) internal pure returns (uint256) {\n        GetExecutionPriceCache memory cache;\n\n        // decrease order:\n        //     - long: use the smaller price\n        //     - short: use the larger price\n        cache.price = indexTokenPrice.pickPrice(!isLong);\n        cache.executionPrice = cache.price;\n\n        // using closing of long positions as an example\n        // realized pnl is calculated as totalPositionPnl * sizeDeltaInTokens / position.sizeInTokens\n        // totalPositionPnl: position.sizeInTokens * executionPrice - position.sizeInUsd\n        // sizeDeltaInTokens: position.sizeInTokens * sizeDeltaUsd / position.sizeInUsd\n        // realized pnl: (position.sizeInTokens * executionPrice - position.sizeInUsd) * (position.sizeInTokens * sizeDeltaUsd / position.sizeInUsd) / position.sizeInTokens\n        // realized pnl: (position.sizeInTokens * executionPrice - position.sizeInUsd) * (sizeDeltaUsd / position.sizeInUsd)\n        // priceImpactUsd should adjust the execution price such that:\n        // [(position.sizeInTokens * executionPrice - position.sizeInUsd) * (sizeDeltaUsd / position.sizeInUsd)] -\n        // [(position.sizeInTokens * price - position.sizeInUsd) * (sizeDeltaUsd / position.sizeInUsd)] = priceImpactUsd\n        //\n        // (position.sizeInTokens * executionPrice - position.sizeInUsd) - (position.sizeInTokens * price - position.sizeInUsd)\n        // = priceImpactUsd / (sizeDeltaUsd / position.sizeInUsd)\n        // = priceImpactUsd * position.sizeInUsd / sizeDeltaUsd\n        //\n        // position.sizeInTokens * executionPrice - position.sizeInTokens * price = priceImpactUsd * position.sizeInUsd / sizeDeltaUsd\n        // position.sizeInTokens * (executionPrice - price) = priceImpactUsd * position.sizeInUsd / sizeDeltaUsd\n        // executionPrice - price = (priceImpactUsd * position.sizeInUsd) / (sizeDeltaUsd * position.sizeInTokens)\n        // executionPrice = price + (priceImpactUsd * position.sizeInUsd) / (sizeDeltaUsd * position.sizeInTokens)\n        // executionPrice = price + (priceImpactUsd / sizeDeltaUsd) * (position.sizeInUsd / position.sizeInTokens)\n        // executionPrice = price + (priceImpactUsd * position.sizeInUsd / position.sizeInTokens) / sizeDeltaUsd\n        //\n        // e.g. if price is $2000, sizeDeltaUsd is $5000, priceImpactUsd is -$1000, position.sizeInUsd is $10,000, position.sizeInTokens is 5\n        // executionPrice = 2000 + (-1000 * 10,000 / 5) / 5000 = 1600\n        // realizedPnl based on price, without price impact: 0\n        // realizedPnl based on executionPrice, with price impact: (5 * 1600 - 10,000) * (5 * 5000 / 10,000) / 5 => -1000\n\n        // a positive adjustedPriceImpactUsd would decrease the executionPrice\n        // a negative adjustedPriceImpactUsd would increase the executionPrice\n\n        // for increase orders, the adjustedPriceImpactUsd is added to the divisor\n        // a positive adjustedPriceImpactUsd would increase the divisor and decrease the executionPrice\n        // increase long order:\n        //      - if price impact is positive, adjustedPriceImpactUsd should be positive, to decrease the executionPrice\n        //      - if price impact is negative, adjustedPriceImpactUsd should be negative, to increase the executionPrice\n        // increase short order:\n        //      - if price impact is positive, adjustedPriceImpactUsd should be negative, to increase the executionPrice\n        //      - if price impact is negative, adjustedPriceImpactUsd should be positive, to decrease the executionPrice\n\n        // for decrease orders, the adjustedPriceImpactUsd adjusts the numerator\n        // a positive adjustedPriceImpactUsd would increase the divisor and increase the executionPrice\n        // decrease long order:\n        //      - if price impact is positive, adjustedPriceImpactUsd should be positive, to increase the executionPrice\n        //      - if price impact is negative, adjustedPriceImpactUsd should be negative, to decrease the executionPrice\n        // decrease short order:\n        //      - if price impact is positive, adjustedPriceImpactUsd should be negative, to decrease the executionPrice\n        //      - if price impact is negative, adjustedPriceImpactUsd should be positive, to increase the executionPrice\n        // adjust price by price impact\n        if (sizeDeltaUsd > 0 && positionSizeInTokens > 0) {\n            cache.adjustedPriceImpactUsd = isLong ? priceImpactUsd : -priceImpactUsd;\n\n            if (cache.adjustedPriceImpactUsd < 0 && (-cache.adjustedPriceImpactUsd).toUint256() > sizeDeltaUsd) {\n                revert Errors.PriceImpactLargerThanOrderSize(cache.adjustedPriceImpactUsd, sizeDeltaUsd);\n            }\n\n            int256 adjustment = Precision.mulDiv(positionSizeInUsd, cache.adjustedPriceImpactUsd, positionSizeInTokens) / sizeDeltaUsd.toInt256();\n            int256 _executionPrice = cache.price.toInt256() + adjustment;\n\n            if (_executionPrice < 0) {\n                revert Errors.NegativeExecutionPrice(_executionPrice, cache.price, positionSizeInUsd, cache.adjustedPriceImpactUsd, sizeDeltaUsd);\n            }\n\n            cache.executionPrice = _executionPrice.toUint256();\n        }\n\n        // decrease order:\n        //     - long: executionPrice should be larger than acceptablePrice\n        //     - short: executionPrice should be smaller than acceptablePrice\n        if (\n            (isLong && cache.executionPrice >= acceptablePrice) ||\n            (!isLong && cache.executionPrice <= acceptablePrice)\n        ) {\n            return cache.executionPrice;\n        }\n\n        // the validateOrderTriggerPrice function should have validated if the price fulfills\n        // the order's trigger price\n        //\n        // for decrease orders, the price impact should already be capped, so if the user\n        // had set an acceptable price within the range of the capped price impact, then\n        // the order should be fulfillable at the acceptable price\n        //\n        // for increase orders, the negative price impact is not capped\n        //\n        // for both increase and decrease orders, if it is due to price impact that the\n        // order cannot be fulfilled then the order should be frozen\n        //\n        // this is to prevent gaming by manipulation of the price impact value\n        //\n        // usually it should be costly to game the price impact value\n        // however, for certain cases, e.g. a user already has a large position opened\n        // the user may create limit orders that would only trigger after they close\n        // their position, this gives the user the option to cancel the pending order if\n        // prices do not move in their favour or to close their position and let the order\n        // execute if prices move in their favour\n        //\n        // it may also be possible for users to prevent the execution of orders from other users\n        // by manipulating the price impact, though this should be costly\n        revert Errors.OrderNotFulfillableAtAcceptablePrice(cache.executionPrice, acceptablePrice);\n    }\n\n    // @dev validate that an order exists\n    // @param order the order to check\n    function validateNonEmptyOrder(Order.Props memory order) internal pure {\n        if (order.account() == address(0)) {\n            revert Errors.EmptyOrder();\n        }\n\n        if (order.sizeDeltaUsd() == 0 && order.initialCollateralDeltaAmount() == 0) {\n            revert Errors.EmptyOrder();\n        }\n    }\n\n    function getPositionKey(Order.Props memory order) internal pure returns (bytes32) {\n        if (isDecreaseOrder(order.orderType())) {\n            return Position.getPositionKey(\n                order.account(),\n                order.market(),\n                order.initialCollateralToken(),\n                order.isLong()\n            );\n        }\n\n        revert Errors.UnsupportedOrderType(uint256(order.orderType()));\n    }\n}\n"
    },
    "contracts/order/DecreaseOrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOrderUtils.sol\";\nimport \"../swap/SwapUtils.sol\";\nimport \"../position/DecreasePositionUtils.sol\";\nimport \"../error/ErrorUtils.sol\";\n\n// @title DecreaseOrderUtils\n// @dev Library for functions to help with processing a decrease order\n// note that any updates to the eventData\nlibrary DecreaseOrderUtils {\n    using Position for Position.Props;\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @dev process a decrease order\n    // @param params BaseOrderUtils.ExecuteOrderParams\n    function processOrder(BaseOrderUtils.ExecuteOrderParams memory params) external returns (EventUtils.EventLogData memory) {\n        Order.Props memory order = params.order;\n        MarketUtils.validatePositionMarket(params.contracts.dataStore, params.market);\n\n        bytes32 positionKey = Position.getPositionKey(order.account(), order.market(), order.initialCollateralToken(), order.isLong());\n        Position.Props memory position = PositionStoreUtils.get(params.contracts.dataStore, positionKey);\n        PositionUtils.validateNonEmptyPosition(position);\n\n        validateOracleTimestamp(\n            params.contracts.dataStore,\n            order.orderType(),\n            order.updatedAtTime(),\n            order.validFromTime(),\n            position.increasedAtTime(),\n            position.decreasedAtTime(),\n            params.minOracleTimestamp,\n            params.maxOracleTimestamp\n        );\n\n        DecreasePositionUtils.DecreasePositionResult memory result = DecreasePositionUtils.decreasePosition(\n            PositionUtils.UpdatePositionParams(\n                params.contracts,\n                params.market,\n                order,\n                params.key,\n                position,\n                positionKey,\n                params.secondaryOrderType\n            )\n        );\n\n        // if the pnlToken and the collateralToken are different\n        // and if a swap fails or no swap was requested\n        // then it is possible to receive two separate tokens from decreasing\n        // the position\n        // transfer the two tokens to the user in this case and skip processing\n        // the swapPath\n        if (result.secondaryOutputAmount > 0) {\n            _validateOutputAmount(\n                params.contracts.oracle,\n                result.outputToken,\n                result.outputAmount,\n                result.secondaryOutputToken,\n                result.secondaryOutputAmount,\n                order.minOutputAmount()\n            );\n\n            MarketToken(payable(order.market())).transferOut(\n                result.outputToken,\n                order.receiver(),\n                result.outputAmount,\n                order.shouldUnwrapNativeToken()\n            );\n\n            MarketToken(payable(order.market())).transferOut(\n                result.secondaryOutputToken,\n                order.receiver(),\n                result.secondaryOutputAmount,\n                order.shouldUnwrapNativeToken()\n            );\n\n            return getOutputEventData(\n                result.outputToken,\n                result.outputAmount,\n                result.secondaryOutputToken,\n                result.secondaryOutputAmount,\n                result.orderSizeDeltaUsd,\n                result.orderInitialCollateralDeltaAmount\n            );\n        }\n\n        try params.contracts.swapHandler.swap(\n            SwapUtils.SwapParams(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.contracts.oracle,\n                Bank(payable(order.market())),\n                params.key,\n                result.outputToken,\n                result.outputAmount,\n                params.swapPathMarkets,\n                0,\n                order.receiver(),\n                order.uiFeeReceiver(),\n                order.shouldUnwrapNativeToken(),\n                ISwapPricingUtils.SwapPricingType.Swap\n            )\n        ) returns (address tokenOut, uint256 swapOutputAmount) {\n            _validateOutputAmount(\n                params.contracts.oracle,\n                tokenOut,\n                swapOutputAmount,\n                order.minOutputAmount()\n            );\n\n            return getOutputEventData(\n                tokenOut,\n                swapOutputAmount,\n                address(0),\n                0,\n                result.orderSizeDeltaUsd,\n                result.orderInitialCollateralDeltaAmount\n            );\n        } catch (bytes memory reasonBytes) {\n            (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n\n            _handleSwapError(\n                params.contracts.oracle,\n                order,\n                result,\n                reason,\n                reasonBytes\n            );\n\n            return getOutputEventData(\n                result.outputToken,\n                result.outputAmount,\n                address(0),\n                0,\n                result.orderSizeDeltaUsd,\n                result.orderInitialCollateralDeltaAmount\n            );\n        }\n    }\n\n    function validateOracleTimestamp(\n        DataStore dataStore,\n        Order.OrderType orderType,\n        uint256 orderUpdatedAtTime,\n        uint256 orderValidFromTime,\n        uint256 positionIncreasedAtTime,\n        uint256 positionDecreasedAtTime,\n        uint256 minOracleTimestamp,\n        uint256 maxOracleTimestamp\n    ) internal view {\n        if (orderType == Order.OrderType.MarketDecrease) {\n            if (minOracleTimestamp < orderUpdatedAtTime) {\n                revert Errors.OracleTimestampsAreSmallerThanRequired(minOracleTimestamp, orderUpdatedAtTime);\n            }\n\n            uint256 requestExpirationTime = dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\n\n            if (maxOracleTimestamp > orderUpdatedAtTime + requestExpirationTime) {\n                revert Errors.OracleTimestampsAreLargerThanRequestExpirationTime(\n                    maxOracleTimestamp,\n                    orderUpdatedAtTime,\n                    requestExpirationTime\n                );\n            }\n            return;\n        }\n\n        if (\n            !BaseOrderUtils.isMarketOrder(orderType) &&\n            minOracleTimestamp < orderValidFromTime\n        ) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(minOracleTimestamp, orderValidFromTime);\n        }\n\n        // a user could attempt to frontrun prices by creating a limit decrease\n        // order without a position\n        // when price moves in the user's favour, the user would create a\n        // position then\n        // e.g. price is $5000, a user creates a stop-loss order to\n        // close a long position when price is below $5000\n        // if price decreases to $4995, the user opens a long position at\n        // price $4995\n        // since slightly older prices may be used to execute a position\n        // the user's stop-loss order could be executed at price $5000\n        // for this reason, both the orderUpdatedAtTime and the\n        // positionIncreasedAtTime need to be used as a reference\n        //\n        // if there are multiple decrease orders, an execution of one decrease\n        // order would update the position, so the reference check here is only\n        // with positionIncreasedAtTime instead of a positionUpdatedAtTime value\n        if (\n            orderType == Order.OrderType.LimitDecrease ||\n            orderType == Order.OrderType.StopLossDecrease\n        ) {\n            uint256 latestUpdatedAtTime = orderUpdatedAtTime > positionIncreasedAtTime ? orderUpdatedAtTime : positionIncreasedAtTime;\n            if (minOracleTimestamp < latestUpdatedAtTime) {\n                revert Errors.OracleTimestampsAreSmallerThanRequired(minOracleTimestamp, latestUpdatedAtTime);\n            }\n            return;\n        }\n\n        if (orderType == Order.OrderType.Liquidation) {\n            uint256 latestUpdatedAtTime = positionIncreasedAtTime > positionDecreasedAtTime ? positionIncreasedAtTime : positionDecreasedAtTime;\n            if (minOracleTimestamp < latestUpdatedAtTime) {\n                revert Errors.OracleTimestampsAreSmallerThanRequired(minOracleTimestamp, latestUpdatedAtTime);\n            }\n            return;\n        }\n\n        revert Errors.UnsupportedOrderType(uint256(orderType));\n    }\n\n    // note that minOutputAmount is treated as a USD value for this validation\n    function _validateOutputAmount(\n        Oracle oracle,\n        address outputToken,\n        uint256 outputAmount,\n        uint256 minOutputAmount\n    ) internal view {\n        uint256 outputTokenPrice = oracle.getPrimaryPrice(outputToken).min;\n        uint256 outputUsd = outputAmount * outputTokenPrice;\n\n        if (outputUsd < minOutputAmount) {\n            revert Errors.InsufficientOutputAmount(outputUsd, minOutputAmount);\n        }\n    }\n\n    // note that minOutputAmount is treated as a USD value for this validation\n    function _validateOutputAmount(\n        Oracle oracle,\n        address outputToken,\n        uint256 outputAmount,\n        address secondaryOutputToken,\n        uint256 secondaryOutputAmount,\n        uint256 minOutputAmount\n    ) internal view {\n        uint256 outputTokenPrice = oracle.getPrimaryPrice(outputToken).min;\n        uint256 outputUsd = outputAmount * outputTokenPrice;\n\n        uint256 secondaryOutputTokenPrice = oracle.getPrimaryPrice(secondaryOutputToken).min;\n        uint256 secondaryOutputUsd = secondaryOutputAmount * secondaryOutputTokenPrice;\n\n        uint256 totalOutputUsd = outputUsd + secondaryOutputUsd;\n\n        if (totalOutputUsd < minOutputAmount) {\n            revert Errors.InsufficientOutputAmount(totalOutputUsd, minOutputAmount);\n        }\n    }\n\n    function _handleSwapError(\n        Oracle oracle,\n        Order.Props memory order,\n        DecreasePositionUtils.DecreasePositionResult memory result,\n        string memory reason,\n        bytes memory reasonBytes\n    ) internal {\n        emit SwapUtils.SwapReverted(reason, reasonBytes);\n\n        _validateOutputAmount(\n            oracle,\n            result.outputToken,\n            result.outputAmount,\n            order.minOutputAmount()\n        );\n\n        MarketToken(payable(order.market())).transferOut(\n            result.outputToken,\n            order.receiver(),\n            result.outputAmount,\n            order.shouldUnwrapNativeToken()\n        );\n    }\n\n    function getOutputEventData(\n        address outputToken,\n        uint256 outputAmount,\n        address secondaryOutputToken,\n        uint256 secondaryOutputAmount,\n        uint256 orderSizeDeltaUsd,\n        uint256 orderInitialCollateralDeltaAmount\n    ) internal pure returns (EventUtils.EventLogData memory) {\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"outputToken\", outputToken);\n        eventData.addressItems.setItem(1, \"secondaryOutputToken\", secondaryOutputToken);\n\n        eventData.uintItems.initItems(4);\n        eventData.uintItems.setItem(0, \"outputAmount\", outputAmount);\n        eventData.uintItems.setItem(1, \"secondaryOutputAmount\", secondaryOutputAmount);\n        eventData.uintItems.setItem(2, \"orderSizeDeltaUsd\", orderSizeDeltaUsd);\n        eventData.uintItems.setItem(3, \"orderInitialCollateralDeltaAmount\", orderInitialCollateralDeltaAmount);\n\n        return eventData;\n    }\n}\n"
    },
    "contracts/order/ExecuteOrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\n\nimport \"./Order.sol\";\nimport \"./OrderVault.sol\";\nimport \"./OrderStoreUtils.sol\";\nimport \"./OrderEventUtils.sol\";\nimport \"./OrderUtils.sol\";\n\nimport \"../oracle/Oracle.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"./IncreaseOrderUtils.sol\";\nimport \"./DecreaseOrderUtils.sol\";\nimport \"./SwapOrderUtils.sol\";\nimport \"./BaseOrderUtils.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\n\nimport \"../utils/Array.sol\";\n\nlibrary ExecuteOrderUtils {\n    using Order for Order.Props;\n    using Position for Position.Props;\n    using Price for Price.Props;\n    using Array for uint256[];\n\n    // @dev executes an order\n    // @param params BaseOrderUtils.ExecuteOrderParams\n    function executeOrder(BaseOrderUtils.ExecuteOrderParams memory params) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        OrderStoreUtils.remove(params.contracts.dataStore, params.key, params.order.account());\n\n        BaseOrderUtils.validateNonEmptyOrder(params.order);\n\n        BaseOrderUtils.validateOrderTriggerPrice(\n            params.contracts.oracle,\n            params.market.indexToken,\n            params.order.orderType(),\n            params.order.triggerPrice(),\n            params.order.isLong()\n        );\n\n        BaseOrderUtils.validateOrderValidFromTime(\n            params.order.orderType(),\n            params.order.validFromTime()\n        );\n\n        MarketUtils.MarketPrices memory prices = MarketUtils.getMarketPrices(\n            params.contracts.oracle,\n            params.market\n        );\n\n        MarketUtils.distributePositionImpactPool(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.market.marketToken\n        );\n\n        PositionUtils.updateFundingAndBorrowingState(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.market,\n            prices\n        );\n\n        EventUtils.EventLogData memory eventData = processOrder(params);\n\n        // validate that internal state changes are correct before calling\n        // external callbacks\n        // if the native token was transferred to the receiver in a swap\n        // it may be possible to invoke external contracts before the validations\n        // are called\n        if (params.market.marketToken != address(0)) {\n            MarketUtils.validateMarketTokenBalance(params.contracts.dataStore, params.market);\n        }\n        MarketUtils.validateMarketTokenBalance(params.contracts.dataStore, params.swapPathMarkets);\n\n        OrderUtils.updateAutoCancelList(params.contracts.dataStore, params.key, params.order, false);\n\n        OrderEventUtils.emitOrderExecuted(\n            params.contracts.eventEmitter,\n            params.key,\n            params.order.account(),\n            params.secondaryOrderType\n        );\n\n        CallbackUtils.afterOrderExecution(params.key, params.order, eventData);\n\n        // the order.executionFee for liquidation / adl orders is zero\n        // gas costs for liquidations / adl is subsidised by the treasury\n        GasUtils.payExecutionFee(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.contracts.orderVault,\n            params.key,\n            params.order.callbackContract(),\n            params.order.executionFee(),\n            params.startingGas,\n            GasUtils.estimateOrderOraclePriceCount(params.order.swapPath().length),\n            params.keeper,\n            params.order.receiver()\n        );\n\n        // clearAutoCancelOrders should be called after the main execution fee\n        // is called\n        // this is because clearAutoCancelOrders loops through each order for\n        // the associated position and calls cancelOrder, which pays the keeper\n        // based on the gas usage for each cancel order\n        if (BaseOrderUtils.isDecreaseOrder(params.order.orderType())) {\n            bytes32 positionKey = BaseOrderUtils.getPositionKey(params.order);\n            uint256 sizeInUsd = params.contracts.dataStore.getUint(\n                keccak256(abi.encode(positionKey, PositionStoreUtils.SIZE_IN_USD))\n            );\n            if (sizeInUsd == 0) {\n                OrderUtils.clearAutoCancelOrders(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.contracts.orderVault,\n                    positionKey,\n                    params.keeper\n                );\n            }\n        }\n    }\n\n    // @dev process an order execution\n    // @param params BaseOrderUtils.ExecuteOrderParams\n    function processOrder(BaseOrderUtils.ExecuteOrderParams memory params) internal returns (EventUtils.EventLogData memory) {\n        if (BaseOrderUtils.isIncreaseOrder(params.order.orderType())) {\n            return IncreaseOrderUtils.processOrder(params);\n        }\n\n        if (BaseOrderUtils.isDecreaseOrder(params.order.orderType())) {\n            return DecreaseOrderUtils.processOrder(params);\n        }\n\n        if (BaseOrderUtils.isSwapOrder(params.order.orderType())) {\n            return SwapOrderUtils.processOrder(params);\n        }\n\n        revert Errors.UnsupportedOrderType(uint256(params.order.orderType()));\n    }\n}\n"
    },
    "contracts/order/IBaseOrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./Order.sol\";\n\ninterface IBaseOrderUtils {\n    // @dev CreateOrderParams struct used in createOrder to avoid stack\n    // too deep errors\n    //\n    // @param addresses address values\n    // @param numbers number values\n    // @param orderType for order.orderType\n    // @param decreasePositionSwapType for order.decreasePositionSwapType\n    // @param isLong for order.isLong\n    // @param shouldUnwrapNativeToken for order.shouldUnwrapNativeToken\n    // @note all params except should be part of the corresponding struct hash in all relay contracts\n    struct CreateOrderParams {\n        CreateOrderParamsAddresses addresses;\n        CreateOrderParamsNumbers numbers;\n        Order.OrderType orderType;\n        Order.DecreasePositionSwapType decreasePositionSwapType;\n        bool isLong;\n        bool shouldUnwrapNativeToken;\n        bool autoCancel;\n        bytes32 referralCode;\n    }\n\n    // @note all params except should be part of the corresponding struct hash in all relay contracts\n    struct CreateOrderParamsAddresses {\n        address receiver;\n        address cancellationReceiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialCollateralToken;\n        address[] swapPath;\n    }\n\n    // @param sizeDeltaUsd for order.sizeDeltaUsd\n    // @param triggerPrice for order.triggerPrice\n    // @param acceptablePrice for order.acceptablePrice\n    // @param executionFee for order.executionFee\n    // @param callbackGasLimit for order.callbackGasLimit\n    // @param minOutputAmount for order.minOutputAmount\n    // @param validFromTime for order.validFromTime\n    // @note all params except should be part of the corresponding struct hash in all relay contracts\n    struct CreateOrderParamsNumbers {\n        uint256 sizeDeltaUsd;\n        uint256 initialCollateralDeltaAmount;\n        uint256 triggerPrice;\n        uint256 acceptablePrice;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n        uint256 minOutputAmount;\n        uint256 validFromTime;\n    }\n}\n"
    },
    "contracts/order/IncreaseOrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOrderUtils.sol\";\nimport \"../swap/SwapUtils.sol\";\nimport \"../position/IncreasePositionUtils.sol\";\n\n// @title IncreaseOrderUtils\n// @dev Library for functions to help with processing an increase order\nlibrary IncreaseOrderUtils {\n    using Position for Position.Props;\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    // @dev process an increase order\n    // @param params BaseOrderUtils.ExecuteOrderParams\n    function processOrder(BaseOrderUtils.ExecuteOrderParams memory params) external returns (EventUtils.EventLogData memory) {\n        MarketUtils.validatePositionMarket(params.contracts.dataStore, params.market);\n\n        (address collateralToken, uint256 collateralIncrementAmount) = SwapUtils.swap(SwapUtils.SwapParams(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.contracts.oracle,\n            params.contracts.orderVault,\n            params.key,\n            params.order.initialCollateralToken(),\n            params.order.initialCollateralDeltaAmount(),\n            params.swapPathMarkets,\n            params.order.minOutputAmount(),\n            params.order.market(),\n            params.order.uiFeeReceiver(),\n            false,\n            ISwapPricingUtils.SwapPricingType.Swap\n        ));\n\n        MarketUtils.validateMarketCollateralToken(params.market, collateralToken);\n\n        bytes32 positionKey = Position.getPositionKey(params.order.account(), params.order.market(), collateralToken, params.order.isLong());\n        Position.Props memory position = PositionStoreUtils.get(params.contracts.dataStore, positionKey);\n\n        // initialize position\n        if (position.account() == address(0)) {\n            position.setAccount(params.order.account());\n            if (position.market() != address(0) || position.collateralToken() != address(0)) {\n                revert Errors.UnexpectedPositionState();\n            }\n\n            position.setMarket(params.order.market());\n            position.setCollateralToken(collateralToken);\n            position.setIsLong(params.order.isLong());\n        }\n\n        if (params.minOracleTimestamp < params.order.updatedAtTime()) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\n                params.minOracleTimestamp,\n                params.order.updatedAtTime()\n            );\n        }\n\n        if (\n            !BaseOrderUtils.isMarketOrder(params.order.orderType()) &&\n            params.minOracleTimestamp < params.order.validFromTime()\n        ) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\n                params.minOracleTimestamp,\n                params.order.validFromTime()\n            );\n        }\n\n        uint256 requestExpirationTime = params.contracts.dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\n\n        if (\n            params.order.orderType() == Order.OrderType.MarketIncrease &&\n            params.maxOracleTimestamp > params.order.updatedAtTime() + requestExpirationTime\n        ) {\n            revert Errors.OracleTimestampsAreLargerThanRequestExpirationTime(\n                params.maxOracleTimestamp,\n                params.order.updatedAtTime(),\n                requestExpirationTime\n            );\n        }\n\n        IncreasePositionUtils.increasePosition(\n            PositionUtils.UpdatePositionParams(\n                params.contracts,\n                params.market,\n                params.order,\n                params.key,\n                position,\n                positionKey,\n                params.secondaryOrderType\n            ),\n            collateralIncrementAmount\n        );\n\n        EventUtils.EventLogData memory eventData;\n        return eventData;\n    }\n}\n"
    },
    "contracts/order/Order.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../chain/Chain.sol\";\n\n// @title Order\n// @dev Struct for orders\nlibrary Order {\n    using Order for Props;\n\n    enum OrderType {\n        // @dev MarketSwap: swap token A to token B at the current market price\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\n        MarketSwap,\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\n        LimitSwap,\n        // @dev MarketIncrease: increase position at the current market price\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\n        MarketIncrease,\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        LimitIncrease,\n        // @dev MarketDecrease: decrease position at the current market price\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\n        MarketDecrease,\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        LimitDecrease,\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        StopLossDecrease,\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\n        Liquidation,\n        // @dev StopIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        StopIncrease\n    }\n\n    // to help further differentiate orders\n    enum SecondaryOrderType {\n        None,\n        Adl\n    }\n\n    enum DecreasePositionSwapType {\n        NoSwap,\n        SwapPnlTokenToCollateralToken,\n        SwapCollateralTokenToPnlToken\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account of the order\n    // @param receiver the receiver for any token transfers\n    // this field is meant to allow the output of an order to be\n    // received by an address that is different from the creator of the\n    // order whether this is for swaps or whether the account is the owner\n    // of a position\n    // for funding fees and claimable collateral, the funds are still\n    // credited to the owner of the position indicated by order.account\n    // @param callbackContract the contract to call for callbacks\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the trading market\n    // @param initialCollateralToken for increase orders, initialCollateralToken\n    // is the token sent in by the user, the token will be swapped through the\n    // specified swapPath, before being deposited into the position as collateral\n    // for decrease orders, initialCollateralToken is the collateral token of the position\n    // withdrawn collateral from the decrease of the position will be swapped\n    // through the specified swapPath\n    // for swaps, initialCollateralToken is the initial token sent for the swap\n    // @param swapPath an array of market addresses to swap through\n    struct Addresses {\n        address account;\n        address receiver;\n        address cancellationReceiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialCollateralToken;\n        address[] swapPath;\n    }\n\n    // @param sizeDeltaUsd the requested change in position size\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\n    // is the amount of the initialCollateralToken sent in by the user\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\n    // collateralToken to withdraw\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\n    // in for the swap\n    // @param orderType the order type\n    // @param triggerPrice the trigger price for non-market orders\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\n    // note that for decrease orders, multiple tokens could be received, for this reason, the\n    // minOutputAmount value is treated as a USD value for validation in decrease orders\n    struct Numbers {\n        OrderType orderType;\n        DecreasePositionSwapType decreasePositionSwapType;\n        uint256 sizeDeltaUsd;\n        uint256 initialCollateralDeltaAmount;\n        uint256 triggerPrice;\n        uint256 acceptablePrice;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n        uint256 minOutputAmount;\n        uint256 updatedAtTime;\n        uint256 validFromTime;\n    }\n\n    // @param isLong whether the order is for a long or short\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\n    // transferring to the user\n    // @param isFrozen whether the order is frozen\n    struct Flags {\n        bool isLong;\n        bool shouldUnwrapNativeToken;\n        bool isFrozen;\n        bool autoCancel;\n    }\n\n    // @dev the order account\n    // @param props Props\n    // @return the order account\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    // @dev set the order account\n    // @param props Props\n    // @param value the value to set to\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    // @dev the order receiver\n    // @param props Props\n    // @return the order receiver\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    // @dev set the order receiver\n    // @param props Props\n    // @param value the value to set to\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function cancellationReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.cancellationReceiver;\n    }\n\n    function setCancellationReceiver(Props memory props, address value) internal pure {\n        props.addresses.cancellationReceiver = value;\n    }\n\n    // @dev the order callbackContract\n    // @param props Props\n    // @return the order callbackContract\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    // @dev set the order callbackContract\n    // @param props Props\n    // @param value the value to set to\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    // @dev the order market\n    // @param props Props\n    // @return the order market\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    // @dev set the order market\n    // @param props Props\n    // @param value the value to set to\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    // @dev the order initialCollateralToken\n    // @param props Props\n    // @return the order initialCollateralToken\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialCollateralToken;\n    }\n\n    // @dev set the order initialCollateralToken\n    // @param props Props\n    // @param value the value to set to\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\n        props.addresses.initialCollateralToken = value;\n    }\n\n    // @dev the order uiFeeReceiver\n    // @param props Props\n    // @return the order uiFeeReceiver\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    // @dev set the order uiFeeReceiver\n    // @param props Props\n    // @param value the value to set to\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    // @dev the order swapPath\n    // @param props Props\n    // @return the order swapPath\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.swapPath;\n    }\n\n    // @dev set the order swapPath\n    // @param props Props\n    // @param value the value to set to\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.swapPath = value;\n    }\n\n    // @dev the order type\n    // @param props Props\n    // @return the order type\n    function orderType(Props memory props) internal pure returns (OrderType) {\n        return props.numbers.orderType;\n    }\n\n    // @dev set the order type\n    // @param props Props\n    // @param value the value to set to\n    function setOrderType(Props memory props, OrderType value) internal pure {\n        props.numbers.orderType = value;\n    }\n\n    function decreasePositionSwapType(Props memory props) internal pure returns (DecreasePositionSwapType) {\n        return props.numbers.decreasePositionSwapType;\n    }\n\n    function setDecreasePositionSwapType(Props memory props, DecreasePositionSwapType value) internal pure {\n        props.numbers.decreasePositionSwapType = value;\n    }\n\n    // @dev the order sizeDeltaUsd\n    // @param props Props\n    // @return the order sizeDeltaUsd\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\n        return props.numbers.sizeDeltaUsd;\n    }\n\n    // @dev set the order sizeDeltaUsd\n    // @param props Props\n    // @param value the value to set to\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\n        props.numbers.sizeDeltaUsd = value;\n    }\n\n    // @dev the order initialCollateralDeltaAmount\n    // @param props Props\n    // @return the order initialCollateralDeltaAmount\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialCollateralDeltaAmount;\n    }\n\n    // @dev set the order initialCollateralDeltaAmount\n    // @param props Props\n    // @param value the value to set to\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialCollateralDeltaAmount = value;\n    }\n\n    // @dev the order triggerPrice\n    // @param props Props\n    // @return the order triggerPrice\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\n        return props.numbers.triggerPrice;\n    }\n\n    // @dev set the order triggerPrice\n    // @param props Props\n    // @param value the value to set to\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\n        props.numbers.triggerPrice = value;\n    }\n\n    // @dev the order acceptablePrice\n    // @param props Props\n    // @return the order acceptablePrice\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\n        return props.numbers.acceptablePrice;\n    }\n\n    // @dev set the order acceptablePrice\n    // @param props Props\n    // @param value the value to set to\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\n        props.numbers.acceptablePrice = value;\n    }\n\n    // @dev set the order executionFee\n    // @param props Props\n    // @param value the value to set to\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    // @dev the order executionFee\n    // @param props Props\n    // @return the order executionFee\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    // @dev the order callbackGasLimit\n    // @param props Props\n    // @return the order callbackGasLimit\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    // @dev set the order callbackGasLimit\n    // @param props Props\n    // @param value the value to set to\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    // @dev the order minOutputAmount\n    // @param props Props\n    // @return the order minOutputAmount\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minOutputAmount;\n    }\n\n    // @dev set the order minOutputAmount\n    // @param props Props\n    // @param value the value to set to\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minOutputAmount = value;\n    }\n\n    // @dev the order updatedAtTime\n    // @param props Props\n    // @return the order updatedAtTime\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    // @dev set the order updatedAtTime\n    // @param props Props\n    // @param value the value to set to\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function validFromTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.validFromTime;\n    }\n    function setValidFromTime(Props memory props, uint256 value) internal pure {\n        props.numbers.validFromTime = value;\n    }\n\n    // @dev whether the order is for a long or short\n    // @param props Props\n    // @return whether the order is for a long or short\n    function isLong(Props memory props) internal pure returns (bool) {\n        return props.flags.isLong;\n    }\n\n    // @dev set whether the order is for a long or short\n    // @param props Props\n    // @param value the value to set to\n    function setIsLong(Props memory props, bool value) internal pure {\n        props.flags.isLong = value;\n    }\n\n    // @dev whether to unwrap the native token before transfers to the user\n    // @param props Props\n    // @return whether to unwrap the native token before transfers to the user\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    // @dev set whether the native token should be unwrapped before being\n    // transferred to the receiver\n    // @param props Props\n    // @param value the value to set to\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n\n    // @dev whether the order is frozen\n    // @param props Props\n    // @return whether the order is frozen\n    function isFrozen(Props memory props) internal pure returns (bool) {\n        return props.flags.isFrozen;\n    }\n\n    // @dev set whether the order is frozen\n    // transferred to the receiver\n    // @param props Props\n    // @param value the value to set to\n    function setIsFrozen(Props memory props, bool value) internal pure {\n        props.flags.isFrozen = value;\n    }\n\n    function autoCancel(Props memory props) internal pure returns (bool) {\n        return props.flags.autoCancel;\n    }\n\n    function setAutoCancel(Props memory props, bool value) internal pure {\n        props.flags.autoCancel = value;\n    }\n\n    // @param props Props\n    function touch(Props memory props) internal view {\n        props.setUpdatedAtTime(Chain.currentTimestamp());\n    }\n}\n"
    },
    "contracts/order/OrderEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/Cast.sol\";\n\nimport \"./Order.sol\";\n\nlibrary OrderEventUtils {\n    using Order for Order.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitOrderCreated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        Order.Props memory order\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(6);\n        eventData.addressItems.setItem(0, \"account\", order.account());\n        eventData.addressItems.setItem(1, \"receiver\", order.receiver());\n        eventData.addressItems.setItem(2, \"callbackContract\", order.callbackContract());\n        eventData.addressItems.setItem(3, \"uiFeeReceiver\", order.uiFeeReceiver());\n        eventData.addressItems.setItem(4, \"market\", order.market());\n        eventData.addressItems.setItem(5, \"initialCollateralToken\", order.initialCollateralToken());\n\n        eventData.addressItems.initArrayItems(1);\n        eventData.addressItems.setItem(0, \"swapPath\", order.swapPath());\n\n        eventData.uintItems.initItems(11);\n        eventData.uintItems.setItem(0, \"orderType\", uint256(order.orderType()));\n        eventData.uintItems.setItem(1, \"decreasePositionSwapType\", uint256(order.decreasePositionSwapType()));\n        eventData.uintItems.setItem(2, \"sizeDeltaUsd\", order.sizeDeltaUsd());\n        eventData.uintItems.setItem(3, \"initialCollateralDeltaAmount\", order.initialCollateralDeltaAmount());\n        eventData.uintItems.setItem(4, \"triggerPrice\", order.triggerPrice());\n        eventData.uintItems.setItem(5, \"acceptablePrice\", order.acceptablePrice());\n        eventData.uintItems.setItem(6, \"executionFee\", order.executionFee());\n        eventData.uintItems.setItem(7, \"callbackGasLimit\", order.callbackGasLimit());\n        eventData.uintItems.setItem(8, \"minOutputAmount\", order.minOutputAmount());\n        eventData.uintItems.setItem(9, \"updatedAtTime\", order.updatedAtTime());\n        eventData.uintItems.setItem(10, \"validFromTime\", order.validFromTime());\n\n        eventData.boolItems.initItems(3);\n        eventData.boolItems.setItem(0, \"isLong\", order.isLong());\n        eventData.boolItems.setItem(1, \"shouldUnwrapNativeToken\", order.shouldUnwrapNativeToken());\n        eventData.boolItems.setItem(2, \"autoCancel\", order.autoCancel());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog2(\n            \"OrderCreated\",\n            key,\n            Cast.toBytes32(order.account()),\n            eventData\n        );\n    }\n\n    function emitOrderExecuted(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        Order.SecondaryOrderType secondaryOrderType\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"secondaryOrderType\", uint256(secondaryOrderType));\n\n        eventEmitter.emitEventLog2(\n            \"OrderExecuted\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitOrderUpdated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        Order.Props memory order\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", order.account());\n\n        eventData.uintItems.initItems(6);\n        eventData.uintItems.setItem(0, \"sizeDeltaUsd\", order.sizeDeltaUsd());\n        eventData.uintItems.setItem(1, \"acceptablePrice\", order.acceptablePrice());\n        eventData.uintItems.setItem(2, \"triggerPrice\", order.triggerPrice());\n        eventData.uintItems.setItem(3, \"minOutputAmount\", order.minOutputAmount());\n        eventData.uintItems.setItem(4, \"updatedAtTime\", order.updatedAtTime());\n        eventData.uintItems.setItem(5, \"validFromTime\", order.validFromTime());\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"autoCancel\", order.autoCancel());\n\n        eventEmitter.emitEventLog2(\n            \"OrderUpdated\",\n            key,\n            Cast.toBytes32(order.account()),\n            eventData\n        );\n    }\n\n    function emitOrderSizeDeltaAutoUpdated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        uint256 sizeDeltaUsd,\n        uint256 nextSizeDeltaUsd\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"sizeDeltaUsd\", sizeDeltaUsd);\n        eventData.uintItems.setItem(1, \"nextSizeDeltaUsd\", nextSizeDeltaUsd);\n\n        eventEmitter.emitEventLog1(\n            \"OrderSizeDeltaAutoUpdated\",\n            key,\n            eventData\n        );\n    }\n\n    function emitOrderCollateralDeltaAmountAutoUpdated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        uint256 collateralDeltaAmount,\n        uint256 nextCollateralDeltaAmount\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"collateralDeltaAmount\", collateralDeltaAmount);\n        eventData.uintItems.setItem(1, \"nextCollateralDeltaAmount\", nextCollateralDeltaAmount);\n\n        eventEmitter.emitEventLog1(\n            \"OrderCollateralDeltaAmountAutoUpdated\",\n            key,\n            eventData\n        );\n    }\n\n    function emitOrderCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\n            \"OrderCancelled\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitOrderFrozen(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\n            \"OrderFrozen\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/order/OrderStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Order.sol\";\n\n/**\n * @title OrderStoreUtils\n * @dev Library for order storage functions\n */\nlibrary OrderStoreUtils {\n    using Order for Order.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\"RECEIVER\"));\n    bytes32 public constant CANCELLATION_RECEIVER = keccak256(abi.encode(\"CANCELLATION_RECEIVER\"));\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\"CALLBACK_CONTRACT\"));\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\"UI_FEE_RECEIVER\"));\n    bytes32 public constant MARKET = keccak256(abi.encode(\"MARKET\"));\n    bytes32 public constant INITIAL_COLLATERAL_TOKEN = keccak256(abi.encode(\"INITIAL_COLLATERAL_TOKEN\"));\n    bytes32 public constant SWAP_PATH = keccak256(abi.encode(\"SWAP_PATH\"));\n\n    bytes32 public constant ORDER_TYPE = keccak256(abi.encode(\"ORDER_TYPE\"));\n    bytes32 public constant DECREASE_POSITION_SWAP_TYPE = keccak256(abi.encode(\"DECREASE_POSITION_SWAP_TYPE\"));\n    bytes32 public constant SIZE_DELTA_USD = keccak256(abi.encode(\"SIZE_DELTA_USD\"));\n    bytes32 public constant INITIAL_COLLATERAL_DELTA_AMOUNT = keccak256(abi.encode(\"INITIAL_COLLATERAL_DELTA_AMOUNT\"));\n    bytes32 public constant TRIGGER_PRICE = keccak256(abi.encode(\"TRIGGER_PRICE\"));\n    bytes32 public constant ACCEPTABLE_PRICE = keccak256(abi.encode(\"ACCEPTABLE_PRICE\"));\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\"EXECUTION_FEE\"));\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"CALLBACK_GAS_LIMIT\"));\n    bytes32 public constant MIN_OUTPUT_AMOUNT = keccak256(abi.encode(\"MIN_OUTPUT_AMOUNT\"));\n    bytes32 public constant VALID_FROM_TIME = keccak256(abi.encode(\"VALID_FROM_TIME\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n\n    bytes32 public constant IS_LONG = keccak256(abi.encode(\"IS_LONG\"));\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\"SHOULD_UNWRAP_NATIVE_TOKEN\"));\n    bytes32 public constant IS_FROZEN = keccak256(abi.encode(\"IS_FROZEN\"));\n    bytes32 public constant AUTO_CANCEL = keccak256(abi.encode(\"AUTO_CANCEL\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (Order.Props memory) {\n        Order.Props memory order;\n        if (!dataStore.containsBytes32(Keys.ORDER_LIST, key)) {\n            return order;\n        }\n\n        order.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        order.setReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        ));\n\n        order.setCancellationReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, CANCELLATION_RECEIVER))\n        ));\n\n        order.setCallbackContract(dataStore.getAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        ));\n\n        order.setUiFeeReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        ));\n\n        order.setMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET))\n        ));\n\n        order.setInitialCollateralToken(dataStore.getAddress(\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN))\n        ));\n\n        order.setSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, SWAP_PATH))\n        ));\n\n        order.setOrderType(Order.OrderType(dataStore.getUint(\n            keccak256(abi.encode(key, ORDER_TYPE))\n        )));\n\n        order.setDecreasePositionSwapType(Order.DecreasePositionSwapType(dataStore.getUint(\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE))\n        )));\n\n        order.setSizeDeltaUsd(dataStore.getUint(\n            keccak256(abi.encode(key, SIZE_DELTA_USD))\n        ));\n\n        order.setInitialCollateralDeltaAmount(dataStore.getUint(\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT))\n        ));\n\n        order.setTriggerPrice(dataStore.getUint(\n            keccak256(abi.encode(key, TRIGGER_PRICE))\n        ));\n\n        order.setAcceptablePrice(dataStore.getUint(\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE))\n        ));\n\n        order.setExecutionFee(dataStore.getUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        ));\n\n        order.setCallbackGasLimit(dataStore.getUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        ));\n\n        order.setMinOutputAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT))\n        ));\n\n        order.setValidFromTime(dataStore.getUint(\n            keccak256(abi.encode(key, VALID_FROM_TIME))\n        ));\n\n        order.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        order.setIsLong(dataStore.getBool(\n            keccak256(abi.encode(key, IS_LONG))\n        ));\n\n        order.setShouldUnwrapNativeToken(dataStore.getBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        ));\n\n        order.setIsFrozen(dataStore.getBool(\n            keccak256(abi.encode(key, IS_FROZEN))\n        ));\n\n        order.setAutoCancel(dataStore.getBool(\n            keccak256(abi.encode(key, AUTO_CANCEL))\n        ));\n\n        return order;\n    }\n\n    function set(DataStore dataStore, bytes32 key, Order.Props memory order) external {\n        dataStore.addBytes32(\n            Keys.ORDER_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountOrderListKey(order.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            order.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, RECEIVER)),\n            order.receiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CANCELLATION_RECEIVER)),\n            order.cancellationReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\n            order.callbackContract()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\n            order.uiFeeReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET)),\n            order.market()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN)),\n            order.initialCollateralToken()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, SWAP_PATH)),\n            order.swapPath()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, ORDER_TYPE)),\n            uint256(order.orderType())\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE)),\n            uint256(order.decreasePositionSwapType())\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, SIZE_DELTA_USD)),\n            order.sizeDeltaUsd()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT)),\n            order.initialCollateralDeltaAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, TRIGGER_PRICE)),\n            order.triggerPrice()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE)),\n            order.acceptablePrice()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, EXECUTION_FEE)),\n            order.executionFee()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\n            order.callbackGasLimit()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT)),\n            order.minOutputAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, VALID_FROM_TIME)),\n            order.validFromTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            order.updatedAtTime()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, IS_LONG)),\n            order.isLong()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\n            order.shouldUnwrapNativeToken()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, IS_FROZEN)),\n            order.isFrozen()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, AUTO_CANCEL)),\n            order.autoCancel()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.ORDER_LIST, key)) {\n            revert Errors.OrderNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.ORDER_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountOrderListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CANCELLATION_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, SWAP_PATH))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, ORDER_TYPE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, SIZE_DELTA_USD))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, TRIGGER_PRICE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, VALID_FROM_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, IS_LONG))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, IS_FROZEN))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, AUTO_CANCEL))\n        );\n    }\n\n    function getOrderCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.ORDER_LIST);\n    }\n\n    function getOrderKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.ORDER_LIST, start, end);\n    }\n\n    function getAccountOrderCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountOrderListKey(account));\n    }\n\n    function getAccountOrderKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountOrderListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/order/OrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./AutoCancelUtils.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\n\nimport \"./Order.sol\";\nimport \"./OrderVault.sol\";\nimport \"./OrderStoreUtils.sol\";\nimport \"./OrderEventUtils.sol\";\n\nimport \"../nonce/NonceUtils.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"./BaseOrderUtils.sol\";\nimport \"./IBaseOrderUtils.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\n\nimport \"../utils/Array.sol\";\nimport \"../utils/AccountUtils.sol\";\nimport \"../referral/ReferralUtils.sol\";\n\n// @title OrderUtils\n// @dev Library for order functions\nlibrary OrderUtils {\n    using Order for Order.Props;\n    using Position for Position.Props;\n    using Price for Price.Props;\n    using Array for uint256[];\n\n    struct CancelOrderParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        OrderVault orderVault;\n        bytes32 key;\n        address keeper;\n        uint256 startingGas;\n        bool isExternalCall;\n        string reason;\n        bytes reasonBytes;\n    }\n\n    struct CreateOrderCache {\n        bool shouldRecordSeparateExecutionFeeTransfer;\n        address wnt;\n        uint256 initialCollateralDeltaAmount;\n        uint256 estimatedGasLimit;\n        uint256 oraclePriceCount;\n        uint256 executionFeeDiff;\n    }\n\n    // @dev creates an order in the order store\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param orderVault OrderVault\n    // @param account the order account\n    // @param params IBaseOrderUtils.CreateOrderParams\n    // @param shouldCapMaxExecutionFee whether to cap the max execution fee\n    function createOrder(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        OrderVault orderVault,\n        IReferralStorage referralStorage,\n        address account,\n        IBaseOrderUtils.CreateOrderParams memory params,\n        bool shouldCapMaxExecutionFee\n    ) external returns (bytes32) {\n        AccountUtils.validateAccount(account);\n\n        ReferralUtils.setTraderReferralCode(referralStorage, account, params.referralCode);\n\n        CreateOrderCache memory cache;\n\n        cache.wnt = TokenUtils.wnt(dataStore);\n        cache.shouldRecordSeparateExecutionFeeTransfer = true;\n\n        if (\n            params.orderType == Order.OrderType.MarketSwap ||\n            params.orderType == Order.OrderType.LimitSwap ||\n            params.orderType == Order.OrderType.MarketIncrease ||\n            params.orderType == Order.OrderType.LimitIncrease ||\n            params.orderType == Order.OrderType.StopIncrease\n        ) {\n            // for swaps and increase orders, the initialCollateralDeltaAmount is set based on the amount of tokens\n            // transferred to the orderVault\n            cache.initialCollateralDeltaAmount = orderVault.recordTransferIn(params.addresses.initialCollateralToken);\n            if (params.addresses.initialCollateralToken == cache.wnt) {\n                if (cache.initialCollateralDeltaAmount < params.numbers.executionFee) {\n                    revert Errors.InsufficientWntAmountForExecutionFee(\n                        cache.initialCollateralDeltaAmount,\n                        params.numbers.executionFee\n                    );\n                }\n                cache.initialCollateralDeltaAmount -= params.numbers.executionFee;\n                cache.shouldRecordSeparateExecutionFeeTransfer = false;\n            }\n        } else if (\n            params.orderType == Order.OrderType.MarketDecrease ||\n            params.orderType == Order.OrderType.LimitDecrease ||\n            params.orderType == Order.OrderType.StopLossDecrease\n        ) {\n            // for decrease orders, the initialCollateralDeltaAmount is based on the passed in value\n            cache.initialCollateralDeltaAmount = params.numbers.initialCollateralDeltaAmount;\n        } else {\n            revert Errors.OrderTypeCannotBeCreated(uint256(params.orderType));\n        }\n\n        if (cache.shouldRecordSeparateExecutionFeeTransfer) {\n            uint256 wntAmount = orderVault.recordTransferIn(cache.wnt);\n            if (wntAmount < params.numbers.executionFee) {\n                revert Errors.InsufficientWntAmountForExecutionFee(wntAmount, params.numbers.executionFee);\n            }\n\n            params.numbers.executionFee = wntAmount;\n        }\n\n        if (BaseOrderUtils.isPositionOrder(params.orderType)) {\n            MarketUtils.validatePositionMarket(dataStore, params.addresses.market);\n        }\n\n        if (BaseOrderUtils.isMarketOrder(params.orderType) && params.numbers.validFromTime != 0) {\n            revert Errors.UnexpectedValidFromTime(uint256(params.orderType));\n        }\n\n        // validate swap path markets\n        MarketUtils.validateSwapPath(dataStore, params.addresses.swapPath);\n\n        Order.Props memory order;\n\n        order.setAccount(account);\n        order.setReceiver(params.addresses.receiver);\n        order.setCancellationReceiver(params.addresses.cancellationReceiver);\n        order.setCallbackContract(params.addresses.callbackContract);\n        order.setMarket(params.addresses.market);\n        order.setInitialCollateralToken(params.addresses.initialCollateralToken);\n        order.setUiFeeReceiver(params.addresses.uiFeeReceiver);\n        order.setSwapPath(params.addresses.swapPath);\n        order.setOrderType(params.orderType);\n        order.setDecreasePositionSwapType(params.decreasePositionSwapType);\n        order.setSizeDeltaUsd(params.numbers.sizeDeltaUsd);\n        order.setInitialCollateralDeltaAmount(cache.initialCollateralDeltaAmount);\n        order.setTriggerPrice(params.numbers.triggerPrice);\n        order.setAcceptablePrice(params.numbers.acceptablePrice);\n        order.setCallbackGasLimit(params.numbers.callbackGasLimit);\n        order.setMinOutputAmount(params.numbers.minOutputAmount);\n        order.setValidFromTime(params.numbers.validFromTime);\n        order.setIsLong(params.isLong);\n        order.setShouldUnwrapNativeToken(params.shouldUnwrapNativeToken);\n        order.setAutoCancel(params.autoCancel);\n\n        AccountUtils.validateReceiver(order.receiver());\n        if (order.cancellationReceiver() == address(orderVault)) {\n            // revert as funds cannot be sent back to the order vault\n            revert Errors.InvalidReceiver(order.cancellationReceiver());\n        }\n\n        CallbackUtils.validateCallbackGasLimit(dataStore, order.callbackGasLimit());\n\n        cache.estimatedGasLimit = GasUtils.estimateExecuteOrderGasLimit(dataStore, order);\n        cache.oraclePriceCount = GasUtils.estimateOrderOraclePriceCount(params.addresses.swapPath.length);\n        uint256 executionFee;\n        (executionFee, cache.executionFeeDiff) = GasUtils.validateAndCapExecutionFee(\n            dataStore,\n            cache.estimatedGasLimit,\n            params.numbers.executionFee,\n            cache.oraclePriceCount,\n            shouldCapMaxExecutionFee\n        );\n        order.setExecutionFee(executionFee);\n\n        if (cache.executionFeeDiff != 0) {\n            GasUtils.transferExcessiveExecutionFee(dataStore, eventEmitter, orderVault, order.account(), cache.executionFeeDiff);\n        }\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n\n        order.touch();\n\n        BaseOrderUtils.validateNonEmptyOrder(order);\n        OrderStoreUtils.set(dataStore, key, order);\n\n        updateAutoCancelList(dataStore, key, order, order.autoCancel());\n        validateTotalCallbackGasLimitForAutoCancelOrders(dataStore, order);\n\n        OrderEventUtils.emitOrderCreated(eventEmitter, key, order);\n\n        return key;\n    }\n\n    function cancelOrder(CancelOrderParams memory params) public {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        if (params.isExternalCall) {\n            params.startingGas -= gasleft() / 63;\n        }\n\n        uint256 gas = gasleft();\n        uint256 minHandleExecutionErrorGas = GasUtils.getMinHandleExecutionErrorGas(params.dataStore);\n\n        if (gas < minHandleExecutionErrorGas) {\n            revert Errors.InsufficientGasForCancellation(gas, minHandleExecutionErrorGas);\n        }\n\n        Order.Props memory order = OrderStoreUtils.get(params.dataStore, params.key);\n        BaseOrderUtils.validateNonEmptyOrder(order);\n\n        // this could happen if the order was created in new contracts that support new order types\n        // but the order is being cancelled in old contracts\n        if (!BaseOrderUtils.isSupportedOrder(order.orderType())) {\n            revert Errors.UnsupportedOrderType(uint256(order.orderType()));\n        }\n\n        OrderStoreUtils.remove(params.dataStore, params.key, order.account());\n\n        if (BaseOrderUtils.isIncreaseOrder(order.orderType()) || BaseOrderUtils.isSwapOrder(order.orderType())) {\n            if (order.initialCollateralDeltaAmount() > 0) {\n                address cancellationReceiver = order.cancellationReceiver();\n                if (cancellationReceiver == address(0)) {\n                    cancellationReceiver = order.account();\n                }\n\n                params.orderVault.transferOut(\n                    order.initialCollateralToken(),\n                    cancellationReceiver,\n                    order.initialCollateralDeltaAmount(),\n                    order.shouldUnwrapNativeToken()\n                );\n            }\n        }\n\n        updateAutoCancelList(params.dataStore, params.key, order, false);\n\n        OrderEventUtils.emitOrderCancelled(\n            params.eventEmitter,\n            params.key,\n            order.account(),\n            params.reason,\n            params.reasonBytes\n        );\n\n        address executionFeeReceiver = order.cancellationReceiver();\n\n        if (executionFeeReceiver == address(0)) {\n            executionFeeReceiver = order.receiver();\n        }\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterOrderCancellation(params.key, order, eventData);\n\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.orderVault,\n            params.key,\n            order.callbackContract(),\n            order.executionFee(),\n            params.startingGas,\n            GasUtils.estimateOrderOraclePriceCount(order.swapPath().length),\n            params.keeper,\n            executionFeeReceiver\n        );\n    }\n\n    // @dev freezes an order\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param orderVault OrderVault\n    // @param key the key of the order to freeze\n    // @param keeper the keeper sending the transaction\n    // @param startingGas the starting gas of the transaction\n    // @param reason the reason the order was frozen\n    function freezeOrder(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        OrderVault orderVault,\n        bytes32 key,\n        address keeper,\n        uint256 startingGas,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        startingGas -= gasleft() / 63;\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n        BaseOrderUtils.validateNonEmptyOrder(order);\n\n        if (order.isFrozen()) {\n            revert Errors.OrderAlreadyFrozen();\n        }\n\n        order.setExecutionFee(0);\n        order.setIsFrozen(true);\n        OrderStoreUtils.set(dataStore, key, order);\n\n        OrderEventUtils.emitOrderFrozen(eventEmitter, key, order.account(), reason, reasonBytes);\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterOrderFrozen(key, order, eventData);\n\n        GasUtils.payExecutionFee(\n            dataStore,\n            eventEmitter,\n            orderVault,\n            key,\n            order.callbackContract(),\n            order.executionFee(),\n            startingGas,\n            GasUtils.estimateOrderOraclePriceCount(order.swapPath().length),\n            keeper,\n            order.receiver()\n        );\n    }\n\n    function clearAutoCancelOrders(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        OrderVault orderVault,\n        bytes32 positionKey,\n        address keeper\n    ) internal {\n        bytes32[] memory orderKeys = AutoCancelUtils.getAutoCancelOrderKeys(dataStore, positionKey);\n\n        for (uint256 i; i < orderKeys.length; i++) {\n            cancelOrder(\n                CancelOrderParams(\n                    dataStore,\n                    eventEmitter,\n                    orderVault,\n                    orderKeys[i],\n                    keeper, // keeper\n                    gasleft(), // startingGas\n                    false, // isExternalCall\n                    \"AUTO_CANCEL\", // reason\n                    \"\" // reasonBytes\n                )\n            );\n        }\n    }\n\n    function updateAutoCancelList(\n        DataStore dataStore,\n        bytes32 orderKey,\n        Order.Props memory order,\n        bool shouldAdd\n    ) internal {\n        if (\n            order.orderType() != Order.OrderType.LimitDecrease && order.orderType() != Order.OrderType.StopLossDecrease\n        ) {\n            return;\n        }\n\n        bytes32 positionKey = BaseOrderUtils.getPositionKey(order);\n\n        if (shouldAdd) {\n            AutoCancelUtils.addAutoCancelOrderKey(dataStore, positionKey, orderKey);\n        } else {\n            AutoCancelUtils.removeAutoCancelOrderKey(dataStore, positionKey, orderKey);\n        }\n    }\n\n    function validateTotalCallbackGasLimitForAutoCancelOrders(\n        DataStore dataStore,\n        Order.Props memory order\n    ) internal view {\n        if (\n            order.orderType() != Order.OrderType.LimitDecrease && order.orderType() != Order.OrderType.StopLossDecrease\n        ) {\n            return;\n        }\n\n        bytes32 positionKey = BaseOrderUtils.getPositionKey(order);\n        uint256 maxTotal = dataStore.getUint(Keys.MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS);\n        uint256 total = getTotalCallbackGasLimitForAutoCancelOrders(dataStore, positionKey);\n\n        if (total > maxTotal) {\n            revert Errors.MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(total, maxTotal);\n        }\n    }\n\n    function getTotalCallbackGasLimitForAutoCancelOrders(\n        DataStore dataStore,\n        bytes32 positionKey\n    ) internal view returns (uint256) {\n        bytes32[] memory orderKeys = AutoCancelUtils.getAutoCancelOrderKeys(dataStore, positionKey);\n\n        uint256 total;\n\n        for (uint256 i; i < orderKeys.length; i++) {\n            total += dataStore.getUint(keccak256(abi.encode(orderKeys[i], OrderStoreUtils.CALLBACK_GAS_LIMIT)));\n        }\n\n        return total;\n    }\n}\n"
    },
    "contracts/order/OrderVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../bank/StrictBank.sol\";\n\n// @title OrderVault\n// @dev Vault for orders\ncontract OrderVault is StrictBank {\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\n}\n"
    },
    "contracts/order/SwapOrderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseOrderUtils.sol\";\nimport \"../swap/SwapUtils.sol\";\n\n// @title SwapOrderUtils\n// @dev Library for functions to help with processing a swap order\nlibrary SwapOrderUtils {\n    using Order for Order.Props;\n    using Array for uint256[];\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @dev process a swap order\n    // @param params BaseOrderUtils.ExecuteOrderParams\n    function processOrder(BaseOrderUtils.ExecuteOrderParams memory params) external returns (EventUtils.EventLogData memory) {\n        if (params.order.market() != address(0)) {\n            revert Errors.UnexpectedMarket();\n        }\n\n        if (params.minOracleTimestamp < params.order.updatedAtTime()) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\n                params.minOracleTimestamp,\n                params.order.updatedAtTime()\n            );\n        }\n\n        if (\n            !BaseOrderUtils.isMarketOrder(params.order.orderType()) &&\n            params.minOracleTimestamp < params.order.validFromTime()\n        ) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\n                params.minOracleTimestamp,\n                params.order.validFromTime()\n            );\n        }\n\n        uint256 requestExpirationTime = params.contracts.dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\n\n        if (\n            params.order.orderType() == Order.OrderType.MarketSwap &&\n            params.maxOracleTimestamp > params.order.updatedAtTime() + requestExpirationTime\n        ) {\n            revert Errors.OracleTimestampsAreLargerThanRequestExpirationTime(\n                params.maxOracleTimestamp,\n                params.order.updatedAtTime(),\n                requestExpirationTime\n            );\n        }\n\n        (address outputToken, uint256 outputAmount) = SwapUtils.swap(SwapUtils.SwapParams(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.contracts.oracle,\n            params.contracts.orderVault,\n            params.key,\n            params.order.initialCollateralToken(),\n            params.order.initialCollateralDeltaAmount(),\n            params.swapPathMarkets,\n            params.order.minOutputAmount(),\n            params.order.receiver(),\n            params.order.uiFeeReceiver(),\n            params.order.shouldUnwrapNativeToken(),\n            ISwapPricingUtils.SwapPricingType.Swap\n        ));\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"outputToken\", outputToken);\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"outputAmount\", outputAmount);\n        return eventData;\n    }\n}\n"
    },
    "contracts/position/DecreasePositionCollateralUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"../oracle/Oracle.sol\";\nimport \"../pricing/PositionPricingUtils.sol\";\n\nimport \"./Position.sol\";\nimport \"./PositionEventUtils.sol\";\nimport \"./PositionUtils.sol\";\nimport \"../order/BaseOrderUtils.sol\";\nimport \"../order/OrderEventUtils.sol\";\n\nimport \"./DecreasePositionSwapUtils.sol\";\n\n// @title DecreasePositionCollateralUtils\n// @dev Library for functions to help with the calculations when decreasing a position\nlibrary DecreasePositionCollateralUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    using Position for Position.Props;\n    using Order for Order.Props;\n    using Price for Price.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    struct ProcessCollateralCache {\n        bool isInsolventCloseAllowed;\n        bool wasSwapped;\n        uint256 swapOutputAmount;\n        PayForCostResult result;\n    }\n\n    struct PayForCostResult {\n        uint256 amountPaidInCollateralToken;\n        uint256 amountPaidInSecondaryOutputToken;\n        uint256 remainingCostUsd;\n    }\n\n    // @dev handle the collateral changes of the position\n    // @param params PositionUtils.UpdatePositionParams\n    // @param cache DecreasePositionCache\n    // @return (PositionUtils.DecreasePositionCollateralValues, PositionPricingUtils.PositionFees)\n    function processCollateral(\n        PositionUtils.UpdatePositionParams memory params,\n        PositionUtils.DecreasePositionCache memory cache\n    ) external returns (\n        PositionUtils.DecreasePositionCollateralValues memory,\n        PositionPricingUtils.PositionFees memory\n    ) {\n        ProcessCollateralCache memory collateralCache;\n        PositionUtils.DecreasePositionCollateralValues memory values;\n\n        values.output.outputToken = params.position.collateralToken();\n        values.output.secondaryOutputToken = cache.pnlToken;\n\n        // only allow insolvent closing if it is a liquidation or ADL order\n        // isInsolventCloseAllowed is used in handleEarlyReturn to determine\n        // whether the txn should revert if the remainingCostUsd is below zero\n        //\n        // for isInsolventCloseAllowed to be true, the sizeDeltaUsd must equal\n        // the position size, otherwise there may be pending positive pnl that\n        // could be used to pay for fees and the position would be undercharged\n        // if the position is not fully closed\n        //\n        // for ADLs it may be possible that a position needs to be closed by a larger\n        // size to fully pay for fees, but closing by that larger size could cause a PnlOvercorrected\n        // error to be thrown in AdlHandler, this case should be rare\n        collateralCache.isInsolventCloseAllowed =\n            params.order.sizeDeltaUsd() == params.position.sizeInUsd() &&\n            (\n                BaseOrderUtils.isLiquidationOrder(params.order.orderType()) ||\n                params.secondaryOrderType == Order.SecondaryOrderType.Adl\n            );\n\n        // in case price impact is too high it is capped and the difference is made to be claimable\n        // the execution price is based on the capped price impact so it may be a better price than what it should be\n        // priceImpactDiffUsd is the difference between the maximum price impact and the originally calculated price impact\n        // e.g. if the originally calculated price impact is -$100, but the capped price impact is -$80\n        // then priceImpactDiffUsd would be $20\n        (values.priceImpactUsd, values.priceImpactDiffUsd, values.executionPrice) = PositionUtils.getExecutionPriceForDecrease(params, cache.prices.indexTokenPrice);\n\n        // the totalPositionPnl is calculated based on the current indexTokenPrice instead of the executionPrice\n        // since the executionPrice factors in price impact which should be accounted for separately\n        // the sizeDeltaInTokens is calculated as position.sizeInTokens() * sizeDeltaUsd / position.sizeInUsd()\n        // the basePnlUsd is the pnl to be realized, and is calculated as:\n        // totalPositionPnl * sizeDeltaInTokens / position.sizeInTokens()\n        (values.basePnlUsd, values.uncappedBasePnlUsd, values.sizeDeltaInTokens) = PositionUtils.getPositionPnlUsd(\n            params.contracts.dataStore,\n            params.market,\n            cache.prices,\n            params.position,\n            params.order.sizeDeltaUsd()\n        );\n\n        PositionPricingUtils.GetPositionFeesParams memory getPositionFeesParams = PositionPricingUtils.GetPositionFeesParams(\n            params.contracts.dataStore, // dataStore\n            params.contracts.referralStorage, // referralStorage\n            params.position, // position\n            cache.collateralTokenPrice, // collateralTokenPrice\n            values.priceImpactUsd > 0, // forPositiveImpact\n            params.market.longToken, // longToken\n            params.market.shortToken, // shortToken\n            params.order.sizeDeltaUsd(), // sizeDeltaUsd\n            params.order.uiFeeReceiver(), // uiFeeReceiver\n            BaseOrderUtils.isLiquidationOrder(params.order.orderType()) // isLiquidation\n        );\n\n        // if the pnl is positive, deduct the pnl amount from the pool\n        if (values.basePnlUsd > 0) {\n            // use pnlTokenPrice.max to minimize the tokens paid out\n            uint256 deductionAmountForPool = values.basePnlUsd.toUint256() / cache.pnlTokenPrice.max;\n\n            MarketUtils.applyDeltaToPoolAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market,\n                cache.pnlToken,\n                -deductionAmountForPool.toInt256()\n            );\n\n            if (values.output.outputToken == cache.pnlToken) {\n                values.output.outputAmount += deductionAmountForPool;\n            } else {\n                values.output.secondaryOutputAmount += deductionAmountForPool;\n            }\n        }\n\n        if (values.priceImpactUsd > 0) {\n            // use indexTokenPrice.min to maximize the position impact pool reduction\n            uint256 deductionAmountForImpactPool = Calc.roundUpDivision(values.priceImpactUsd.toUint256(), cache.prices.indexTokenPrice.min);\n\n            MarketUtils.applyDeltaToPositionImpactPool(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market.marketToken,\n                -deductionAmountForImpactPool.toInt256()\n            );\n\n            // use pnlTokenPrice.max to minimize the payout from the pool\n            // some impact pool value may be transferred to the market token pool if there is a\n            // large spread between min and max prices\n            // since if there is a positive priceImpactUsd, the impact pool would be reduced using indexTokenPrice.min to\n            // maximize the deduction value, while the market token pool is reduced using the pnlTokenPrice.max to minimize\n            // the deduction value\n            // the pool value is calculated by subtracting the worth of the tokens in the position impact pool\n            // so this transfer of value would increase the price of the market token\n            uint256 deductionAmountForPool = values.priceImpactUsd.toUint256() / cache.pnlTokenPrice.max;\n\n            MarketUtils.applyDeltaToPoolAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market,\n                cache.pnlToken,\n                -deductionAmountForPool.toInt256()\n            );\n\n            if (values.output.outputToken == cache.pnlToken) {\n                values.output.outputAmount += deductionAmountForPool;\n            } else {\n                values.output.secondaryOutputAmount += deductionAmountForPool;\n            }\n        }\n\n        // swap profit to the collateral token\n        // if the decreasePositionSwapType was set to NoSwap or if the swap fails due\n        // to insufficient liquidity or other reasons then it is possible that\n        // the profit remains in a different token from the collateral token\n        (collateralCache.wasSwapped, collateralCache.swapOutputAmount) = DecreasePositionSwapUtils.swapProfitToCollateralToken(\n            params,\n            cache.pnlToken,\n            values.output.secondaryOutputAmount\n        );\n\n        // if the swap was successful the profit should have been swapped\n        // to the collateral token\n        if (collateralCache.wasSwapped) {\n            values.output.outputAmount += collateralCache.swapOutputAmount;\n            values.output.secondaryOutputAmount = 0;\n        }\n\n        values.remainingCollateralAmount = params.position.collateralAmount();\n\n        PositionPricingUtils.PositionFees memory fees = PositionPricingUtils.getPositionFees(\n            getPositionFeesParams\n        );\n\n        // pay for funding fees\n        (values, collateralCache.result) = payForCost(\n            params,\n            values,\n            cache.prices,\n            cache.collateralTokenPrice,\n            // use collateralTokenPrice.min because the payForCost\n            // will divide the USD value by the price.min as well\n            fees.funding.fundingFeeAmount * cache.collateralTokenPrice.min\n        );\n\n        if (collateralCache.result.amountPaidInSecondaryOutputToken > 0) {\n            address holdingAddress = params.contracts.dataStore.getAddress(Keys.HOLDING_ADDRESS);\n            if (holdingAddress == address(0)) {\n                revert Errors.EmptyHoldingAddress();\n            }\n\n            // send the funding fee amount to the holding address\n            // this funding fee amount should be swapped to the required token\n            // and the resulting tokens should be deposited back into the pool\n            MarketUtils.incrementClaimableCollateralAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market.marketToken,\n                values.output.secondaryOutputToken,\n                holdingAddress,\n                collateralCache.result.amountPaidInSecondaryOutputToken\n            );\n        }\n\n        if (collateralCache.result.amountPaidInCollateralToken < fees.funding.fundingFeeAmount) {\n            // the case where this is insufficient collateral to pay funding fees\n            // should be rare, and the difference should be small\n            // in case it happens, the pool should be topped up with the required amount using\n            // the claimable amount sent to the holding address, an insurance fund, or similar mechanism\n            PositionEventUtils.emitInsufficientFundingFeePayment(\n                params.contracts.eventEmitter,\n                params.market.marketToken,\n                params.position.collateralToken(),\n                fees.funding.fundingFeeAmount,\n                collateralCache.result.amountPaidInCollateralToken,\n                collateralCache.result.amountPaidInSecondaryOutputToken\n            );\n        }\n\n        if (collateralCache.result.remainingCostUsd > 0) {\n            return handleEarlyReturn(\n                params,\n                values,\n                fees,\n                collateralCache,\n                \"funding\"\n            );\n        }\n\n        // pay for negative pnl\n        if (values.basePnlUsd < 0) {\n            (values, collateralCache.result) = payForCost(\n                params,\n                values,\n                cache.prices,\n                cache.collateralTokenPrice,\n                (-values.basePnlUsd).toUint256()\n            );\n\n            if (collateralCache.result.amountPaidInCollateralToken > 0) {\n                MarketUtils.applyDeltaToPoolAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market,\n                    params.position.collateralToken(),\n                    collateralCache.result.amountPaidInCollateralToken.toInt256()\n                );\n            }\n\n            if (collateralCache.result.amountPaidInSecondaryOutputToken > 0) {\n                MarketUtils.applyDeltaToPoolAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market,\n                    values.output.secondaryOutputToken,\n                    collateralCache.result.amountPaidInSecondaryOutputToken.toInt256()\n                );\n            }\n\n            if (collateralCache.result.remainingCostUsd > 0) {\n                return handleEarlyReturn(\n                    params,\n                    values,\n                    fees,\n                    collateralCache,\n                    \"pnl\"\n                );\n            }\n        }\n\n        // pay for fees\n        (values, collateralCache.result) = payForCost(\n            params,\n            values,\n            cache.prices,\n            cache.collateralTokenPrice,\n            // use collateralTokenPrice.min because the payForCost\n            // will divide the USD value by the price.min as well\n            fees.totalCostAmountExcludingFunding * cache.collateralTokenPrice.min\n        );\n\n        // if fees were fully paid in the collateral token, update the pool and claimable fee amounts\n        if (collateralCache.result.remainingCostUsd == 0 && collateralCache.result.amountPaidInSecondaryOutputToken == 0) {\n            // there may be a large amount of borrowing fees that could have been accumulated\n            // these fees could cause the pool to become unbalanced, price impact is not paid for causing\n            // this imbalance\n            // the swap impact pool should be built up so that it can be used to pay for positive price impact\n            // for re-balancing to help handle this case\n            MarketUtils.applyDeltaToPoolAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market,\n                params.position.collateralToken(),\n                fees.feeAmountForPool.toInt256()\n            );\n\n            FeeUtils.incrementClaimableFeeAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market.marketToken,\n                params.position.collateralToken(),\n                fees.feeReceiverAmount,\n                Keys.POSITION_FEE_TYPE\n            );\n\n            FeeUtils.incrementClaimableUiFeeAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.order.uiFeeReceiver(),\n                params.market.marketToken,\n                params.position.collateralToken(),\n                fees.ui.uiFeeAmount,\n                Keys.UI_POSITION_FEE_TYPE\n            );\n        } else {\n            // the fees are expected to be paid in the collateral token\n            // if there are insufficient funds to pay for fees entirely in the collateral token\n            // then credit the fee amount entirely to the pool\n            if (collateralCache.result.amountPaidInCollateralToken > 0) {\n                MarketUtils.applyDeltaToPoolAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market,\n                    params.position.collateralToken(),\n                    collateralCache.result.amountPaidInCollateralToken.toInt256()\n                );\n            }\n\n            if (collateralCache.result.amountPaidInSecondaryOutputToken > 0) {\n                MarketUtils.applyDeltaToPoolAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market,\n                    values.output.secondaryOutputToken,\n                    collateralCache.result.amountPaidInSecondaryOutputToken.toInt256()\n                );\n            }\n\n            // empty the fees since the amount was entirely paid to the pool instead of for fees\n            // it is possible for the txn execution to still complete even in this case\n            // as long as the remainingCostUsd is still zero\n            fees = getEmptyFees(fees);\n        }\n\n        if (collateralCache.result.remainingCostUsd > 0) {\n            return handleEarlyReturn(\n                params,\n                values,\n                fees,\n                collateralCache,\n                \"fees\"\n            );\n        }\n\n        // pay for negative price impact\n        if (values.priceImpactUsd < 0) {\n            (values, collateralCache.result) = payForCost(\n                params,\n                values,\n                cache.prices,\n                cache.collateralTokenPrice,\n                (-values.priceImpactUsd).toUint256()\n            );\n\n            if (collateralCache.result.amountPaidInCollateralToken > 0) {\n                MarketUtils.applyDeltaToPoolAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market,\n                    params.position.collateralToken(),\n                    collateralCache.result.amountPaidInCollateralToken.toInt256()\n                );\n\n                MarketUtils.applyDeltaToPositionImpactPool(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market.marketToken,\n                    (collateralCache.result.amountPaidInCollateralToken * cache.collateralTokenPrice.min / cache.prices.indexTokenPrice.max).toInt256()\n                );\n            }\n\n            if (collateralCache.result.amountPaidInSecondaryOutputToken > 0) {\n                MarketUtils.applyDeltaToPoolAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market,\n                    values.output.secondaryOutputToken,\n                    collateralCache.result.amountPaidInSecondaryOutputToken.toInt256()\n                );\n\n                MarketUtils.applyDeltaToPositionImpactPool(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market.marketToken,\n                    (collateralCache.result.amountPaidInSecondaryOutputToken * cache.pnlTokenPrice.min / cache.prices.indexTokenPrice.max).toInt256()\n                );\n            }\n\n            if (collateralCache.result.remainingCostUsd > 0) {\n                return handleEarlyReturn(\n                    params,\n                    values,\n                    fees,\n                    collateralCache,\n                    \"impact\"\n                );\n            }\n        }\n\n        // pay for price impact diff\n        if (values.priceImpactDiffUsd > 0) {\n            (values, collateralCache.result) = payForCost(\n                params,\n                values,\n                cache.prices,\n                cache.collateralTokenPrice,\n                values.priceImpactDiffUsd\n            );\n\n            if (collateralCache.result.amountPaidInCollateralToken > 0) {\n                MarketUtils.incrementClaimableCollateralAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market.marketToken,\n                    params.position.collateralToken(),\n                    params.order.account(),\n                    collateralCache.result.amountPaidInCollateralToken\n                );\n            }\n\n            if (collateralCache.result.amountPaidInSecondaryOutputToken > 0) {\n                MarketUtils.incrementClaimableCollateralAmount(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.market.marketToken,\n                    values.output.secondaryOutputToken,\n                    params.order.account(),\n                    collateralCache.result.amountPaidInSecondaryOutputToken\n                );\n            }\n\n            if (collateralCache.result.remainingCostUsd > 0) {\n                return handleEarlyReturn(\n                    params,\n                    values,\n                    fees,\n                    collateralCache,\n                    \"diff\"\n                );\n            }\n        }\n\n        // the priceImpactDiffUsd has been deducted from the output amount or the position's collateral\n        // to reduce the chance that the position's collateral is reduced by an unexpected amount, adjust the\n        // initialCollateralDeltaAmount by the priceImpactDiffAmount\n        // this would also help to prevent the position's leverage from being unexpectedly increased\n        //\n        // note that this calculation may not be entirely accurate since it is possible that the priceImpactDiffUsd\n        // could have been paid with one of or a combination of collateral / outputAmount / secondaryOutputAmount\n        if (params.order.initialCollateralDeltaAmount() > 0 && values.priceImpactDiffUsd > 0) {\n            uint256 initialCollateralDeltaAmount = params.order.initialCollateralDeltaAmount();\n\n            uint256 priceImpactDiffAmount = values.priceImpactDiffUsd / cache.collateralTokenPrice.min;\n            if (initialCollateralDeltaAmount > priceImpactDiffAmount) {\n                params.order.setInitialCollateralDeltaAmount(initialCollateralDeltaAmount - priceImpactDiffAmount);\n            } else {\n                params.order.setInitialCollateralDeltaAmount(0);\n            }\n\n            OrderEventUtils.emitOrderCollateralDeltaAmountAutoUpdated(\n                params.contracts.eventEmitter,\n                params.orderKey,\n                initialCollateralDeltaAmount, // collateralDeltaAmount\n                params.order.initialCollateralDeltaAmount() // nextCollateralDeltaAmount\n            );\n        }\n\n        // cap the withdrawable amount to the remainingCollateralAmount\n        if (params.order.initialCollateralDeltaAmount() > values.remainingCollateralAmount) {\n            OrderEventUtils.emitOrderCollateralDeltaAmountAutoUpdated(\n                params.contracts.eventEmitter,\n                params.orderKey,\n                params.order.initialCollateralDeltaAmount(), // collateralDeltaAmount\n                values.remainingCollateralAmount // nextCollateralDeltaAmount\n            );\n\n            params.order.setInitialCollateralDeltaAmount(values.remainingCollateralAmount);\n        }\n\n        if (params.order.initialCollateralDeltaAmount() > 0) {\n            values.remainingCollateralAmount -= params.order.initialCollateralDeltaAmount();\n            values.output.outputAmount += params.order.initialCollateralDeltaAmount();\n        }\n\n        return (values, fees);\n    }\n\n    function payForCost(\n        PositionUtils.UpdatePositionParams memory params,\n        PositionUtils.DecreasePositionCollateralValues memory values,\n        MarketUtils.MarketPrices memory prices,\n        Price.Props memory collateralTokenPrice,\n        uint256 costUsd\n    ) internal pure returns (PositionUtils.DecreasePositionCollateralValues memory, PayForCostResult memory) {\n        PayForCostResult memory result;\n\n        if (costUsd == 0) { return (values, result); }\n\n        uint256 remainingCostInOutputToken = Calc.roundUpDivision(costUsd, collateralTokenPrice.min);\n\n        if (values.output.outputAmount > 0) {\n            if (values.output.outputAmount > remainingCostInOutputToken) {\n                result.amountPaidInCollateralToken += remainingCostInOutputToken;\n                values.output.outputAmount -= remainingCostInOutputToken;\n                remainingCostInOutputToken = 0;\n            } else {\n                result.amountPaidInCollateralToken += values.output.outputAmount;\n                remainingCostInOutputToken -= values.output.outputAmount;\n                values.output.outputAmount = 0;\n            }\n        }\n\n        if (remainingCostInOutputToken == 0) { return (values, result); }\n\n        if (values.remainingCollateralAmount > 0) {\n            if (values.remainingCollateralAmount > remainingCostInOutputToken) {\n                result.amountPaidInCollateralToken += remainingCostInOutputToken;\n                values.remainingCollateralAmount -= remainingCostInOutputToken;\n                remainingCostInOutputToken = 0;\n            } else {\n                result.amountPaidInCollateralToken += values.remainingCollateralAmount;\n                remainingCostInOutputToken -= values.remainingCollateralAmount;\n                values.remainingCollateralAmount = 0;\n            }\n        }\n\n        if (remainingCostInOutputToken == 0) { return (values, result); }\n\n        Price.Props memory secondaryOutputTokenPrice = MarketUtils.getCachedTokenPrice(values.output.secondaryOutputToken, params.market, prices);\n\n        uint256 remainingCostInSecondaryOutputToken = remainingCostInOutputToken * collateralTokenPrice.min / secondaryOutputTokenPrice.min;\n\n        if (values.output.secondaryOutputAmount > 0) {\n            if (values.output.secondaryOutputAmount > remainingCostInSecondaryOutputToken) {\n                result.amountPaidInSecondaryOutputToken += remainingCostInSecondaryOutputToken;\n                values.output.secondaryOutputAmount -= remainingCostInSecondaryOutputToken;\n                remainingCostInSecondaryOutputToken = 0;\n            } else {\n                result.amountPaidInSecondaryOutputToken += values.output.secondaryOutputAmount;\n                remainingCostInSecondaryOutputToken -= values.output.secondaryOutputAmount;\n                values.output.secondaryOutputAmount = 0;\n            }\n        }\n\n        result.remainingCostUsd = remainingCostInSecondaryOutputToken * secondaryOutputTokenPrice.min;\n\n        return (values, result);\n    }\n\n    function handleEarlyReturn(\n        PositionUtils.UpdatePositionParams memory params,\n        PositionUtils.DecreasePositionCollateralValues memory values,\n        PositionPricingUtils.PositionFees memory fees,\n        ProcessCollateralCache memory collateralCache,\n        string memory step\n    ) internal returns (PositionUtils.DecreasePositionCollateralValues memory, PositionPricingUtils.PositionFees memory) {\n        if (!collateralCache.isInsolventCloseAllowed) {\n            revert Errors.InsufficientFundsToPayForCosts(collateralCache.result.remainingCostUsd, step);\n        }\n\n        PositionEventUtils.emitPositionFeesInfo(\n            params.contracts.eventEmitter,\n            params.orderKey,\n            params.positionKey,\n            params.market.marketToken,\n            params.position.collateralToken(),\n            params.order.sizeDeltaUsd(),\n            false, // isIncrease\n            fees\n        );\n\n        PositionEventUtils.emitInsolventClose(\n            params.contracts.eventEmitter,\n            params.orderKey,\n            params.position.collateralAmount(),\n            values.basePnlUsd,\n            collateralCache.result.remainingCostUsd,\n            step\n        );\n\n        return (values, getEmptyFees(fees));\n    }\n\n    function getEmptyFees(\n        PositionPricingUtils.PositionFees memory fees\n    ) internal pure returns (PositionPricingUtils.PositionFees memory) {\n        PositionPricingUtils.PositionReferralFees memory referral = PositionPricingUtils.PositionReferralFees({\n            referralCode: bytes32(0),\n            affiliate: address(0),\n            trader: address(0),\n            totalRebateFactor: 0,\n            affiliateRewardFactor: 0,\n            adjustedAffiliateRewardFactor: 0,\n            traderDiscountFactor: 0,\n            totalRebateAmount: 0,\n            traderDiscountAmount: 0,\n            affiliateRewardAmount: 0\n        });\n\n        PositionPricingUtils.PositionProFees memory pro = PositionPricingUtils.PositionProFees({\n            traderTier: 0,\n            traderDiscountFactor: 0,\n            traderDiscountAmount: 0\n        });\n\n        // allow the accumulated funding fees to still be claimable\n        // return the latestFundingFeeAmountPerSize, latestLongTokenClaimableFundingAmountPerSize,\n        // latestShortTokenClaimableFundingAmountPerSize values as these may be used to update the\n        // position's values if the position will be partially closed\n        PositionPricingUtils.PositionFundingFees memory funding = PositionPricingUtils.PositionFundingFees({\n            fundingFeeAmount: 0,\n            claimableLongTokenAmount: fees.funding.claimableLongTokenAmount,\n            claimableShortTokenAmount: fees.funding.claimableShortTokenAmount,\n            latestFundingFeeAmountPerSize: fees.funding.latestFundingFeeAmountPerSize,\n            latestLongTokenClaimableFundingAmountPerSize: fees.funding.latestLongTokenClaimableFundingAmountPerSize,\n            latestShortTokenClaimableFundingAmountPerSize: fees.funding.latestShortTokenClaimableFundingAmountPerSize\n        });\n\n        PositionPricingUtils.PositionBorrowingFees memory borrowing = PositionPricingUtils.PositionBorrowingFees({\n            borrowingFeeUsd: 0,\n            borrowingFeeAmount: 0,\n            borrowingFeeReceiverFactor: 0,\n            borrowingFeeAmountForFeeReceiver: 0\n        });\n\n        PositionPricingUtils.PositionUiFees memory ui = PositionPricingUtils.PositionUiFees({\n            uiFeeReceiver: address(0),\n            uiFeeReceiverFactor: 0,\n            uiFeeAmount: 0\n        });\n\n        PositionPricingUtils.PositionLiquidationFees memory liquidation = PositionPricingUtils.PositionLiquidationFees({\n            liquidationFeeUsd: 0,\n            liquidationFeeAmount: 0,\n            liquidationFeeReceiverFactor: 0,\n            liquidationFeeAmountForFeeReceiver: 0\n        });\n\n        // all fees are zeroed even though funding may have been paid\n        // the funding fee amount value may not be accurate in the events due to this\n        PositionPricingUtils.PositionFees memory _fees = PositionPricingUtils.PositionFees({\n            referral: referral,\n            pro: pro,\n            funding: funding,\n            borrowing: borrowing,\n            ui: ui,\n            liquidation: liquidation,\n            collateralTokenPrice: fees.collateralTokenPrice,\n            positionFeeFactor: 0,\n            protocolFeeAmount: 0,\n            positionFeeReceiverFactor: 0,\n            feeReceiverAmount: 0,\n            feeAmountForPool: 0,\n            positionFeeAmountForPool: 0,\n            positionFeeAmount: 0,\n            totalCostAmountExcludingFunding: 0,\n            totalCostAmount: 0,\n            totalDiscountAmount: 0\n        });\n\n        return _fees;\n    }\n}\n"
    },
    "contracts/position/DecreasePositionSwapUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./PositionUtils.sol\";\n\nlibrary DecreasePositionSwapUtils {\n    using Order for Order.Props;\n    using Position for Position.Props;\n\n    // swap the withdrawn collateral from collateralToken to pnlToken if needed\n    function swapWithdrawnCollateralToPnlToken(\n        PositionUtils.UpdatePositionParams memory params,\n        PositionUtils.DecreasePositionCollateralValues memory values\n    ) external returns (PositionUtils.DecreasePositionCollateralValues memory) {\n        if (values.output.outputAmount > 0 && params.order.decreasePositionSwapType() == Order.DecreasePositionSwapType.SwapCollateralTokenToPnlToken) {\n            Market.Props[] memory swapPathMarkets = new Market.Props[](1);\n            swapPathMarkets[0] = params.market;\n\n            try params.contracts.swapHandler.swap(\n                SwapUtils.SwapParams(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.contracts.oracle,\n                    Bank(payable(params.market.marketToken)),\n                    params.orderKey,\n                    params.position.collateralToken(), // tokenIn\n                    values.output.outputAmount, // amountIn\n                    swapPathMarkets, // markets\n                    0, // minOutputAmount\n                    params.market.marketToken, // receiver\n                    params.order.uiFeeReceiver(), // uiFeeReceiver\n                    false, // shouldUnwrapNativeToken\n                    ISwapPricingUtils.SwapPricingType.Swap\n                )\n            ) returns (address tokenOut, uint256 swapOutputAmount) {\n                if (tokenOut != values.output.secondaryOutputToken) {\n                    revert Errors.InvalidOutputToken(tokenOut, values.output.secondaryOutputToken);\n                }\n                // combine the values into outputToken and outputAmount\n                values.output.outputToken = tokenOut;\n                values.output.outputAmount = values.output.secondaryOutputAmount + swapOutputAmount;\n                values.output.secondaryOutputAmount = 0;\n            } catch Error(string memory reason) {\n                emit SwapUtils.SwapReverted(reason, \"\");\n            } catch (bytes memory reasonBytes) {\n                (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n                emit SwapUtils.SwapReverted(reason, reasonBytes);\n            }\n        }\n\n        return values;\n    }\n\n    // swap the realized profit from the pnlToken to the collateralToken if needed\n    function swapProfitToCollateralToken(\n        PositionUtils.UpdatePositionParams memory params,\n        address pnlToken,\n        uint256 profitAmount\n    ) external returns (bool, uint256) {\n        if (profitAmount > 0 && params.order.decreasePositionSwapType() == Order.DecreasePositionSwapType.SwapPnlTokenToCollateralToken) {\n            Market.Props[] memory swapPathMarkets = new Market.Props[](1);\n            swapPathMarkets[0] = params.market;\n\n            try params.contracts.swapHandler.swap(\n                SwapUtils.SwapParams(\n                    params.contracts.dataStore,\n                    params.contracts.eventEmitter,\n                    params.contracts.oracle,\n                    Bank(payable(params.market.marketToken)),\n                    params.orderKey,\n                    pnlToken, // tokenIn\n                    profitAmount, // amountIn\n                    swapPathMarkets, // markets\n                    0, // minOutputAmount\n                    params.market.marketToken, // receiver\n                    params.order.uiFeeReceiver(), // uiFeeReceiver\n                    false, // shouldUnwrapNativeToken\n                    ISwapPricingUtils.SwapPricingType.Swap\n                )\n            ) returns (address /* tokenOut */, uint256 swapOutputAmount) {\n                return (true, swapOutputAmount);\n            } catch Error(string memory reason) {\n                emit SwapUtils.SwapReverted(reason, \"\");\n            } catch (bytes memory reasonBytes) {\n                (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(reasonBytes);\n                emit SwapUtils.SwapReverted(reason, reasonBytes);\n            }\n        }\n\n        return (false, 0);\n    }\n}\n"
    },
    "contracts/position/DecreasePositionUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Precision.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"../oracle/Oracle.sol\";\nimport \"../pricing/PositionPricingUtils.sol\";\n\nimport \"./Position.sol\";\nimport \"./PositionStoreUtils.sol\";\nimport \"./PositionUtils.sol\";\nimport \"./PositionEventUtils.sol\";\nimport \"../order/BaseOrderUtils.sol\";\nimport \"../order/OrderEventUtils.sol\";\n\nimport \"./DecreasePositionCollateralUtils.sol\";\n\n// @title DecreasePositionUtils\n// @dev Library for functions to help with decreasing a position\nlibrary DecreasePositionUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    using Position for Position.Props;\n    using Order for Order.Props;\n    using Price for Price.Props;\n\n    // @dev DecreasePositionResult struct for the results of decreasePosition\n    // @param outputToken the output token\n    // @param outputAmount the output amount\n    // @param secondaryOutputToken the secondary output token\n    // @param secondaryOutputAmount the secondary output amount\n    struct DecreasePositionResult {\n        address outputToken;\n        uint256 outputAmount;\n        address secondaryOutputToken;\n        uint256 secondaryOutputAmount;\n        uint256 orderSizeDeltaUsd;\n        uint256 orderInitialCollateralDeltaAmount;\n    }\n\n    // @dev decreases a position\n    // The decreasePosition function decreases the size of an existing position\n    // in a market. It takes a PositionUtils.UpdatePositionParams object as an input, which\n    // includes information about the position to be decreased, the market in\n    // which the position exists, and the order that is being used to decrease the position.\n    //\n    // The function first calculates the prices of the tokens in the market, and then\n    // checks whether the position is liquidatable based on the current market prices.\n    // If the order is a liquidation order and the position is not liquidatable, the function reverts.\n    //\n    // If there is not enough collateral in the position to complete the decrease,\n    // the function reverts. Otherwise, the function updates the position's size and\n    // collateral amount, and increments the claimable funding amount for\n    // the market if necessary.\n    //\n    // Finally, the function returns a DecreasePositionResult object containing\n    // information about the outcome of the decrease operation, including the amount\n    // of collateral removed from the position and any fees that were paid.\n    // @param params PositionUtils.UpdatePositionParams\n    function decreasePosition(\n        PositionUtils.UpdatePositionParams memory params\n    ) external returns (DecreasePositionResult memory) {\n        PositionUtils.DecreasePositionCache memory cache;\n\n        cache.prices = MarketUtils.getMarketPrices(\n            params.contracts.oracle,\n            params.market\n        );\n\n        cache.collateralTokenPrice = MarketUtils.getCachedTokenPrice(\n            params.order.initialCollateralToken(),\n            params.market,\n            cache.prices\n        );\n\n        // cap the order size to the position size\n        if (params.order.sizeDeltaUsd() > params.position.sizeInUsd()) {\n            if (params.order.orderType() == Order.OrderType.LimitDecrease ||\n                params.order.orderType() == Order.OrderType.StopLossDecrease) {\n\n                OrderEventUtils.emitOrderSizeDeltaAutoUpdated(\n                    params.contracts.eventEmitter,\n                    params.orderKey,\n                    params.order.sizeDeltaUsd(),\n                    params.position.sizeInUsd()\n                );\n\n                params.order.setSizeDeltaUsd(params.position.sizeInUsd());\n            } else {\n                revert Errors.InvalidDecreaseOrderSize(params.order.sizeDeltaUsd(), params.position.sizeInUsd());\n            }\n        }\n\n        // cap the initialCollateralDeltaAmount to the position collateralAmount\n        if (params.order.initialCollateralDeltaAmount() > params.position.collateralAmount()) {\n            OrderEventUtils.emitOrderCollateralDeltaAmountAutoUpdated(\n                params.contracts.eventEmitter,\n                params.orderKey,\n                params.order.initialCollateralDeltaAmount(),\n                params.position.collateralAmount()\n            );\n\n            params.order.setInitialCollateralDeltaAmount(params.position.collateralAmount());\n        }\n\n        // if the position will be partially decreased then do a check on the\n        // remaining collateral amount and update the order attributes if needed\n        if (params.order.sizeDeltaUsd() < params.position.sizeInUsd()) {\n            // estimate pnl based on indexTokenPrice\n            (cache.estimatedPositionPnlUsd, /* int256 uncappedBasePnlUsd */,  /* uint256 sizeDeltaInTokens */) = PositionUtils.getPositionPnlUsd(\n                params.contracts.dataStore,\n                params.market,\n                cache.prices,\n                params.position,\n                params.position.sizeInUsd()\n            );\n\n            cache.estimatedRealizedPnlUsd = Precision.mulDiv(cache.estimatedPositionPnlUsd, params.order.sizeDeltaUsd(), params.position.sizeInUsd());\n            cache.estimatedRemainingPnlUsd = cache.estimatedPositionPnlUsd - cache.estimatedRealizedPnlUsd;\n\n            PositionUtils.WillPositionCollateralBeSufficientValues memory positionValues = PositionUtils.WillPositionCollateralBeSufficientValues(\n                params.position.sizeInUsd() - params.order.sizeDeltaUsd(), // positionSizeInUsd\n                params.position.collateralAmount() - params.order.initialCollateralDeltaAmount(), // positionCollateralAmount\n                cache.estimatedRealizedPnlUsd,  // realizedPnlUsd\n                -params.order.sizeDeltaUsd().toInt256() // openInterestDelta\n            );\n\n            (bool willBeSufficient, int256 estimatedRemainingCollateralUsd) = PositionUtils.willPositionCollateralBeSufficient(\n                params.contracts.dataStore,\n                params.market,\n                cache.prices,\n                params.position.collateralToken(),\n                params.position.isLong(),\n                positionValues\n            );\n\n            // do not allow withdrawal of collateral if it would lead to the position\n            // having an insufficient amount of collateral\n            // this helps to prevent gaming by opening a position then reducing collateral\n            // to increase the leverage of the position\n            if (!willBeSufficient) {\n                if (params.order.sizeDeltaUsd() == 0) {\n                    revert Errors.UnableToWithdrawCollateral(estimatedRemainingCollateralUsd);\n                }\n\n                OrderEventUtils.emitOrderCollateralDeltaAmountAutoUpdated(\n                    params.contracts.eventEmitter,\n                    params.orderKey,\n                    params.order.initialCollateralDeltaAmount(),\n                    0\n                );\n\n                // the estimatedRemainingCollateralUsd subtracts the initialCollateralDeltaAmount\n                // since the initialCollateralDeltaAmount will be set to zero, the initialCollateralDeltaAmount\n                // should be added back to the estimatedRemainingCollateralUsd\n                estimatedRemainingCollateralUsd += (params.order.initialCollateralDeltaAmount() * cache.collateralTokenPrice.min).toInt256();\n                params.order.setInitialCollateralDeltaAmount(0);\n            }\n\n            // if the remaining collateral including position pnl will be below\n            // the min collateral usd value, then close the position\n            //\n            // if the position has sufficient remaining collateral including pnl\n            // then allow the position to be partially closed and the updated\n            // position to remain open\n            if ((estimatedRemainingCollateralUsd + cache.estimatedRemainingPnlUsd) < params.contracts.dataStore.getUint(Keys.MIN_COLLATERAL_USD).toInt256()) {\n                OrderEventUtils.emitOrderSizeDeltaAutoUpdated(\n                    params.contracts.eventEmitter,\n                    params.orderKey,\n                    params.order.sizeDeltaUsd(),\n                    params.position.sizeInUsd()\n                );\n\n                params.order.setSizeDeltaUsd(params.position.sizeInUsd());\n            }\n\n            if (\n                params.position.sizeInUsd() > params.order.sizeDeltaUsd()  &&\n                params.position.sizeInUsd() - params.order.sizeDeltaUsd() < params.contracts.dataStore.getUint(Keys.MIN_POSITION_SIZE_USD)\n            ) {\n                OrderEventUtils.emitOrderSizeDeltaAutoUpdated(\n                    params.contracts.eventEmitter,\n                    params.orderKey,\n                    params.order.sizeDeltaUsd(),\n                    params.position.sizeInUsd()\n                );\n\n                params.order.setSizeDeltaUsd(params.position.sizeInUsd());\n            }\n        }\n\n        // if the position will be closed, set the initial collateral delta amount\n        // to zero to help ensure that the order can be executed\n        if (params.order.sizeDeltaUsd() == params.position.sizeInUsd() && params.order.initialCollateralDeltaAmount() > 0) {\n            params.order.setInitialCollateralDeltaAmount(0);\n        }\n\n        cache.pnlToken = params.position.isLong() ? params.market.longToken : params.market.shortToken;\n        cache.pnlTokenPrice = params.position.isLong() ? cache.prices.longTokenPrice : cache.prices.shortTokenPrice;\n\n        if (params.order.decreasePositionSwapType() != Order.DecreasePositionSwapType.NoSwap &&\n            cache.pnlToken == params.position.collateralToken()) {\n            params.order.setDecreasePositionSwapType(Order.DecreasePositionSwapType.NoSwap);\n        }\n\n        if (BaseOrderUtils.isLiquidationOrder(params.order.orderType())) {\n            (bool isLiquidatable, string memory reason, PositionUtils.IsPositionLiquidatableInfo memory info) = PositionUtils.isPositionLiquidatable(\n                params.contracts.dataStore,\n                params.contracts.referralStorage,\n                params.position,\n                params.market,\n                cache.prices,\n                true // shouldValidateMinCollateralUsd\n            );\n\n            if (!isLiquidatable) {\n                revert Errors.PositionShouldNotBeLiquidated(\n                    reason,\n                    info.remainingCollateralUsd,\n                    info.minCollateralUsd,\n                    info.minCollateralUsdForLeverage\n                );\n            }\n        }\n\n        cache.initialCollateralAmount = params.position.collateralAmount();\n        (\n            PositionUtils.DecreasePositionCollateralValues memory values,\n            PositionPricingUtils.PositionFees memory fees\n        ) = DecreasePositionCollateralUtils.processCollateral(\n            params,\n            cache\n        );\n\n        cache.nextPositionSizeInUsd = params.position.sizeInUsd() - params.order.sizeDeltaUsd();\n        cache.nextPositionBorrowingFactor = MarketUtils.getCumulativeBorrowingFactor(params.contracts.dataStore, params.market.marketToken, params.position.isLong());\n\n        PositionUtils.updateTotalBorrowing(\n            params,\n            cache.nextPositionSizeInUsd,\n            cache.nextPositionBorrowingFactor\n        );\n\n        params.position.setSizeInUsd(cache.nextPositionSizeInUsd);\n        params.position.setSizeInTokens(params.position.sizeInTokens() - values.sizeDeltaInTokens);\n        params.position.setCollateralAmount(values.remainingCollateralAmount);\n        params.position.setDecreasedAtTime(Chain.currentTimestamp());\n\n        PositionUtils.incrementClaimableFundingAmount(params, fees);\n\n        if (params.position.sizeInUsd() == 0 || params.position.sizeInTokens() == 0) {\n            // withdraw all collateral if the position will be closed\n            values.output.outputAmount += params.position.collateralAmount();\n\n            params.position.setSizeInUsd(0);\n            params.position.setSizeInTokens(0);\n            params.position.setCollateralAmount(0);\n\n            PositionStoreUtils.remove(params.contracts.dataStore, params.positionKey, params.order.account());\n        } else {\n            params.position.setBorrowingFactor(cache.nextPositionBorrowingFactor);\n\n            params.position.setFundingFeeAmountPerSize(fees.funding.latestFundingFeeAmountPerSize);\n            params.position.setLongTokenClaimableFundingAmountPerSize(fees.funding.latestLongTokenClaimableFundingAmountPerSize);\n            params.position.setShortTokenClaimableFundingAmountPerSize(fees.funding.latestShortTokenClaimableFundingAmountPerSize);\n\n            PositionStoreUtils.set(params.contracts.dataStore, params.positionKey, params.position);\n        }\n\n        MarketUtils.applyDeltaToCollateralSum(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.position.market(),\n            params.position.collateralToken(),\n            params.position.isLong(),\n            -(cache.initialCollateralAmount - params.position.collateralAmount()).toInt256()\n        );\n\n        PositionUtils.updateOpenInterest(\n            params,\n            -params.order.sizeDeltaUsd().toInt256(),\n            -values.sizeDeltaInTokens.toInt256()\n        );\n\n        // affiliate rewards are still distributed even if the order is a liquidation order\n        // this is expected as a partial liquidation is considered the same as an automatic\n        // closing of a position\n        PositionUtils.handleReferral(params, fees);\n\n        // validatePosition should be called after open interest and all other market variables\n        // have been updated\n        if (params.position.sizeInUsd() != 0 || params.position.sizeInTokens() != 0) {\n            // validate position which validates liquidation state is only called\n            // if the remaining position size is not zero\n            // due to this, a user can still manually close their position if\n            // it is in a partially liquidatable state\n            // this should not cause any issues as a liquidation is the same\n            // as automatically closing a position\n            // the only difference is that if the position has insufficient / negative\n            // collateral a liquidation transaction should still complete\n            // while a manual close transaction should revert\n            PositionUtils.validatePosition(\n                params.contracts.dataStore,\n                params.contracts.referralStorage,\n                params.position,\n                params.market,\n                cache.prices,\n                false, // shouldValidateMinPositionSize\n                false // shouldValidateMinCollateralUsd\n            );\n        }\n\n        PositionEventUtils.emitPositionFeesCollected(\n            params.contracts.eventEmitter,\n            params.orderKey,\n            params.positionKey,\n            params.market.marketToken,\n            params.position.collateralToken(),\n            params.order.sizeDeltaUsd(),\n            false,\n            fees\n        );\n\n        PositionEventUtils.emitPositionDecrease(\n            params.contracts.eventEmitter,\n            params.orderKey,\n            params.positionKey,\n            params.position,\n            params.order.sizeDeltaUsd(),\n            cache.initialCollateralAmount - params.position.collateralAmount(),\n            params.order.orderType(),\n            values,\n            cache.prices.indexTokenPrice,\n            cache.collateralTokenPrice\n        );\n\n        values = DecreasePositionSwapUtils.swapWithdrawnCollateralToPnlToken(params, values);\n\n        return DecreasePositionResult(\n            values.output.outputToken,\n            values.output.outputAmount,\n            values.output.secondaryOutputToken,\n            values.output.secondaryOutputAmount,\n            params.order.sizeDeltaUsd(),\n            params.order.initialCollateralDeltaAmount()\n        );\n    }\n}\n"
    },
    "contracts/position/IncreasePositionUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"../oracle/Oracle.sol\";\nimport \"../pricing/PositionPricingUtils.sol\";\n\nimport \"./Position.sol\";\nimport \"./PositionStoreUtils.sol\";\nimport \"./PositionUtils.sol\";\nimport \"./PositionEventUtils.sol\";\n\n// @title IncreasePositionUtils\n// @dev Library for functions to help with increasing a position\nlibrary IncreasePositionUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    using Position for Position.Props;\n    using Order for Order.Props;\n    using Price for Price.Props;\n\n    // @dev IncreasePositionCache struct used in increasePosition to\n    // avoid stack too deep errors\n    // @param collateralDeltaAmount the change in collateral amount\n    // @param executionPrice the execution price\n    // @param collateralTokenPrice the price of the collateral token\n    // @param priceImpactUsd the price impact in USD\n    // @param priceImpactAmount the price impact of the position increase in tokens\n    // @param sizeDeltaInTokens the change in position size in tokens\n    // @param nextPositionSizeInUsd the new position size in USD\n    // @param nextPositionBorrowingFactor the new position borrowing factor\n    struct IncreasePositionCache {\n        int256 collateralDeltaAmount;\n        uint256 executionPrice;\n        Price.Props collateralTokenPrice;\n        int256 priceImpactUsd;\n        int256 priceImpactAmount;\n        uint256 sizeDeltaInTokens;\n        uint256 nextPositionSizeInUsd;\n        uint256 nextPositionBorrowingFactor;\n    }\n\n    // @dev increase a position\n    // The increasePosition function is used to increase the size of a position\n    // in a market. This involves updating the position's collateral amount,\n    // calculating the price impact of the size increase, and updating the position's\n    // size and borrowing factor. This function also applies fees to the position\n    // and updates the market's liquidity pool based on the new position size.\n    // @param params PositionUtils.UpdatePositionParams\n    function increasePosition(\n        PositionUtils.UpdatePositionParams memory params,\n        uint256 collateralIncrementAmount\n    ) external {\n        // get the market prices for the given position\n        MarketUtils.MarketPrices memory prices = MarketUtils.getMarketPrices(\n            params.contracts.oracle,\n            params.market\n        );\n\n        // create a new cache for holding intermediate results\n        IncreasePositionCache memory cache;\n\n        cache.collateralTokenPrice = MarketUtils.getCachedTokenPrice(\n            params.position.collateralToken(),\n            params.market,\n            prices\n        );\n\n        if (params.position.sizeInUsd() == 0) {\n            params.position.setFundingFeeAmountPerSize(\n                MarketUtils.getFundingFeeAmountPerSize(\n                    params.contracts.dataStore,\n                    params.market.marketToken,\n                    params.position.collateralToken(),\n                    params.position.isLong()\n                )\n            );\n\n            params.position.setLongTokenClaimableFundingAmountPerSize(\n                MarketUtils.getClaimableFundingAmountPerSize(\n                    params.contracts.dataStore,\n                    params.market.marketToken,\n                    params.market.longToken,\n                    params.position.isLong()\n                )\n            );\n\n            params.position.setShortTokenClaimableFundingAmountPerSize(\n                MarketUtils.getClaimableFundingAmountPerSize(\n                    params.contracts.dataStore,\n                    params.market.marketToken,\n                    params.market.shortToken,\n                    params.position.isLong()\n                )\n            );\n        }\n\n        (cache.priceImpactUsd, cache.priceImpactAmount, cache.sizeDeltaInTokens, cache.executionPrice) = PositionUtils.getExecutionPriceForIncrease(params, prices.indexTokenPrice);\n\n        // process the collateral for the given position and order\n        PositionPricingUtils.PositionFees memory fees;\n        (cache.collateralDeltaAmount, fees) = processCollateral(\n            params,\n            cache.collateralTokenPrice,\n            collateralIncrementAmount.toInt256(),\n            cache.priceImpactUsd\n        );\n\n        // check if there is sufficient collateral for the position\n        if (\n            cache.collateralDeltaAmount < 0 &&\n            params.position.collateralAmount() < SafeCast.toUint256(-cache.collateralDeltaAmount)\n        ) {\n            revert Errors.InsufficientCollateralAmount(params.position.collateralAmount(), cache.collateralDeltaAmount);\n        }\n        params.position.setCollateralAmount(Calc.sumReturnUint256(params.position.collateralAmount(), cache.collateralDeltaAmount));\n\n        // if there is a positive impact, the impact pool amount should be reduced\n        // if there is a negative impact, the impact pool amount should be increased\n        MarketUtils.applyDeltaToPositionImpactPool(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.market.marketToken,\n            -cache.priceImpactAmount\n        );\n\n        cache.nextPositionSizeInUsd = params.position.sizeInUsd() + params.order.sizeDeltaUsd();\n        cache.nextPositionBorrowingFactor = MarketUtils.getCumulativeBorrowingFactor(\n            params.contracts.dataStore,\n            params.market.marketToken,\n            params.position.isLong()\n        );\n\n        PositionUtils.updateTotalBorrowing(\n            params,\n            cache.nextPositionSizeInUsd,\n            cache.nextPositionBorrowingFactor\n        );\n\n        PositionUtils.incrementClaimableFundingAmount(params, fees);\n\n        params.position.setSizeInUsd(cache.nextPositionSizeInUsd);\n        params.position.setSizeInTokens(params.position.sizeInTokens() + cache.sizeDeltaInTokens);\n\n        params.position.setFundingFeeAmountPerSize(fees.funding.latestFundingFeeAmountPerSize);\n        params.position.setLongTokenClaimableFundingAmountPerSize(fees.funding.latestLongTokenClaimableFundingAmountPerSize);\n        params.position.setShortTokenClaimableFundingAmountPerSize(fees.funding.latestShortTokenClaimableFundingAmountPerSize);\n\n        params.position.setBorrowingFactor(cache.nextPositionBorrowingFactor);\n        params.position.setIncreasedAtTime(Chain.currentTimestamp());\n\n        PositionStoreUtils.set(params.contracts.dataStore, params.positionKey, params.position);\n\n        PositionUtils.updateOpenInterest(\n            params,\n            params.order.sizeDeltaUsd().toInt256(),\n            cache.sizeDeltaInTokens.toInt256()\n        );\n\n        if (params.order.sizeDeltaUsd() > 0) {\n            // reserves are only validated if the sizeDeltaUsd is more than zero\n            // this helps to ensure that deposits of collateral into positions\n            // should still succeed even if pool tokens are fully reserved\n            MarketUtils.validateReserve(\n                params.contracts.dataStore,\n                params.market,\n                prices,\n                params.order.isLong()\n            );\n\n            MarketUtils.validateOpenInterestReserve(\n                params.contracts.dataStore,\n                params.market,\n                prices,\n                params.order.isLong()\n            );\n\n            PositionUtils.WillPositionCollateralBeSufficientValues memory positionValues = PositionUtils.WillPositionCollateralBeSufficientValues(\n                params.position.sizeInUsd(), // positionSizeInUsd\n                params.position.collateralAmount(), // positionCollateralAmount\n                0,  // realizedPnlUsd\n                0 // openInterestDelta\n            );\n\n            (bool willBeSufficient, int256 remainingCollateralUsd) = PositionUtils.willPositionCollateralBeSufficient(\n                params.contracts.dataStore,\n                params.market,\n                prices,\n                params.position.collateralToken(),\n                params.position.isLong(),\n                positionValues\n            );\n\n            if (!willBeSufficient) {\n                revert Errors.InsufficientCollateralUsd(remainingCollateralUsd);\n            }\n        }\n\n        PositionUtils.handleReferral(params, fees);\n\n        // validatePosition should be called after open interest and all other market variables\n        // have been updated\n        PositionUtils.validatePosition(\n            params.contracts.dataStore,\n            params.contracts.referralStorage,\n            params.position,\n            params.market,\n            prices,\n            true, // shouldValidateMinPositionSize\n            true // shouldValidateMinCollateralUsd\n        );\n\n        PositionEventUtils.emitPositionFeesCollected(\n            params.contracts.eventEmitter,\n            params.orderKey,\n            params.positionKey,\n            params.market.marketToken,\n            params.position.collateralToken(),\n            params.order.sizeDeltaUsd(),\n            true,\n            fees\n        );\n\n        PositionEventUtils.PositionIncreaseParams memory eventParams;\n        eventParams.eventEmitter = params.contracts.eventEmitter;\n        eventParams.orderKey = params.orderKey;\n        eventParams.positionKey = params.positionKey;\n        eventParams.position = params.position;\n        eventParams.indexTokenPrice = prices.indexTokenPrice;\n        eventParams.executionPrice = cache.executionPrice;\n        eventParams.collateralTokenPrice = cache.collateralTokenPrice;\n        eventParams.sizeDeltaUsd = params.order.sizeDeltaUsd();\n        eventParams.sizeDeltaInTokens = cache.sizeDeltaInTokens;\n        eventParams.collateralDeltaAmount = cache.collateralDeltaAmount;\n        eventParams.priceImpactUsd = cache.priceImpactUsd;\n        eventParams.priceImpactAmount = cache.priceImpactAmount;\n        eventParams.orderType = params.order.orderType();\n\n        PositionEventUtils.emitPositionIncrease(eventParams);\n    }\n\n    // @dev handle the collateral changes of the position\n    // @param params PositionUtils.UpdatePositionParams\n    // @param prices the prices of the tokens in the market\n    // @param position the position to process collateral for\n    // @param collateralDeltaAmount the change in the position's collateral\n    function processCollateral(\n        PositionUtils.UpdatePositionParams memory params,\n        Price.Props memory collateralTokenPrice,\n        int256 collateralDeltaAmount,\n        int256 priceImpactUsd\n    ) internal returns (int256, PositionPricingUtils.PositionFees memory) {\n        PositionPricingUtils.GetPositionFeesParams memory getPositionFeesParams = PositionPricingUtils.GetPositionFeesParams(\n            params.contracts.dataStore, // dataStore\n            params.contracts.referralStorage, // referralStorage\n            params.position, // position\n            collateralTokenPrice, // collateralTokenPrice\n            priceImpactUsd > 0, // forPositiveImpact\n            params.market.longToken, // longToken\n            params.market.shortToken, // shortToken\n            params.order.sizeDeltaUsd(), // sizeDeltaUsd\n            params.order.uiFeeReceiver(), // uiFeeReceiver\n            false // isLiquidation\n        );\n\n        PositionPricingUtils.PositionFees memory fees = PositionPricingUtils.getPositionFees(getPositionFeesParams);\n\n        FeeUtils.incrementClaimableFeeAmount(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.market.marketToken,\n            params.position.collateralToken(),\n            fees.feeReceiverAmount,\n            Keys.POSITION_FEE_TYPE\n        );\n\n        FeeUtils.incrementClaimableUiFeeAmount(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.order.uiFeeReceiver(),\n            params.market.marketToken,\n            params.position.collateralToken(),\n            fees.ui.uiFeeAmount,\n            Keys.UI_POSITION_FEE_TYPE\n        );\n\n        collateralDeltaAmount -= fees.totalCostAmount.toInt256();\n\n        MarketUtils.applyDeltaToCollateralSum(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.order.market(),\n            params.position.collateralToken(),\n            params.order.isLong(),\n            collateralDeltaAmount\n        );\n\n        MarketUtils.applyDeltaToPoolAmount(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.market,\n            params.position.collateralToken(),\n            fees.feeAmountForPool.toInt256()\n        );\n\n        return (collateralDeltaAmount, fees);\n    }\n}\n"
    },
    "contracts/position/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title Position\n// @dev Stuct for positions\n//\n// borrowing fees for position require only a borrowingFactor to track\n// an example on how this works is if the global cumulativeBorrowingFactor is 10020%\n// a position would be opened with borrowingFactor as 10020%\n// after some time, if the cumulativeBorrowingFactor is updated to 10025% the position would\n// owe 5% of the position size as borrowing fees\n// the total pending borrowing fees of all positions is factored into the calculation of the pool value for LPs\n// when a position is increased or decreased, the pending borrowing fees for the position is deducted from the position's\n// collateral and transferred into the LP pool\n//\n// the same borrowing fee factor tracking cannot be applied for funding fees as those calculations consider pending funding fees\n// based on the fiat value of the position sizes\n//\n// for example, if the price of the longToken is $2000 and a long position owes $200 in funding fees, the opposing short position\n// claims the funding fees of 0.1 longToken ($200), if the price of the longToken changes to $4000 later, the long position would\n// only owe 0.05 longToken ($200)\n// this would result in differences between the amounts deducted and amounts paid out, for this reason, the actual token amounts\n// to be deducted and to be paid out need to be tracked instead\n//\n// for funding fees, there are four values to consider:\n// 1. long positions with market.longToken as collateral\n// 2. long positions with market.shortToken as collateral\n// 3. short positions with market.longToken as collateral\n// 4. short positions with market.shortToken as collateral\nlibrary Position {\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the position's account\n    // @param market the position's market\n    // @param collateralToken the position's collateralToken\n    struct Addresses {\n        address account;\n        address market;\n        address collateralToken;\n    }\n\n    // @param sizeInUsd the position's size in USD\n    // @param sizeInTokens the position's size in tokens\n    // @param collateralAmount the amount of collateralToken for collateral\n    // @param borrowingFactor the position's borrowing factor\n    // @param fundingFeeAmountPerSize the position's funding fee per size\n    // @param longTokenClaimableFundingAmountPerSize the position's claimable funding amount per size\n    // for the market.longToken\n    // @param shortTokenClaimableFundingAmountPerSize the position's claimable funding amount per size\n    // for the market.shortToken\n    // @param increasedAtTime the time at which this position was increased\n    // @param decreasedAtTime the time at which this position was decreased\n    struct Numbers {\n        uint256 sizeInUsd;\n        uint256 sizeInTokens;\n        uint256 collateralAmount;\n        uint256 borrowingFactor;\n        uint256 fundingFeeAmountPerSize;\n        uint256 longTokenClaimableFundingAmountPerSize;\n        uint256 shortTokenClaimableFundingAmountPerSize;\n        uint256 increasedAtTime;\n        uint256 decreasedAtTime;\n    }\n\n    // @param isLong whether the position is a long or short\n    struct Flags {\n        bool isLong;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function collateralToken(Props memory props) internal pure returns (address) {\n        return props.addresses.collateralToken;\n    }\n\n    function setCollateralToken(Props memory props, address value) internal pure {\n        props.addresses.collateralToken = value;\n    }\n\n    function sizeInUsd(Props memory props) internal pure returns (uint256) {\n        return props.numbers.sizeInUsd;\n    }\n\n    function setSizeInUsd(Props memory props, uint256 value) internal pure {\n        props.numbers.sizeInUsd = value;\n    }\n\n    function sizeInTokens(Props memory props) internal pure returns (uint256) {\n        return props.numbers.sizeInTokens;\n    }\n\n    function setSizeInTokens(Props memory props, uint256 value) internal pure {\n        props.numbers.sizeInTokens = value;\n    }\n\n    function collateralAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.collateralAmount;\n    }\n\n    function setCollateralAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.collateralAmount = value;\n    }\n\n    function borrowingFactor(Props memory props) internal pure returns (uint256) {\n        return props.numbers.borrowingFactor;\n    }\n\n    function setBorrowingFactor(Props memory props, uint256 value) internal pure {\n        props.numbers.borrowingFactor = value;\n    }\n\n    function fundingFeeAmountPerSize(Props memory props) internal pure returns (uint256) {\n        return props.numbers.fundingFeeAmountPerSize;\n    }\n\n    function setFundingFeeAmountPerSize(Props memory props, uint256 value) internal pure {\n        props.numbers.fundingFeeAmountPerSize = value;\n    }\n\n    function longTokenClaimableFundingAmountPerSize(Props memory props) internal pure returns (uint256) {\n        return props.numbers.longTokenClaimableFundingAmountPerSize;\n    }\n\n    function setLongTokenClaimableFundingAmountPerSize(Props memory props, uint256 value) internal pure {\n        props.numbers.longTokenClaimableFundingAmountPerSize = value;\n    }\n\n    function shortTokenClaimableFundingAmountPerSize(Props memory props) internal pure returns (uint256) {\n        return props.numbers.shortTokenClaimableFundingAmountPerSize;\n    }\n\n    function setShortTokenClaimableFundingAmountPerSize(Props memory props, uint256 value) internal pure {\n        props.numbers.shortTokenClaimableFundingAmountPerSize = value;\n    }\n\n    function increasedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.increasedAtTime;\n    }\n\n    function setIncreasedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.increasedAtTime = value;\n    }\n\n    function decreasedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.decreasedAtTime;\n    }\n\n    function setDecreasedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.decreasedAtTime = value;\n    }\n\n    function isLong(Props memory props) internal pure returns (bool) {\n        return props.flags.isLong;\n    }\n\n    function setIsLong(Props memory props, bool value) internal pure {\n        props.flags.isLong = value;\n    }\n\n    // @dev get the key for a position\n    // @param account the position's account\n    // @param market the position's market\n    // @param collateralToken the position's collateralToken\n    // @param isLong whether the position is long or short\n    // @return the position key\n    function getPositionKey(address _account, address _market, address _collateralToken, bool _isLong) internal pure returns (bytes32) {\n        bytes32 _key = keccak256(abi.encode(_account, _market, _collateralToken, _isLong));\n        return _key;\n    }\n}\n"
    },
    "contracts/position/PositionEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nimport \"./Position.sol\";\nimport \"./PositionUtils.sol\";\nimport \"../pricing/PositionPricingUtils.sol\";\n\nlibrary PositionEventUtils {\n    using Position for Position.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    struct PositionIncreaseParams {\n        EventEmitter eventEmitter;\n        bytes32 orderKey;\n        bytes32 positionKey;\n        Position.Props position;\n        Price.Props indexTokenPrice;\n        Price.Props collateralTokenPrice;\n        uint256 executionPrice;\n        uint256 sizeDeltaUsd;\n        uint256 sizeDeltaInTokens;\n        int256 collateralDeltaAmount;\n        int256 priceImpactUsd;\n        int256 priceImpactAmount;\n        Order.OrderType orderType;\n    }\n\n    function emitPositionIncrease(PositionIncreaseParams memory params) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"account\", params.position.account());\n        eventData.addressItems.setItem(1, \"market\", params.position.market());\n        eventData.addressItems.setItem(2, \"collateralToken\", params.position.collateralToken());\n\n        eventData.uintItems.initItems(16);\n        eventData.uintItems.setItem(0, \"sizeInUsd\", params.position.sizeInUsd());\n        eventData.uintItems.setItem(1, \"sizeInTokens\", params.position.sizeInTokens());\n        eventData.uintItems.setItem(2, \"collateralAmount\", params.position.collateralAmount());\n        eventData.uintItems.setItem(3, \"borrowingFactor\", params.position.borrowingFactor());\n        eventData.uintItems.setItem(4, \"fundingFeeAmountPerSize\", params.position.fundingFeeAmountPerSize());\n        eventData.uintItems.setItem(5, \"longTokenClaimableFundingAmountPerSize\", params.position.longTokenClaimableFundingAmountPerSize());\n        eventData.uintItems.setItem(6, \"shortTokenClaimableFundingAmountPerSize\", params.position.shortTokenClaimableFundingAmountPerSize());\n        eventData.uintItems.setItem(7, \"executionPrice\", params.executionPrice);\n        eventData.uintItems.setItem(8, \"indexTokenPrice.max\", params.indexTokenPrice.max);\n        eventData.uintItems.setItem(9, \"indexTokenPrice.min\", params.indexTokenPrice.min);\n        eventData.uintItems.setItem(10, \"collateralTokenPrice.max\", params.collateralTokenPrice.max);\n        eventData.uintItems.setItem(11, \"collateralTokenPrice.min\", params.collateralTokenPrice.min);\n        eventData.uintItems.setItem(12, \"sizeDeltaUsd\", params.sizeDeltaUsd);\n        eventData.uintItems.setItem(13, \"sizeDeltaInTokens\", params.sizeDeltaInTokens);\n        eventData.uintItems.setItem(14, \"orderType\", uint256(params.orderType));\n        eventData.uintItems.setItem(15, \"increasedAtTime\", uint256(params.position.increasedAtTime()));\n\n        eventData.intItems.initItems(3);\n        eventData.intItems.setItem(0, \"collateralDeltaAmount\", params.collateralDeltaAmount);\n        eventData.intItems.setItem(1, \"priceImpactUsd\", params.priceImpactUsd);\n        eventData.intItems.setItem(2, \"priceImpactAmount\", params.priceImpactAmount);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", params.position.isLong());\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"orderKey\", params.orderKey);\n        eventData.bytes32Items.setItem(1, \"positionKey\", params.positionKey);\n\n        params.eventEmitter.emitEventLog1(\n            \"PositionIncrease\",\n            Cast.toBytes32(params.position.account()),\n            eventData\n        );\n    }\n\n    function emitPositionDecrease(\n        EventEmitter eventEmitter,\n        bytes32 orderKey,\n        bytes32 positionKey,\n        Position.Props memory position,\n        uint256 sizeDeltaUsd,\n        uint256 collateralDeltaAmount,\n        Order.OrderType orderType,\n        PositionUtils.DecreasePositionCollateralValues memory values,\n        Price.Props memory indexTokenPrice,\n        Price.Props memory collateralTokenPrice\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"account\", position.account());\n        eventData.addressItems.setItem(1, \"market\", position.market());\n        eventData.addressItems.setItem(2, \"collateralToken\", position.collateralToken());\n\n        eventData.uintItems.initItems(18);\n        eventData.uintItems.setItem(0, \"sizeInUsd\", position.sizeInUsd());\n        eventData.uintItems.setItem(1, \"sizeInTokens\", position.sizeInTokens());\n        eventData.uintItems.setItem(2, \"collateralAmount\", position.collateralAmount());\n        eventData.uintItems.setItem(3, \"borrowingFactor\", position.borrowingFactor());\n        eventData.uintItems.setItem(4, \"fundingFeeAmountPerSize\", position.fundingFeeAmountPerSize());\n        eventData.uintItems.setItem(5, \"longTokenClaimableFundingAmountPerSize\", position.longTokenClaimableFundingAmountPerSize());\n        eventData.uintItems.setItem(6, \"shortTokenClaimableFundingAmountPerSize\", position.shortTokenClaimableFundingAmountPerSize());\n        eventData.uintItems.setItem(7, \"executionPrice\", values.executionPrice);\n        eventData.uintItems.setItem(8, \"indexTokenPrice.max\", indexTokenPrice.max);\n        eventData.uintItems.setItem(9, \"indexTokenPrice.min\", indexTokenPrice.min);\n        eventData.uintItems.setItem(10, \"collateralTokenPrice.max\", collateralTokenPrice.max);\n        eventData.uintItems.setItem(11, \"collateralTokenPrice.min\", collateralTokenPrice.min);\n        eventData.uintItems.setItem(12, \"sizeDeltaUsd\", sizeDeltaUsd);\n        eventData.uintItems.setItem(13, \"sizeDeltaInTokens\", values.sizeDeltaInTokens);\n        eventData.uintItems.setItem(14, \"collateralDeltaAmount\", collateralDeltaAmount);\n        eventData.uintItems.setItem(15, \"values.priceImpactDiffUsd\", values.priceImpactDiffUsd);\n        eventData.uintItems.setItem(16, \"orderType\", uint256(orderType));\n        eventData.uintItems.setItem(17, \"decreasedAtTime\", position.decreasedAtTime());\n\n        eventData.intItems.initItems(3);\n        eventData.intItems.setItem(0, \"priceImpactUsd\", values.priceImpactUsd);\n        eventData.intItems.setItem(1, \"basePnlUsd\", values.basePnlUsd);\n        eventData.intItems.setItem(2, \"uncappedBasePnlUsd\", values.uncappedBasePnlUsd);\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isLong\", position.isLong());\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"orderKey\", orderKey);\n        eventData.bytes32Items.setItem(1, \"positionKey\", positionKey);\n\n        eventEmitter.emitEventLog1(\n            \"PositionDecrease\",\n            Cast.toBytes32(position.account()),\n            eventData\n        );\n    }\n\n    function emitInsolventClose(\n        EventEmitter eventEmitter,\n        bytes32 orderKey,\n        uint256 positionCollateralAmount,\n        int256 basePnlUsd,\n        uint256 remainingCostUsd,\n        string memory step\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"orderKey\", orderKey);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"positionCollateralAmount\", positionCollateralAmount);\n        eventData.uintItems.setItem(1, \"remainingCostUsd\", remainingCostUsd);\n\n        eventData.intItems.initItems(1);\n        eventData.intItems.setItem(0, \"basePnlUsd\", basePnlUsd);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"step\", step);\n\n        eventEmitter.emitEventLog(\n            \"InsolventClose\",\n            eventData\n        );\n    }\n\n    function emitInsufficientFundingFeePayment(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        uint256 expectedAmount,\n        uint256 amountPaidInCollateralToken,\n        uint256 amountPaidInSecondaryOutputToken\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"expectedAmount\", expectedAmount);\n        eventData.uintItems.setItem(1, \"amountPaidInCollateralToken\", amountPaidInCollateralToken);\n        eventData.uintItems.setItem(2, \"amountPaidInSecondaryOutputToken\", amountPaidInSecondaryOutputToken);\n\n        eventEmitter.emitEventLog1(\n            \"InsufficientFundingFeePayment\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n\n    function emitPositionFeesCollected(\n        EventEmitter eventEmitter,\n        bytes32 orderKey,\n        bytes32 positionKey,\n        address market,\n        address collateralToken,\n        uint256 tradeSizeUsd,\n        bool isIncrease,\n        PositionPricingUtils.PositionFees memory fees\n    ) external {\n        _emitPositionFees(\n            eventEmitter,\n            orderKey,\n            positionKey,\n            market,\n            collateralToken,\n            tradeSizeUsd,\n            isIncrease,\n            fees,\n            \"PositionFeesCollected\"\n        );\n    }\n\n    function emitPositionFeesInfo(\n        EventEmitter eventEmitter,\n        bytes32 orderKey,\n        bytes32 positionKey,\n        address market,\n        address collateralToken,\n        uint256 tradeSizeUsd,\n        bool isIncrease,\n        PositionPricingUtils.PositionFees memory fees\n    ) external {\n        _emitPositionFees(\n            eventEmitter,\n            orderKey,\n            positionKey,\n            market,\n            collateralToken,\n            tradeSizeUsd,\n            isIncrease,\n            fees,\n            \"PositionFeesInfo\"\n        );\n    }\n\n    function _emitPositionFees(\n        EventEmitter eventEmitter,\n        bytes32 orderKey,\n        bytes32 positionKey,\n        address market,\n        address collateralToken,\n        uint256 tradeSizeUsd,\n        bool isIncrease,\n        PositionPricingUtils.PositionFees memory fees,\n        string memory eventName\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(3);\n        eventData.bytes32Items.setItem(0, \"orderKey\", orderKey);\n        eventData.bytes32Items.setItem(1, \"positionKey\", positionKey);\n        eventData.bytes32Items.setItem(2, \"referralCode\", fees.referral.referralCode);\n\n        eventData.addressItems.initItems(5);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"collateralToken\", collateralToken);\n        eventData.addressItems.setItem(2, \"affiliate\", fees.referral.affiliate);\n        eventData.addressItems.setItem(3, \"trader\", fees.referral.trader);\n        eventData.addressItems.setItem(4, \"uiFeeReceiver\", fees.ui.uiFeeReceiver);\n\n        // in case the position was insolvent, the fundingFeeAmount and feeAmountForPool\n        // values may not be accurate\n\n        uint256 uintItemsCount = 23;\n        uint256 dynamicItemIndex = uintItemsCount - 1;\n        if (fees.referral.totalRebateFactor > 0) {\n            uintItemsCount += 6;\n        }\n        if (fees.liquidation.liquidationFeeAmount > 0) {\n            uintItemsCount += 3;\n        }\n        if (fees.pro.traderDiscountFactor > 0) {\n            uintItemsCount += 2;\n        }\n\n        eventData.uintItems.initItems(uintItemsCount);\n        eventData.uintItems.setItem(0, \"collateralTokenPrice.min\", fees.collateralTokenPrice.min);\n        eventData.uintItems.setItem(1, \"collateralTokenPrice.max\", fees.collateralTokenPrice.max);\n        eventData.uintItems.setItem(2, \"tradeSizeUsd\", tradeSizeUsd);\n        eventData.uintItems.setItem(3, \"fundingFeeAmount\", fees.funding.fundingFeeAmount);\n        eventData.uintItems.setItem(4, \"claimableLongTokenAmount\", fees.funding.claimableLongTokenAmount);\n        eventData.uintItems.setItem(5, \"claimableShortTokenAmount\", fees.funding.claimableShortTokenAmount);\n        eventData.uintItems.setItem(6, \"latestFundingFeeAmountPerSize\", fees.funding.latestFundingFeeAmountPerSize);\n        eventData.uintItems.setItem(7, \"latestLongTokenClaimableFundingAmountPerSize\", fees.funding.latestLongTokenClaimableFundingAmountPerSize);\n        eventData.uintItems.setItem(8, \"latestShortTokenClaimableFundingAmountPerSize\", fees.funding.latestShortTokenClaimableFundingAmountPerSize);\n        eventData.uintItems.setItem(9, \"borrowingFeeUsd\", fees.borrowing.borrowingFeeUsd);\n        eventData.uintItems.setItem(10, \"borrowingFeeAmount\", fees.borrowing.borrowingFeeAmount);\n        eventData.uintItems.setItem(11, \"borrowingFeeReceiverFactor\", fees.borrowing.borrowingFeeReceiverFactor);\n        eventData.uintItems.setItem(12, \"borrowingFeeAmountForFeeReceiver\", fees.borrowing.borrowingFeeAmountForFeeReceiver);\n        eventData.uintItems.setItem(13, \"positionFeeFactor\", fees.positionFeeFactor);\n        eventData.uintItems.setItem(14, \"protocolFeeAmount\", fees.protocolFeeAmount);\n        eventData.uintItems.setItem(15, \"positionFeeReceiverFactor\", fees.positionFeeReceiverFactor);\n        eventData.uintItems.setItem(16, \"feeReceiverAmount\", fees.feeReceiverAmount);\n        eventData.uintItems.setItem(17, \"feeAmountForPool\", fees.feeAmountForPool);\n        eventData.uintItems.setItem(18, \"positionFeeAmountForPool\", fees.positionFeeAmountForPool);\n        eventData.uintItems.setItem(19, \"positionFeeAmount\", fees.positionFeeAmount);\n        eventData.uintItems.setItem(20, \"totalCostAmount\", fees.totalCostAmount);\n        eventData.uintItems.setItem(21, \"uiFeeReceiverFactor\", fees.ui.uiFeeReceiverFactor);\n        eventData.uintItems.setItem(22, \"uiFeeAmount\", fees.ui.uiFeeAmount);\n\n        // ++dynamicItemIndex is pre-increment, first the value is incremented, then updated value is returned\n        // i.e. if dynamicItemIndex is 22, then ++dynamicItemIndex returns 23\n        if (fees.referral.totalRebateFactor > 0) {\n            eventData.uintItems.setItem(++dynamicItemIndex, \"referral.totalRebateFactor\", fees.referral.totalRebateFactor);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"referral.adjustedAffiliateRewardFactor\", fees.referral.adjustedAffiliateRewardFactor);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"referral.traderDiscountFactor\", fees.referral.traderDiscountFactor);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"referral.totalRebateAmount\", fees.referral.totalRebateAmount);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"referral.traderDiscountAmount\", fees.referral.traderDiscountAmount);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"referral.affiliateRewardAmount\", fees.referral.affiliateRewardAmount);\n        }\n        if (fees.pro.traderDiscountFactor > 0) {\n            eventData.uintItems.setItem(++dynamicItemIndex, \"pro.traderDiscountFactor\", fees.pro.traderDiscountFactor);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"pro.traderDiscountAmount\", fees.pro.traderDiscountAmount);\n        }\n        if (fees.liquidation.liquidationFeeAmount > 0) {\n            eventData.uintItems.setItem(++dynamicItemIndex, \"liquidationFeeAmount\", fees.liquidation.liquidationFeeAmount);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"liquidationFeeReceiverFactor\", fees.liquidation.liquidationFeeReceiverFactor);\n            eventData.uintItems.setItem(++dynamicItemIndex, \"liquidationFeeAmountForFeeReceiver\", fees.liquidation.liquidationFeeAmountForFeeReceiver);\n        }\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"isIncrease\", isIncrease);\n\n        eventEmitter.emitEventLog1(\n            eventName,\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/position/PositionStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Position.sol\";\n\n/**\n * @title PositionStoreUtils\n * @dev Library for position storage functions\n */\nlibrary PositionStoreUtils {\n    using Position for Position.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant MARKET = keccak256(abi.encode(\"MARKET\"));\n    bytes32 public constant COLLATERAL_TOKEN = keccak256(abi.encode(\"COLLATERAL_TOKEN\"));\n\n    bytes32 public constant SIZE_IN_USD = keccak256(abi.encode(\"SIZE_IN_USD\"));\n    bytes32 public constant SIZE_IN_TOKENS = keccak256(abi.encode(\"SIZE_IN_TOKENS\"));\n    bytes32 public constant COLLATERAL_AMOUNT = keccak256(abi.encode(\"COLLATERAL_AMOUNT\"));\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\"BORROWING_FACTOR\"));\n    bytes32 public constant FUNDING_FEE_AMOUNT_PER_SIZE = keccak256(abi.encode(\"FUNDING_FEE_AMOUNT_PER_SIZE\"));\n    bytes32 public constant LONG_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\"LONG_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\"));\n    bytes32 public constant SHORT_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\"SHORT_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\"));\n    bytes32 public constant INCREASED_AT_TIME = keccak256(abi.encode(\"INCREASED_AT_TIME\"));\n    bytes32 public constant DECREASED_AT_TIME = keccak256(abi.encode(\"DECREASED_AT_TIME\"));\n\n    bytes32 public constant IS_LONG = keccak256(abi.encode(\"IS_LONG\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (Position.Props memory) {\n        Position.Props memory position;\n        if (!dataStore.containsBytes32(Keys.POSITION_LIST, key)) {\n            return position;\n        }\n\n        position.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        position.setMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET))\n        ));\n\n        position.setCollateralToken(dataStore.getAddress(\n            keccak256(abi.encode(key, COLLATERAL_TOKEN))\n        ));\n\n        position.setSizeInUsd(dataStore.getUint(\n            keccak256(abi.encode(key, SIZE_IN_USD))\n        ));\n\n        position.setSizeInTokens(dataStore.getUint(\n            keccak256(abi.encode(key, SIZE_IN_TOKENS))\n        ));\n\n        position.setCollateralAmount(dataStore.getUint(\n            keccak256(abi.encode(key, COLLATERAL_AMOUNT))\n        ));\n\n        position.setBorrowingFactor(dataStore.getUint(\n            keccak256(abi.encode(key, BORROWING_FACTOR))\n        ));\n\n        position.setFundingFeeAmountPerSize(dataStore.getUint(\n            keccak256(abi.encode(key, FUNDING_FEE_AMOUNT_PER_SIZE))\n        ));\n\n        position.setLongTokenClaimableFundingAmountPerSize(dataStore.getUint(\n            keccak256(abi.encode(key, LONG_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE))\n        ));\n\n        position.setShortTokenClaimableFundingAmountPerSize(dataStore.getUint(\n            keccak256(abi.encode(key, SHORT_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE))\n        ));\n\n        position.setIncreasedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, INCREASED_AT_TIME))\n        ));\n\n        position.setDecreasedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, DECREASED_AT_TIME))\n        ));\n\n        position.setIsLong(dataStore.getBool(\n            keccak256(abi.encode(key, IS_LONG))\n        ));\n\n        return position;\n    }\n\n    function set(DataStore dataStore, bytes32 key, Position.Props memory position) external {\n        dataStore.addBytes32(\n            Keys.POSITION_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountPositionListKey(position.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            position.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET)),\n            position.market()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, COLLATERAL_TOKEN)),\n            position.collateralToken()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, SIZE_IN_USD)),\n            position.sizeInUsd()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, SIZE_IN_TOKENS)),\n            position.sizeInTokens()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, COLLATERAL_AMOUNT)),\n            position.collateralAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, BORROWING_FACTOR)),\n            position.borrowingFactor()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, FUNDING_FEE_AMOUNT_PER_SIZE)),\n            position.fundingFeeAmountPerSize()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, LONG_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE)),\n            position.longTokenClaimableFundingAmountPerSize()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, SHORT_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE)),\n            position.shortTokenClaimableFundingAmountPerSize()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, INCREASED_AT_TIME)),\n            position.increasedAtTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, DECREASED_AT_TIME)),\n            position.decreasedAtTime()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, IS_LONG)),\n            position.isLong()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.POSITION_LIST, key)) {\n            revert Errors.PositionNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.POSITION_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountPositionListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, COLLATERAL_TOKEN))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, SIZE_IN_USD))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, SIZE_IN_TOKENS))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, COLLATERAL_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, BORROWING_FACTOR))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, FUNDING_FEE_AMOUNT_PER_SIZE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, LONG_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, SHORT_TOKEN_CLAIMABLE_FUNDING_AMOUNT_PER_SIZE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, INCREASED_AT_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, DECREASED_AT_TIME))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, IS_LONG))\n        );\n    }\n\n    function getPositionCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.POSITION_LIST);\n    }\n\n    function getPositionKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.POSITION_LIST, start, end);\n    }\n\n    function getAccountPositionCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountPositionListKey(account));\n    }\n\n    function getAccountPositionKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountPositionListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/position/PositionUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"../utils/Precision.sol\";\n\nimport \"./Position.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\n\nimport \"../pricing/PositionPricingUtils.sol\";\nimport \"../order/BaseOrderUtils.sol\";\n\n// @title PositionUtils\n// @dev Library for position functions\nlibrary PositionUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Price for Price.Props;\n    using Position for Position.Props;\n    using Order for Order.Props;\n\n    // @dev UpdatePositionParams struct used in increasePosition and decreasePosition\n    // to avoid stack too deep errors\n    //\n    // @param contracts BaseOrderUtils.ExecuteOrderParamsContracts\n    // @param market the values of the trading market\n    // @param order the decrease position order\n    // @param orderKey the key of the order\n    // @param position the order's position\n    // @param positionKey the key of the order's position\n    struct UpdatePositionParams {\n        BaseOrderUtils.ExecuteOrderParamsContracts contracts;\n        Market.Props market;\n        Order.Props order;\n        bytes32 orderKey;\n        Position.Props position;\n        bytes32 positionKey;\n        Order.SecondaryOrderType secondaryOrderType;\n    }\n\n    // @param dataStore DataStore\n    // @param eventEmitter EventEmitter\n    // @param oracle Oracle\n    // @param referralStorage IReferralStorage\n    struct UpdatePositionParamsContracts {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        Oracle oracle;\n        SwapHandler swapHandler;\n        IReferralStorage referralStorage;\n    }\n\n    struct WillPositionCollateralBeSufficientValues {\n        uint256 positionSizeInUsd;\n        uint256 positionCollateralAmount;\n        int256 realizedPnlUsd;\n        int256 openInterestDelta;\n    }\n\n    struct DecreasePositionCollateralValuesOutput {\n        address outputToken;\n        uint256 outputAmount;\n        address secondaryOutputToken;\n        uint256 secondaryOutputAmount;\n    }\n\n    // @dev ProcessCollateralValues struct used to contain the values in processCollateral\n    // @param executionPrice the order execution price\n    // @param remainingCollateralAmount the remaining collateral amount of the position\n    // @param positionPnlUsd the pnl of the position in USD\n    // @param sizeDeltaInTokens the change in position size in tokens\n    // @param priceImpactAmount the price impact in tokens\n    // @param priceImpactDiffUsd the price impact difference in USD\n    // @param pendingCollateralDeduction the pending collateral deduction\n    // @param output DecreasePositionCollateralValuesOutput\n    struct DecreasePositionCollateralValues {\n        uint256 executionPrice;\n        uint256 remainingCollateralAmount;\n        int256 basePnlUsd;\n        int256 uncappedBasePnlUsd;\n        uint256 sizeDeltaInTokens;\n        int256 priceImpactUsd;\n        uint256 priceImpactDiffUsd;\n        DecreasePositionCollateralValuesOutput output;\n    }\n\n    // @dev DecreasePositionCache struct used in decreasePosition to\n    // avoid stack too deep errors\n    // @param prices the prices of the tokens in the market\n    // @param pnlToken the token that the pnl for the user is in, for long positions\n    // this is the market.longToken, for short positions this is the market.shortToken\n    // @param pnlTokenPrice the price of the pnlToken\n    // @param initialCollateralAmount the initial collateral amount\n    // @param nextPositionSizeInUsd the new position size in USD\n    // @param nextPositionBorrowingFactor the new position borrowing factor\n    struct DecreasePositionCache {\n        MarketUtils.MarketPrices prices;\n        int256 estimatedPositionPnlUsd;\n        int256 estimatedRealizedPnlUsd;\n        int256 estimatedRemainingPnlUsd;\n        address pnlToken;\n        Price.Props pnlTokenPrice;\n        Price.Props collateralTokenPrice;\n        uint256 initialCollateralAmount;\n        uint256 nextPositionSizeInUsd;\n        uint256 nextPositionBorrowingFactor;\n    }\n\n\n    struct GetPositionPnlUsdCache {\n        int256 positionValue;\n        int256 totalPositionPnl;\n        int256 uncappedTotalPositionPnl;\n        address pnlToken;\n        uint256 poolTokenAmount;\n        uint256 poolTokenPrice;\n        uint256 poolTokenUsd;\n        int256 poolPnl;\n        int256 cappedPoolPnl;\n        uint256 sizeDeltaInTokens;\n        int256 positionPnlUsd;\n        int256 uncappedPositionPnlUsd;\n    }\n\n    struct IsPositionLiquidatableInfo {\n        int256 remainingCollateralUsd;\n        int256 minCollateralUsd;\n        int256 minCollateralUsdForLeverage;\n    }\n\n    // @dev IsPositionLiquidatableCache struct used in isPositionLiquidatable\n    // to avoid stack too deep errors\n    // @param positionPnlUsd the position's pnl in USD\n    // @param minCollateralFactor the min collateral factor\n    // @param collateralTokenPrice the collateral token price\n    // @param collateralUsd the position's collateral in USD\n    // @param usdDeltaForPriceImpact the usdDelta value for the price impact calculation\n    // @param priceImpactUsd the price impact of closing the position in USD\n    struct IsPositionLiquidatableCache {\n        int256 positionPnlUsd;\n        uint256 minCollateralFactor;\n        Price.Props collateralTokenPrice;\n        uint256 collateralUsd;\n        int256 usdDeltaForPriceImpact;\n        int256 priceImpactUsd;\n        bool hasPositiveImpact;\n    }\n\n    struct GetExecutionPriceForDecreaseCache {\n        int256 priceImpactUsd;\n        uint256 priceImpactDiffUsd;\n        uint256 executionPrice;\n    }\n\n    // @dev get the position pnl in USD\n    //\n    // for long positions, pnl is calculated as:\n    // (position.sizeInTokens * indexTokenPrice) - position.sizeInUsd\n    // if position.sizeInTokens is larger for long positions, the position will have\n    // larger profits and smaller losses for the same changes in token price\n    //\n    // for short positions, pnl is calculated as:\n    // position.sizeInUsd -  (position.sizeInTokens * indexTokenPrice)\n    // if position.sizeInTokens is smaller for long positions, the position will have\n    // larger profits and smaller losses for the same changes in token price\n    //\n    // @param position the position values\n    // @param sizeDeltaUsd the change in position size\n    // @param indexTokenPrice the price of the index token\n    //\n    // @return (positionPnlUsd, uncappedPositionPnlUsd, sizeDeltaInTokens)\n    function getPositionPnlUsd(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        Position.Props memory position,\n        uint256 sizeDeltaUsd\n    ) public view returns (int256, int256, uint256) {\n        GetPositionPnlUsdCache memory cache;\n\n        uint256 executionPrice = prices.indexTokenPrice.pickPriceForPnl(position.isLong(), false);\n\n        // position.sizeInUsd is the cost of the tokens, positionValue is the current worth of the tokens\n        cache.positionValue = (position.sizeInTokens() * executionPrice).toInt256();\n        cache.totalPositionPnl = position.isLong() ? cache.positionValue - position.sizeInUsd().toInt256() : position.sizeInUsd().toInt256() - cache.positionValue;\n        cache.uncappedTotalPositionPnl = cache.totalPositionPnl;\n\n        if (cache.totalPositionPnl > 0) {\n            cache.pnlToken = position.isLong() ? market.longToken : market.shortToken;\n            cache.poolTokenAmount = MarketUtils.getPoolAmount(dataStore, market, cache.pnlToken);\n            cache.poolTokenPrice = position.isLong() ? prices.longTokenPrice.min : prices.shortTokenPrice.min;\n            cache.poolTokenUsd = cache.poolTokenAmount * cache.poolTokenPrice;\n            cache.poolPnl = MarketUtils.getPnl(\n                dataStore,\n                market,\n                prices.indexTokenPrice,\n                position.isLong(),\n                true\n            );\n\n            cache.cappedPoolPnl = MarketUtils.getCappedPnl(\n                dataStore,\n                market.marketToken,\n                position.isLong(),\n                cache.poolPnl,\n                cache.poolTokenUsd,\n                Keys.MAX_PNL_FACTOR_FOR_TRADERS\n            );\n\n            if (cache.cappedPoolPnl != cache.poolPnl && cache.cappedPoolPnl > 0 && cache.poolPnl > 0) {\n                cache.totalPositionPnl = Precision.mulDiv(cache.totalPositionPnl.toUint256(), cache.cappedPoolPnl, cache.poolPnl.toUint256());\n            }\n        }\n\n        if (position.sizeInUsd() == sizeDeltaUsd) {\n            cache.sizeDeltaInTokens = position.sizeInTokens();\n        } else {\n            if (position.isLong()) {\n                cache.sizeDeltaInTokens = Calc.roundUpDivision(position.sizeInTokens() * sizeDeltaUsd, position.sizeInUsd());\n            } else {\n                cache.sizeDeltaInTokens = position.sizeInTokens() * sizeDeltaUsd / position.sizeInUsd();\n            }\n        }\n\n        cache.positionPnlUsd = Precision.mulDiv(cache.totalPositionPnl, cache.sizeDeltaInTokens, position.sizeInTokens());\n        cache.uncappedPositionPnlUsd = Precision.mulDiv(cache.uncappedTotalPositionPnl, cache.sizeDeltaInTokens, position.sizeInTokens());\n\n        return (cache.positionPnlUsd, cache.uncappedPositionPnlUsd, cache.sizeDeltaInTokens);\n    }\n\n    // @dev validate that a position is not empty\n    // @param position the position values\n    function validateNonEmptyPosition(Position.Props memory position) internal pure {\n        if (position.sizeInUsd() == 0 && position.sizeInTokens() == 0 && position.collateralAmount() == 0) {\n            revert Errors.EmptyPosition();\n        }\n    }\n\n    // @dev check if a position is valid\n    // @param dataStore DataStore\n    // @param referralStorage IReferralStorage\n    // @param position the position values\n    // @param market the market values\n    // @param prices the prices of the tokens in the market\n    // @param shouldValidateMinCollateralUsd whether min collateral usd needs to be validated\n    // validation is skipped for decrease position to prevent reverts in case the order size\n    // is just slightly smaller than the position size\n    // in decrease position, the remaining collateral is estimated at the start, and the order\n    // size is updated to match the position size if the remaining collateral will be less than\n    // the min collateral usd\n    // since this is an estimate, there may be edge cases where there is a small remaining position size\n    // and small amount of collateral remaining\n    // validation is skipped for this case as it is preferred for the order to be executed\n    // since the small amount of collateral remaining only impacts the potential payment of liquidation\n    // keepers\n    function validatePosition(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        Position.Props memory position,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        bool shouldValidateMinPositionSize,\n        bool shouldValidateMinCollateralUsd\n    ) public view {\n        if (position.sizeInUsd() == 0 || position.sizeInTokens() == 0) {\n            revert Errors.InvalidPositionSizeValues(position.sizeInUsd(), position.sizeInTokens());\n        }\n\n        MarketUtils.validateEnabledMarket(dataStore, market.marketToken);\n        MarketUtils.validateMarketCollateralToken(market, position.collateralToken());\n\n        if (shouldValidateMinPositionSize) {\n            uint256 minPositionSizeUsd = dataStore.getUint(Keys.MIN_POSITION_SIZE_USD);\n            if (position.sizeInUsd() < minPositionSizeUsd) {\n                revert Errors.MinPositionSize(position.sizeInUsd(), minPositionSizeUsd);\n            }\n        }\n\n        (bool isLiquidatable, string memory reason, IsPositionLiquidatableInfo memory info) = isPositionLiquidatable(\n            dataStore,\n            referralStorage,\n            position,\n            market,\n            prices,\n            shouldValidateMinCollateralUsd\n        );\n\n        if (isLiquidatable) {\n            revert Errors.LiquidatablePosition(\n                reason,\n                info.remainingCollateralUsd,\n                info.minCollateralUsd,\n                info.minCollateralUsdForLeverage\n            );\n        }\n    }\n\n    // @dev check if a position is liquidatable\n    // @param dataStore DataStore\n    // @param referralStorage IReferralStorage\n    // @param position the position values\n    // @param market the market values\n    // @param prices the prices of the tokens in the market\n    function isPositionLiquidatable(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        Position.Props memory position,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        bool shouldValidateMinCollateralUsd\n    ) public view returns (bool, string memory, IsPositionLiquidatableInfo memory) {\n        IsPositionLiquidatableCache memory cache;\n        IsPositionLiquidatableInfo memory info;\n\n        (cache.positionPnlUsd, /* int256 uncappedBasePnlUsd */,  /* uint256 sizeDeltaInTokens */) = getPositionPnlUsd(\n            dataStore,\n            market,\n            prices,\n            position,\n            position.sizeInUsd()\n        );\n\n        cache.collateralTokenPrice = MarketUtils.getCachedTokenPrice(\n            position.collateralToken(),\n            market,\n            prices\n        );\n\n        cache.collateralUsd = position.collateralAmount() * cache.collateralTokenPrice.min;\n\n        // calculate the usdDeltaForPriceImpact for fully closing the position\n        cache.usdDeltaForPriceImpact = -position.sizeInUsd().toInt256();\n\n        cache.priceImpactUsd = PositionPricingUtils.getPriceImpactUsd(\n            PositionPricingUtils.GetPriceImpactUsdParams(\n                dataStore,\n                market,\n                cache.usdDeltaForPriceImpact,\n                position.isLong()\n            )\n        );\n\n        cache.hasPositiveImpact = cache.priceImpactUsd > 0;\n\n        // even if there is a large positive price impact, positions that would be liquidated\n        // if the positive price impact is reduced should not be allowed to be created\n        // as they would be easily liquidated if the price impact changes\n        // cap the priceImpactUsd to zero to prevent these positions from being created\n        if (cache.priceImpactUsd >= 0) {\n            cache.priceImpactUsd = 0;\n        } else {\n            uint256 maxPriceImpactFactor = MarketUtils.getMaxPositionImpactFactorForLiquidations(\n                dataStore,\n                market.marketToken\n            );\n\n            // if there is a large build up of open interest and a sudden large price movement\n            // it may result in a large imbalance between longs and shorts\n            // this could result in very large price impact temporarily\n            // cap the max negative price impact to prevent cascading liquidations\n            int256 maxNegativePriceImpactUsd = -Precision.applyFactor(position.sizeInUsd(), maxPriceImpactFactor).toInt256();\n            if (cache.priceImpactUsd < maxNegativePriceImpactUsd) {\n                cache.priceImpactUsd = maxNegativePriceImpactUsd;\n            }\n        }\n\n        PositionPricingUtils.GetPositionFeesParams memory getPositionFeesParams = PositionPricingUtils.GetPositionFeesParams(\n            dataStore, // dataStore\n            referralStorage, // referralStorage\n            position, // position\n            cache.collateralTokenPrice, //collateralTokenPrice\n            cache.hasPositiveImpact, // forPositiveImpact\n            market.longToken, // longToken\n            market.shortToken, // shortToken\n            position.sizeInUsd(), // sizeDeltaUsd\n            address(0), // uiFeeReceiver\n\n            // should not account for liquidation fees to determine if position should be liquidated\n            false // isLiquidation\n        );\n\n        PositionPricingUtils.PositionFees memory fees = PositionPricingUtils.getPositionFees(getPositionFeesParams);\n\n        // the totalCostAmount is in tokens, use collateralTokenPrice.min to calculate the cost in USD\n        // since in PositionPricingUtils.getPositionFees the totalCostAmount in tokens was calculated\n        // using collateralTokenPrice.min\n        uint256 collateralCostUsd = fees.totalCostAmount * cache.collateralTokenPrice.min;\n\n        // the position's pnl is counted as collateral for the liquidation check\n        // as a position in profit should not be liquidated if the pnl is sufficient\n        // to cover the position's fees\n        info.remainingCollateralUsd =\n            cache.collateralUsd.toInt256()\n            + cache.positionPnlUsd\n            + cache.priceImpactUsd\n            - collateralCostUsd.toInt256();\n\n        cache.minCollateralFactor = MarketUtils.getMinCollateralFactor(dataStore, market.marketToken);\n\n        // validate if (remaining collateral) / position.size is less than the min collateral factor (max leverage exceeded)\n        // this validation includes the position fee to be paid when closing the position\n        // i.e. if the position does not have sufficient collateral after closing fees it is considered a liquidatable position\n        info.minCollateralUsdForLeverage = Precision.applyFactor(position.sizeInUsd(), cache.minCollateralFactor).toInt256();\n\n        if (shouldValidateMinCollateralUsd) {\n            info.minCollateralUsd = dataStore.getUint(Keys.MIN_COLLATERAL_USD).toInt256();\n            if (info.remainingCollateralUsd < info.minCollateralUsd) {\n                return (true, \"min collateral\", info);\n            }\n        }\n\n        if (info.remainingCollateralUsd <= 0) {\n            return (true, \"< 0\", info);\n        }\n\n        if (info.remainingCollateralUsd < info.minCollateralUsdForLeverage) {\n            return (true, \"min collateral for leverage\", info);\n        }\n\n        return (false, \"\", info);\n    }\n\n    // fees and price impact are not included for the willPositionCollateralBeSufficient validation\n    // this is because this validation is meant to guard against a specific scenario of price impact\n    // gaming\n    //\n    // price impact could be gamed by opening high leverage positions, if the price impact\n    // that should be charged is higher than the amount of collateral in the position\n    // then a user could pay less price impact than what is required, and there is a risk that\n    // price manipulation could be profitable if the price impact cost is less than it should be\n    //\n    // this check should be sufficient even without factoring in fees as fees should have a minimal impact\n    // it may be possible that funding or borrowing fees are accumulated and need to be deducted which could\n    // lead to a user paying less price impact than they should, however gaming of this form should be difficult\n    // since the funding and borrowing fees would still add up for the user's cost\n    //\n    // another possibility would be if a user opens a large amount of both long and short positions, and\n    // funding fees are paid from one side to the other, but since most of the open interest is owned by the\n    // user the user earns most of the paid cost, in this scenario the borrowing fees should still be significant\n    // since some time would be required for the funding fees to accumulate\n    //\n    // fees and price impact are validated in the validatePosition check\n    function willPositionCollateralBeSufficient(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        address collateralToken,\n        bool isLong,\n        WillPositionCollateralBeSufficientValues memory values\n    ) public view returns (bool, int256) {\n        Price.Props memory collateralTokenPrice = MarketUtils.getCachedTokenPrice(\n            collateralToken,\n            market,\n            prices\n        );\n\n        int256 remainingCollateralUsd = values.positionCollateralAmount.toInt256() * collateralTokenPrice.min.toInt256();\n\n        // deduct realized pnl if it is negative since this would be paid from\n        // the position's collateral\n        if (values.realizedPnlUsd < 0) {\n            remainingCollateralUsd = remainingCollateralUsd + values.realizedPnlUsd;\n        }\n\n        if (remainingCollateralUsd < 0) {\n            return (false, remainingCollateralUsd);\n        }\n\n        // the min collateral factor will increase as the open interest for a market increases\n        // this may lead to previously created limit increase orders not being executable\n        //\n        // the position's pnl is not factored into the remainingCollateralUsd value, since\n        // factoring in a positive pnl may allow the user to manipulate price and bypass this check\n        // it may be useful to factor in a negative pnl for this check, this can be added if required\n        uint256 minCollateralFactor = MarketUtils.getMinCollateralFactorForOpenInterest(\n            dataStore,\n            market,\n            values.openInterestDelta,\n            isLong\n        );\n\n        uint256 minCollateralFactorForMarket = MarketUtils.getMinCollateralFactor(dataStore, market.marketToken);\n        // use the minCollateralFactor for the market if it is larger\n        if (minCollateralFactorForMarket > minCollateralFactor) {\n            minCollateralFactor = minCollateralFactorForMarket;\n        }\n\n        int256 minCollateralUsdForLeverage = Precision.applyFactor(values.positionSizeInUsd, minCollateralFactor).toInt256();\n        bool willBeSufficient = remainingCollateralUsd >= minCollateralUsdForLeverage;\n\n        return (willBeSufficient, remainingCollateralUsd);\n    }\n\n    function updateFundingAndBorrowingState(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices\n    ) external {\n        // update the funding amount per size for the market\n        MarketUtils.updateFundingState(\n            dataStore,\n            eventEmitter,\n            market,\n            prices\n        );\n\n        // update the cumulative borrowing factor for longs\n        MarketUtils.updateCumulativeBorrowingFactor(\n            dataStore,\n            eventEmitter,\n            market,\n            prices,\n            true // isLong\n        );\n\n        // update the cumulative borrowing factor for shorts\n        MarketUtils.updateCumulativeBorrowingFactor(\n            dataStore,\n            eventEmitter,\n            market,\n            prices,\n            false // isLong\n        );\n    }\n\n    function updateTotalBorrowing(\n        PositionUtils.UpdatePositionParams memory params,\n        uint256 nextPositionSizeInUsd,\n        uint256 nextPositionBorrowingFactor\n    ) internal {\n        MarketUtils.updateTotalBorrowing(\n            params.contracts.dataStore, // dataStore\n            params.market.marketToken, // market\n            params.position.isLong(), // isLong\n            params.position.sizeInUsd(), // prevPositionSizeInUsd\n            params.position.borrowingFactor(), // prevPositionBorrowingFactor\n            nextPositionSizeInUsd, // nextPositionSizeInUsd\n            nextPositionBorrowingFactor // nextPositionBorrowingFactor\n        );\n    }\n\n    // the order.receiver is meant to allow the output of an order to be\n    // received by an address that is different from the position.account\n    // address\n    // for funding fees, the funds are still credited to the owner\n    // of the position indicated by order.account\n    function incrementClaimableFundingAmount(\n        PositionUtils.UpdatePositionParams memory params,\n        PositionPricingUtils.PositionFees memory fees\n    ) internal {\n        // if the position has negative funding fees, distribute it to allow it to be claimable\n        if (fees.funding.claimableLongTokenAmount > 0) {\n            MarketUtils.incrementClaimableFundingAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market.marketToken,\n                params.market.longToken,\n                params.order.account(),\n                fees.funding.claimableLongTokenAmount\n            );\n        }\n\n        if (fees.funding.claimableShortTokenAmount > 0) {\n            MarketUtils.incrementClaimableFundingAmount(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market.marketToken,\n                params.market.shortToken,\n                params.order.account(),\n                fees.funding.claimableShortTokenAmount\n            );\n        }\n    }\n\n    function updateOpenInterest(\n        PositionUtils.UpdatePositionParams memory params,\n        int256 sizeDeltaUsd,\n        int256 sizeDeltaInTokens\n    ) internal {\n        if (sizeDeltaUsd != 0) {\n            MarketUtils.applyDeltaToOpenInterest(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.market,\n                params.position.collateralToken(),\n                params.position.isLong(),\n                sizeDeltaUsd\n            );\n\n            MarketUtils.applyDeltaToOpenInterestInTokens(\n                params.contracts.dataStore,\n                params.contracts.eventEmitter,\n                params.position.market(),\n                params.position.collateralToken(),\n                params.position.isLong(),\n                sizeDeltaInTokens\n            );\n        }\n    }\n\n    function handleReferral(\n        PositionUtils.UpdatePositionParams memory params,\n        PositionPricingUtils.PositionFees memory fees\n    ) internal {\n        ReferralUtils.incrementAffiliateReward(\n            params.contracts.dataStore,\n            params.contracts.eventEmitter,\n            params.position.market(),\n            params.position.collateralToken(),\n            fees.referral.affiliate,\n            fees.referral.affiliateRewardAmount\n        );\n    }\n\n    // returns priceImpactUsd, priceImpactAmount, sizeDeltaInTokens, executionPrice\n    function getExecutionPriceForIncrease(\n        UpdatePositionParams memory params,\n        Price.Props memory indexTokenPrice\n    ) external view returns (int256, int256, uint256, uint256) {\n        // note that the executionPrice is not validated against the order.acceptablePrice value\n        // if the sizeDeltaUsd is zero\n        // for limit orders the order.triggerPrice should still have been validated\n        if (params.order.sizeDeltaUsd() == 0) {\n            // increase order:\n            //     - long: use the larger price\n            //     - short: use the smaller price\n            return (0, 0, 0, indexTokenPrice.pickPrice(params.position.isLong()));\n        }\n\n        int256 priceImpactUsd = PositionPricingUtils.getPriceImpactUsd(\n            PositionPricingUtils.GetPriceImpactUsdParams(\n                params.contracts.dataStore,\n                params.market,\n                params.order.sizeDeltaUsd().toInt256(),\n                params.order.isLong()\n            )\n        );\n\n        // cap priceImpactUsd based on the amount available in the position impact pool\n        priceImpactUsd = MarketUtils.getCappedPositionImpactUsd(\n            params.contracts.dataStore,\n            params.market.marketToken,\n            indexTokenPrice,\n            priceImpactUsd,\n            params.order.sizeDeltaUsd()\n        );\n\n        // for long positions\n        //\n        // if price impact is positive, the sizeDeltaInTokens would be increased by the priceImpactAmount\n        // the priceImpactAmount should be minimized\n        //\n        // if price impact is negative, the sizeDeltaInTokens would be decreased by the priceImpactAmount\n        // the priceImpactAmount should be maximized\n\n        // for short positions\n        //\n        // if price impact is positive, the sizeDeltaInTokens would be decreased by the priceImpactAmount\n        // the priceImpactAmount should be minimized\n        //\n        // if price impact is negative, the sizeDeltaInTokens would be increased by the priceImpactAmount\n        // the priceImpactAmount should be maximized\n\n        int256 priceImpactAmount;\n\n        if (priceImpactUsd > 0) {\n            // use indexTokenPrice.max and round down to minimize the priceImpactAmount\n            priceImpactAmount = priceImpactUsd / indexTokenPrice.max.toInt256();\n        } else {\n            // use indexTokenPrice.min and round up to maximize the priceImpactAmount\n            priceImpactAmount = Calc.roundUpMagnitudeDivision(priceImpactUsd, indexTokenPrice.min);\n        }\n\n        uint256 baseSizeDeltaInTokens;\n\n        if (params.position.isLong()) {\n            // round the number of tokens for long positions down\n            baseSizeDeltaInTokens = params.order.sizeDeltaUsd() / indexTokenPrice.max;\n        } else {\n            // round the number of tokens for short positions up\n            baseSizeDeltaInTokens = Calc.roundUpDivision(params.order.sizeDeltaUsd(), indexTokenPrice.min);\n        }\n\n        int256 sizeDeltaInTokens;\n        if (params.position.isLong()) {\n            sizeDeltaInTokens = baseSizeDeltaInTokens.toInt256() + priceImpactAmount;\n        } else {\n            sizeDeltaInTokens = baseSizeDeltaInTokens.toInt256() - priceImpactAmount;\n        }\n\n        if (sizeDeltaInTokens < 0) {\n            revert Errors.PriceImpactLargerThanOrderSize(priceImpactUsd, params.order.sizeDeltaUsd());\n        }\n\n        // using increase of long positions as an example\n        // if price is $2000, sizeDeltaUsd is $5000, priceImpactUsd is -$1000\n        // priceImpactAmount = -1000 / 2000 = -0.5\n        // baseSizeDeltaInTokens = 5000 / 2000 = 2.5\n        // sizeDeltaInTokens = 2.5 - 0.5 = 2\n        // executionPrice = 5000 / 2 = $2500\n        uint256 executionPrice = BaseOrderUtils.getExecutionPriceForIncrease(\n            params.order.sizeDeltaUsd(),\n            sizeDeltaInTokens.toUint256(),\n            params.order.acceptablePrice(),\n            params.position.isLong()\n        );\n\n        return (priceImpactUsd, priceImpactAmount, sizeDeltaInTokens.toUint256(), executionPrice);\n    }\n\n    // returns priceImpactUsd, priceImpactDiffUsd, executionPrice\n    function getExecutionPriceForDecrease(\n        UpdatePositionParams memory params,\n        Price.Props memory indexTokenPrice\n    ) external view returns (int256, uint256, uint256) {\n        uint256 sizeDeltaUsd = params.order.sizeDeltaUsd();\n\n        // note that the executionPrice is not validated against the order.acceptablePrice value\n        // if the sizeDeltaUsd is zero\n        // for limit orders the order.triggerPrice should still have been validated\n        if (sizeDeltaUsd == 0) {\n            // decrease order:\n            //     - long: use the smaller price\n            //     - short: use the larger price\n            return (0, 0, indexTokenPrice.pickPrice(!params.position.isLong()));\n        }\n\n        GetExecutionPriceForDecreaseCache memory cache;\n\n        cache.priceImpactUsd = PositionPricingUtils.getPriceImpactUsd(\n            PositionPricingUtils.GetPriceImpactUsdParams(\n                params.contracts.dataStore,\n                params.market,\n                -sizeDeltaUsd.toInt256(),\n                params.order.isLong()\n            )\n        );\n\n        // cap priceImpactUsd based on the amount available in the position impact pool\n        cache.priceImpactUsd = MarketUtils.getCappedPositionImpactUsd(\n            params.contracts.dataStore,\n            params.market.marketToken,\n            indexTokenPrice,\n            cache.priceImpactUsd,\n            sizeDeltaUsd\n        );\n\n        if (cache.priceImpactUsd < 0) {\n            uint256 maxPriceImpactFactor = MarketUtils.getMaxPositionImpactFactor(\n                params.contracts.dataStore,\n                params.market.marketToken,\n                false\n            );\n\n            // convert the max price impact to the min negative value\n            // e.g. if sizeDeltaUsd is 10,000 and maxPriceImpactFactor is 2%\n            // then minPriceImpactUsd = -200\n            int256 minPriceImpactUsd = -Precision.applyFactor(sizeDeltaUsd, maxPriceImpactFactor).toInt256();\n\n            // cap priceImpactUsd to the min negative value and store the difference in priceImpactDiffUsd\n            // e.g. if priceImpactUsd is -500 and minPriceImpactUsd is -200\n            // then set priceImpactDiffUsd to -200 - -500 = 300\n            // set priceImpactUsd to -200\n            if (cache.priceImpactUsd < minPriceImpactUsd) {\n                cache.priceImpactDiffUsd = (minPriceImpactUsd - cache.priceImpactUsd).toUint256();\n                cache.priceImpactUsd = minPriceImpactUsd;\n            }\n        }\n\n        // the executionPrice is calculated after the price impact is capped\n        // so the output amount directly received by the user may not match\n        // the executionPrice, the difference would be stored as a\n        // claimable amount\n        cache.executionPrice = BaseOrderUtils.getExecutionPriceForDecrease(\n            indexTokenPrice,\n            params.position.sizeInUsd(),\n            params.position.sizeInTokens(),\n            sizeDeltaUsd,\n            cache.priceImpactUsd,\n            params.order.acceptablePrice(),\n            params.position.isLong()\n        );\n\n        return (cache.priceImpactUsd, cache.priceImpactDiffUsd, cache.executionPrice);\n    }\n\n}\n"
    },
    "contracts/price/Price.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title Price\n// @dev Struct for prices\nlibrary Price {\n    // @param min the min price\n    // @param max the max price\n    struct Props {\n        uint256 min;\n        uint256 max;\n    }\n\n    // @dev check if a price is empty\n    // @param props Props\n    // @return whether a price is empty\n    function isEmpty(Props memory props) internal pure returns (bool) {\n        return props.min == 0 || props.max == 0;\n    }\n\n    // @dev get the average of the min and max values\n    // @param props Props\n    // @return the average of the min and max values\n    function midPrice(Props memory props) internal pure returns (uint256) {\n        return (props.max + props.min) / 2;\n    }\n\n    // @dev pick either the min or max value\n    // @param props Props\n    // @param maximize whether to pick the min or max value\n    // @return either the min or max value\n    function pickPrice(Props memory props, bool maximize) internal pure returns (uint256) {\n        return maximize ? props.max : props.min;\n    }\n\n    // @dev pick the min or max price depending on whether it is for a long or short position\n    // and whether the pending pnl should be maximized or not\n    // @param props Props\n    // @param isLong whether it is for a long or short position\n    // @param maximize whether the pnl should be maximized or not\n    // @return the min or max price\n    function pickPriceForPnl(Props memory props, bool isLong, bool maximize) internal pure returns (uint256) {\n        // for long positions, pick the larger price to maximize pnl\n        // for short positions, pick the smaller price to maximize pnl\n        if (isLong) {\n            return maximize ? props.max : props.min;\n        }\n\n        return maximize ? props.min : props.max;\n    }\n}\n"
    },
    "contracts/pricing/ISwapPricingUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISwapPricingUtils {\n    enum SwapPricingType {\n        Swap,\n        Shift,\n        AtomicWithdrawal,\n        Deposit,\n        Withdrawal,\n        AtomicSwap\n    }\n}\n"
    },
    "contracts/pricing/PositionPricingUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nimport \"../market/MarketUtils.sol\";\n\nimport \"../utils/Precision.sol\";\nimport \"../utils/Calc.sol\";\n\nimport \"./PricingUtils.sol\";\n\nimport \"../referral/IReferralStorage.sol\";\nimport \"../referral/ReferralUtils.sol\";\n\n// @title PositionPricingUtils\n// @dev Library for position pricing functions\nlibrary PositionPricingUtils {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Position for Position.Props;\n    using Price for Price.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    struct GetPositionFeesParams {\n        DataStore dataStore;\n        IReferralStorage referralStorage;\n        Position.Props position;\n        Price.Props collateralTokenPrice;\n        bool forPositiveImpact;\n        address longToken;\n        address shortToken;\n        uint256 sizeDeltaUsd;\n        address uiFeeReceiver;\n        bool isLiquidation;\n    }\n\n    // @dev GetPriceImpactUsdParams struct used in getPriceImpactUsd to avoid stack\n    // too deep errors\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param usdDelta the change in position size in USD\n    // @param isLong whether the position is long or short\n    struct GetPriceImpactUsdParams {\n        DataStore dataStore;\n        Market.Props market;\n        int256 usdDelta;\n        bool isLong;\n    }\n\n    // @dev OpenInterestParams struct to contain open interest values\n    // @param longOpenInterest the amount of long open interest\n    // @param shortOpenInterest the amount of short open interest\n    // @param nextLongOpenInterest the updated amount of long open interest\n    // @param nextShortOpenInterest the updated amount of short open interest\n    struct OpenInterestParams {\n        uint256 longOpenInterest;\n        uint256 shortOpenInterest;\n        uint256 nextLongOpenInterest;\n        uint256 nextShortOpenInterest;\n    }\n\n    // @dev PositionFees struct to contain fee values\n    // @param feeReceiverAmount the amount for the fee receiver\n    // @param feeAmountForPool the amount of fees for the pool\n    // @param positionFeeAmountForPool the position fee amount for the pool\n    // @param positionFeeAmount the fee amount for increasing / decreasing the position\n    // @param borrowingFeeAmount the borrowing fee amount\n    // @param totalCostAmount the total cost amount in tokens\n    struct PositionFees {\n        PositionReferralFees referral;\n        PositionProFees pro;\n        PositionFundingFees funding;\n        PositionBorrowingFees borrowing;\n        PositionUiFees ui;\n        PositionLiquidationFees liquidation;\n        Price.Props collateralTokenPrice;\n        uint256 positionFeeFactor;\n        uint256 protocolFeeAmount;\n        uint256 positionFeeReceiverFactor;\n        uint256 feeReceiverAmount;\n        uint256 feeAmountForPool;\n        uint256 positionFeeAmountForPool;\n        uint256 positionFeeAmount;\n        uint256 totalCostAmountExcludingFunding;\n        uint256 totalCostAmount;\n        uint256 totalDiscountAmount;\n    }\n\n    struct PositionProFees {\n        uint256 traderTier;\n        uint256 traderDiscountFactor;\n        uint256 traderDiscountAmount;\n    }\n\n    struct PositionLiquidationFees {\n        uint256 liquidationFeeUsd;\n        uint256 liquidationFeeAmount;\n        uint256 liquidationFeeReceiverFactor;\n        uint256 liquidationFeeAmountForFeeReceiver;\n    }\n\n    // @param affiliate the referral affiliate of the trader\n    // @param traderDiscountAmount the discount amount for the trader\n    // @param affiliateRewardAmount the affiliate reward amount\n    struct PositionReferralFees {\n        bytes32 referralCode;\n        address affiliate;\n        address trader;\n        uint256 totalRebateFactor;\n        uint256 affiliateRewardFactor;\n        uint256 adjustedAffiliateRewardFactor;\n        uint256 traderDiscountFactor;\n        uint256 totalRebateAmount;\n        uint256 traderDiscountAmount;\n        uint256 affiliateRewardAmount;\n    }\n\n    struct PositionBorrowingFees {\n        uint256 borrowingFeeUsd;\n        uint256 borrowingFeeAmount;\n        uint256 borrowingFeeReceiverFactor;\n        uint256 borrowingFeeAmountForFeeReceiver;\n    }\n\n    // @param fundingFeeAmount the position's funding fee amount\n    // @param claimableLongTokenAmount the negative funding fee in long token that is claimable\n    // @param claimableShortTokenAmount the negative funding fee in short token that is claimable\n    // @param latestLongTokenFundingAmountPerSize the latest long token funding\n    // amount per size for the market\n    // @param latestShortTokenFundingAmountPerSize the latest short token funding\n    // amount per size for the market\n    struct PositionFundingFees {\n        uint256 fundingFeeAmount;\n        uint256 claimableLongTokenAmount;\n        uint256 claimableShortTokenAmount;\n        uint256 latestFundingFeeAmountPerSize;\n        uint256 latestLongTokenClaimableFundingAmountPerSize;\n        uint256 latestShortTokenClaimableFundingAmountPerSize;\n    }\n\n    struct PositionUiFees {\n        address uiFeeReceiver;\n        uint256 uiFeeReceiverFactor;\n        uint256 uiFeeAmount;\n    }\n\n    // @dev get the price impact in USD for a position increase / decrease\n    // @param params GetPriceImpactUsdParams\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) internal view returns (int256) {\n        OpenInterestParams memory openInterestParams = getNextOpenInterest(params);\n\n        int256 priceImpactUsd = _getPriceImpactUsd(params.dataStore, params.market.marketToken, openInterestParams);\n\n        // the virtual price impact calculation is skipped if the price impact\n        // is positive since the action is helping to balance the pool\n        //\n        // in case two virtual pools are unbalanced in a different direction\n        // e.g. pool0 has more longs than shorts while pool1 has less longs\n        // than shorts\n        // not skipping the virtual price impact calculation would lead to\n        // a negative price impact for any trade on either pools and would\n        // disincentivise the balancing of pools\n        if (priceImpactUsd >= 0) { return priceImpactUsd; }\n\n        (bool hasVirtualInventory, int256 virtualInventory) = MarketUtils.getVirtualInventoryForPositions(params.dataStore, params.market.indexToken);\n        if (!hasVirtualInventory) { return priceImpactUsd; }\n\n        OpenInterestParams memory openInterestParamsForVirtualInventory = getNextOpenInterestForVirtualInventory(params, virtualInventory);\n        int256 priceImpactUsdForVirtualInventory = _getPriceImpactUsd(params.dataStore, params.market.marketToken, openInterestParamsForVirtualInventory);\n\n        return priceImpactUsdForVirtualInventory < priceImpactUsd ? priceImpactUsdForVirtualInventory : priceImpactUsd;\n    }\n\n    // @dev get the price impact in USD for a position increase / decrease\n    // @param dataStore DataStore\n    // @param market the trading market\n    // @param openInterestParams OpenInterestParams\n    function _getPriceImpactUsd(DataStore dataStore, address market, OpenInterestParams memory openInterestParams) internal view returns (int256) {\n        uint256 initialDiffUsd = Calc.diff(openInterestParams.longOpenInterest, openInterestParams.shortOpenInterest);\n        uint256 nextDiffUsd = Calc.diff(openInterestParams.nextLongOpenInterest, openInterestParams.nextShortOpenInterest);\n\n        // check whether an improvement in balance comes from causing the balance to switch sides\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\n        bool isSameSideRebalance = openInterestParams.longOpenInterest <= openInterestParams.shortOpenInterest == openInterestParams.nextLongOpenInterest <= openInterestParams.nextShortOpenInterest;\n        uint256 impactExponentFactor = dataStore.getUint(Keys.positionImpactExponentFactorKey(market));\n\n        if (isSameSideRebalance) {\n            bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\n            uint256 impactFactor = MarketUtils.getAdjustedPositionImpactFactor(dataStore, market, hasPositiveImpact);\n\n            return PricingUtils.getPriceImpactUsdForSameSideRebalance(\n                initialDiffUsd,\n                nextDiffUsd,\n                impactFactor,\n                impactExponentFactor\n            );\n        } else {\n            (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = MarketUtils.getAdjustedPositionImpactFactors(dataStore, market);\n\n            return PricingUtils.getPriceImpactUsdForCrossoverRebalance(\n                initialDiffUsd,\n                nextDiffUsd,\n                positiveImpactFactor,\n                negativeImpactFactor,\n                impactExponentFactor\n            );\n        }\n    }\n\n    // @dev get the next open interest values\n    // @param params GetPriceImpactUsdParams\n    // @return OpenInterestParams\n    function getNextOpenInterest(\n        GetPriceImpactUsdParams memory params\n    ) internal view returns (OpenInterestParams memory) {\n        uint256 longOpenInterest = MarketUtils.getOpenInterest(\n            params.dataStore,\n            params.market,\n            true\n        );\n\n        uint256 shortOpenInterest = MarketUtils.getOpenInterest(\n            params.dataStore,\n            params.market,\n            false\n        );\n\n        return getNextOpenInterestParams(params, longOpenInterest, shortOpenInterest);\n    }\n\n    function getNextOpenInterestForVirtualInventory(\n        GetPriceImpactUsdParams memory params,\n        int256 virtualInventory\n    ) internal pure returns (OpenInterestParams memory) {\n        uint256 longOpenInterest;\n        uint256 shortOpenInterest;\n\n        // if virtualInventory is more than zero it means that\n        // tokens were virtually sold to the pool, so set shortOpenInterest\n        // to the virtualInventory value\n        // if virtualInventory is less than zero it means that\n        // tokens were virtually bought from the pool, so set longOpenInterest\n        // to the virtualInventory value\n        if (virtualInventory > 0) {\n            shortOpenInterest = virtualInventory.toUint256();\n        } else {\n            longOpenInterest = (-virtualInventory).toUint256();\n        }\n\n        // the virtual long and short open interest is adjusted by the usdDelta\n        // to prevent an underflow in getNextOpenInterestParams\n        // price impact depends on the change in USD balance, so offsetting both\n        // values equally should not change the price impact calculation\n        if (params.usdDelta < 0) {\n            uint256 offset = (-params.usdDelta).toUint256();\n            longOpenInterest += offset;\n            shortOpenInterest += offset;\n        }\n\n        return getNextOpenInterestParams(params, longOpenInterest, shortOpenInterest);\n    }\n\n    function getNextOpenInterestParams(\n        GetPriceImpactUsdParams memory params,\n        uint256 longOpenInterest,\n        uint256 shortOpenInterest\n    ) internal pure returns (OpenInterestParams memory) {\n        uint256 nextLongOpenInterest = longOpenInterest;\n        uint256 nextShortOpenInterest = shortOpenInterest;\n\n        if (params.isLong) {\n            if (params.usdDelta < 0 && (-params.usdDelta).toUint256() > longOpenInterest) {\n                revert Errors.UsdDeltaExceedsLongOpenInterest(params.usdDelta, longOpenInterest);\n            }\n\n            nextLongOpenInterest = Calc.sumReturnUint256(longOpenInterest, params.usdDelta);\n        } else {\n            if (params.usdDelta < 0 && (-params.usdDelta).toUint256() > shortOpenInterest) {\n                revert Errors.UsdDeltaExceedsShortOpenInterest(params.usdDelta, shortOpenInterest);\n            }\n\n            nextShortOpenInterest = Calc.sumReturnUint256(shortOpenInterest, params.usdDelta);\n        }\n\n        OpenInterestParams memory openInterestParams = OpenInterestParams(\n            longOpenInterest,\n            shortOpenInterest,\n            nextLongOpenInterest,\n            nextShortOpenInterest\n        );\n\n        return openInterestParams;\n    }\n\n    // @dev get position fees\n    // @param dataStore DataStore\n    // @param referralStorage IReferralStorage\n    // @param position the position values\n    // @param collateralTokenPrice the price of the position's collateralToken\n    // @param longToken the long token of the market\n    // @param shortToken the short token of the market\n    // @param sizeDeltaUsd the change in position size\n    // @return PositionFees\n    function getPositionFees(\n        GetPositionFeesParams memory params\n    ) internal view returns (PositionFees memory) {\n        PositionFees memory fees = getPositionFeesAfterReferral(\n            params.dataStore,\n            params.referralStorage,\n            params.collateralTokenPrice,\n            params.forPositiveImpact,\n            params.position.account(),\n            params.position.market(),\n            params.sizeDeltaUsd\n        );\n\n        uint256 borrowingFeeUsd = MarketUtils.getBorrowingFees(params.dataStore, params.position);\n\n        fees.borrowing = getBorrowingFees(\n            params.dataStore,\n            params.collateralTokenPrice,\n            borrowingFeeUsd\n        );\n\n        if (params.isLiquidation) {\n            fees.liquidation = getLiquidationFees(params.dataStore, params.position.market(), params.sizeDeltaUsd, params.collateralTokenPrice);\n        }\n\n        fees.feeAmountForPool =\n            fees.positionFeeAmountForPool +\n            fees.borrowing.borrowingFeeAmount -\n            fees.borrowing.borrowingFeeAmountForFeeReceiver +\n            fees.liquidation.liquidationFeeAmount -\n            fees.liquidation.liquidationFeeAmountForFeeReceiver;\n\n        fees.feeReceiverAmount +=\n            fees.borrowing.borrowingFeeAmountForFeeReceiver +\n            fees.liquidation.liquidationFeeAmountForFeeReceiver;\n\n        fees.funding.latestFundingFeeAmountPerSize = MarketUtils.getFundingFeeAmountPerSize(\n            params.dataStore,\n            params.position.market(),\n            params.position.collateralToken(),\n            params.position.isLong()\n        );\n\n        fees.funding.latestLongTokenClaimableFundingAmountPerSize = MarketUtils.getClaimableFundingAmountPerSize(\n            params.dataStore,\n            params.position.market(),\n            params.longToken,\n            params.position.isLong()\n        );\n\n        fees.funding.latestShortTokenClaimableFundingAmountPerSize = MarketUtils.getClaimableFundingAmountPerSize(\n            params.dataStore,\n            params.position.market(),\n            params.shortToken,\n            params.position.isLong()\n        );\n\n        fees.funding = getFundingFees(\n            fees.funding,\n            params.position\n        );\n\n        fees.ui = getUiFees(\n            params.dataStore,\n            params.collateralTokenPrice,\n            params.sizeDeltaUsd,\n            params.uiFeeReceiver\n        );\n\n        fees.totalCostAmountExcludingFunding =\n            fees.positionFeeAmount\n            + fees.borrowing.borrowingFeeAmount\n            + fees.liquidation.liquidationFeeAmount\n            + fees.ui.uiFeeAmount\n            - fees.totalDiscountAmount;\n\n        fees.totalCostAmount =\n            fees.totalCostAmountExcludingFunding\n            + fees.funding.fundingFeeAmount;\n\n        return fees;\n    }\n\n    function getBorrowingFees(\n        DataStore dataStore,\n        Price.Props memory collateralTokenPrice,\n        uint256 borrowingFeeUsd\n    ) internal view returns (PositionBorrowingFees memory) {\n        PositionBorrowingFees memory borrowingFees;\n\n        borrowingFees.borrowingFeeUsd = borrowingFeeUsd;\n        borrowingFees.borrowingFeeAmount = borrowingFeeUsd / collateralTokenPrice.min;\n        borrowingFees.borrowingFeeReceiverFactor = dataStore.getUint(Keys.BORROWING_FEE_RECEIVER_FACTOR);\n        borrowingFees.borrowingFeeAmountForFeeReceiver = Precision.applyFactor(borrowingFees.borrowingFeeAmount, borrowingFees.borrowingFeeReceiverFactor);\n\n        return borrowingFees;\n    }\n\n    function getFundingFees(\n        PositionFundingFees memory fundingFees,\n        Position.Props memory position\n    ) internal pure returns (PositionFundingFees memory) {\n        fundingFees.fundingFeeAmount = MarketUtils.getFundingAmount(\n            fundingFees.latestFundingFeeAmountPerSize,\n            position.fundingFeeAmountPerSize(),\n            position.sizeInUsd(),\n            true // roundUpMagnitude\n        );\n\n        fundingFees.claimableLongTokenAmount = MarketUtils.getFundingAmount(\n            fundingFees.latestLongTokenClaimableFundingAmountPerSize,\n            position.longTokenClaimableFundingAmountPerSize(),\n            position.sizeInUsd(),\n            false // roundUpMagnitude\n        );\n\n        fundingFees.claimableShortTokenAmount = MarketUtils.getFundingAmount(\n            fundingFees.latestShortTokenClaimableFundingAmountPerSize,\n            position.shortTokenClaimableFundingAmountPerSize(),\n            position.sizeInUsd(),\n            false // roundUpMagnitude\n        );\n\n        return fundingFees;\n    }\n\n    function getUiFees(\n        DataStore dataStore,\n        Price.Props memory collateralTokenPrice,\n        uint256 sizeDeltaUsd,\n        address uiFeeReceiver\n    ) internal view returns (PositionUiFees memory) {\n        PositionUiFees memory uiFees;\n\n        if (uiFeeReceiver == address(0)) {\n            return uiFees;\n        }\n\n        uiFees.uiFeeReceiver = uiFeeReceiver;\n        uiFees.uiFeeReceiverFactor = MarketUtils.getUiFeeFactor(dataStore, uiFeeReceiver);\n        uiFees.uiFeeAmount = Precision.applyFactor(sizeDeltaUsd, uiFees.uiFeeReceiverFactor) / collateralTokenPrice.min;\n\n        return uiFees;\n    }\n\n    // @dev get position fees after applying referral rebates / discounts\n    // @param dataStore DataStore\n    // @param referralStorage IReferralStorage\n    // @param collateralTokenPrice the price of the position's collateralToken\n    // @param the position's account\n    // @param market the position's market\n    // @param sizeDeltaUsd the change in position size\n    // @return (affiliate, traderDiscountAmount, affiliateRewardAmount, feeReceiverAmount, positionFeeAmountForPool)\n    function getPositionFeesAfterReferral(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        Price.Props memory collateralTokenPrice,\n        bool forPositiveImpact,\n        address account,\n        address market,\n        uint256 sizeDeltaUsd\n    ) internal view returns (PositionFees memory) {\n        PositionFees memory fees;\n\n        fees.collateralTokenPrice = collateralTokenPrice;\n\n        fees.referral.trader = account;\n        uint256 minAffiliateRewardFactor;\n        (\n            fees.referral.referralCode,\n            fees.referral.affiliate,\n            fees.referral.affiliateRewardFactor,\n            fees.referral.traderDiscountFactor,\n            minAffiliateRewardFactor\n        ) = ReferralUtils.getReferralInfo(dataStore, referralStorage, account);\n\n        // note that since it is possible to incur both positive and negative price impact values\n        // and the negative price impact factor may be larger than the positive impact factor\n        // it is possible for the balance to be improved overall but for the price impact to still be negative\n        // in this case the fee factor for the negative price impact would be charged\n        // a user could split the order into two, to incur a smaller fee, reducing the fee through this should not be a large issue\n        fees.positionFeeFactor = dataStore.getUint(Keys.positionFeeFactorKey(market, forPositiveImpact));\n        fees.positionFeeAmount = Precision.applyFactor(sizeDeltaUsd, fees.positionFeeFactor) / collateralTokenPrice.min;\n\n        // pro tiers are provided as a flexible option to allow for custom criteria based discounts,\n        // the exact criteria and usage of this feature should be decided by the DAO\n        fees.pro.traderTier = dataStore.getUint(Keys.proTraderTierKey(account));\n        if (fees.pro.traderTier > 0) {\n            fees.pro.traderDiscountFactor = dataStore.getUint(Keys.proDiscountFactorKey(fees.pro.traderTier));\n\n            if (fees.pro.traderDiscountFactor > 0) {\n                fees.pro.traderDiscountAmount = Precision.applyFactor(fees.positionFeeAmount, fees.pro.traderDiscountFactor);\n            }\n        }\n\n        // if pro discount is higher than referral discount then affiliate reward is capped at (total referral rebate - pro discount)\n        // but can not be lower than configured min affiliate reward\n        //\n        // example 1:\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 5%\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 5%, 5%) = 15%\n        // trader gets 10% discount, affiliate reward is capped at 15%, affiliate gets full 10% reward\n        // protocol gets 80%\n        //\n        // example 2:\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 13%\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 13%, 5%) = 7%\n        // trader gets 13% discount, affiliate reward is capped at 7%, affiliate gets capped 7% reward\n        // protocol gets 80%\n        //\n        // example 3:\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 18%\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 18%, 5%) = 5%\n        // trader gets 18% discount, affiliate reward is capped at 5%, affiliate gets capped 5% reward\n        // protocol gets 77%\n        //\n        // example 4:\n        // referral code is 10% affiliate reward and 10% trader discount, pro discount is 25%\n        // min affiliate reward 5%, total referral rebate is 20%, affiliate reward cap is max of (20% - 25%, 5%) = 5%\n        // trader gets 25% discount, affiliate reward is capped at 5%, affiliate gets capped 5% reward\n        // protocol gets 70%\n\n        if (fees.referral.referralCode != bytes32(0)) {\n            fees.referral.adjustedAffiliateRewardFactor = fees.referral.affiliateRewardFactor;\n            fees.referral.totalRebateFactor = fees.referral.affiliateRewardFactor + fees.referral.traderDiscountFactor;\n            // if pro discount is higher than referral discount then affiliate reward should be capped\n            // at max of (min affiliate reward, total referral rebate - pro discount)\n            if (fees.pro.traderDiscountFactor > fees.referral.traderDiscountFactor) {\n                fees.referral.adjustedAffiliateRewardFactor = fees.pro.traderDiscountFactor > fees.referral.totalRebateFactor\n                    ? minAffiliateRewardFactor\n                    : fees.referral.totalRebateFactor - fees.pro.traderDiscountFactor;\n                if (fees.referral.adjustedAffiliateRewardFactor < minAffiliateRewardFactor) {\n                    fees.referral.adjustedAffiliateRewardFactor = minAffiliateRewardFactor;\n                }\n            }\n\n            fees.referral.affiliateRewardAmount = Precision.applyFactor(fees.positionFeeAmount, fees.referral.adjustedAffiliateRewardFactor);\n            fees.referral.traderDiscountAmount = Precision.applyFactor(fees.positionFeeAmount, fees.referral.traderDiscountFactor);\n            fees.referral.totalRebateAmount = fees.referral.affiliateRewardAmount + fees.referral.traderDiscountAmount;\n        }\n\n        fees.totalDiscountAmount = fees.pro.traderDiscountAmount > fees.referral.traderDiscountAmount\n            ? fees.pro.traderDiscountAmount\n            : fees.referral.traderDiscountAmount;\n        fees.protocolFeeAmount = fees.positionFeeAmount - fees.referral.affiliateRewardAmount - fees.totalDiscountAmount;\n\n        fees.positionFeeReceiverFactor = dataStore.getUint(Keys.POSITION_FEE_RECEIVER_FACTOR);\n        fees.feeReceiverAmount = Precision.applyFactor(fees.protocolFeeAmount, fees.positionFeeReceiverFactor);\n        fees.positionFeeAmountForPool = fees.protocolFeeAmount - fees.feeReceiverAmount;\n\n        return fees;\n    }\n\n    function getLiquidationFees(DataStore dataStore, address market, uint256 sizeInUsd, Price.Props memory collateralTokenPrice) internal view returns (PositionLiquidationFees memory) {\n        PositionLiquidationFees memory liquidationFees;\n        uint256 liquidationFeeFactor = dataStore.getUint(Keys.liquidationFeeFactorKey(market));\n        if (liquidationFeeFactor == 0) {\n            return liquidationFees;\n        }\n\n        liquidationFees.liquidationFeeUsd = Precision.applyFactor(sizeInUsd, liquidationFeeFactor);\n        liquidationFees.liquidationFeeAmount = Calc.roundUpDivision(liquidationFees.liquidationFeeUsd, collateralTokenPrice.min);\n        liquidationFees.liquidationFeeReceiverFactor = dataStore.getUint(Keys.LIQUIDATION_FEE_RECEIVER_FACTOR);\n        liquidationFees.liquidationFeeAmountForFeeReceiver = Precision.applyFactor(liquidationFees.liquidationFeeAmount, liquidationFees.liquidationFeeReceiverFactor);\n        return liquidationFees;\n    }\n}\n"
    },
    "contracts/pricing/PricingUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Calc.sol\";\nimport \"../utils/Precision.sol\";\n\n// @title PricingUtils\n// @dev Library for pricing functions\n//\n// Price impact is calculated as:\n//\n// ```\n// (initial imbalance) ^ (price impact exponent) * (price impact factor / 2) - (next imbalance) ^ (price impact exponent) * (price impact factor / 2)\n// ```\n//\n// For spot actions (deposits, withdrawals, swaps), imbalance is calculated as the\n// difference in the worth of the long tokens and short tokens.\n//\n// For example:\n//\n// - A pool has 10 long tokens, each long token is worth $5000\n// - The pool also has 50,000 short tokens, each short token is worth $1\n// - The `price impact exponent` is set to 2 and `price impact factor` is set\n// to `0.01 / 50,000`\n// - The pool is equally balanced with $50,000 of long tokens and $50,000 of\n// short tokens\n// - If a user deposits 10 long tokens, the pool would now have $100,000 of long\n// tokens and $50,000 of short tokens\n// - The change in imbalance would be from $0 to -$50,000\n// - There would be negative price impact charged on the user's deposit,\n// calculated as `0 ^ 2 * (0.01 / 50,000) - 50,000 ^ 2 * (0.01 / 50,000) => -$500`\n// - If the user now withdraws 5 long tokens, the balance would change\n// from -$50,000 to -$25,000, a net change of +$25,000\n// - There would be a positive price impact rebated to the user in the form of\n// additional long tokens, calculated as `50,000 ^ 2 * (0.01 / 50,000) - 25,000 ^ 2 * (0.01 / 50,000) => $375`\n//\n// For position actions (increase / decrease position), imbalance is calculated\n// as the difference in the long and short open interest.\n//\n// `price impact exponents` and `price impact factors` are configured per market\n// and can differ for spot and position actions.\n//\n// The purpose of the price impact is to help reduce the risk of price manipulation,\n// since the contracts use an oracle price which would be an average or median price\n// of multiple reference exchanges. Without a price impact, it may be profitable to\n//  manipulate the prices on reference exchanges while executing orders on the contracts.\n//\n// This risk will also be present if the positive and negative price impact values\n// are similar, for that reason the positive price impact should be set to a low\n// value in times of volatility or irregular price movements.\nlibrary PricingUtils {\n    // @dev get the price impact USD if there is no crossover in balance\n    // a crossover in balance is for example if the long open interest is larger\n    // than the short open interest, and a short position is opened such that the\n    // short open interest becomes larger than the long open interest\n    // @param initialDiffUsd the initial difference in USD\n    // @param nextDiffUsd the next difference in USD\n    // @param impactFactor the impact factor\n    // @param impactExponentFactor the impact exponent factor\n    function getPriceImpactUsdForSameSideRebalance(\n        uint256 initialDiffUsd,\n        uint256 nextDiffUsd,\n        uint256 impactFactor,\n        uint256 impactExponentFactor\n    ) internal pure returns (int256) {\n        bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\n\n        uint256 deltaDiffUsd = Calc.diff(\n            applyImpactFactor(initialDiffUsd, impactFactor, impactExponentFactor),\n            applyImpactFactor(nextDiffUsd, impactFactor, impactExponentFactor)\n        );\n\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, hasPositiveImpact);\n\n        return priceImpactUsd;\n    }\n\n    // @dev get the price impact USD if there is a crossover in balance\n    // a crossover in balance is for example if the long open interest is larger\n    // than the short open interest, and a short position is opened such that the\n    // short open interest becomes larger than the long open interest\n    // @param initialDiffUsd the initial difference in USD\n    // @param nextDiffUsd the next difference in USD\n    // @param hasPositiveImpact whether there is a positive impact on balance\n    // @param impactFactor the impact factor\n    // @param impactExponentFactor the impact exponent factor\n    function getPriceImpactUsdForCrossoverRebalance(\n        uint256 initialDiffUsd,\n        uint256 nextDiffUsd,\n        uint256 positiveImpactFactor,\n        uint256 negativeImpactFactor,\n        uint256 impactExponentFactor\n    ) internal pure returns (int256) {\n        uint256 positiveImpactUsd = applyImpactFactor(initialDiffUsd, positiveImpactFactor, impactExponentFactor);\n        uint256 negativeImpactUsd = applyImpactFactor(nextDiffUsd, negativeImpactFactor, impactExponentFactor);\n        uint256 deltaDiffUsd = Calc.diff(positiveImpactUsd, negativeImpactUsd);\n\n        int256 priceImpactUsd = Calc.toSigned(deltaDiffUsd, positiveImpactUsd > negativeImpactUsd);\n\n        return priceImpactUsd;\n    }\n\n    // @dev apply the impact factor calculation to a USD diff value\n    // @param diffUsd the difference in USD\n    // @param impactFactor the impact factor\n    // @param impactExponentFactor the impact exponent factor\n    function applyImpactFactor(\n        uint256 diffUsd,\n        uint256 impactFactor,\n        uint256 impactExponentFactor\n    ) internal pure returns (uint256) {\n        uint256 exponentValue = Precision.applyExponentFactor(diffUsd, impactExponentFactor);\n        return Precision.applyFactor(exponentValue, impactFactor);\n    }\n}\n"
    },
    "contracts/pricing/SwapPricingUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nimport \"../market/MarketUtils.sol\";\n\nimport \"../utils/Precision.sol\";\nimport \"../utils/Calc.sol\";\n\nimport \"./PricingUtils.sol\";\nimport \"./ISwapPricingUtils.sol\";\n\n// @title SwapPricingUtils\n// @dev Library for pricing functions\nlibrary SwapPricingUtils {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    // @dev GetPriceImpactUsdParams struct used in getPriceImpactUsd to\n    // avoid stack too deep errors\n    // @param dataStore DataStore\n    // @param market the market to check\n    // @param tokenA the token to check balance for\n    // @param tokenB the token to check balance for\n    // @param priceForTokenA the price for tokenA\n    // @param priceForTokenB the price for tokenB\n    // @param usdDeltaForTokenA the USD change in amount of tokenA\n    // @param usdDeltaForTokenB the USD change in amount of tokenB\n    struct GetPriceImpactUsdParams {\n        DataStore dataStore;\n        Market.Props market;\n        address tokenA;\n        address tokenB;\n        uint256 priceForTokenA;\n        uint256 priceForTokenB;\n        int256 usdDeltaForTokenA;\n        int256 usdDeltaForTokenB;\n        bool includeVirtualInventoryImpact;\n    }\n\n    struct EmitSwapInfoParams {\n        bytes32 orderKey;\n        address market;\n        address receiver;\n        address tokenIn;\n        address tokenOut;\n        uint256 tokenInPrice;\n        uint256 tokenOutPrice;\n        uint256 amountIn;\n        uint256 amountInAfterFees;\n        uint256 amountOut;\n        int256 priceImpactUsd;\n        int256 priceImpactAmount;\n        int256 tokenInPriceImpactAmount;\n    }\n\n    // @dev PoolParams struct to contain pool values\n    // @param poolUsdForTokenA the USD value of tokenA in the pool\n    // @param poolUsdForTokenB the USD value of tokenB in the pool\n    // @param nextPoolUsdForTokenA the next USD value of tokenA in the pool\n    // @param nextPoolUsdForTokenB the next USD value of tokenB in the pool\n    struct PoolParams {\n        uint256 poolUsdForTokenA;\n        uint256 poolUsdForTokenB;\n        uint256 nextPoolUsdForTokenA;\n        uint256 nextPoolUsdForTokenB;\n    }\n\n    // @dev SwapFees struct to contain swap fee values\n    // @param feeReceiverAmount the fee amount for the fee receiver\n    // @param feeAmountForPool the fee amount for the pool\n    // @param amountAfterFees the output amount after fees\n    struct SwapFees {\n        uint256 feeReceiverAmount;\n        uint256 feeAmountForPool;\n        uint256 amountAfterFees;\n\n        address uiFeeReceiver;\n        uint256 uiFeeReceiverFactor;\n        uint256 uiFeeAmount;\n    }\n\n    // @dev get the price impact in USD\n    //\n    // note that there will be some difference between the pool amounts used for\n    // calculating the price impact and fees vs the actual pool amounts after the\n    // swap is done, since the pool amounts will be increased / decreased by an amount\n    // after factoring in the calculated price impact and fees\n    //\n    // since the calculations are based on the real-time prices values of the tokens\n    // if a token price increases, the pool will incentivise swapping out more of that token\n    // this is useful if prices are ranging, if prices are strongly directional, the pool may\n    // be selling tokens as the token price increases\n    //\n    // @param params GetPriceImpactUsdParams\n    //\n    // @return the price impact in USD\n    function getPriceImpactUsd(GetPriceImpactUsdParams memory params) external view returns (int256) {\n        PoolParams memory poolParams = getNextPoolAmountsUsd(params);\n\n        int256 priceImpactUsd = _getPriceImpactUsd(params.dataStore, params.market, poolParams);\n\n        // the virtual price impact calculation is skipped if the price impact\n        // is positive since the action is helping to balance the pool\n        //\n        // in case two virtual pools are unbalanced in a different direction\n        // e.g. pool0 has more WNT than USDC while pool1 has less WNT\n        // than USDT\n        // not skipping the virtual price impact calculation would lead to\n        // a negative price impact for any trade on either pools and would\n        // disincentivise the balancing of pools\n        if (priceImpactUsd >= 0) { return priceImpactUsd; }\n\n        if (!params.includeVirtualInventoryImpact) {\n            return priceImpactUsd;\n        }\n\n        // note that the virtual pool for the long token / short token may be different across pools\n        // e.g. ETH/USDC, ETH/USDT would have USDC and USDT as the short tokens\n        // the short token amount is multiplied by the price of the token in the current pool, e.g. if the swap\n        // is for the ETH/USDC pool, the combined USDC and USDT short token amounts is multiplied by the price of\n        // USDC to calculate the price impact, this should be reasonable most of the time unless there is a\n        // large depeg of one of the tokens, in which case it may be necessary to remove that market from being a virtual\n        // market, removal of virtual markets may lead to incorrect virtual token accounting, the feature to correct for\n        // this can be added if needed\n        (bool hasVirtualInventory, uint256 virtualPoolAmountForLongToken, uint256 virtualPoolAmountForShortToken) = MarketUtils.getVirtualInventoryForSwaps(\n            params.dataStore,\n            params.market.marketToken\n        );\n\n        if (!hasVirtualInventory) {\n            return priceImpactUsd;\n        }\n\n        uint256 virtualPoolAmountForTokenA;\n        uint256 virtualPoolAmountForTokenB;\n\n        if (params.tokenA == params.market.longToken) {\n            virtualPoolAmountForTokenA = virtualPoolAmountForLongToken;\n            virtualPoolAmountForTokenB = virtualPoolAmountForShortToken;\n        } else {\n            virtualPoolAmountForTokenA = virtualPoolAmountForShortToken;\n            virtualPoolAmountForTokenB = virtualPoolAmountForLongToken;\n        }\n\n        PoolParams memory poolParamsForVirtualInventory = getNextPoolAmountsParams(\n            params,\n            virtualPoolAmountForTokenA,\n            virtualPoolAmountForTokenB\n        );\n\n        int256 priceImpactUsdForVirtualInventory = _getPriceImpactUsd(params.dataStore, params.market, poolParamsForVirtualInventory);\n\n        return priceImpactUsdForVirtualInventory < priceImpactUsd ? priceImpactUsdForVirtualInventory : priceImpactUsd;\n    }\n\n    // @dev get the price impact in USD\n    // @param dataStore DataStore\n    // @param market the trading market\n    // @param poolParams PoolParams\n    // @return the price impact in USD\n    function _getPriceImpactUsd(DataStore dataStore, Market.Props memory market, PoolParams memory poolParams) internal view returns (int256) {\n        uint256 initialDiffUsd = Calc.diff(poolParams.poolUsdForTokenA, poolParams.poolUsdForTokenB);\n        uint256 nextDiffUsd = Calc.diff(poolParams.nextPoolUsdForTokenA, poolParams.nextPoolUsdForTokenB);\n\n        // check whether an improvement in balance comes from causing the balance to switch sides\n        // for example, if there is $2000 of ETH and $1000 of USDC in the pool\n        // adding $1999 USDC into the pool will reduce absolute balance from $1000 to $999 but it does not\n        // help rebalance the pool much, the isSameSideRebalance value helps avoid gaming using this case\n        bool isSameSideRebalance = (poolParams.poolUsdForTokenA <= poolParams.poolUsdForTokenB) == (poolParams.nextPoolUsdForTokenA <= poolParams.nextPoolUsdForTokenB);\n        uint256 impactExponentFactor = dataStore.getUint(Keys.swapImpactExponentFactorKey(market.marketToken));\n\n        if (isSameSideRebalance) {\n            bool hasPositiveImpact = nextDiffUsd < initialDiffUsd;\n            uint256 impactFactor = MarketUtils.getAdjustedSwapImpactFactor(dataStore, market.marketToken, hasPositiveImpact);\n\n            return PricingUtils.getPriceImpactUsdForSameSideRebalance(\n                initialDiffUsd,\n                nextDiffUsd,\n                impactFactor,\n                impactExponentFactor\n            );\n        } else {\n            (uint256 positiveImpactFactor, uint256 negativeImpactFactor) = MarketUtils.getAdjustedSwapImpactFactors(dataStore, market.marketToken);\n\n            return PricingUtils.getPriceImpactUsdForCrossoverRebalance(\n                initialDiffUsd,\n                nextDiffUsd,\n                positiveImpactFactor,\n                negativeImpactFactor,\n                impactExponentFactor\n            );\n        }\n    }\n\n    // @dev get the next pool amounts in USD\n    // @param params GetPriceImpactUsdParams\n    // @return PoolParams\n    function getNextPoolAmountsUsd(\n        GetPriceImpactUsdParams memory params\n    ) internal view returns (PoolParams memory) {\n        uint256 poolAmountForTokenA = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenA);\n        uint256 poolAmountForTokenB = MarketUtils.getPoolAmount(params.dataStore, params.market, params.tokenB);\n\n        return getNextPoolAmountsParams(\n            params,\n            poolAmountForTokenA,\n            poolAmountForTokenB\n        );\n    }\n\n    function getNextPoolAmountsParams(\n        GetPriceImpactUsdParams memory params,\n        uint256 poolAmountForTokenA,\n        uint256 poolAmountForTokenB\n    ) internal pure returns (PoolParams memory) {\n        uint256 poolUsdForTokenA = poolAmountForTokenA * params.priceForTokenA;\n        uint256 poolUsdForTokenB = poolAmountForTokenB * params.priceForTokenB;\n\n        if (params.usdDeltaForTokenA < 0 && (-params.usdDeltaForTokenA).toUint256() > poolUsdForTokenA) {\n            revert Errors.UsdDeltaExceedsPoolValue(params.usdDeltaForTokenA, poolUsdForTokenA);\n        }\n\n        if (params.usdDeltaForTokenB < 0 && (-params.usdDeltaForTokenB).toUint256() > poolUsdForTokenB) {\n            revert Errors.UsdDeltaExceedsPoolValue(params.usdDeltaForTokenB, poolUsdForTokenB);\n        }\n\n        uint256 nextPoolUsdForTokenA = Calc.sumReturnUint256(poolUsdForTokenA, params.usdDeltaForTokenA);\n        uint256 nextPoolUsdForTokenB = Calc.sumReturnUint256(poolUsdForTokenB, params.usdDeltaForTokenB);\n\n        PoolParams memory poolParams = PoolParams(\n            poolUsdForTokenA,\n            poolUsdForTokenB,\n            nextPoolUsdForTokenA,\n            nextPoolUsdForTokenB\n        );\n\n        return poolParams;\n    }\n\n    // @dev get the swap fees\n    // @param dataStore DataStore\n    // @param marketToken the address of the market token\n    // @param amount the total swap fee amount\n    function getSwapFees(\n        DataStore dataStore,\n        address marketToken,\n        uint256 amount,\n        bool forPositiveImpact,\n        address uiFeeReceiver,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) internal view returns (SwapFees memory) {\n        SwapFees memory fees;\n\n        // note that since it is possible to incur both positive and negative price impact values\n        // and the negative price impact factor may be larger than the positive impact factor\n        // it is possible for the balance to be improved overall but for the price impact to still be negative\n        // in this case the fee factor for the negative price impact would be charged\n        // a user could split the order into two, to incur a smaller fee, reducing the fee through this should not be a large issue\n        uint256 feeFactor;\n\n        if (swapPricingType == ISwapPricingUtils.SwapPricingType.Swap) {\n            feeFactor = dataStore.getUint(Keys.swapFeeFactorKey(marketToken, forPositiveImpact));\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.Shift) {\n            // empty branch as feeFactor is already zero\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.AtomicSwap) {\n            feeFactor = dataStore.getUint(Keys.atomicSwapFeeFactorKey(marketToken));\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.Deposit) {\n            feeFactor = dataStore.getUint(Keys.depositFeeFactorKey(marketToken, forPositiveImpact));\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.Withdrawal) {\n            feeFactor = dataStore.getUint(Keys.withdrawalFeeFactorKey(marketToken, forPositiveImpact));\n        } else if (swapPricingType == ISwapPricingUtils.SwapPricingType.AtomicWithdrawal) {\n            feeFactor = dataStore.getUint(Keys.atomicWithdrawalFeeFactorKey(marketToken));\n        }\n\n        uint256 swapFeeReceiverFactor = dataStore.getUint(Keys.SWAP_FEE_RECEIVER_FACTOR);\n\n        uint256 feeAmount = Precision.applyFactor(amount, feeFactor);\n\n        fees.feeReceiverAmount = Precision.applyFactor(feeAmount, swapFeeReceiverFactor);\n        fees.feeAmountForPool = feeAmount - fees.feeReceiverAmount;\n\n        fees.uiFeeReceiver = uiFeeReceiver;\n        fees.uiFeeReceiverFactor = MarketUtils.getUiFeeFactor(dataStore, uiFeeReceiver);\n        fees.uiFeeAmount = Precision.applyFactor(amount, fees.uiFeeReceiverFactor);\n\n        fees.amountAfterFees = amount - feeAmount - fees.uiFeeAmount;\n\n        return fees;\n    }\n\n    // note that the priceImpactUsd may not be entirely accurate since it is the\n    // base calculation and the actual price impact may be capped by the available\n    // amount in the swap impact pool\n    function emitSwapInfo(\n        EventEmitter eventEmitter,\n        EmitSwapInfoParams memory params\n    ) internal {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        // orderKey is zero bytes32 for Gelato Relay fee swaps\n        eventData.bytes32Items.setItem(0, \"orderKey\", params.orderKey);\n\n        eventData.addressItems.initItems(4);\n        eventData.addressItems.setItem(0, \"market\", params.market);\n        eventData.addressItems.setItem(1, \"receiver\", params.receiver);\n        eventData.addressItems.setItem(2, \"tokenIn\", params.tokenIn);\n        eventData.addressItems.setItem(3, \"tokenOut\", params.tokenOut);\n\n        eventData.uintItems.initItems(5);\n        eventData.uintItems.setItem(0, \"tokenInPrice\", params.tokenInPrice);\n        eventData.uintItems.setItem(1, \"tokenOutPrice\", params.tokenOutPrice);\n        eventData.uintItems.setItem(2, \"amountIn\", params.amountIn);\n        // note that amountInAfterFees includes negative price impact\n        eventData.uintItems.setItem(3, \"amountInAfterFees\", params.amountInAfterFees);\n        eventData.uintItems.setItem(4, \"amountOut\", params.amountOut);\n\n        eventData.intItems.initItems(3);\n        eventData.intItems.setItem(0, \"priceImpactUsd\", params.priceImpactUsd);\n        eventData.intItems.setItem(1, \"priceImpactAmount\", params.priceImpactAmount);\n        eventData.intItems.setItem(2, \"tokenInPriceImpactAmount\", params.tokenInPriceImpactAmount);\n\n        eventEmitter.emitEventLog1(\n            \"SwapInfo\",\n            Cast.toBytes32(params.market),\n            eventData\n        );\n    }\n\n    function emitSwapFeesCollected(\n        EventEmitter eventEmitter,\n        bytes32 tradeKey,\n        address market,\n        address token,\n        uint256 tokenPrice,\n        bytes32 swapFeeType,\n        SwapFees memory fees\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(2);\n        eventData.bytes32Items.setItem(0, \"tradeKey\", tradeKey);\n        eventData.bytes32Items.setItem(1, \"swapFeeType\", swapFeeType);\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"uiFeeReceiver\", fees.uiFeeReceiver);\n        eventData.addressItems.setItem(1, \"market\", market);\n        eventData.addressItems.setItem(2, \"token\", token);\n\n        eventData.uintItems.initItems(6);\n        eventData.uintItems.setItem(0, \"tokenPrice\", tokenPrice);\n        eventData.uintItems.setItem(1, \"feeReceiverAmount\", fees.feeReceiverAmount);\n        eventData.uintItems.setItem(2, \"feeAmountForPool\", fees.feeAmountForPool);\n        eventData.uintItems.setItem(3, \"amountAfterFees\", fees.amountAfterFees);\n        eventData.uintItems.setItem(4, \"uiFeeReceiverFactor\", fees.uiFeeReceiverFactor);\n        eventData.uintItems.setItem(5, \"uiFeeAmount\", fees.uiFeeAmount);\n\n        eventEmitter.emitEventLog1(\n            \"SwapFeesCollected\",\n            Cast.toBytes32(market),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/reader/GlvReader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../position/Position.sol\";\n\nimport \"../market/Market.sol\";\nimport \"../price/Price.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../market/Market.sol\";\n\nimport \"../glv/GlvUtils.sol\";\nimport \"../glv/GlvStoreUtils.sol\";\nimport \"../glv/glvDeposit/GlvDepositStoreUtils.sol\";\nimport \"../glv/glvWithdrawal/GlvWithdrawalStoreUtils.sol\";\nimport \"../glv/glvShift/GlvShiftStoreUtils.sol\";\n\n// @title GlvReader\ncontract GlvReader {\n    function getGlvValue(\n        DataStore dataStore,\n        address[] memory marketAddresses,\n        Price.Props[] memory indexTokenPrices,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        address glv,\n        bool maximize\n    ) external view returns (uint256) {\n        return\n            GlvUtils.getGlvValue(\n                dataStore,\n                marketAddresses,\n                indexTokenPrices,\n                longTokenPrice,\n                shortTokenPrice,\n                glv,\n                maximize\n            );\n    }\n\n    function getGlvTokenPrice(\n        DataStore dataStore,\n        address[] memory marketAddresses,\n        Price.Props[] memory indexTokenPrices,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        address glv,\n        bool maximize\n    ) external view returns (uint256, uint256, uint256) {\n        return\n            GlvUtils.getGlvTokenPrice(\n                dataStore,\n                marketAddresses,\n                indexTokenPrices,\n                longTokenPrice,\n                shortTokenPrice,\n                glv,\n                maximize\n            );\n    }\n\n    function getGlv(DataStore dataStore, address glv) external view returns (Glv.Props memory) {\n        return GlvStoreUtils.get(dataStore, glv);\n    }\n\n    struct GlvInfo {\n        Glv.Props glv;\n        address[] markets;\n    }\n\n    function getGlvInfo(DataStore dataStore, address glv) public view returns (GlvInfo memory) {\n        bytes32 key = Keys.glvSupportedMarketListKey(glv);\n        uint256 count = dataStore.getAddressCount(key);\n        address[] memory markets = dataStore.getAddressValuesAt(key, 0, count);\n        return GlvInfo({glv: GlvStoreUtils.get(dataStore, glv), markets: markets});\n    }\n\n    function getGlvBySalt(DataStore dataStore, bytes32 salt) external view returns (Glv.Props memory) {\n        return GlvStoreUtils.getBySalt(dataStore, salt);\n    }\n\n    function getGlvs(DataStore dataStore, uint256 start, uint256 end) external view returns (Glv.Props[] memory) {\n        uint256 glvCount = GlvStoreUtils.getGlvCount(dataStore);\n        if (end > glvCount) {\n            end = glvCount;\n        }\n        address[] memory glvKeys = GlvStoreUtils.getGlvKeys(dataStore, start, end);\n        Glv.Props[] memory glvs = new Glv.Props[](glvKeys.length);\n        for (uint256 i; i < glvKeys.length; i++) {\n            address glvKey = glvKeys[i];\n            Glv.Props memory glv = GlvStoreUtils.get(dataStore, glvKey);\n            glvs[i] = glv;\n        }\n\n        return glvs;\n    }\n\n    function getGlvInfoList(DataStore dataStore, uint256 start, uint256 end) external view returns (GlvInfo[] memory) {\n        uint256 glvCount = GlvStoreUtils.getGlvCount(dataStore);\n        if (end > glvCount) {\n            end = glvCount;\n        }\n        address[] memory glvKeys = GlvStoreUtils.getGlvKeys(dataStore, start, end);\n        GlvInfo[] memory glvInfoLists = new GlvInfo[](glvKeys.length);\n        for (uint256 i; i < glvKeys.length; i++) {\n            address glvKey = glvKeys[i];\n            glvInfoLists[i] = getGlvInfo(dataStore, glvKey);\n        }\n\n        return glvInfoLists;\n    }\n\n    function getGlvDeposit(DataStore dataStore, bytes32 key) external view returns (GlvDeposit.Props memory) {\n        return GlvDepositStoreUtils.get(dataStore, key);\n    }\n\n    function getGlvDeposits(\n        DataStore dataStore,\n        uint256 start,\n        uint256 end\n    ) external view returns (GlvDeposit.Props[] memory) {\n        bytes32[] memory glvDepositKeys = GlvDepositStoreUtils.getGlvDepositKeys(dataStore, start, end);\n        GlvDeposit.Props[] memory glvDeposits = new GlvDeposit.Props[](glvDepositKeys.length);\n        for (uint256 i; i < glvDepositKeys.length; i++) {\n            bytes32 glvDepositKey = glvDepositKeys[i];\n            GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(dataStore, glvDepositKey);\n            glvDeposits[i] = glvDeposit;\n        }\n\n        return glvDeposits;\n    }\n\n    function getAccountGlvDeposits(\n        DataStore dataStore,\n        address account,\n        uint256 start,\n        uint256 end\n    ) external view returns (GlvDeposit.Props[] memory) {\n        bytes32[] memory glvDepositKeys = GlvDepositStoreUtils.getAccountGlvDepositKeys(dataStore, account, start, end);\n        GlvDeposit.Props[] memory glvDeposits = new GlvDeposit.Props[](glvDepositKeys.length);\n        for (uint256 i; i < glvDepositKeys.length; i++) {\n            bytes32 glvDepositKey = glvDepositKeys[i];\n            GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(dataStore, glvDepositKey);\n            glvDeposits[i] = glvDeposit;\n        }\n\n        return glvDeposits;\n    }\n\n    function getGlvWithdrawal(DataStore dataStore, bytes32 key) external view returns (GlvWithdrawal.Props memory) {\n        return GlvWithdrawalStoreUtils.get(dataStore, key);\n    }\n\n    function getGlvWithdrawals(\n        DataStore dataStore,\n        uint256 start,\n        uint256 end\n    ) external view returns (GlvWithdrawal.Props[] memory) {\n        bytes32[] memory glvWithdrawalKeys = GlvWithdrawalStoreUtils.getGlvWithdrawalKeys(dataStore, start, end);\n        GlvWithdrawal.Props[] memory glvWithdrawals = new GlvWithdrawal.Props[](glvWithdrawalKeys.length);\n        for (uint256 i; i < glvWithdrawalKeys.length; i++) {\n            bytes32 glvWithdrawalKey = glvWithdrawalKeys[i];\n            GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(dataStore, glvWithdrawalKey);\n            glvWithdrawals[i] = glvWithdrawal;\n        }\n\n        return glvWithdrawals;\n    }\n\n    function getAccountGlvWithdrawals(\n        DataStore dataStore,\n        address account,\n        uint256 start,\n        uint256 end\n    ) external view returns (GlvWithdrawal.Props[] memory) {\n        bytes32[] memory glvWithdrawalKeys = GlvWithdrawalStoreUtils.getAccountGlvWithdrawalKeys(\n            dataStore,\n            account,\n            start,\n            end\n        );\n        GlvWithdrawal.Props[] memory glvWithdrawals = new GlvWithdrawal.Props[](glvWithdrawalKeys.length);\n        for (uint256 i; i < glvWithdrawalKeys.length; i++) {\n            bytes32 glvWithdrawalKey = glvWithdrawalKeys[i];\n            GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(dataStore, glvWithdrawalKey);\n            glvWithdrawals[i] = glvWithdrawal;\n        }\n\n        return glvWithdrawals;\n    }\n\n    function getGlvShift(DataStore dataStore, bytes32 key) external view returns (GlvShift.Props memory) {\n        return GlvShiftStoreUtils.get(dataStore, key);\n    }\n\n    function getGlvShifts(\n        DataStore dataStore,\n        uint256 start,\n        uint256 end\n    ) external view returns (GlvShift.Props[] memory) {\n        bytes32[] memory glvShiftKeys = GlvShiftStoreUtils.getGlvShiftKeys(dataStore, start, end);\n        GlvShift.Props[] memory glvShifts = new GlvShift.Props[](glvShiftKeys.length);\n        for (uint256 i; i < glvShiftKeys.length; i++) {\n            bytes32 glvShiftKey = glvShiftKeys[i];\n            GlvShift.Props memory glvShift = GlvShiftStoreUtils.get(dataStore, glvShiftKey);\n            glvShifts[i] = glvShift;\n        }\n\n        return glvShifts;\n    }\n}\n"
    },
    "contracts/reader/KeeperReader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../position/Position.sol\";\nimport \"../position/PositionStoreUtils.sol\";\n\nimport \"../order/OrderStoreUtils.sol\";\n\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\n\nimport \"../referral/IReferralStorage.sol\";\n\n// @title KeeperReader\n// @dev Library for read functions\ncontract KeeperReader {\n    function getOrders(DataStore dataStore, uint256 start, uint256 end) external view returns (Order.Props[] memory) {\n        bytes32[] memory orderKeys = OrderStoreUtils.getOrderKeys(dataStore, start, end);\n        Order.Props[] memory orders = new Order.Props[](orderKeys.length);\n        for (uint256 i; i < orderKeys.length; i++) {\n            bytes32 orderKey = orderKeys[i];\n            orders[i] = OrderStoreUtils.get(dataStore, orderKey);\n        }\n        return orders;\n    }\n\n    function getLiquidatablePositions(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        MarketUtils.MarketPrices[] memory marketPrices,\n        uint256 start,\n        uint256 end,\n        bool shouldValidateMinCollateralUsd\n    ) external view returns (bytes32[] memory) {\n\n    }\n\n    // bytes32[] memory positionKeys = PositionStoreUtils.getAccountPositionKeys(dataStore, account, start, end);\n    // Position.Props[] memory positions = new Position.Props[](positionKeys.length);\n    // for (uint256 i; i < positionKeys.length; i++) {\n    //     bytes32 positionKey = positionKeys[i];\n    //     positions[i] = PositionStoreUtils.get(dataStore, positionKey);\n    // }\n\n    // return positions;\n}\n"
    },
    "contracts/reader/Reader.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../market/MarketStoreUtils.sol\";\n\nimport \"../deposit/DepositStoreUtils.sol\";\nimport \"../withdrawal/WithdrawalStoreUtils.sol\";\nimport \"../shift/ShiftStoreUtils.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../position/PositionUtils.sol\";\nimport \"../position/PositionStoreUtils.sol\";\n\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\n\nimport \"./ReaderUtils.sol\";\nimport \"./ReaderDepositUtils.sol\";\nimport \"./ReaderWithdrawalUtils.sol\";\nimport \"./ReaderPositionUtils.sol\";\n\n// @title Reader\n// @dev Library for read functions\ncontract Reader {\n    using SafeCast for uint256;\n    using Position for Position.Props;\n\n    function getMarket(DataStore dataStore, address key) external view returns (Market.Props memory) {\n        return MarketStoreUtils.get(dataStore, key);\n    }\n\n    function getMarketBySalt(DataStore dataStore, bytes32 salt) external view returns (Market.Props memory) {\n        return MarketStoreUtils.getBySalt(dataStore, salt);\n    }\n\n    function getDeposit(DataStore dataStore, bytes32 key) external view returns (Deposit.Props memory) {\n        return DepositStoreUtils.get(dataStore, key);\n    }\n\n    function getWithdrawal(DataStore dataStore, bytes32 key) external view returns (Withdrawal.Props memory) {\n        return WithdrawalStoreUtils.get(dataStore, key);\n    }\n\n    function getShift(DataStore dataStore, bytes32 key) external view returns (Shift.Props memory) {\n        return ShiftStoreUtils.get(dataStore, key);\n    }\n\n    function getPosition(DataStore dataStore, bytes32 key) external view returns (Position.Props memory) {\n        return PositionStoreUtils.get(dataStore, key);\n    }\n\n    function getOrder(DataStore dataStore, bytes32 key) external view returns (Order.Props memory) {\n        return ReaderUtils.getOrder(dataStore, key);\n    }\n\n    function getPositionPnlUsd(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        bytes32 positionKey,\n        uint256 sizeDeltaUsd\n    ) external view returns (int256, int256, uint256) {\n        Position.Props memory position = PositionStoreUtils.get(dataStore, positionKey);\n\n        return PositionUtils.getPositionPnlUsd(dataStore, market, prices, position, sizeDeltaUsd);\n    }\n\n    function getAccountPositions(\n        DataStore dataStore,\n        address account,\n        uint256 start,\n        uint256 end\n    ) external view returns (Position.Props[] memory) {\n        return ReaderPositionUtils.getAccountPositions(dataStore, account, start, end);\n    }\n\n    function getPositionInfo(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        bytes32 positionKey,\n        MarketUtils.MarketPrices memory prices,\n        uint256 sizeDeltaUsd,\n        address uiFeeReceiver,\n        bool usePositionSizeAsSizeDeltaUsd\n    ) public view returns (ReaderPositionUtils.PositionInfo memory) {\n        return\n            ReaderPositionUtils.getPositionInfo(\n                dataStore,\n                referralStorage,\n                positionKey,\n                prices,\n                sizeDeltaUsd,\n                uiFeeReceiver,\n                usePositionSizeAsSizeDeltaUsd\n            );\n    }\n\n    function getPositionInfoList(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        bytes32[] memory positionKeys,\n        MarketUtils.MarketPrices[] memory prices,\n        address uiFeeReceiver\n    ) external view returns (ReaderPositionUtils.PositionInfo[] memory) {\n        return\n            ReaderPositionUtils.getPositionInfoList(\n                dataStore,\n                referralStorage,\n                positionKeys,\n                prices,\n                uiFeeReceiver\n            );\n    }\n\n    // `markets` and `marketPrices` should contain perp markets only\n    function getAccountPositionInfoList(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        address account,\n        address[] memory markets,\n        MarketUtils.MarketPrices[] memory marketPrices,\n        address uiFeeReceiver,\n        uint256 start,\n        uint256 end\n    ) external view returns (ReaderPositionUtils.PositionInfo[] memory) {\n        return\n            ReaderPositionUtils.getAccountPositionInfoList(\n                dataStore,\n                referralStorage,\n                account,\n                markets,\n                marketPrices,\n                uiFeeReceiver,\n                start,\n                end\n            );\n    }\n\n    function isPositionLiquidatable(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        bytes32 positionKey,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        bool shouldValidateMinCollateralUsd\n    ) public view returns (bool, string memory, PositionUtils.IsPositionLiquidatableInfo memory) {\n        Position.Props memory position = PositionStoreUtils.get(dataStore, positionKey);\n\n        return\n            PositionUtils.isPositionLiquidatable(\n                dataStore,\n                referralStorage,\n                position,\n                market,\n                prices,\n                shouldValidateMinCollateralUsd\n            );\n    }\n\n    function getAccountOrders(\n        DataStore dataStore,\n        address account,\n        uint256 start,\n        uint256 end\n    ) external view returns (Order.Props[] memory) {\n        return ReaderUtils.getAccountOrders(dataStore, account, start, end);\n    }\n\n    function getMarkets(DataStore dataStore, uint256 start, uint256 end) external view returns (Market.Props[] memory) {\n        return ReaderUtils.getMarkets(dataStore, start, end);\n    }\n\n    function getMarketInfoList(\n        DataStore dataStore,\n        MarketUtils.MarketPrices[] memory marketPricesList,\n        uint256 start,\n        uint256 end\n    ) external view returns (ReaderUtils.MarketInfo[] memory) {\n        return ReaderUtils.getMarketInfoList(dataStore, marketPricesList, start, end);\n    }\n\n    function getMarketInfo(\n        DataStore dataStore,\n        MarketUtils.MarketPrices memory prices,\n        address marketKey\n    ) public view returns (ReaderUtils.MarketInfo memory) {\n        return ReaderUtils.getMarketInfo(dataStore, prices, marketKey);\n    }\n\n    function getMarketTokenPrice(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        Price.Props memory longTokenPrice,\n        Price.Props memory shortTokenPrice,\n        bytes32 pnlFactorType,\n        bool maximize\n    ) external view returns (int256, MarketPoolValueInfo.Props memory) {\n        return\n            MarketUtils.getMarketTokenPrice(\n                dataStore,\n                market,\n                indexTokenPrice,\n                longTokenPrice,\n                shortTokenPrice,\n                pnlFactorType,\n                maximize\n            );\n    }\n\n    function getNetPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        bool maximize\n    ) external view returns (int256) {\n        return MarketUtils.getNetPnl(dataStore, market, indexTokenPrice, maximize);\n    }\n\n    function getPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        bool isLong,\n        bool maximize\n    ) external view returns (int256) {\n        return MarketUtils.getPnl(dataStore, market, indexTokenPrice, isLong, maximize);\n    }\n\n    function getOpenInterestWithPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        bool isLong,\n        bool maximize\n    ) external view returns (int256) {\n        return MarketUtils.getOpenInterestWithPnl(dataStore, market, indexTokenPrice, isLong, maximize);\n    }\n\n    function getPnlToPoolFactor(\n        DataStore dataStore,\n        address marketAddress,\n        MarketUtils.MarketPrices memory prices,\n        bool isLong,\n        bool maximize\n    ) external view returns (int256) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketAddress);\n        return MarketUtils.getPnlToPoolFactor(dataStore, market, prices, isLong, maximize);\n    }\n\n    function getSwapAmountOut(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        address tokenIn,\n        uint256 amountIn,\n        address uiFeeReceiver\n    ) external view returns (uint256, int256, SwapPricingUtils.SwapFees memory fees) {\n        return ReaderPricingUtils.getSwapAmountOut(dataStore, market, prices, tokenIn, amountIn, uiFeeReceiver);\n    }\n\n    function getExecutionPrice(\n        DataStore dataStore,\n        address marketKey,\n        Price.Props memory indexTokenPrice,\n        uint256 positionSizeInUsd,\n        uint256 positionSizeInTokens,\n        int256 sizeDeltaUsd,\n        bool isLong\n    ) external view returns (ReaderPricingUtils.ExecutionPriceResult memory) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketKey);\n        return\n            ReaderPricingUtils.getExecutionPrice(\n                dataStore,\n                market,\n                indexTokenPrice,\n                positionSizeInUsd,\n                positionSizeInTokens,\n                sizeDeltaUsd,\n                isLong\n            );\n    }\n\n    function getSwapPriceImpact(\n        DataStore dataStore,\n        address marketKey,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        Price.Props memory tokenInPrice,\n        Price.Props memory tokenOutPrice\n    ) external view returns (int256, int256, int256) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketKey);\n        return\n            ReaderPricingUtils.getSwapPriceImpact(\n                dataStore,\n                market,\n                tokenIn,\n                tokenOut,\n                amountIn,\n                tokenInPrice,\n                tokenOutPrice\n            );\n    }\n\n    function getAdlState(\n        DataStore dataStore,\n        address market,\n        bool isLong,\n        MarketUtils.MarketPrices memory prices\n    ) external view returns (uint256, bool, int256, uint256) {\n        return ReaderUtils.getAdlState(dataStore, market, isLong, prices);\n    }\n\n    function getDepositAmountOut(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        uint256 longTokenAmount,\n        uint256 shortTokenAmount,\n        address uiFeeReceiver,\n        ISwapPricingUtils.SwapPricingType swapPricingType,\n        bool includeVirtualInventoryImpact\n    ) external view returns (uint256) {\n        return\n            ReaderDepositUtils.getDepositAmountOut(\n                dataStore,\n                market,\n                prices,\n                longTokenAmount,\n                shortTokenAmount,\n                uiFeeReceiver,\n                swapPricingType,\n                includeVirtualInventoryImpact\n            );\n    }\n\n    function getWithdrawalAmountOut(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        uint256 marketTokenAmount,\n        address uiFeeReceiver,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external view returns (uint256, uint256) {\n        return\n            ReaderWithdrawalUtils.getWithdrawalAmountOut(\n                dataStore,\n                market,\n                prices,\n                marketTokenAmount,\n                uiFeeReceiver,\n                swapPricingType\n            );\n    }\n}\n"
    },
    "contracts/reader/ReaderDepositUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nimport \"../data/Keys.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\n\nimport \"../pricing/ISwapPricingUtils.sol\";\nimport \"../pricing/SwapPricingUtils.sol\";\n\nlibrary ReaderDepositUtils {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Price for Price.Props;\n    using Position for Position.Props;\n    using Order for Order.Props;\n\n    struct GetDepositAmountOutForSingleTokenParams {\n        DataStore dataStore;\n        Market.Props market;\n        MarketUtils.MarketPrices prices;\n        address tokenIn;\n        Price.Props tokenInPrice;\n        address tokenOut;\n        Price.Props tokenOutPrice;\n        uint256 amount;\n        int256 priceImpactUsd;\n        address uiFeeReceiver;\n        ISwapPricingUtils.SwapPricingType swapPricingType;\n    }\n\n    function getDepositAmountOut(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        uint256 longTokenAmount,\n        uint256 shortTokenAmount,\n        address uiFeeReceiver,\n        ISwapPricingUtils.SwapPricingType swapPricingType,\n        bool includeVirtualInventoryImpact\n    ) external view returns (uint256) {\n        uint256 longTokenUsd = longTokenAmount * prices.longTokenPrice.midPrice();\n        uint256 shortTokenUsd = shortTokenAmount * prices.shortTokenPrice.midPrice();\n        int256 priceImpactUsd = SwapPricingUtils.getPriceImpactUsd(\n            SwapPricingUtils.GetPriceImpactUsdParams(\n                dataStore,\n                market,\n                market.longToken,\n                market.shortToken,\n                prices.longTokenPrice.midPrice(),\n                prices.shortTokenPrice.midPrice(),\n                longTokenUsd.toInt256(),\n                shortTokenUsd.toInt256(),\n                includeVirtualInventoryImpact\n            )\n        );\n\n        uint256 mintAmount;\n\n        mintAmount += getDepositAmountOutForSingleToken(\n            GetDepositAmountOutForSingleTokenParams(\n                dataStore,\n                market,\n                prices,\n                market.longToken,\n                prices.longTokenPrice,\n                market.shortToken,\n                prices.shortTokenPrice,\n                longTokenAmount,\n                Precision.mulDiv(priceImpactUsd, longTokenUsd, longTokenUsd + shortTokenUsd),\n                uiFeeReceiver,\n                swapPricingType\n            )\n        );\n\n        mintAmount += getDepositAmountOutForSingleToken(\n            GetDepositAmountOutForSingleTokenParams(\n                dataStore,\n                market,\n                prices,\n                market.shortToken,\n                prices.shortTokenPrice,\n                market.longToken,\n                prices.longTokenPrice,\n                shortTokenAmount,\n                Precision.mulDiv(priceImpactUsd, shortTokenUsd, longTokenUsd + shortTokenUsd),\n                uiFeeReceiver,\n                swapPricingType\n            )\n        );\n\n        return mintAmount;\n    }\n\n    function getDepositAmountOutForSingleToken(\n        GetDepositAmountOutForSingleTokenParams memory params\n    ) public view returns (uint256) {\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\n            params.dataStore,\n            params.market.marketToken,\n            params.amount,\n            params.priceImpactUsd > 0, // forPositiveImpact\n            params.uiFeeReceiver, // uiFeeReceiver\n            params.swapPricingType\n        );\n\n        uint256 mintAmount;\n        uint256 amountIn = fees.amountAfterFees;\n\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            params.market,\n            params.prices.indexTokenPrice,\n            params.prices.longTokenPrice,\n            params.prices.shortTokenPrice,\n            Keys.MAX_PNL_FACTOR_FOR_DEPOSITS,\n            true\n        );\n\n        if (poolValueInfo.poolValue < 0) {\n            revert Errors.InvalidPoolValueForDeposit(poolValueInfo.poolValue);\n        }\n\n        uint256 poolValue = poolValueInfo.poolValue.toUint256();\n\n        uint256 marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(params.market.marketToken)));\n\n        if (poolValueInfo.poolValue == 0 && marketTokensSupply > 0) {\n            revert Errors.InvalidPoolValueForDeposit(poolValueInfo.poolValue);\n        }\n\n        if (params.priceImpactUsd > 0 && marketTokensSupply == 0) {\n            params.priceImpactUsd = 0;\n        }\n\n        if (params.priceImpactUsd > 0) {\n            (int256 positiveImpactAmount, uint256 cappedDiffUsd) = MarketUtils.getSwapImpactAmountWithCap(\n                params.dataStore,\n                params.market.marketToken,\n                params.tokenOut,\n                params.tokenOutPrice,\n                params.priceImpactUsd\n            );\n\n            mintAmount += MarketUtils.usdToMarketTokenAmount(\n                positiveImpactAmount.toUint256() * params.tokenOutPrice.max,\n                poolValue,\n                marketTokensSupply\n            );\n\n            if (cappedDiffUsd != 0) {\n                (int256 tokenInPriceImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.getSwapImpactAmountWithCap(\n                    params.dataStore,\n                    params.market.marketToken,\n                    params.tokenIn,\n                    params.tokenInPrice,\n                    cappedDiffUsd.toInt256()\n                );\n\n                amountIn += tokenInPriceImpactAmount.toUint256();\n            }\n        }\n\n        if (params.priceImpactUsd < 0) {\n            (int256 negativeImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.getSwapImpactAmountWithCap(\n                params.dataStore,\n                params.market.marketToken,\n                params.tokenIn,\n                params.tokenInPrice,\n                params.priceImpactUsd\n            );\n\n            amountIn -= (-negativeImpactAmount).toUint256();\n        }\n\n        mintAmount += MarketUtils.usdToMarketTokenAmount(\n            amountIn * params.tokenInPrice.min,\n            poolValue,\n            marketTokensSupply\n        );\n\n        return mintAmount;\n    }\n}\n"
    },
    "contracts/reader/ReaderPositionUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../market/MarketStoreUtils.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../position/PositionUtils.sol\";\nimport \"../position/PositionStoreUtils.sol\";\n\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\nimport \"./ReaderPricingUtils.sol\";\n\nlibrary ReaderPositionUtils {\n    using Position for Position.Props;\n    using SafeCast for uint256;\n\n    struct PositionInfo {\n        bytes32 positionKey;\n        Position.Props position;\n        PositionPricingUtils.PositionFees fees;\n        ReaderPricingUtils.ExecutionPriceResult executionPriceResult;\n        int256 basePnlUsd;\n        int256 uncappedBasePnlUsd;\n        int256 pnlAfterPriceImpactUsd;\n    }\n\n    struct GetPositionInfoCache {\n        Market.Props market;\n        Price.Props collateralTokenPrice;\n        uint256 pendingBorrowingFeeUsd;\n    }\n\n    function getNextBorrowingFees(\n        DataStore dataStore,\n        Position.Props memory position,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices\n    ) internal view returns (uint256) {\n        return MarketUtils.getNextBorrowingFees(\n            dataStore,\n            position,\n            market,\n            prices\n        );\n    }\n\n    function getBorrowingFees(\n        DataStore dataStore,\n        Price.Props memory collateralTokenPrice,\n        uint256 borrowingFeeUsd\n    ) internal view returns (PositionPricingUtils.PositionBorrowingFees memory) {\n        return PositionPricingUtils.getBorrowingFees(\n            dataStore,\n            collateralTokenPrice,\n            borrowingFeeUsd\n        );\n    }\n\n    function getPositionInfoList(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        bytes32[] memory positionKeys,\n        MarketUtils.MarketPrices[] memory prices,\n        address uiFeeReceiver\n    ) external view returns (ReaderPositionUtils.PositionInfo[] memory) {\n        ReaderPositionUtils.PositionInfo[] memory positionInfoList = new ReaderPositionUtils.PositionInfo[](positionKeys.length);\n        for (uint256 i; i < positionKeys.length; i++) {\n            bytes32 positionKey = positionKeys[i];\n            positionInfoList[i] = getPositionInfo(\n                dataStore,\n                referralStorage,\n                positionKey,\n                prices[i],\n                0, // sizeDeltaUsd\n                uiFeeReceiver,\n                true // usePositionSizeAsSizeDeltaUsd\n            );\n        }\n\n        return positionInfoList;\n    }\n\n    function getAccountPositionInfoList(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        address account,\n        address[] memory markets,\n        MarketUtils.MarketPrices[] memory marketPrices,\n        address uiFeeReceiver,\n        uint256 start,\n        uint256 end\n    ) external view returns (ReaderPositionUtils.PositionInfo[] memory) {\n        bytes32[] memory positionKeys = PositionStoreUtils.getAccountPositionKeys(dataStore, account, start, end);\n        ReaderPositionUtils.PositionInfo[] memory positionInfoList = new ReaderPositionUtils.PositionInfo[](positionKeys.length);\n        for (uint256 i; i < positionKeys.length; i++) {\n            bytes32 positionKey = positionKeys[i];\n            Position.Props memory position = PositionStoreUtils.get(dataStore, positionKey);\n            MarketUtils.MarketPrices memory prices = _getMarketPricesByAddress(markets, marketPrices, position.market());\n            positionInfoList[i] = getPositionInfo(\n                dataStore,\n                referralStorage,\n                position,\n                prices,\n                0, // sizeDeltaUsd\n                uiFeeReceiver,\n                true // usePositionSizeAsSizeDeltaUsd\n            );\n        }\n\n        return positionInfoList;\n    }\n\n    function _getMarketPricesByAddress(\n        address[] memory markets,\n        MarketUtils.MarketPrices[] memory marketPrices,\n        address market\n    ) internal pure returns (MarketUtils.MarketPrices memory) {\n        for (uint256 i = 0; i < markets.length; i++) {\n            address currentMarket = markets[i];\n            if (currentMarket == market) {\n                return marketPrices[i];\n            }\n        }\n\n        revert Errors.EmptyMarketPrice(market);\n    }\n\n    function getNextFundingAmountPerSize(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices\n    ) public view returns (MarketUtils.GetNextFundingAmountPerSizeResult memory) {\n        return MarketUtils.getNextFundingAmountPerSize(\n            dataStore,\n            market,\n            prices\n        );\n    }\n\n    function getAccountPositions(\n        DataStore dataStore,\n        address account,\n        uint256 start,\n        uint256 end\n    ) external view returns (Position.Props[] memory) {\n        bytes32[] memory positionKeys = PositionStoreUtils.getAccountPositionKeys(dataStore, account, start, end);\n        Position.Props[] memory positions = new Position.Props[](positionKeys.length);\n        for (uint256 i; i < positionKeys.length; i++) {\n            bytes32 positionKey = positionKeys[i];\n            positions[i] = PositionStoreUtils.get(dataStore, positionKey);\n        }\n\n        return positions;\n    }\n\n    function getPositionInfo(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        bytes32 positionKey,\n        MarketUtils.MarketPrices memory prices,\n        uint256 sizeDeltaUsd,\n        address uiFeeReceiver,\n        bool usePositionSizeAsSizeDeltaUsd\n    ) public view returns (PositionInfo memory) {\n        Position.Props memory position = PositionStoreUtils.get(dataStore, positionKey);\n        return getPositionInfo(\n            dataStore,\n            referralStorage,\n            position,\n            prices,\n            sizeDeltaUsd,\n            uiFeeReceiver,\n            usePositionSizeAsSizeDeltaUsd\n        );\n    }\n\n    function getPositionInfo(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        Position.Props memory position,\n        MarketUtils.MarketPrices memory prices,\n        uint256 sizeDeltaUsd,\n        address uiFeeReceiver,\n        bool usePositionSizeAsSizeDeltaUsd\n    ) internal view returns (PositionInfo memory) {\n        if (position.account() == address(0)) {\n            revert Errors.EmptyPosition();\n        }\n\n        PositionInfo memory positionInfo;\n        GetPositionInfoCache memory cache;\n\n        positionInfo.position = position;\n        cache.market = MarketStoreUtils.get(dataStore, positionInfo.position.market());\n        cache.collateralTokenPrice = MarketUtils.getCachedTokenPrice(positionInfo.position.collateralToken(), cache.market, prices);\n\n        if (usePositionSizeAsSizeDeltaUsd) {\n            sizeDeltaUsd = positionInfo.position.sizeInUsd();\n        }\n\n        positionInfo.executionPriceResult = ReaderPricingUtils.getExecutionPrice(\n            dataStore,\n            cache.market,\n            prices.indexTokenPrice,\n            positionInfo.position.sizeInUsd(),\n            positionInfo.position.sizeInTokens(),\n            -sizeDeltaUsd.toInt256(),\n            positionInfo.position.isLong()\n        );\n\n        PositionPricingUtils.GetPositionFeesParams memory getPositionFeesParams = PositionPricingUtils.GetPositionFeesParams({\n            dataStore: dataStore,\n            referralStorage: referralStorage,\n            position: positionInfo.position,\n            collateralTokenPrice: cache.collateralTokenPrice,\n            forPositiveImpact: positionInfo.executionPriceResult.priceImpactUsd > 0,\n            longToken: cache.market.longToken,\n            shortToken: cache.market.shortToken,\n            sizeDeltaUsd: sizeDeltaUsd,\n            uiFeeReceiver: uiFeeReceiver,\n            isLiquidation: false\n        });\n\n        positionInfo.fees = PositionPricingUtils.getPositionFees(getPositionFeesParams);\n\n        // borrowing and funding fees need to be overwritten with pending values otherwise they\n        // would be using storage values that have not yet been updated\n        cache.pendingBorrowingFeeUsd = getNextBorrowingFees(dataStore, positionInfo.position, cache.market, prices);\n\n        positionInfo.fees.borrowing = getBorrowingFees(\n            dataStore,\n            cache.collateralTokenPrice,\n            cache.pendingBorrowingFeeUsd\n        );\n\n        MarketUtils.GetNextFundingAmountPerSizeResult memory nextFundingAmountResult = getNextFundingAmountPerSize(dataStore, cache.market, prices);\n\n        positionInfo.fees.funding.latestFundingFeeAmountPerSize = MarketUtils.getFundingFeeAmountPerSize(\n            dataStore,\n            positionInfo.position.market(),\n            positionInfo.position.collateralToken(),\n            positionInfo.position.isLong()\n        );\n\n        positionInfo.fees.funding.latestLongTokenClaimableFundingAmountPerSize = MarketUtils.getClaimableFundingAmountPerSize(\n            dataStore,\n            positionInfo.position.market(),\n            cache.market.longToken,\n            positionInfo.position.isLong()\n        );\n\n        positionInfo.fees.funding.latestShortTokenClaimableFundingAmountPerSize = MarketUtils.getClaimableFundingAmountPerSize(\n            dataStore,\n            positionInfo.position.market(),\n            cache.market.shortToken,\n            positionInfo.position.isLong()\n        );\n\n        // see MarketUtils.getNextFundingAmountPerSize for more info on why this multiplier is needed\n        // a short summary:\n        // - funding values are split based on long and short token\n        // - for single token markets, these tokens are the same\n        // - so when the funding values are applied in updateFundingState, they are applied twice\n        // - e.g.\n        //     - increase fundingFeeAmountPerSize(market, collateralToken: token0, isLong: true) by 10\n        //     - increase fundingFeeAmountPerSize(market, collateralToken: token1, isLong: true) by 10\n        //     - for a single token market, token0 is the same as token1, so the value would be increased by 20\n        // - to avoid costs being doubled, these values are halved in MarketUtils.getNextFundingAmountPerSize\n        // - the reader code needs to double the values, because in the code below the nextFundingAmountResult\n        // values are applied virtually instead of the DataStore values being updated\n        uint256 multiplier = cache.market.longToken == cache.market.shortToken ? 2 : 1;\n\n        if (positionInfo.position.isLong()) {\n            positionInfo.fees.funding.latestLongTokenClaimableFundingAmountPerSize += nextFundingAmountResult.claimableFundingAmountPerSizeDelta.long.longToken * multiplier;\n            positionInfo.fees.funding.latestShortTokenClaimableFundingAmountPerSize += nextFundingAmountResult.claimableFundingAmountPerSizeDelta.long.shortToken * multiplier;\n\n            if (positionInfo.position.collateralToken() == cache.market.longToken) {\n                positionInfo.fees.funding.latestFundingFeeAmountPerSize += nextFundingAmountResult.fundingFeeAmountPerSizeDelta.long.longToken * multiplier;\n            } else {\n                positionInfo.fees.funding.latestFundingFeeAmountPerSize += nextFundingAmountResult.fundingFeeAmountPerSizeDelta.long.shortToken * multiplier;\n            }\n        } else {\n            positionInfo.fees.funding.latestLongTokenClaimableFundingAmountPerSize += nextFundingAmountResult.claimableFundingAmountPerSizeDelta.short.longToken * multiplier;\n            positionInfo.fees.funding.latestShortTokenClaimableFundingAmountPerSize += nextFundingAmountResult.claimableFundingAmountPerSizeDelta.short.shortToken * multiplier;\n\n            if (positionInfo.position.collateralToken() == cache.market.longToken) {\n                positionInfo.fees.funding.latestFundingFeeAmountPerSize += nextFundingAmountResult.fundingFeeAmountPerSizeDelta.short.longToken * multiplier;\n            } else {\n                positionInfo.fees.funding.latestFundingFeeAmountPerSize += nextFundingAmountResult.fundingFeeAmountPerSizeDelta.short.shortToken * multiplier;\n            }\n        }\n\n        positionInfo.fees.funding = PositionPricingUtils.getFundingFees(\n            positionInfo.fees.funding,\n            positionInfo.position\n        );\n\n        (positionInfo.basePnlUsd, positionInfo.uncappedBasePnlUsd, /* sizeDeltaInTokens */) = PositionUtils.getPositionPnlUsd(\n            dataStore,\n            cache.market,\n            prices,\n            positionInfo.position,\n            sizeDeltaUsd\n        );\n\n        positionInfo.pnlAfterPriceImpactUsd = positionInfo.executionPriceResult.priceImpactUsd + positionInfo.basePnlUsd;\n\n        positionInfo.fees.totalCostAmountExcludingFunding =\n            positionInfo.fees.positionFeeAmount\n            + positionInfo.fees.borrowing.borrowingFeeAmount\n            + positionInfo.fees.ui.uiFeeAmount\n            - positionInfo.fees.totalDiscountAmount;\n\n        positionInfo.fees.totalCostAmount =\n            positionInfo.fees.totalCostAmountExcludingFunding\n            + positionInfo.fees.funding.fundingFeeAmount;\n\n        return positionInfo;\n    }\n}\n"
    },
    "contracts/reader/ReaderPricingUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../position/PositionUtils.sol\";\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\n\n// @title ReaderPricingUtils\nlibrary ReaderPricingUtils {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Price for Price.Props;\n    using Position for Position.Props;\n    using Order for Order.Props;\n\n    struct ExecutionPriceResult {\n        int256 priceImpactUsd;\n        uint256 priceImpactDiffUsd;\n        uint256 executionPrice;\n    }\n\n    struct PositionInfo {\n        Position.Props position;\n        PositionPricingUtils.PositionFees fees;\n        ExecutionPriceResult executionPriceResult;\n        int256 basePnlUsd;\n        int256 pnlAfterPriceImpactUsd;\n    }\n\n    struct GetPositionInfoCache {\n        Market.Props market;\n        Price.Props collateralTokenPrice;\n        uint256 pendingBorrowingFeeUsd;\n        int256 latestLongTokenFundingAmountPerSize;\n        int256 latestShortTokenFundingAmountPerSize;\n    }\n\n    // returns amountOut, price impact, fees\n    function getSwapAmountOut(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        address tokenIn,\n        uint256 amountIn,\n        address uiFeeReceiver\n    ) external view returns (uint256, int256, SwapPricingUtils.SwapFees memory) {\n        SwapUtils.SwapCache memory cache;\n\n        if (tokenIn != market.longToken && tokenIn != market.shortToken) {\n            revert Errors.InvalidTokenIn(tokenIn, market.marketToken);\n        }\n\n        MarketUtils.validateSwapMarket(dataStore, market);\n\n        cache.tokenOut = MarketUtils.getOppositeToken(tokenIn, market);\n        cache.tokenInPrice = MarketUtils.getCachedTokenPrice(tokenIn, market, prices);\n        cache.tokenOutPrice = MarketUtils.getCachedTokenPrice(cache.tokenOut, market, prices);\n\n        int256 priceImpactUsd = SwapPricingUtils.getPriceImpactUsd(\n            SwapPricingUtils.GetPriceImpactUsdParams(\n                dataStore,\n                market,\n                tokenIn,\n                cache.tokenOut,\n                cache.tokenInPrice.midPrice(),\n                cache.tokenOutPrice.midPrice(),\n                (amountIn * cache.tokenInPrice.midPrice()).toInt256(),\n                -(amountIn * cache.tokenInPrice.midPrice()).toInt256(),\n                true // includeVirtualInventoryImpact\n            )\n        );\n\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\n            dataStore,\n            market.marketToken,\n            amountIn,\n            priceImpactUsd > 0, // forPositiveImpact\n            uiFeeReceiver,\n            ISwapPricingUtils.SwapPricingType.Swap\n        );\n\n        int256 impactAmount;\n\n        if (priceImpactUsd > 0) {\n            // when there is a positive price impact factor, additional tokens from the swap impact pool\n            // are withdrawn for the user\n            // for example, if 50,000 USDC is swapped out and there is a positive price impact\n            // an additional 100 USDC may be sent to the user\n            // the swap impact pool is decreased by the used amount\n\n            cache.amountIn = fees.amountAfterFees;\n\n            (impactAmount, cache.cappedDiffUsd) = MarketUtils.getSwapImpactAmountWithCap(\n                dataStore,\n                market.marketToken,\n                cache.tokenOut,\n                cache.tokenOutPrice,\n                priceImpactUsd\n            );\n\n            if (cache.cappedDiffUsd != 0) {\n                (cache.tokenInPriceImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.getSwapImpactAmountWithCap(\n                    dataStore,\n                    market.marketToken,\n                    tokenIn,\n                    cache.tokenInPrice,\n                    cache.cappedDiffUsd.toInt256()\n                );\n\n                // this additional amountIn is already in the Market\n                // it is subtracted from the swap impact pool amount\n                // and the market pool amount is increased by the updated\n                // amountIn below\n                cache.amountIn += cache.tokenInPriceImpactAmount.toUint256();\n            }\n\n            // round amountOut down\n            cache.amountOut = cache.amountIn * cache.tokenInPrice.min / cache.tokenOutPrice.max;\n            cache.poolAmountOut = cache.amountOut;\n\n            cache.amountOut += impactAmount.toUint256();\n        } else {\n            // when there is a negative price impact factor,\n            // less of the input amount is sent to the pool\n            // for example, if 10 ETH is swapped in and there is a negative price impact\n            // only 9.995 ETH may be swapped in\n            // the remaining 0.005 ETH will be stored in the swap impact pool\n\n            (impactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.getSwapImpactAmountWithCap(\n                dataStore,\n                market.marketToken,\n                tokenIn,\n                cache.tokenInPrice,\n                priceImpactUsd\n            );\n\n            cache.amountIn = fees.amountAfterFees - (-impactAmount).toUint256();\n            cache.amountOut = cache.amountIn * cache.tokenInPrice.min / cache.tokenOutPrice.max;\n            cache.poolAmountOut = cache.amountOut;\n        }\n\n        return (cache.amountOut, impactAmount, fees);\n    }\n\n    function getExecutionPrice(\n        DataStore dataStore,\n        Market.Props memory market,\n        Price.Props memory indexTokenPrice,\n        uint256 positionSizeInUsd,\n        uint256 positionSizeInTokens,\n        int256 sizeDeltaUsd,\n        bool isLong\n    ) external view returns (ExecutionPriceResult memory) {\n        PositionUtils.UpdatePositionParams memory params;\n\n        params.contracts.dataStore = dataStore;\n        params.market = market;\n\n        params.order.setSizeDeltaUsd(sizeDeltaUsd.abs());\n        params.order.setIsLong(isLong);\n\n        bool isIncrease = sizeDeltaUsd > 0;\n        bool shouldExecutionPriceBeSmaller = isIncrease ? isLong : !isLong;\n        params.order.setAcceptablePrice(shouldExecutionPriceBeSmaller ? type(uint256).max : 0);\n\n        params.position.setSizeInUsd(positionSizeInUsd);\n        params.position.setSizeInTokens(positionSizeInTokens);\n        params.position.setIsLong(isLong);\n\n        ExecutionPriceResult memory result;\n\n        if (sizeDeltaUsd > 0) {\n            (result.priceImpactUsd, /* priceImpactAmount */, /* sizeDeltaInTokens */, result.executionPrice) = PositionUtils.getExecutionPriceForIncrease(\n                params,\n                indexTokenPrice\n            );\n        } else {\n             (result.priceImpactUsd, result.priceImpactDiffUsd, result.executionPrice) = PositionUtils.getExecutionPriceForDecrease(\n                params,\n                indexTokenPrice\n            );\n        }\n\n        return result;\n    }\n\n    function getSwapPriceImpact(\n        DataStore dataStore,\n        Market.Props memory market,\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        Price.Props memory tokenInPrice,\n        Price.Props memory tokenOutPrice\n    ) external view returns (int256 priceImpactUsdBeforeCap, int256 priceImpactAmount, int256 tokenInPriceImpactAmount) {\n        priceImpactUsdBeforeCap = SwapPricingUtils.getPriceImpactUsd(\n            SwapPricingUtils.GetPriceImpactUsdParams(\n                dataStore,\n                market,\n                tokenIn,\n                tokenOut,\n                tokenInPrice.midPrice(),\n                tokenOutPrice.midPrice(),\n                (amountIn * tokenInPrice.midPrice()).toInt256(),\n                -(amountIn * tokenInPrice.midPrice()).toInt256(),\n                true // includeVirtualInventoryImpact\n            )\n        );\n\n        if (priceImpactUsdBeforeCap > 0) {\n            uint256 cappedDiffUsd;\n            (priceImpactAmount, cappedDiffUsd) = MarketUtils.getSwapImpactAmountWithCap(\n                dataStore,\n                market.marketToken,\n                tokenOut,\n                tokenOutPrice,\n                priceImpactUsdBeforeCap\n            );\n\n            if (cappedDiffUsd != 0) {\n                (tokenInPriceImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.getSwapImpactAmountWithCap(\n                    dataStore,\n                    market.marketToken,\n                    tokenIn,\n                    tokenInPrice,\n                    cappedDiffUsd.toInt256()\n                );\n            }\n        } else {\n            (priceImpactAmount, /* uint256 cappedDiffUsd */) = MarketUtils.getSwapImpactAmountWithCap(\n                dataStore,\n                market.marketToken,\n                tokenIn,\n                tokenInPrice,\n                priceImpactUsdBeforeCap\n            );\n        }\n\n        return (priceImpactUsdBeforeCap, priceImpactAmount, tokenInPriceImpactAmount);\n    }\n}\n"
    },
    "contracts/reader/ReaderUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nimport \"../data/Keys.sol\";\n\nimport \"../market/MarketStoreUtils.sol\";\n\nimport \"../position/Position.sol\";\n\nimport \"../order/OrderStoreUtils.sol\";\n\nimport \"../adl/AdlUtils.sol\";\n\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\n\nimport \"./ReaderPositionUtils.sol\";\n\n// @title ReaderUtils\n// @dev Library for read utils functions\n// convers some internal library functions into external functions to reduce\n// the Reader contract size\nlibrary ReaderUtils {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Price for Price.Props;\n    using Position for Position.Props;\n    using Order for Order.Props;\n\n    struct VirtualInventory {\n        uint256 virtualPoolAmountForLongToken;\n        uint256 virtualPoolAmountForShortToken;\n        int256 virtualInventoryForPositions;\n    }\n\n    struct MarketInfo {\n        Market.Props market;\n        uint256 borrowingFactorPerSecondForLongs;\n        uint256 borrowingFactorPerSecondForShorts;\n        BaseFundingValues baseFunding;\n        MarketUtils.GetNextFundingAmountPerSizeResult nextFunding;\n        VirtualInventory virtualInventory;\n        bool isDisabled;\n    }\n\n    struct OrderInfo {\n        bytes32 orderKey;\n        Order.Props order;\n    }\n\n    struct BaseFundingValues {\n        MarketUtils.PositionType fundingFeeAmountPerSize;\n        MarketUtils.PositionType claimableFundingAmountPerSize;\n    }\n\n    function getOrder(DataStore dataStore, bytes32 key) external view returns (Order.Props memory) {\n        return OrderStoreUtils.get(dataStore, key);\n    }\n\n    function getAccountOrders(\n        DataStore dataStore,\n        address account,\n        uint256 start,\n        uint256 end\n    ) external view returns (Order.Props[] memory) {\n        bytes32[] memory orderKeys = OrderStoreUtils.getAccountOrderKeys(dataStore, account, start, end);\n        Order.Props[] memory orders = new Order.Props[](orderKeys.length);\n        for (uint256 i; i < orderKeys.length; i++) {\n            bytes32 orderKey = orderKeys[i];\n            orders[i] = OrderStoreUtils.get(dataStore, orderKey);\n        }\n\n        return orders;\n    }\n\n    function getBaseFundingValues(DataStore dataStore, Market.Props memory market) public view returns (BaseFundingValues memory) {\n        BaseFundingValues memory values;\n\n        values.fundingFeeAmountPerSize.long.longToken = MarketUtils.getFundingFeeAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.longToken,\n            true // isLong\n        );\n\n        values.fundingFeeAmountPerSize.long.shortToken = MarketUtils.getFundingFeeAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.shortToken,\n            true // isLong\n        );\n\n        values.fundingFeeAmountPerSize.short.longToken = MarketUtils.getFundingFeeAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.longToken,\n            false // isLong\n        );\n\n        values.fundingFeeAmountPerSize.short.shortToken = MarketUtils.getFundingFeeAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.shortToken,\n            false // isLong\n        );\n\n        values.claimableFundingAmountPerSize.long.longToken = MarketUtils.getClaimableFundingAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.longToken,\n            true // isLong\n        );\n\n        values.claimableFundingAmountPerSize.long.shortToken = MarketUtils.getClaimableFundingAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.shortToken,\n            true // isLong\n        );\n\n        values.claimableFundingAmountPerSize.short.longToken = MarketUtils.getClaimableFundingAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.longToken,\n            false // isLong\n        );\n\n        values.claimableFundingAmountPerSize.short.shortToken = MarketUtils.getClaimableFundingAmountPerSize(\n            dataStore,\n            market.marketToken,\n            market.shortToken,\n            false // isLong\n        );\n\n        return values;\n    }\n\n    function getMarkets(DataStore dataStore, uint256 start, uint256 end) external view returns (Market.Props[] memory) {\n        address[] memory marketKeys = MarketStoreUtils.getMarketKeys(dataStore, start, end);\n        Market.Props[] memory markets = new Market.Props[](marketKeys.length);\n        for (uint256 i; i < marketKeys.length; i++) {\n            address marketKey = marketKeys[i];\n            Market.Props memory market = MarketStoreUtils.get(dataStore, marketKey);\n            markets[i] = market;\n        }\n\n        return markets;\n    }\n\n    function getMarketInfo(\n        DataStore dataStore,\n        MarketUtils.MarketPrices memory prices,\n        address marketKey\n    ) public view returns (MarketInfo memory) {\n        Market.Props memory market = MarketStoreUtils.get(dataStore, marketKey);\n\n        uint256 borrowingFactorPerSecondForLongs = MarketUtils.getBorrowingFactorPerSecond(\n            dataStore,\n            market,\n            prices,\n            true\n        );\n\n        uint256 borrowingFactorPerSecondForShorts = MarketUtils.getBorrowingFactorPerSecond(\n            dataStore,\n            market,\n            prices,\n            false\n        );\n\n        BaseFundingValues memory baseFunding = getBaseFundingValues(dataStore, market);\n\n        MarketUtils.GetNextFundingAmountPerSizeResult memory nextFunding = ReaderPositionUtils.getNextFundingAmountPerSize(\n            dataStore,\n            market,\n            prices\n        );\n\n        VirtualInventory memory virtualInventory = getVirtualInventory(dataStore, market);\n\n        bool isMarketDisabled = dataStore.getBool(Keys.isMarketDisabledKey(market.marketToken));\n\n        return\n            MarketInfo(\n                market,\n                borrowingFactorPerSecondForLongs,\n                borrowingFactorPerSecondForShorts,\n                baseFunding,\n                nextFunding,\n                virtualInventory,\n                isMarketDisabled\n            );\n    }\n\n    function getMarketInfoList(\n        DataStore dataStore,\n        MarketUtils.MarketPrices[] memory marketPricesList,\n        uint256 start,\n        uint256 end\n    ) external view returns (ReaderUtils.MarketInfo[] memory) {\n        address[] memory marketKeys = MarketStoreUtils.getMarketKeys(dataStore, start, end);\n        ReaderUtils.MarketInfo[] memory marketInfoList = new ReaderUtils.MarketInfo[](marketKeys.length);\n        for (uint256 i; i < marketKeys.length; i++) {\n            MarketUtils.MarketPrices memory prices = marketPricesList[i];\n            address marketKey = marketKeys[i];\n            marketInfoList[i] = getMarketInfo(dataStore, prices, marketKey);\n        }\n\n        return marketInfoList;\n    }\n\n    function getVirtualInventory(\n        DataStore dataStore,\n        Market.Props memory market\n    ) internal view returns (VirtualInventory memory) {\n        (, uint256 virtualPoolAmountForLongToken, uint256 virtualPoolAmountForShortToken) = MarketUtils\n            .getVirtualInventoryForSwaps(dataStore, market.marketToken);\n        (, int256 virtualInventoryForPositions) = MarketUtils.getVirtualInventoryForPositions(\n            dataStore,\n            market.indexToken\n        );\n\n        return\n            VirtualInventory(\n                virtualPoolAmountForLongToken,\n                virtualPoolAmountForShortToken,\n                virtualInventoryForPositions\n            );\n    }\n\n    function getAdlState(\n        DataStore dataStore,\n        address market,\n        bool isLong,\n        MarketUtils.MarketPrices memory prices\n    ) external view returns (uint256, bool, int256, uint256) {\n        uint256 latestAdlTime = AdlUtils.getLatestAdlTime(dataStore, market, isLong);\n        Market.Props memory _market = MarketUtils.getEnabledMarket(dataStore, market);\n\n        (bool shouldEnableAdl, int256 pnlToPoolFactor, uint256 maxPnlFactor) = MarketUtils.isPnlFactorExceeded(\n            dataStore,\n            _market,\n            prices,\n            isLong,\n            Keys.MAX_PNL_FACTOR_FOR_ADL\n        );\n\n        return (latestAdlTime, shouldEnableAdl, pnlToPoolFactor, maxPnlFactor);\n    }\n}\n"
    },
    "contracts/reader/ReaderWithdrawalUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\n\nimport \"../data/Keys.sol\";\n\nimport \"../position/Position.sol\";\nimport \"../market/MarketUtils.sol\";\nimport \"../market/Market.sol\";\n\nimport \"../pricing/ISwapPricingUtils.sol\";\nimport \"../pricing/SwapPricingUtils.sol\";\n\nlibrary ReaderWithdrawalUtils {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Price for Price.Props;\n    using Position for Position.Props;\n    using Order for Order.Props;\n\n    struct GetWithdrawalAmountOutCache {\n        uint256 poolValue;\n        uint256 marketTokensSupply;\n\n        uint256 longTokenPoolAmount;\n        uint256 shortTokenPoolAmount;\n\n        uint256 longTokenPoolUsd;\n        uint256 shortTokenPoolUsd;\n\n        uint256 totalPoolUsd;\n\n        uint256 marketTokensUsd;\n\n        uint256 longTokenOutputUsd;\n        uint256 shortTokenOutputUsd;\n\n        uint256 longTokenOutputAmount;\n        uint256 shortTokenOutputAmount;\n    }\n\n    function getWithdrawalAmountOut(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        uint256 marketTokenAmount,\n        address uiFeeReceiver,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external view returns (uint256, uint256) {\n        GetWithdrawalAmountOutCache memory cache;\n\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            dataStore,\n            market,\n            prices.indexTokenPrice,\n            prices.longTokenPrice,\n            prices.shortTokenPrice,\n            Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n            false\n        );\n\n        if (poolValueInfo.poolValue <= 0) {\n            revert Errors.InvalidPoolValueForWithdrawal(poolValueInfo.poolValue);\n        }\n\n        cache.poolValue = poolValueInfo.poolValue.toUint256();\n        cache.marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\n\n        cache.longTokenPoolAmount = MarketUtils.getPoolAmount(dataStore, market, market.longToken);\n        cache.shortTokenPoolAmount = MarketUtils.getPoolAmount(dataStore, market, market.shortToken);\n\n        cache.longTokenPoolUsd = cache.longTokenPoolAmount * prices.longTokenPrice.max;\n        cache.shortTokenPoolUsd = cache.shortTokenPoolAmount * prices.shortTokenPrice.max;\n\n        cache.totalPoolUsd = cache.longTokenPoolUsd + cache.shortTokenPoolUsd;\n\n        cache.marketTokensUsd = MarketUtils.marketTokenAmountToUsd(marketTokenAmount, cache.poolValue, cache.marketTokensSupply);\n\n        cache.longTokenOutputUsd = Precision.mulDiv(cache.marketTokensUsd, cache.longTokenPoolUsd, cache.totalPoolUsd);\n        cache.shortTokenOutputUsd = Precision.mulDiv(cache.marketTokensUsd, cache.shortTokenPoolUsd, cache.totalPoolUsd);\n\n        cache.longTokenOutputAmount = cache.longTokenOutputUsd / prices.longTokenPrice.max;\n        cache.shortTokenOutputAmount = cache.shortTokenOutputUsd / prices.shortTokenPrice.max;\n\n        SwapPricingUtils.SwapFees memory longTokenFees = SwapPricingUtils.getSwapFees(\n            dataStore,\n            market.marketToken,\n            cache.longTokenOutputAmount,\n            false, // forPositiveImpact\n            uiFeeReceiver,\n            swapPricingType\n        );\n\n        SwapPricingUtils.SwapFees memory shortTokenFees = SwapPricingUtils.getSwapFees(\n            dataStore,\n            market.marketToken,\n            cache.shortTokenOutputAmount,\n            false, // forPositiveImpact\n            uiFeeReceiver,\n            swapPricingType\n        );\n\n        return (\n            longTokenFees.amountAfterFees,\n            shortTokenFees.amountAfterFees\n        );\n    }\n}\n"
    },
    "contracts/referral/IReferralStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title IReferralStorage\n// @dev Interface for ReferralStorage\ninterface IReferralStorage {\n    // @dev get the owner of a referral code\n    // @param _code the referral code\n    // @return the owner of the referral code\n    function codeOwners(bytes32 _code) external view returns (address);\n    // @dev get the referral code of a trader\n    // @param _account the address of the trader\n    // @return the referral code\n    function traderReferralCodes(address _account) external view returns (bytes32);\n    // @dev get the trader discount share for an affiliate\n    // @param _account the address of the affiliate\n    // @return the trader discount share\n    function referrerDiscountShares(address _account) external view returns (uint256);\n    // @dev get the tier level of an affiliate\n    // @param _account the address of the affiliate\n    // @return the tier level of the affiliate\n    function referrerTiers(address _account) external view returns (uint256);\n    // @dev get the referral info for a trader\n    // @param _account the address of the trader\n    // @return (referral code, affiliate)\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\n    // @dev set the referral code for a trader\n    // @param _account the address of the trader\n    // @param _code the referral code\n    function setTraderReferralCode(address _account, bytes32 _code) external;\n    // @dev set the values for a tier\n    // @param _tierId the tier level\n    // @param _totalRebate the total rebate for the tier (affiliate reward + trader discount)\n    // @param _discountShare the share of the totalRebate for traders\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\n    // @dev set the tier for an affiliate\n    // @param _tierId the tier level\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\n    // @dev set the owner for a referral code\n    // @param _code the referral code\n    // @param _newAccount the new owner\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\n\n    // @dev get the tier values for a tier level\n    // @param _tierLevel the tier level\n    // @return (totalRebate, discountShare)\n    function tiers(uint256 _tierLevel) external view returns (uint256, uint256);\n}\n"
    },
    "contracts/referral/ReferralEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nlibrary ReferralEventUtils {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitAffiliateRewardUpdated(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address affiliate,\n        uint256 delta,\n        uint256 nextValue,\n        uint256 nextPoolValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(3);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"affiliate\", affiliate);\n\n        eventData.uintItems.initItems(3);\n        eventData.uintItems.setItem(0, \"delta\", delta);\n        eventData.uintItems.setItem(1, \"nextValue\", nextValue);\n        eventData.uintItems.setItem(2, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog2(\n            \"AffiliateRewardUpdated\",\n            Cast.toBytes32(market),\n            Cast.toBytes32(affiliate),\n            eventData\n        );\n    }\n\n    function emitAffiliateRewardClaimed(\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address affiliate,\n        address receiver,\n        uint256 amount,\n        uint256 nextPoolValue\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(4);\n        eventData.addressItems.setItem(0, \"market\", market);\n        eventData.addressItems.setItem(1, \"token\", token);\n        eventData.addressItems.setItem(2, \"affiliate\", affiliate);\n        eventData.addressItems.setItem(3, \"receiver\", receiver);\n\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"amount\", amount);\n        eventData.uintItems.setItem(1, \"nextPoolValue\", nextPoolValue);\n\n        eventEmitter.emitEventLog1(\n            \"AffiliateRewardClaimed\",\n            Cast.toBytes32(affiliate),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/referral/ReferralTier.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title ReferralTier\n// @dev Struct for referral tiers\nlibrary ReferralTier {\n    // @param totalRebate the total rebate for the tier (affiliate reward + trader discount)\n    // @param discountShare the share of the totalRebate for traders\n    struct Props {\n        uint256 totalRebate;\n        uint256 discountShare;\n    }\n}\n"
    },
    "contracts/referral/ReferralUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\n\nimport \"../event/EventEmitter.sol\";\nimport \"../market/MarketToken.sol\";\nimport \"../market/MarketUtils.sol\";\n\nimport \"./IReferralStorage.sol\";\nimport \"./ReferralEventUtils.sol\";\n\nimport \"../utils/Precision.sol\";\n\n// @title ReferralUtils\n// @dev Library for referral functions\nlibrary ReferralUtils {\n    // @dev set the referral code for a trader\n    // @param referralStorage The referral storage instance to use.\n    // @param account The account of the trader.\n    // @param referralCode The referral code.\n    function setTraderReferralCode(\n        IReferralStorage referralStorage,\n        address account,\n        bytes32 referralCode\n    ) internal {\n        if (referralCode == bytes32(0)) { return; }\n\n        // skip setting of the referral code if the user already has a referral code\n        if (referralStorage.traderReferralCodes(account) != bytes32(0)) { return; }\n\n        referralStorage.setTraderReferralCode(account, referralCode);\n    }\n\n    // @dev Increments the affiliate's reward balance by the specified delta.\n    // @param dataStore The data store instance to use.\n    // @param eventEmitter The event emitter instance to use.\n    // @param market The market address.\n    // @param token The token address.\n    // @param affiliate The affiliate's address.\n    // @param trader The trader's address.\n    // @param delta The amount to increment the reward balance by.\n    function incrementAffiliateReward(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address affiliate,\n        uint256 delta\n    ) internal {\n        if (delta == 0) { return; }\n\n        uint256 nextValue = dataStore.incrementUint(Keys.affiliateRewardKey(market, token, affiliate), delta);\n        uint256 nextPoolValue = dataStore.incrementUint(Keys.affiliateRewardKey(market, token), delta);\n\n        ReferralEventUtils.emitAffiliateRewardUpdated(\n            eventEmitter,\n            market,\n            token,\n            affiliate,\n            delta,\n            nextValue,\n            nextPoolValue\n        );\n    }\n\n    // @dev Gets the referral information for the specified trader.\n    // @param referralStorage The referral storage instance to use.\n    // @param trader The trader's address.\n    // @return The affiliate's address, the total rebate, and the discount share.\n    function getReferralInfo(\n        DataStore dataStore,\n        IReferralStorage referralStorage,\n        address trader\n    ) internal view returns (bytes32, address, uint256, uint256, uint256) {\n        bytes32 code = referralStorage.traderReferralCodes(trader);\n        address affiliate;\n        uint256 totalRebate;\n        uint256 discountShare;\n        uint256 minAffiliateRewardFactor;\n\n        if (code != bytes32(0)) {\n            affiliate = referralStorage.codeOwners(code);\n            uint256 referralTierLevel = referralStorage.referrerTiers(affiliate);\n            (totalRebate, discountShare) = referralStorage.tiers(referralTierLevel);\n            minAffiliateRewardFactor = dataStore.getUint(Keys.minAffiliateRewardFactorKey(referralTierLevel));\n\n            uint256 customDiscountShare = referralStorage.referrerDiscountShares(affiliate);\n            if (customDiscountShare != 0) {\n                discountShare = customDiscountShare;\n            }\n        }\n\n        uint256 traderDiscountFactor = Precision.basisPointsToFloat(totalRebate * discountShare / Precision.BASIS_POINTS_DIVISOR);\n        uint256 totalRebateFactor = Precision.basisPointsToFloat(totalRebate);\n        uint256 affiliateRewardFactor = totalRebateFactor - traderDiscountFactor;\n\n        return (\n            code,\n            affiliate,\n            affiliateRewardFactor,\n            traderDiscountFactor,\n            minAffiliateRewardFactor\n        );\n    }\n\n    // @dev Claims the affiliate's reward balance and transfers it to the specified receiver.\n    // @param dataStore The data store instance to use.\n    // @param eventEmitter The event emitter instance to use.\n    // @param market The market address.\n    // @param token The token address.\n    // @param account The affiliate's address.\n    // @param receiver The address to receive the reward.\n    function claimAffiliateReward(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address market,\n        address token,\n        address account,\n        address receiver\n    ) external returns (uint256) {\n        bytes32 key = Keys.affiliateRewardKey(market, token, account);\n\n        uint256 rewardAmount = dataStore.getUint(key);\n        dataStore.setUint(key, 0);\n\n        uint256 nextPoolValue = dataStore.decrementUint(Keys.affiliateRewardKey(market, token), rewardAmount);\n\n        MarketToken(payable(market)).transferOut(\n            token,\n            receiver,\n            rewardAmount\n        );\n\n        MarketUtils.validateMarketTokenBalance(dataStore, market);\n\n        ReferralEventUtils.emitAffiliateRewardClaimed(\n            eventEmitter,\n            market,\n            token,\n            account,\n            receiver,\n            rewardAmount,\n            nextPoolValue\n        );\n\n        return rewardAmount;\n    }\n}\n"
    },
    "contracts/role/Role.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title Role\n * @dev Library for role keys\n */\nlibrary Role {\n    /**\n     * @dev The ROLE_ADMIN role.\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\n     */\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\"ROLE_ADMIN\"));\n\n    /**\n     * @dev The TIMELOCK_ADMIN role.\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\n     */\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\"TIMELOCK_ADMIN\"));\n\n    /**\n     * @dev The TIMELOCK_MULTISIG role.\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\n     */\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\"TIMELOCK_MULTISIG\"));\n\n    /**\n     * @dev The CONFIG_KEEPER role.\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\n     */\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\"CONFIG_KEEPER\"));\n\n    /**\n     * @dev The LIMITED_CONFIG_KEEPER role.\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\n     */\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\"LIMITED_CONFIG_KEEPER\"));\n\n    /**\n     * @dev The CONTROLLER role.\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\n     */\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\"CONTROLLER\"));\n\n    /**\n     * @dev The GOV_TOKEN_CONTROLLER role.\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\n     */\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\"GOV_TOKEN_CONTROLLER\"));\n\n    /**\n     * @dev The ROUTER_PLUGIN role.\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\n     */\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\"ROUTER_PLUGIN\"));\n\n    /**\n     * @dev The MARKET_KEEPER role.\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\n     */\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\"MARKET_KEEPER\"));\n\n    /**\n     * @dev The FEE_KEEPER role.\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\n     */\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\"FEE_KEEPER\"));\n\n    /**\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\n     */\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\"FEE_DISTRIBUTION_KEEPER\"));\n\n    /**\n     * @dev The ORDER_KEEPER role.\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\n     */\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\"ORDER_KEEPER\"));\n\n    /**\n     * @dev The FROZEN_ORDER_KEEPER role.\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\n     */\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\"FROZEN_ORDER_KEEPER\"));\n\n    /**\n     * @dev The PRICING_KEEPER role.\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\n     */\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\"PRICING_KEEPER\"));\n    /**\n     * @dev The LIQUIDATION_KEEPER role.\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\n     */\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\"LIQUIDATION_KEEPER\"));\n    /**\n     * @dev The ADL_KEEPER role.\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\n     */\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\"ADL_KEEPER\"));\n    /**\n     * @dev The CONTRIBUTOR_KEEPER role.\n     * Hash: 0xfa89e7b5ea0a346d73c71d7d6a3512b9f2ea2c2e6c5fb8211ec351d35deef0f4\n     */\n    bytes32 public constant CONTRIBUTOR_KEEPER = keccak256(abi.encode(\"CONTRIBUTOR_KEEPER\"));\n    /**\n     * @dev The CONTRIBUTOR_DISTRIBUTOR role.\n     * Hash: 0xcdf6da7ad30d8b9afea66fb1cb11b1b7d0b50e9b30b69561a3ca52c39251360c\n     */\n    bytes32 public constant CONTRIBUTOR_DISTRIBUTOR = keccak256(abi.encode(\"CONTRIBUTOR_DISTRIBUTOR\"));\n}\n"
    },
    "contracts/role/RoleModule.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./RoleStore.sol\";\n\n/**\n * @title RoleModule\n * @dev Contract for role validation functions\n */\ncontract RoleModule {\n    RoleStore public immutable roleStore;\n\n    /**\n     * @dev Constructor that initializes the role store for this contract.\n     *\n     * @param _roleStore The contract instance to use as the role store.\n     */\n    constructor(RoleStore _roleStore) {\n        roleStore = _roleStore;\n    }\n\n    /**\n     * @dev Only allows the contract's own address to call the function.\n     */\n    modifier onlySelf() {\n        if (msg.sender != address(this)) {\n            revert Errors.Unauthorized(msg.sender, \"SELF\");\n        }\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\n     */\n    modifier onlyTimelockMultisig() {\n        _validateRole(Role.TIMELOCK_MULTISIG, \"TIMELOCK_MULTISIG\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\n     */\n    modifier onlyTimelockAdmin() {\n        _validateRole(Role.TIMELOCK_ADMIN, \"TIMELOCK_ADMIN\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\n     */\n    modifier onlyConfigKeeper() {\n        _validateRole(Role.CONFIG_KEEPER, \"CONFIG_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the LIMITED_CONFIG_KEEPER role to call the function.\n     */\n    modifier onlyLimitedConfigKeeper() {\n        _validateRole(Role.LIMITED_CONFIG_KEEPER, \"LIMITED_CONFIG_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\n     */\n    modifier onlyController() {\n        _validateRole(Role.CONTROLLER, \"CONTROLLER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\n     */\n    modifier onlyGovTokenController() {\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \"GOV_TOKEN_CONTROLLER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\n     */\n    modifier onlyRouterPlugin() {\n        _validateRole(Role.ROUTER_PLUGIN, \"ROUTER_PLUGIN\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\n     */\n    modifier onlyMarketKeeper() {\n        _validateRole(Role.MARKET_KEEPER, \"MARKET_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\n     */\n    modifier onlyFeeKeeper() {\n        _validateRole(Role.FEE_KEEPER, \"FEE_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\n     */\n    modifier onlyFeeDistributionKeeper() {\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \"FEE_DISTRIBUTION_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\n     */\n    modifier onlyOrderKeeper() {\n        _validateRole(Role.ORDER_KEEPER, \"ORDER_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\n     */\n    modifier onlyPricingKeeper() {\n        _validateRole(Role.PRICING_KEEPER, \"PRICING_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\n     */\n    modifier onlyLiquidationKeeper() {\n        _validateRole(Role.LIQUIDATION_KEEPER, \"LIQUIDATION_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\n     */\n    modifier onlyAdlKeeper() {\n        _validateRole(Role.ADL_KEEPER, \"ADL_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the CONTRIBUTOR_KEEPER role to call the function.\n     */\n    modifier onlyContributorKeeper() {\n        _validateRole(Role.CONTRIBUTOR_KEEPER, \"CONTRIBUTOR_KEEPER\");\n        _;\n    }\n\n    /**\n     * @dev Only allows addresses with the CONTRIBUTOR_DISTRIBUTOR role to call the function.\n     */\n    modifier onlyContributorDistributor() {\n        _validateRole(Role.CONTRIBUTOR_DISTRIBUTOR, \"CONTRIBUTOR_DISTRIBUTOR\");\n        _;\n    }\n\n    /**\n     * @dev Validates that the caller has the specified role.\n     *\n     * If the caller does not have the specified role, the transaction is reverted.\n     *\n     * @param role The key of the role to validate.\n     * @param roleName The name of the role to validate.\n     */\n    function _validateRole(bytes32 role, string memory roleName) internal view {\n        if (!roleStore.hasRole(msg.sender, role)) {\n            revert Errors.Unauthorized(msg.sender, roleName);\n        }\n    }\n}\n"
    },
    "contracts/role/RoleStore.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../utils/EnumerableValues.sol\";\nimport \"./Role.sol\";\nimport \"../error/Errors.sol\";\n\n/**\n * @title RoleStore\n * @dev Stores roles and their members.\n */\ncontract RoleStore {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableValues for EnumerableSet.AddressSet;\n    using EnumerableValues for EnumerableSet.Bytes32Set;\n\n    EnumerableSet.Bytes32Set internal roles;\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\n    // checking if an account has a role is a frequently used function\n    // roleCache helps to save gas by offering a more efficient lookup\n    // vs calling roleMembers[key].contains(account)\n    mapping(address => mapping (bytes32 => bool)) roleCache;\n\n    modifier onlyRoleAdmin() {\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\n            revert Errors.Unauthorized(msg.sender, \"ROLE_ADMIN\");\n        }\n        _;\n    }\n\n    constructor() {\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\n    }\n\n    /**\n     * @dev Grants the specified role to the given account.\n     *\n     * @param account The address of the account.\n     * @param roleKey The key of the role to grant.\n     */\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\n        _grantRole(account, roleKey);\n    }\n\n    /**\n     * @dev Revokes the specified role from the given account.\n     *\n     * @param account The address of the account.\n     * @param roleKey The key of the role to revoke.\n     */\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\n        _revokeRole(account, roleKey);\n    }\n\n    /**\n     * @dev Returns true if the given account has the specified role.\n     *\n     * @param account The address of the account.\n     * @param roleKey The key of the role.\n     * @return True if the account has the role, false otherwise.\n     */\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\n        return roleCache[account][roleKey];\n    }\n\n    /**\n     * @dev Returns the number of roles stored in the contract.\n     *\n     * @return The number of roles.\n     */\n    function getRoleCount() external view returns (uint256) {\n        return roles.length();\n    }\n\n    /**\n     * @dev Returns the keys of the roles stored in the contract.\n     *\n     * @param start The starting index of the range of roles to return.\n     * @param end The ending index of the range of roles to return.\n     * @return The keys of the roles.\n     */\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\n        return roles.valuesAt(start, end);\n    }\n\n    /**\n     * @dev Returns the number of members of the specified role.\n     *\n     * @param roleKey The key of the role.\n     * @return The number of members of the role.\n     */\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\n        return roleMembers[roleKey].length();\n    }\n\n    /**\n     * @dev Returns the members of the specified role.\n     *\n     * @param roleKey The key of the role.\n     * @param start the start index, the value for this index will be included.\n     * @param end the end index, the value for this index will not be included.\n     * @return The members of the role.\n     */\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\n        return roleMembers[roleKey].valuesAt(start, end);\n    }\n\n    function _grantRole(address account, bytes32 roleKey) internal {\n        roles.add(roleKey);\n        roleMembers[roleKey].add(account);\n        roleCache[account][roleKey] = true;\n    }\n\n    function _revokeRole(address account, bytes32 roleKey) internal {\n        roleMembers[roleKey].remove(account);\n        roleCache[account][roleKey] = false;\n\n        if (roleMembers[roleKey].length() == 0) {\n            if (roleKey == Role.ROLE_ADMIN) {\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\n            }\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\n            }\n        }\n    }\n}\n"
    },
    "contracts/router/BaseRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../utils/PayableMulticall.sol\";\nimport \"../utils/AccountUtils.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../token/TokenUtils.sol\";\n\nimport \"./Router.sol\";\n\ncontract BaseRouter is ReentrancyGuard, PayableMulticall, RoleModule {\n    using SafeERC20 for IERC20;\n\n    Router public immutable router;\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n\n    constructor(\n        Router _router,\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter\n    ) RoleModule(_roleStore) {\n        router = _router;\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n    }\n\n    // @dev Wraps the specified amount of native tokens into WNT then sends the WNT to the specified address\n    function sendWnt(address receiver, uint256 amount) external payable nonReentrant {\n        AccountUtils.validateReceiver(receiver);\n        TokenUtils.depositAndSendWrappedNativeToken(dataStore, receiver, amount);\n    }\n\n    // @dev Sends the given amount of tokens to the given address\n    function sendTokens(address token, address receiver, uint256 amount) external payable nonReentrant {\n        AccountUtils.validateReceiver(receiver);\n        address account = msg.sender;\n        router.pluginTransfer(token, account, receiver, amount);\n    }\n\n    function sendNativeToken(address receiver, uint256 amount) external payable nonReentrant {\n        AccountUtils.validateReceiver(receiver);\n        TokenUtils.sendNativeToken(dataStore, receiver, amount);\n    }\n}\n"
    },
    "contracts/router/ExchangeRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../exchange/IDepositHandler.sol\";\nimport \"../exchange/IWithdrawalHandler.sol\";\nimport \"../exchange/IShiftHandler.sol\";\nimport \"../exchange/IOrderHandler.sol\";\nimport \"../external/IExternalHandler.sol\";\nimport \"../shift/ShiftUtils.sol\";\nimport \"../shift/ShiftStoreUtils.sol\";\nimport \"../referral/ReferralUtils.sol\";\n\nimport \"../order/OrderStoreUtils.sol\";\n\nimport \"../feature/FeatureUtils.sol\";\n\nimport \"./BaseRouter.sol\";\nimport \"./IExchangeRouter.sol\";\n\n/**\n * @title ExchangeRouter\n * @dev Router for exchange functions, supports functions which require\n * token transfers from the user\n *\n * IMPORTANT: PayableMulticall uses delegatecall, msg.value will be the same for each delegatecall\n * extra care should be taken when using msg.value in any of the functions in this contract\n *\n * To avoid front-running issues, most actions require two steps to execute:\n *\n * - User sends transaction with request details, e.g. deposit / withdraw liquidity,\n * swap, increase / decrease position\n * - Keepers listen for the transactions, include the prices for the request then\n * send a transaction to execute the request\n *\n * Prices are provided by an off-chain oracle system:\n *\n * - Oracle keepers continually check the latest blocks\n * - When there is a new block, oracle keepers fetch the latest prices from\n * reference exchanges\n * - Oracle keepers then sign the median price for each token together with\n * the block hash\n * - Oracle keepers then send the data and signature to archive nodes\n * - Archive nodes display this information for anyone to query\n *\n * Example:\n *\n * - Block 100 is finalized on the blockchain\n * - Oracle keepers observe this block\n * - Oracle keepers pull the latest prices from reference exchanges,\n * token A: price 20,000, token B: price 80,000\n * - Oracle keepers sign [chainId, blockhash(100), 20,000], [chainId, blockhash(100), 80,000]\n * - If in block 100, there was a market order to open a long position for token A,\n * the market order would have a block number of 100\n * - The prices signed at block 100 can be used to execute this order\n * - Order keepers would bundle the signature and price data for token A\n * then execute the order\n */\ncontract ExchangeRouter is IExchangeRouter, BaseRouter {\n    using Deposit for Deposit.Props;\n    using Withdrawal for Withdrawal.Props;\n    using Order for Order.Props;\n    using Shift for Shift.Props;\n\n    IDepositHandler public immutable depositHandler;\n    IWithdrawalHandler public immutable withdrawalHandler;\n    IShiftHandler public immutable shiftHandler;\n    IOrderHandler public immutable orderHandler;\n    IExternalHandler public immutable externalHandler;\n\n    // @dev Constructor that initializes the contract with the provided Router, RoleStore, DataStore,\n    // EventEmitter, IDepositHandler, IWithdrawalHandler, IOrderHandler, and OrderStore instances\n    constructor(\n        Router _router,\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        IDepositHandler _depositHandler,\n        IWithdrawalHandler _withdrawalHandler,\n        IShiftHandler _shiftHandler,\n        IOrderHandler _orderHandler,\n        IExternalHandler _externalHandler\n    ) BaseRouter(_router, _roleStore, _dataStore, _eventEmitter) {\n        depositHandler = _depositHandler;\n        withdrawalHandler = _withdrawalHandler;\n        shiftHandler = _shiftHandler;\n        orderHandler = _orderHandler;\n        externalHandler = _externalHandler;\n    }\n\n    // makeExternalCalls can be used to perform an external swap before\n    // an action\n    // example:\n    // - ExchangeRouter.sendTokens(token: WETH, receiver: externalHandler, amount: 1e18)\n    // - ExchangeRouter.makeExternalCalls(\n    //     WETH.approve(spender: aggregator, amount: 1e18),\n    //     aggregator.swap(amount: 1, from: WETH, to: USDC, receiver: orderHandler)\n    // )\n    // - ExchangeRouter.createOrder\n    // the msg.sender for makeExternalCalls would be externalHandler\n    // refundTokens can be used to retrieve any excess tokens that may\n    // be left in the externalHandler\n    function makeExternalCalls(\n        address[] memory externalCallTargets,\n        bytes[] memory externalCallDataList,\n        address[] memory refundTokens,\n        address[] memory refundReceivers\n    ) external payable nonReentrant {\n        externalHandler.makeExternalCalls(\n            externalCallTargets,\n            externalCallDataList,\n            refundTokens,\n            refundReceivers\n        );\n    }\n\n    /**\n     * @dev Creates a new deposit with the given long token, short token, long token amount, short token\n     * amount, and deposit parameters. The deposit is created by transferring the specified amounts of\n     * long and short tokens from the caller's account to the deposit store, and then calling the\n     * `createDeposit()` function on the deposit handler contract.\n     *\n     * @param params The deposit parameters, as specified in the `DepositUtils.CreateDepositParams` struct\n     * @return The unique ID of the newly created deposit\n     */\n    function createDeposit(\n        DepositUtils.CreateDepositParams calldata params\n    ) external override payable nonReentrant returns (bytes32) {\n        address account = msg.sender;\n\n        return depositHandler.createDeposit(\n            account,\n            params\n        );\n    }\n\n    function cancelDeposit(bytes32 key) external override payable nonReentrant {\n        Deposit.Props memory deposit = DepositStoreUtils.get(dataStore, key);\n        if (deposit.account() == address(0)) {\n            revert Errors.EmptyDeposit();\n        }\n\n        if (deposit.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for cancelDeposit\");\n        }\n\n        depositHandler.cancelDeposit(key);\n    }\n\n    function simulateExecuteDeposit(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        depositHandler.simulateExecuteDeposit(key, simulatedOracleParams);\n    }\n\n    function simulateExecuteLatestDeposit(\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        bytes32 key = NonceUtils.getCurrentKey(dataStore);\n        depositHandler.simulateExecuteDeposit(key, simulatedOracleParams);\n    }\n\n    function createWithdrawal(\n        WithdrawalUtils.CreateWithdrawalParams calldata params\n    ) external override payable nonReentrant returns (bytes32) {\n        address account = msg.sender;\n\n        return withdrawalHandler.createWithdrawal(\n            account,\n            params\n        );\n    }\n\n    function cancelWithdrawal(bytes32 key) external override payable nonReentrant {\n        Withdrawal.Props memory withdrawal = WithdrawalStoreUtils.get(dataStore, key);\n        if (withdrawal.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for cancelWithdrawal\");\n        }\n\n        withdrawalHandler.cancelWithdrawal(key);\n    }\n\n    function executeAtomicWithdrawal(\n        WithdrawalUtils.CreateWithdrawalParams calldata params,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external override payable nonReentrant {\n        address account = msg.sender;\n\n        return withdrawalHandler.executeAtomicWithdrawal(\n            account,\n            params,\n            oracleParams\n        );\n    }\n\n    function simulateExecuteWithdrawal(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external payable nonReentrant {\n        withdrawalHandler.simulateExecuteWithdrawal(key, simulatedOracleParams, swapPricingType);\n    }\n\n    function simulateExecuteLatestWithdrawal(\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external payable nonReentrant {\n        bytes32 key = NonceUtils.getCurrentKey(dataStore);\n        withdrawalHandler.simulateExecuteWithdrawal(key, simulatedOracleParams, swapPricingType);\n    }\n\n    function createShift(\n        ShiftUtils.CreateShiftParams calldata params\n    ) external override payable nonReentrant returns (bytes32) {\n        address account = msg.sender;\n\n        return shiftHandler.createShift(\n            account,\n            params\n        );\n    }\n\n    function cancelShift(bytes32 key) external override payable nonReentrant {\n        Shift.Props memory shift = ShiftStoreUtils.get(dataStore, key);\n        if (shift.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for cancelShift\");\n        }\n\n        shiftHandler.cancelShift(key);\n    }\n\n    function simulateExecuteShift(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        shiftHandler.simulateExecuteShift(key, simulatedOracleParams);\n    }\n\n    function simulateExecuteLatestShift(\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        bytes32 key = NonceUtils.getCurrentKey(dataStore);\n        shiftHandler.simulateExecuteShift(key, simulatedOracleParams);\n    }\n\n    /**\n     * @dev Creates a new order with the given amount, order parameters. The order is\n     * created by transferring the specified amount of collateral tokens from the caller's account to the\n     * order store, and then calling the `createOrder()` function on the order handler contract. The\n     * referral code is also set on the caller's account using the referral storage contract.\n     */\n    function createOrder(\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) external override payable nonReentrant returns (bytes32) {\n        address account = msg.sender;\n\n        return orderHandler.createOrder(\n            account,\n            params,\n            false\n        );\n    }\n\n    function setSavedCallbackContract(\n        address market,\n        address callbackContract\n    ) external payable nonReentrant {\n        // save the callback contract based on the account and market so that\n        // it can be called on liquidations and ADLs\n        CallbackUtils.setSavedCallbackContract(\n            dataStore,\n            msg.sender, // account\n            market,\n            callbackContract\n        );\n    }\n\n    /**\n     * @dev Updates the given order with the specified size delta, acceptable price, and trigger price.\n     * The `updateOrder()` feature must be enabled for the given order type. The caller must be the owner\n     * of the order, and the order must not be a market order. The size delta, trigger price, and\n     * acceptable price are updated on the order, and the order is unfrozen. Any additional WNT that is\n     * transferred to the contract is added to the order's execution fee. The updated order is then saved\n     * in the order store, and an `OrderUpdated` event is emitted.\n     *\n     * @param key The unique ID of the order to be updated\n     * @param sizeDeltaUsd The new size delta for the order\n     * @param acceptablePrice The new acceptable price for the order\n     * @param triggerPrice The new trigger price for the order\n     */\n    function updateOrder(\n        bytes32 key,\n        uint256 sizeDeltaUsd,\n        uint256 acceptablePrice,\n        uint256 triggerPrice,\n        uint256 minOutputAmount,\n        uint256 validFromTime,\n        bool autoCancel\n    ) external payable nonReentrant {\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n        if (order.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for updateOrder\");\n        }\n\n        orderHandler.updateOrder(\n            key,\n            sizeDeltaUsd,\n            acceptablePrice,\n            triggerPrice,\n            minOutputAmount,\n            validFromTime,\n            autoCancel,\n            order,\n            false\n        );\n    }\n\n    /**\n     * @dev Cancels the given order. The `cancelOrder()` feature must be enabled for the given order\n     * type. The caller must be the owner of the order, and the order must not be a market order. The\n     * order is cancelled by calling the `cancelOrder()` function in the `OrderUtils` contract. This\n     * function also records the starting gas amount and the reason for cancellation, which is passed to\n     * the `cancelOrder()` function.\n     *\n     * @param key The unique ID of the order to be cancelled\n     */\n    function cancelOrder(bytes32 key) external payable nonReentrant {\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n        if (order.account() == address(0)) {\n            revert Errors.EmptyOrder();\n        }\n\n        if (order.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for cancelOrder\");\n        }\n\n        orderHandler.cancelOrder(key);\n    }\n\n    function simulateExecuteOrder(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        orderHandler.simulateExecuteOrder(key, simulatedOracleParams);\n    }\n\n    function simulateExecuteLatestOrder(\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        bytes32 key = NonceUtils.getCurrentKey(dataStore);\n        orderHandler.simulateExecuteOrder(key, simulatedOracleParams);\n    }\n\n    /**\n     * @dev Claims funding fees for the given markets and tokens on behalf of the caller, and sends the\n     * fees to the specified receiver. The length of the `markets` and `tokens` arrays must be the same.\n     * For each market-token pair, the `claimFundingFees()` function in the `MarketUtils` contract is\n     * called to claim the fees for the caller.\n     *\n     * @param markets An array of market addresses\n     * @param tokens An array of token addresses, corresponding to the given markets\n     * @param receiver The address to which the claimed fees should be sent\n     */\n    function claimFundingFees(\n        address[] memory markets,\n        address[] memory tokens,\n        address receiver\n    ) external payable nonReentrant returns (uint256[] memory) {\n        if (markets.length != tokens.length) {\n            revert Errors.InvalidClaimFundingFeesInput(markets.length, tokens.length);\n        }\n\n        FeatureUtils.validateFeature(dataStore, Keys.claimFundingFeesFeatureDisabledKey(address(this)));\n\n        AccountUtils.validateReceiver(receiver);\n\n        address account = msg.sender;\n\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\n\n        for (uint256 i; i < markets.length; i++) {\n            claimedAmounts[i] = MarketUtils.claimFundingFees(\n                dataStore,\n                eventEmitter,\n                markets[i],\n                tokens[i],\n                account,\n                receiver\n            );\n        }\n\n        return claimedAmounts;\n    }\n\n    function claimCollateral(\n        address[] memory markets,\n        address[] memory tokens,\n        uint256[] memory timeKeys,\n        address receiver\n    ) external payable nonReentrant returns (uint256[] memory) {\n        if (markets.length != tokens.length || tokens.length != timeKeys.length) {\n            revert Errors.InvalidClaimCollateralInput(markets.length, tokens.length, timeKeys.length);\n        }\n\n        FeatureUtils.validateFeature(dataStore, Keys.claimCollateralFeatureDisabledKey(address(this)));\n\n        AccountUtils.validateReceiver(receiver);\n\n        address account = msg.sender;\n\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\n\n        for (uint256 i; i < markets.length; i++) {\n            claimedAmounts[i] = MarketUtils.claimCollateral(\n                dataStore,\n                eventEmitter,\n                markets[i],\n                tokens[i],\n                timeKeys[i],\n                account,\n                receiver\n            );\n        }\n\n        return claimedAmounts;\n    }\n\n    /**\n     * @dev Claims affiliate rewards for the given markets and tokens on behalf of the caller, and sends\n     * the rewards to the specified receiver. The length of the `markets` and `tokens` arrays must be\n     * the same. For each market-token pair, the `claimAffiliateReward()` function in the `ReferralUtils`\n     * contract is called to claim the rewards for the caller.\n     *\n     * @param markets An array of market addresses\n     * @param tokens An array of token addresses, corresponding to the given markets\n     * @param receiver The address to which the claimed rewards should be sent\n     */\n    function claimAffiliateRewards(\n        address[] memory markets,\n        address[] memory tokens,\n        address receiver\n    ) external payable nonReentrant returns (uint256[] memory) {\n        if (markets.length != tokens.length) {\n            revert Errors.InvalidClaimAffiliateRewardsInput(markets.length, tokens.length);\n        }\n\n        FeatureUtils.validateFeature(dataStore, Keys.claimAffiliateRewardsFeatureDisabledKey(address(this)));\n\n        address account = msg.sender;\n\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\n\n        for (uint256 i; i < markets.length; i++) {\n            claimedAmounts[i] = ReferralUtils.claimAffiliateReward(\n                dataStore,\n                eventEmitter,\n                markets[i],\n                tokens[i],\n                account,\n                receiver\n            );\n        }\n\n        return claimedAmounts;\n    }\n\n    function setUiFeeFactor(uint256 uiFeeFactor) external payable nonReentrant {\n        address account = msg.sender;\n        MarketUtils.setUiFeeFactor(dataStore, eventEmitter, account, uiFeeFactor);\n    }\n\n    function claimUiFees(\n        address[] memory markets,\n        address[] memory tokens,\n        address receiver\n    ) external payable nonReentrant returns (uint256[] memory) {\n        if (markets.length != tokens.length) {\n            revert Errors.InvalidClaimUiFeesInput(markets.length, tokens.length);\n        }\n\n        FeatureUtils.validateFeature(dataStore, Keys.claimUiFeesFeatureDisabledKey(address(this)));\n\n        address uiFeeReceiver = msg.sender;\n\n        uint256[] memory claimedAmounts = new uint256[](markets.length);\n\n        for (uint256 i; i < markets.length; i++) {\n            claimedAmounts[i] = FeeUtils.claimUiFees(\n                dataStore,\n                eventEmitter,\n                uiFeeReceiver,\n                markets[i],\n                tokens[i],\n                receiver\n            );\n        }\n\n        return claimedAmounts;\n    }\n}\n"
    },
    "contracts/router/GlvRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseRouter.sol\";\nimport \"../exchange/IGlvHandler.sol\";\nimport \"../external/IExternalHandler.sol\";\n\ncontract GlvRouter is BaseRouter {\n    using GlvDeposit for GlvDeposit.Props;\n    using GlvWithdrawal for GlvWithdrawal.Props;\n\n    IGlvHandler public immutable glvHandler;\n    IExternalHandler public immutable externalHandler;\n\n    constructor(\n        Router _router,\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        IGlvHandler _glvHandler,\n        IExternalHandler _externalHandler\n    ) BaseRouter(_router, _roleStore, _dataStore, _eventEmitter) {\n        glvHandler = _glvHandler;\n        externalHandler = _externalHandler;\n    }\n\n    receive() external payable {\n        address wnt = TokenUtils.wnt(dataStore);\n        if (msg.sender != wnt) {\n            revert Errors.InvalidNativeTokenSender(msg.sender);\n        }\n    }\n\n    function createGlvDeposit(\n        GlvDepositUtils.CreateGlvDepositParams calldata params\n    ) external payable nonReentrant returns (bytes32) {\n        address account = msg.sender;\n\n        return glvHandler.createGlvDeposit(account, params);\n    }\n\n    function cancelGlvDeposit(bytes32 key) external nonReentrant {\n        GlvDeposit.Props memory glvDeposit = GlvDepositStoreUtils.get(dataStore, key);\n        if (glvDeposit.account() == address(0)) {\n            revert Errors.EmptyGlvDeposit();\n        }\n\n        if (glvDeposit.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for cancelGlvDeposit\");\n        }\n\n        glvHandler.cancelGlvDeposit(key);\n    }\n\n    function simulateExecuteGlvDeposit(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        glvHandler.simulateExecuteGlvDeposit(key, simulatedOracleParams);\n    }\n\n    function simulateExecuteLatestGlvDeposit(\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        bytes32 key = NonceUtils.getCurrentKey(dataStore);\n        glvHandler.simulateExecuteGlvDeposit(key, simulatedOracleParams);\n    }\n\n    function createGlvWithdrawal(\n        GlvWithdrawalUtils.CreateGlvWithdrawalParams calldata params\n    ) external payable nonReentrant returns (bytes32) {\n        address account = msg.sender;\n\n        return glvHandler.createGlvWithdrawal(account, params);\n    }\n\n    function cancelGlvWithdrawal(bytes32 key) external nonReentrant {\n        GlvWithdrawal.Props memory glvWithdrawal = GlvWithdrawalStoreUtils.get(dataStore, key);\n        if (glvWithdrawal.account() == address(0)) {\n            revert Errors.EmptyGlvWithdrawal();\n        }\n\n        if (glvWithdrawal.account() != msg.sender) {\n            revert Errors.Unauthorized(msg.sender, \"account for cancelGlvWithdrawal\");\n        }\n\n        glvHandler.cancelGlvWithdrawal(key);\n    }\n\n    function simulateExecuteGlvWithdrawal(\n        bytes32 key,\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        glvHandler.simulateExecuteGlvWithdrawal(key, simulatedOracleParams);\n    }\n\n    function simulateExecuteLatestGlvWithdrawal(\n        OracleUtils.SimulatePricesParams memory simulatedOracleParams\n    ) external payable nonReentrant {\n        bytes32 key = NonceUtils.getCurrentKey(dataStore);\n        glvHandler.simulateExecuteGlvWithdrawal(key, simulatedOracleParams);\n    }\n\n    // makeExternalCalls can be used to perform an external swap before\n    // an action\n    // example:\n    // - ExchangeRouter.sendTokens(token: WETH, receiver: externalHandler, amount: 1e18)\n    // - ExchangeRouter.makeExternalCalls(\n    //     WETH.approve(spender: aggregator, amount: 1e18),\n    //     aggregator.swap(amount: 1, from: WETH, to: USDC, receiver: orderHandler)\n    // )\n    // - ExchangeRouter.createOrder\n    // the msg.sender for makeExternalCalls would be externalHandler\n    // refundTokens can be used to retrieve any excess tokens that may\n    // be left in the externalHandler\n    function makeExternalCalls(\n        address[] memory externalCallTargets,\n        bytes[] memory externalCallDataList,\n        address[] memory refundTokens,\n        address[] memory refundReceivers\n    ) external payable nonReentrant {\n        externalHandler.makeExternalCalls(\n            externalCallTargets,\n            externalCallDataList,\n            refundTokens,\n            refundReceivers\n        );\n    }\n}\n"
    },
    "contracts/router/IExchangeRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../deposit/DepositUtils.sol\";\nimport \"../withdrawal/WithdrawalUtils.sol\";\nimport \"../oracle/OracleUtils.sol\";\nimport \"../shift/ShiftUtils.sol\";\nimport \"../order/IBaseOrderUtils.sol\";\n\ninterface IExchangeRouter {\n    function createDeposit(\n        DepositUtils.CreateDepositParams calldata params\n    ) external payable returns (bytes32);\n\n    function cancelDeposit(bytes32 key) external payable;\n\n    function createWithdrawal(\n        WithdrawalUtils.CreateWithdrawalParams calldata params\n    ) external payable returns (bytes32);\n\n    function cancelWithdrawal(bytes32 key) external payable;\n\n    function executeAtomicWithdrawal(\n        WithdrawalUtils.CreateWithdrawalParams calldata params,\n        OracleUtils.SetPricesParams calldata oracleParams\n    ) external payable;\n\n    function createShift(\n        ShiftUtils.CreateShiftParams calldata params\n    ) external payable returns (bytes32);\n\n    function cancelShift(bytes32 key) external payable;\n\n    function createOrder(\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) external payable returns (bytes32);\n\n    function updateOrder(\n        bytes32 key,\n        uint256 sizeDeltaUsd,\n        uint256 acceptablePrice,\n        uint256 triggerPrice,\n        uint256 minOutputAmount,\n        uint256 validFromTime,\n        bool autoCancel\n    ) external payable;\n\n    function cancelOrder(bytes32 key) external payable;\n}\n"
    },
    "contracts/router/relay/BaseGelatoRelayRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport {GelatoRelayContext} from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../../data/DataStore.sol\";\nimport \"../../exchange/IOrderHandler.sol\";\nimport \"../../external/IExternalHandler.sol\";\nimport \"../../feature/FeatureUtils.sol\";\nimport \"../../oracle/OracleModule.sol\";\nimport \"../../order/IBaseOrderUtils.sol\";\nimport \"../../order/OrderStoreUtils.sol\";\nimport \"../../order/OrderVault.sol\";\nimport \"../../router/Router.sol\";\nimport \"../../token/TokenUtils.sol\";\nimport \"../../gas/GasUtils.sol\";\n\nimport \"./RelayUtils.sol\";\n\naddress constant GMX_SIMULATION_ORIGIN = address(uint160(uint256(keccak256(\"GMX SIMULATION ORIGIN\"))));\n\nabstract contract BaseGelatoRelayRouter is GelatoRelayContext, ReentrancyGuard, OracleModule {\n    using Order for Order.Props;\n    using SafeERC20 for IERC20;\n\n    IOrderHandler public immutable orderHandler;\n    OrderVault public immutable orderVault;\n    Router public immutable router;\n    DataStore public immutable dataStore;\n    EventEmitter public immutable eventEmitter;\n    IExternalHandler public immutable externalHandler;\n\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH =\n        keccak256(bytes(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"));\n\n    bytes32 public constant DOMAIN_SEPARATOR_NAME_HASH = keccak256(bytes(\"GmxBaseGelatoRelayRouter\"));\n    bytes32 public constant DOMAIN_SEPARATOR_VERSION_HASH = keccak256(bytes(\"1\"));\n\n    mapping(address => uint256) public userNonces;\n\n    modifier withRelay(\n        RelayParams calldata relayParams,\n        address account,\n        bool isSubaccount\n    ) {\n        uint256 startingGas = gasleft();\n        _validateGaslessFeature();\n        Contracts memory contracts = _getContracts();\n        _handleRelayBeforeAction(contracts, relayParams, account, isSubaccount);\n        _;\n        _handleRelayAfterAction(contracts, startingGas, account);\n    }\n\n    constructor(\n        Router _router,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        IOrderHandler _orderHandler,\n        OrderVault _orderVault,\n        IExternalHandler _externalHandler\n    ) OracleModule(_oracle) {\n        orderHandler = _orderHandler;\n        orderVault = _orderVault;\n        router = _router;\n        dataStore = _dataStore;\n        eventEmitter = _eventEmitter;\n        externalHandler = _externalHandler;\n    }\n\n    function _validateSignature(\n        bytes32 digest,\n        bytes calldata signature,\n        address expectedSigner,\n        string memory signatureType\n    ) internal view {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(digest, signature);\n\n        // allow to optionally skip signature validation for eth_estimateGas / eth_call if tx.origin is GMX_SIMULATION_ORIGIN\n        // do not use address(0) to avoid relays accidentally skipping signature validation if they use address(0) as the origin\n        if (tx.origin == GMX_SIMULATION_ORIGIN) {\n            return;\n        }\n\n        if (error != ECDSA.RecoverError.NoError || recovered != expectedSigner) {\n            revert Errors.InvalidSignature(signatureType);\n        }\n    }\n\n    function _getContracts() internal view returns (Contracts memory contracts) {\n        DataStore _dataStore = dataStore;\n        address wnt = TokenUtils.wnt(_dataStore);\n        contracts = Contracts({dataStore: _dataStore, orderVault: orderVault, wnt: wnt});\n    }\n\n    function _batch(\n        address account,\n        IBaseOrderUtils.CreateOrderParams[] calldata createOrderParamsList,\n        UpdateOrderParams[] calldata updateOrderParamsList,\n        bytes32[] calldata cancelOrderKeys,\n        bool isSubaccount\n    ) internal returns (bytes32[] memory) {\n        uint256 actionsCount = createOrderParamsList.length + updateOrderParamsList.length + cancelOrderKeys.length;\n        if (actionsCount == 0) {\n            revert Errors.RelayEmptyBatch();\n        }\n\n        bytes32[] memory orderKeys = new bytes32[](createOrderParamsList.length);\n        for (uint256 i = 0; i < createOrderParamsList.length; i++) {\n            orderKeys[i] = _createOrder(account, createOrderParamsList[i], isSubaccount);\n        }\n\n        for (uint256 i = 0; i < updateOrderParamsList.length; i++) {\n            _updateOrder(account, updateOrderParamsList[i], isSubaccount);\n        }\n\n        for (uint256 i = 0; i < cancelOrderKeys.length; i++) {\n            _cancelOrder(account, cancelOrderKeys[i]);\n        }\n\n        return orderKeys;\n    }\n\n    function _createOrder(\n        address account,\n        IBaseOrderUtils.CreateOrderParams calldata params,\n        bool isSubaccount\n    ) internal returns (bytes32) {\n        Contracts memory contracts = _getContracts();\n        IERC20(contracts.wnt).safeTransfer(address(contracts.orderVault), params.numbers.executionFee);\n\n        if (\n            params.numbers.initialCollateralDeltaAmount != 0 &&\n            (BaseOrderUtils.isSwapOrder(params.orderType) || BaseOrderUtils.isIncreaseOrder(params.orderType))\n        ) {\n            // for increase and swap orders OrderUtils sets initialCollateralDeltaAmount based on the amount of received initialCollateralToken\n            // instead of using initialCollateralDeltaAmount from params\n            // it is possible to use external calls to send tokens to OrderVault, in this case initialCollateralDeltaAmount could be zero\n            // and there is no need to call _sendTokens here\n            _sendTokens(\n                account,\n                params.addresses.initialCollateralToken,\n                address(contracts.orderVault),\n                params.numbers.initialCollateralDeltaAmount\n            );\n        }\n\n        return\n            orderHandler.createOrder(account, params, isSubaccount && params.addresses.callbackContract != address(0));\n    }\n\n    function _updateOrder(address account, UpdateOrderParams calldata params, bool isSubaccount) internal {\n        Contracts memory contracts = _getContracts();\n        Order.Props memory order = OrderStoreUtils.get(contracts.dataStore, params.key);\n\n        if (order.account() == address(0)) {\n            revert Errors.EmptyOrder();\n        }\n\n        if (order.account() != account) {\n            revert Errors.Unauthorized(account, \"account for updateOrder\");\n        }\n\n        if (params.executionFeeIncrease != 0) {\n            IERC20(contracts.wnt).safeTransfer(address(contracts.orderVault), params.executionFeeIncrease);\n        }\n\n        orderHandler.updateOrder(\n            params.key,\n            params.sizeDeltaUsd,\n            params.acceptablePrice,\n            params.triggerPrice,\n            params.minOutputAmount,\n            params.validFromTime,\n            params.autoCancel,\n            order,\n            // shouldCapMaxExecutionFee\n            // see GasUtils.validateExecutionFee\n            isSubaccount && order.callbackContract() != address(0) && params.executionFeeIncrease != 0\n        );\n    }\n\n    function _cancelOrder(address account, bytes32 key) internal {\n        Contracts memory contracts = _getContracts();\n        Order.Props memory order = OrderStoreUtils.get(contracts.dataStore, key);\n        if (order.account() == address(0)) {\n            revert Errors.EmptyOrder();\n        }\n\n        if (order.account() != account) {\n            revert Errors.Unauthorized(account, \"account for cancelOrder\");\n        }\n        orderHandler.cancelOrder(key);\n    }\n\n    function _handleRelayBeforeAction(\n        Contracts memory contracts,\n        RelayParams calldata relayParams,\n        address account,\n        bool isSubaccount\n    ) internal withOraclePricesForAtomicAction(relayParams.oracleParams) {\n        _handleTokenPermits(relayParams.tokenPermits);\n        _handleExternalCalls(account, relayParams.externalCalls, isSubaccount);\n\n        _handleRelayFee(contracts, relayParams, account, isSubaccount);\n    }\n\n    function _handleExternalCalls(address account, ExternalCalls calldata externalCalls, bool isSubaccount) internal {\n        if (externalCalls.externalCallTargets.length == 0) {\n            return;\n        }\n\n        if (isSubaccount) {\n            // malicious subaccount could steal main account funds through external calls\n            revert Errors.NonEmptyExternalCallsForSubaccountOrder();\n        }\n\n        if (\n            externalCalls.sendTokens.length == 0 || externalCalls.sendTokens.length != externalCalls.sendAmounts.length\n        ) {\n            revert Errors.InvalidExternalCalls(externalCalls.sendTokens.length, externalCalls.sendAmounts.length);\n        }\n\n        for (uint256 i = 0; i < externalCalls.sendTokens.length; i++) {\n            _sendTokens(account, externalCalls.sendTokens[i], address(externalHandler), externalCalls.sendAmounts[i]);\n        }\n\n        externalHandler.makeExternalCalls(\n            externalCalls.externalCallTargets,\n            externalCalls.externalCallDataList,\n            externalCalls.refundTokens,\n            externalCalls.refundReceivers\n        );\n    }\n\n    function _handleTokenPermits(TokenPermit[] calldata tokenPermits) internal {\n        // not all tokens support ERC20Permit, for them separate transaction is needed\n\n        if (tokenPermits.length == 0) {\n            return;\n        }\n\n        address _router = address(router);\n\n        for (uint256 i; i < tokenPermits.length; i++) {\n            TokenPermit memory permit = tokenPermits[i];\n\n            if (permit.spender != _router) {\n                // to avoid permitting spending by an incorrect spender for extra safety\n                revert Errors.InvalidPermitSpender(permit.spender, _router);\n            }\n\n            try\n                IERC20Permit(permit.token).permit(\n                    permit.owner,\n                    permit.spender,\n                    permit.value,\n                    permit.deadline,\n                    permit.v,\n                    permit.r,\n                    permit.s\n                )\n            {} catch {}\n        }\n    }\n\n    function _handleRelayFee(\n        Contracts memory contracts,\n        RelayParams calldata relayParams,\n        address account,\n        bool isSubaccount\n    ) internal {\n        if (_isGelatoRelay(msg.sender) && _getFeeToken() != contracts.wnt) {\n            revert Errors.UnsupportedRelayFeeToken(_getFeeToken(), contracts.wnt);\n        }\n\n        if (relayParams.fee.feeSwapPath.length != 0) {\n            if (isSubaccount) {\n                // a malicious subaccount could create a large swap with a negative price impact\n                // and then execute a personal swap with a positive price impact\n                // to mitigate this, we limit the max relay fee swap size for subaccounts\n                uint256 maxRelayFeeSwapUsd = contracts.dataStore.getUint(Keys.MAX_RELAY_FEE_SWAP_USD_FOR_SUBACCOUNT);\n                uint256 relayFeeUsd = relayParams.fee.feeAmount * oracle.getPrimaryPrice(relayParams.fee.feeToken).max;\n                if (relayFeeUsd > maxRelayFeeSwapUsd) {\n                    revert Errors.MaxRelayFeeSwapForSubaccountExceeded(relayFeeUsd, maxRelayFeeSwapUsd);\n                }\n            }\n\n            _sendTokens(account, relayParams.fee.feeToken, address(contracts.orderVault), relayParams.fee.feeAmount);\n            RelayUtils.swapFeeTokens(contracts, eventEmitter, oracle, relayParams.fee);\n        } else if (relayParams.fee.feeToken == contracts.wnt) {\n            // fee tokens could be sent through external calls\n            // in this case feeAmount could be 0 and there is no need to call _sendTokens\n            if (relayParams.fee.feeAmount != 0) {\n                _sendTokens(account, relayParams.fee.feeToken, address(this), relayParams.fee.feeAmount);\n            }\n        } else {\n            revert Errors.UnexpectedRelayFeeToken(relayParams.fee.feeToken, contracts.wnt);\n        }\n    }\n\n    // Gelato Relay Router contracts support 2 types of calls which have different logic for paying the relay fee:\n    // 1. callWithSyncFee\n    // 2. sponsoredCall\n    //\n    // callWithSyncFee:\n    // - GMX contracts pay relay fee to the Gelato Relay within the same transaction\n    // - the fee amount is calculated on Gelato Relay side, it depends on the gas used, gas price and conversion rate\n    // - UI should retrieve the fee amount from the Gelato API\n    //\n    // sponsoredCall:\n    // - GMX contracts do not pay Gelato Relay directly, instead Gelato 1Balance is used to cover the cost\n    // - GMX contracts charge users for the call and deposit funds to `RELAY_FEE_ADDRESS`;\n    //   these funds will later be used to top up Gelato 1Balance\n    // - the fee amount is calculated on GMX side based on the gas used (contracts use an approximation\n    //   because it's impossible to calculate the exact amount), gas price and `GELATO_RELAY_FEE_MULTIPLIER_FACTOR`.\n    //   note the fee amount doesn't necessarily match gas limit * gas price.\n    //   for example, GELATO_RELAY_FEE_MULTIPLIER_FACTOR can be set lower to subsidize the fee\n    // - UI should calculate the fee amount as:\n    //   gas limit * gas price * GELATO_RELAY_FEE_MULTIPLIER_FACTOR * some buffer to account for gas price variance\n    // - the calculation logic could be found in GasUtils.payGelatoRelayFee\n    function _handleRelayAfterAction(\n        Contracts memory contracts,\n        uint256 startingGas,\n        address residualFeeReceiver\n    ) internal {\n        bool isSponsoredCall = !_isGelatoRelay(msg.sender);\n        uint256 residualFeeAmount = ERC20(contracts.wnt).balanceOf(address(this));\n        uint256 relayFee;\n        if (isSponsoredCall) {\n            relayFee = GasUtils.payGelatoRelayFee(\n                contracts.dataStore,\n                contracts.wnt,\n                startingGas,\n                msg.data.length,\n                residualFeeAmount\n            );\n        } else {\n            relayFee = _getFee();\n\n            if (relayFee > residualFeeAmount) {\n                revert Errors.InsufficientRelayFee(relayFee, residualFeeAmount);\n            }\n\n            _transferRelayFee();\n        }\n\n        residualFeeAmount -= relayFee;\n        if (residualFeeAmount > 0) {\n            IERC20(contracts.wnt).safeTransfer(residualFeeReceiver, residualFeeAmount);\n        }\n    }\n\n    function _sendTokens(address account, address token, address receiver, uint256 amount) internal {\n        AccountUtils.validateReceiver(receiver);\n        router.pluginTransfer(token, account, receiver, amount);\n    }\n\n    function _getDomainSeparator(uint256 sourceChainId) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    DOMAIN_SEPARATOR_TYPEHASH,\n                    DOMAIN_SEPARATOR_NAME_HASH,\n                    DOMAIN_SEPARATOR_VERSION_HASH,\n                    sourceChainId,\n                    address(this)\n                )\n            );\n    }\n\n    function _validateCall(RelayParams calldata relayParams, address account, bytes32 structHash) internal {\n        bytes32 domainSeparator = _getDomainSeparator(block.chainid);\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, structHash);\n        _validateSignature(digest, relayParams.signature, account, \"call\");\n\n        _validateNonce(account, relayParams.userNonce);\n        _validateDeadline(relayParams.deadline);\n    }\n\n    function _validateDeadline(uint256 deadline) internal view {\n        if (block.timestamp > deadline) {\n            revert Errors.DeadlinePassed(block.timestamp, deadline);\n        }\n    }\n\n    function _validateNonce(address account, uint256 userNonce) internal {\n        if (userNonces[account] != userNonce) {\n            revert Errors.InvalidUserNonce(userNonces[account], userNonce);\n        }\n        userNonces[account] = userNonce + 1;\n    }\n\n    function _validateGaslessFeature() internal view {\n        FeatureUtils.validateFeature(dataStore, Keys.gaslessFeatureDisabledKey(address(this)));\n    }\n}\n"
    },
    "contracts/router/relay/GelatoRelayRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../data/DataStore.sol\";\nimport \"../../event/EventEmitter.sol\";\nimport \"../../exchange/IOrderHandler.sol\";\nimport \"../../order/IBaseOrderUtils.sol\";\nimport \"../../order/OrderVault.sol\";\nimport \"../../router/Router.sol\";\nimport \"./BaseGelatoRelayRouter.sol\";\n\ncontract GelatoRelayRouter is BaseGelatoRelayRouter {\n    constructor(\n        Router _router,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        IOrderHandler _orderHandler,\n        OrderVault _orderVault,\n        IExternalHandler _externalHandler\n    )\n        BaseGelatoRelayRouter(_router, _dataStore, _eventEmitter, _oracle, _orderHandler, _orderVault, _externalHandler)\n    {}\n\n    // @note all params except account should be part of the corresponding struct hash\n    function batch(\n        RelayParams calldata relayParams,\n        address account,\n        BatchParams calldata params\n    ) external nonReentrant withRelay(relayParams, account, false) returns (bytes32[] memory) {\n        bytes32 structHash = RelayUtils.getBatchStructHash(relayParams, params);\n        _validateCall(relayParams, account, structHash);\n\n        return _batch(\n            account,\n            params.createOrderParamsList,\n            params.updateOrderParamsList,\n            params.cancelOrderKeys,\n            false // isSubaccount\n        );\n    }\n\n    // @note all params except account should be part of the corresponding struct hash\n    function createOrder(\n        RelayParams calldata relayParams,\n        address account,\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) external nonReentrant withRelay(relayParams, account, false) returns (bytes32) {\n        bytes32 structHash = RelayUtils.getCreateOrderStructHash(relayParams, params);\n        _validateCall(relayParams, account, structHash);\n\n        return\n            _createOrder(\n                account,\n                params,\n                false // isSubaccount\n            );\n    }\n\n    // @note all params except account should be part of the corresponding struct hash\n    function updateOrder(\n        RelayParams calldata relayParams,\n        address account,\n        UpdateOrderParams calldata params\n    ) external nonReentrant withRelay(relayParams, account, false) {\n        bytes32 structHash = RelayUtils.getUpdateOrderStructHash(relayParams, params);\n        _validateCall(relayParams, account, structHash);\n\n        _updateOrder(\n            account,\n            params,\n            false // isSubaccount\n        );\n    }\n\n    // @note all params except account should be part of the corresponding struct hash\n    function cancelOrder(\n        RelayParams calldata relayParams,\n        address account,\n        bytes32 key\n    ) external nonReentrant withRelay(relayParams, account, false) {\n        bytes32 structHash = RelayUtils.getCancelOrderStructHash(relayParams, key);\n        _validateCall(relayParams, account, structHash);\n\n        _cancelOrder(account, key);\n    }\n}\n"
    },
    "contracts/router/relay/RelayUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../data/DataStore.sol\";\nimport \"../../event/EventEmitter.sol\";\nimport \"../../order/OrderVault.sol\";\nimport \"../../oracle/Oracle.sol\";\nimport \"../../market/Market.sol\";\nimport \"../../swap/SwapUtils.sol\";\nimport \"../../order/IBaseOrderUtils.sol\";\nimport {SubaccountApproval} from \"../../subaccount/SubaccountUtils.sol\";\n\nstruct Contracts {\n    DataStore dataStore;\n    OrderVault orderVault;\n    address wnt;\n}\n\nstruct FeeParams {\n    // 1. if no swap is needed then `feeToken` should be WNT address, `feeAmount` should be correct amount and `feeSwapPath` should be empty\n    // 2. if GMX v2 swap is used to swap relay fee then `feeToken` should be the address of the input token,\n    //    `feeAmount` should be the amount of the input token enough to cover the relay fee in WNT, and `feeSwapPath` should be the list of markets\n    //    through which the input token should be swapped to get the output token\n    // 3. if external calls are used then `feeToken` should be WNT address (even though the input token is different)\n    //    `feeAmount` should be 0 because the input token and amount will be specified in `externalCalls`\n    //    `feeSwapPath` should be empty\n    address feeToken;\n    uint256 feeAmount;\n    address[] feeSwapPath;\n}\n\nstruct TokenPermit {\n    // EIP-2612 permit https://eips.ethereum.org/EIPS/eip-2612\n    address owner;\n    address spender;\n    uint256 value;\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    address token;\n}\n\n// external calls could be used to swap relay fee and/or position collateral\n// GMX v2 swaps consume relatively a lot of gas, so using external calls could reduce txn fee\n// for relay fee the funds should be sent to the RelayRouter contract\n// for position collateral the funds should be sent to the OrderVault contract\n//\n// @note when using external calls for position collateral and creating multiple orders via `batch()`\n// then the funds will be allocated to the first increase order because all external calls are processed first\n// and only then OrderVault's balance is used for order's initialCollateralDeltaAmount\n//\n// @note using external calls for position collateral and atomic swaps for relay fee at the same time should be done with caution\n// if position collateral and initial relay fee token are the same then the collateral will be lost\n// for example, a user wants to pay ARB to open a position with USDC as collateral and pay USDC as a relay fee\n// 1. external calls swap ARB for USDC and sends USDC to the OrderVault to use as position collateral\n// 2. USDC is sent to the OrderVault before the swap\n// 3. on swap OrderVault.tokenBalances are synced\n// 4. on order creation OrderVault.recordTransferInt returns 0\n// 5. the collateral is lost\nstruct ExternalCalls {\n    // Gelato Relay Router contracts do not support `multicall` and `sendTokens` methods\n    // so all tokens and amounts should be specified here\n    address[] sendTokens; // tokens to send to ExternalHandler\n    uint256[] sendAmounts; // tokens amounts to send to ExternalHandler\n\n    // lists of external calls to be made\n    address[] externalCallTargets; // external targets to call\n    bytes[] externalCallDataList; // external call data list\n\n    // refundTokens and refundReceivers are used to send residual funds left in the ExchangeHandler\n    // for example, if \"swapExactOut\" is used some amount of \"tokenIn\" could be lefts\n    address[] refundTokens; // tokens to refund to user\n    address[] refundReceivers; // receivers of the refunds\n}\n\nstruct RelayParams {\n    // oracle params are used for relay fee swap through GMX v2 pools\n    // if swap is not needed then `oracleParams` values should be empty\n    OracleUtils.SetPricesParams oracleParams;\n\n    ExternalCalls externalCalls;\n\n    // token permits could be used to approve spending of tokens by the Router contract\n    // instead of sending separate approval transactions\n    TokenPermit[] tokenPermits;\n\n    FeeParams fee;\n\n    // should be retrieved from userNonces(account)\n    uint256 userNonce;\n\n    // deadline for the transaction. should be used for extra safety so signed message\n    // can't be used in future if a user signs and forgets about it\n    uint256 deadline;\n\n    bytes signature;\n}\n\n// @note all params except account should be part of the corresponding struct hash\nstruct UpdateOrderParams {\n    bytes32 key;\n    uint256 sizeDeltaUsd;\n    uint256 acceptablePrice;\n    uint256 triggerPrice;\n    uint256 minOutputAmount;\n    uint256 validFromTime;\n    bool autoCancel;\n\n    // should be non zero if order's execution fee should be increased\n    // otherwise should be 0\n    uint256 executionFeeIncrease;\n}\n\nstruct BatchParams {\n    IBaseOrderUtils.CreateOrderParams[] createOrderParamsList;\n    UpdateOrderParams[] updateOrderParamsList;\n    bytes32[] cancelOrderKeys;\n}\n\nstring constant UPDATE_ORDER_PARAMS = \"UpdateOrderParams(bytes32 key,uint256 sizeDeltaUsd,uint256 acceptablePrice,uint256 triggerPrice,uint256 minOutputAmount,uint256 validFromTime,bool autoCancel,uint256 executionFeeIncrease)\";\n\nstring constant CREATE_ORDER_ADDRESSES = \"CreateOrderAddresses(address receiver,address cancellationReceiver,address callbackContract,address uiFeeReceiver,address market,address initialCollateralToken,address[] swapPath)\";\nstring constant CREATE_ORDER_NUMBERS = \"CreateOrderNumbers(uint256 sizeDeltaUsd,uint256 initialCollateralDeltaAmount,uint256 triggerPrice,uint256 acceptablePrice,uint256 executionFee,uint256 callbackGasLimit,uint256 minOutputAmount,uint256 validFromTime)\";\n\nstring constant CREATE_ORDER_PARAMS_ROOT = \"CreateOrderParams(CreateOrderAddresses addresses,CreateOrderNumbers numbers,uint256 orderType,uint256 decreasePositionSwapType,bool isLong,bool shouldUnwrapNativeToken,bool autoCancel,bytes32 referralCode)\";\nstring constant CREATE_ORDER_PARAMS = string(\n    abi.encodePacked(\n        \"CreateOrderParams(CreateOrderAddresses addresses,CreateOrderNumbers numbers,uint256 orderType,uint256 decreasePositionSwapType,bool isLong,bool shouldUnwrapNativeToken,bool autoCancel,bytes32 referralCode)\",\n        CREATE_ORDER_ADDRESSES,\n        CREATE_ORDER_NUMBERS\n    )\n);\n\nlibrary RelayUtils {\n    bytes32 public constant UPDATE_ORDER_PARAMS_TYPEHASH = keccak256(bytes(UPDATE_ORDER_PARAMS));\n    bytes32 public constant UPDATE_ORDER_TYPEHASH =\n        keccak256(\n            abi.encodePacked(\n                \"UpdateOrder(address account,UpdateOrderParams params,bytes32 relayParams,bytes32 subaccountApproval)\",\n                UPDATE_ORDER_PARAMS\n            )\n        );\n\n    bytes32 public constant CANCEL_ORDER_TYPEHASH =\n        keccak256(bytes(\"CancelOrder(address account,bytes32 key,bytes32 relayParams,bytes32 subaccountApproval)\"));\n\n    bytes32 public constant CREATE_ORDER_NUMBERS_TYPEHASH = keccak256(bytes(CREATE_ORDER_NUMBERS));\n    bytes32 public constant CREATE_ORDER_ADDRESSES_TYPEHASH = keccak256(bytes(CREATE_ORDER_ADDRESSES));\n    bytes32 public constant CREATE_ORDER_PARAMS_TYPEHASH = keccak256(bytes(CREATE_ORDER_PARAMS));\n    bytes32 public constant CREATE_ORDER_TYPEHASH =\n        keccak256(\n            abi.encodePacked(\n                \"CreateOrder(address account,CreateOrderAddresses addresses,CreateOrderNumbers numbers,uint256 orderType,uint256 decreasePositionSwapType,bool isLong,bool shouldUnwrapNativeToken,bool autoCancel,bytes32 referralCode,bytes32 relayParams,bytes32 subaccountApproval)\",\n                CREATE_ORDER_ADDRESSES,\n                CREATE_ORDER_NUMBERS\n            )\n        );\n\n    bytes32 public constant SUBACCOUNT_APPROVAL_TYPEHASH =\n        keccak256(\n            bytes(\n                \"SubaccountApproval(address subaccount,bool shouldAdd,uint256 expiresAt,uint256 maxAllowedCount,bytes32 actionType,uint256 nonce,uint256 deadline)\"\n            )\n        );\n\n    bytes32 public constant REMOVE_SUBACCOUNT_TYPEHASH =\n        keccak256(bytes(\"RemoveSubaccount(address subaccount,bytes32 relayParams)\"));\n\n    bytes32 public constant BATCH_TYPEHASH =\n        keccak256(\n            abi.encodePacked(\n                \"Batch(address account,CreateOrderParams[] createOrderParamsList,UpdateOrderParams[] updateOrderParamsList,bytes32[] cancelOrderKeys,bytes32 relayParams,bytes32 subaccountApproval)\",\n                // according to EIP-712 all types following the root type should be in alphabetical order\n                // can't use CREATE_ORDER_PARAMS because the resulting order would be incorrect: CreateOrderParams, CreateOrderAddresses, CreateOrderNumbers\n                // it should be CreateOrderAddresses, CreateOrderNumbers, CreateOrderParams\n                CREATE_ORDER_ADDRESSES,\n                CREATE_ORDER_NUMBERS,\n                CREATE_ORDER_PARAMS_ROOT,\n                UPDATE_ORDER_PARAMS\n            )\n        );\n\n    function swapFeeTokens(\n        Contracts memory contracts,\n        EventEmitter eventEmitter,\n        Oracle oracle,\n        FeeParams calldata fee\n    ) external {\n        oracle.validateSequencerUp();\n\n        // swap fee tokens to WNT\n        MarketUtils.validateSwapPath(contracts.dataStore, fee.feeSwapPath);\n        Market.Props[] memory swapPathMarkets = MarketUtils.getSwapPathMarkets(contracts.dataStore, fee.feeSwapPath);\n\n        (address outputToken, ) = SwapUtils.swap(\n            SwapUtils.SwapParams({\n                dataStore: contracts.dataStore,\n                eventEmitter: eventEmitter,\n                oracle: oracle,\n                bank: contracts.orderVault,\n                key: bytes32(0),\n                tokenIn: fee.feeToken,\n                amountIn: fee.feeAmount,\n                swapPathMarkets: swapPathMarkets,\n                minOutputAmount: 0,\n                receiver: address(this),\n                uiFeeReceiver: address(0),\n                shouldUnwrapNativeToken: false,\n                swapPricingType: ISwapPricingUtils.SwapPricingType.AtomicSwap\n            })\n        );\n\n        if (outputToken != contracts.wnt) {\n            revert Errors.UnexpectedRelayFeeTokenAfterSwap(outputToken, contracts.wnt);\n        }\n    }\n\n    function getRelayParamsHash(RelayParams calldata relayParams) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    relayParams.oracleParams,\n                    relayParams.externalCalls,\n                    relayParams.tokenPermits,\n                    relayParams.fee,\n                    relayParams.userNonce,\n                    relayParams.deadline\n                )\n            );\n    }\n\n    function getRemoveSubaccountStructHash(\n        RelayParams calldata relayParams,\n        address subaccount\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encode(REMOVE_SUBACCOUNT_TYPEHASH, subaccount, getRelayParamsHash(relayParams)));\n    }\n\n    function getSubaccountApprovalStructHash(\n        SubaccountApproval calldata subaccountApproval\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    SUBACCOUNT_APPROVAL_TYPEHASH,\n                    subaccountApproval.subaccount,\n                    subaccountApproval.shouldAdd,\n                    subaccountApproval.expiresAt,\n                    subaccountApproval.maxAllowedCount,\n                    subaccountApproval.actionType,\n                    subaccountApproval.nonce,\n                    subaccountApproval.deadline\n                )\n            );\n    }\n\n    function getCreateOrderStructHash(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account,\n        IBaseOrderUtils.CreateOrderParams memory params\n    ) internal pure returns (bytes32) {\n        bytes32 relayParamsHash = getRelayParamsHash(relayParams);\n        bytes32 subaccountApprovalHash = keccak256(abi.encode(subaccountApproval));\n\n        return\n            keccak256(\n                abi.encode(\n                    CREATE_ORDER_TYPEHASH,\n                    account,\n                    getCreateOrderAddressesStructHash(params.addresses),\n                    getCreateOrderNumbersStructHash(params.numbers),\n                    uint256(params.orderType),\n                    uint256(params.decreasePositionSwapType),\n                    params.isLong,\n                    params.shouldUnwrapNativeToken,\n                    params.autoCancel,\n                    params.referralCode,\n                    relayParamsHash,\n                    subaccountApprovalHash\n                )\n            );\n    }\n\n    function getCreateOrderStructHash(\n        RelayParams calldata relayParams,\n        IBaseOrderUtils.CreateOrderParams memory params\n    ) internal pure returns (bytes32) {\n        bytes32 relayParamsHash = getRelayParamsHash(relayParams);\n\n        return\n            keccak256(\n                abi.encode(\n                    CREATE_ORDER_TYPEHASH,\n                    address(0),\n                    getCreateOrderAddressesStructHash(params.addresses),\n                    getCreateOrderNumbersStructHash(params.numbers),\n                    uint256(params.orderType),\n                    uint256(params.decreasePositionSwapType),\n                    params.isLong,\n                    params.shouldUnwrapNativeToken,\n                    params.autoCancel,\n                    params.referralCode,\n                    relayParamsHash,\n                    bytes32(0)\n                )\n            );\n    }\n\n    function getCreateOrderAddressesStructHash(\n        IBaseOrderUtils.CreateOrderParamsAddresses memory addresses\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    CREATE_ORDER_ADDRESSES_TYPEHASH,\n                    addresses.receiver,\n                    addresses.cancellationReceiver,\n                    addresses.callbackContract,\n                    addresses.uiFeeReceiver,\n                    addresses.market,\n                    addresses.initialCollateralToken,\n                    keccak256(abi.encodePacked(addresses.swapPath))\n                )\n            );\n    }\n\n    function getCreateOrderNumbersStructHash(\n        IBaseOrderUtils.CreateOrderParamsNumbers memory numbers\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    CREATE_ORDER_NUMBERS_TYPEHASH,\n                    numbers.sizeDeltaUsd,\n                    numbers.initialCollateralDeltaAmount,\n                    numbers.triggerPrice,\n                    numbers.acceptablePrice,\n                    numbers.executionFee,\n                    numbers.callbackGasLimit,\n                    numbers.minOutputAmount,\n                    numbers.validFromTime\n                )\n            );\n    }\n\n    function getUpdateOrderStructHash(\n        RelayParams calldata relayParams,\n        UpdateOrderParams calldata params\n    ) internal pure returns (bytes32) {\n        return _getUpdateOrderStructHash(relayParams, bytes32(0), address(0), params);\n    }\n\n    function getUpdateOrderStructHash(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account,\n        UpdateOrderParams calldata params\n    ) internal pure returns (bytes32) {\n        return _getUpdateOrderStructHash(relayParams, keccak256(abi.encode(subaccountApproval)), account, params);\n    }\n\n    function _getUpdateOrderStructHash(\n        RelayParams calldata relayParams,\n        bytes32 subaccountApprovalHash,\n        address account,\n        UpdateOrderParams calldata params\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    UPDATE_ORDER_TYPEHASH,\n                    account,\n                    getUpdateOrderParamsStructHash(params),\n                    getRelayParamsHash(relayParams),\n                    subaccountApprovalHash\n                )\n            );\n    }\n\n    function getUpdateOrderParamsStructHash(UpdateOrderParams calldata params) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    UPDATE_ORDER_PARAMS_TYPEHASH,\n                    params.key,\n                    params.sizeDeltaUsd,\n                    params.acceptablePrice,\n                    params.triggerPrice,\n                    params.minOutputAmount,\n                    params.validFromTime,\n                    params.autoCancel,\n                    params.executionFeeIncrease\n                )\n            );\n    }\n\n    function getCancelOrderStructHash(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account,\n        bytes32 key\n    ) internal pure returns (bytes32) {\n        return _getCancelOrderStructHash(relayParams, keccak256(abi.encode(subaccountApproval)), account, key);\n    }\n\n    function getCancelOrderStructHash(RelayParams calldata relayParams, bytes32 key) internal pure returns (bytes32) {\n        return _getCancelOrderStructHash(relayParams, bytes32(0), address(0), key);\n    }\n\n    function _getCancelOrderStructHash(\n        RelayParams calldata relayParams,\n        bytes32 subaccountApprovalHash,\n        address account,\n        bytes32 key\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(CANCEL_ORDER_TYPEHASH, account, key, getRelayParamsHash(relayParams), subaccountApprovalHash)\n            );\n    }\n\n    function getCreateOrderParamsStructHash(\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    CREATE_ORDER_PARAMS_TYPEHASH,\n                    getCreateOrderAddressesStructHash(params.addresses),\n                    getCreateOrderNumbersStructHash(params.numbers),\n                    uint256(params.orderType),\n                    uint256(params.decreasePositionSwapType),\n                    params.isLong,\n                    params.shouldUnwrapNativeToken,\n                    params.autoCancel,\n                    params.referralCode\n                )\n            );\n    }\n\n    function getBatchStructHash(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account,\n        BatchParams calldata params\n    ) public pure returns (bytes32) {\n        return\n            _getBatchStructHash(\n                relayParams,\n                keccak256(abi.encode(subaccountApproval)),\n                account,\n                params.createOrderParamsList,\n                params.updateOrderParamsList,\n                params.cancelOrderKeys\n            );\n    }\n\n    function getBatchStructHash(\n        RelayParams calldata relayParams,\n        BatchParams calldata params\n    ) internal pure returns (bytes32) {\n        return\n            _getBatchStructHash(\n                relayParams,\n                bytes32(0),\n                address(0),\n                params.createOrderParamsList,\n                params.updateOrderParamsList,\n                params.cancelOrderKeys\n            );\n    }\n\n    function _getBatchStructHash(\n        RelayParams calldata relayParams,\n        bytes32 subaccountApprovalHash,\n        address account,\n        IBaseOrderUtils.CreateOrderParams[] calldata createOrderParamsList,\n        UpdateOrderParams[] calldata updateOrderParamsList,\n        bytes32[] calldata cancelOrderKeys\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    BATCH_TYPEHASH,\n                    account,\n                    getCreateOrderParamsListStructHash(createOrderParamsList),\n                    getUpdateOrderParamsListStructHash(updateOrderParamsList),\n                    keccak256(abi.encodePacked(cancelOrderKeys)),\n                    getRelayParamsHash(relayParams),\n                    subaccountApprovalHash\n                )\n            );\n    }\n\n    function getCreateOrderParamsListStructHash(\n        IBaseOrderUtils.CreateOrderParams[] calldata createOrderParamsList\n    ) internal pure returns (bytes32) {\n        bytes32[] memory createOrderParamsStructHashes = new bytes32[](createOrderParamsList.length);\n        for (uint256 i = 0; i < createOrderParamsList.length; i++) {\n            createOrderParamsStructHashes[i] = getCreateOrderParamsStructHash(createOrderParamsList[i]);\n        }\n        return keccak256(abi.encodePacked(createOrderParamsStructHashes));\n    }\n\n    function getUpdateOrderParamsListStructHash(\n        UpdateOrderParams[] calldata updateOrderParamsList\n    ) internal pure returns (bytes32) {\n        bytes32[] memory updateOrderParamsStructHashes = new bytes32[](updateOrderParamsList.length);\n        for (uint256 i = 0; i < updateOrderParamsList.length; i++) {\n            updateOrderParamsStructHashes[i] = getUpdateOrderParamsStructHash(updateOrderParamsList[i]);\n        }\n        return keccak256(abi.encodePacked(updateOrderParamsStructHashes));\n    }\n}\n"
    },
    "contracts/router/relay/SubaccountGelatoRelayRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../order/IBaseOrderUtils.sol\";\nimport \"../../router/Router.sol\";\nimport \"../../feature/FeatureUtils.sol\";\nimport \"../../subaccount/SubaccountUtils.sol\";\nimport \"./BaseGelatoRelayRouter.sol\";\n\ncontract SubaccountGelatoRelayRouter is BaseGelatoRelayRouter {\n    mapping(address => uint256) public subaccountApprovalNonces;\n\n    constructor(\n        Router _router,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        Oracle _oracle,\n        IOrderHandler _orderHandler,\n        OrderVault _orderVault,\n        IExternalHandler _externalHandler\n    )\n        BaseGelatoRelayRouter(_router, _dataStore, _eventEmitter, _oracle, _orderHandler, _orderVault, _externalHandler)\n    {}\n\n    struct BatchVars {\n        bytes32 structHash;\n        uint256 actionsCount;\n    }\n\n    // @note all params except subaccount should be part of the corresponding struct hash\n    function batch(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account,\n        address subaccount,\n        BatchParams calldata params\n    ) external nonReentrant withRelay(relayParams, account, true) returns (bytes32[] memory) {\n        BatchVars memory vars;\n        vars.structHash = RelayUtils.getBatchStructHash(relayParams, subaccountApproval, account, params);\n        _validateCall(relayParams, subaccount, vars.structHash);\n\n        for (uint256 i = 0; i < params.createOrderParamsList.length; i++) {\n            _validateCreateOrderParams(account, params.createOrderParamsList[i]);\n        }\n\n        vars.actionsCount = params.createOrderParamsList.length +\n            params.updateOrderParamsList.length +\n            params.cancelOrderKeys.length;\n\n        _handleSubaccountAction(account, subaccount, Keys.SUBACCOUNT_ORDER_ACTION, vars.actionsCount, subaccountApproval);\n\n        return _batch(\n            account,\n            params.createOrderParamsList,\n            params.updateOrderParamsList,\n            params.cancelOrderKeys,\n            true // isSubaccount\n        );\n    }\n\n    function _validateCreateOrderParams(\n        address account,\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) internal pure {\n        if (params.addresses.receiver != account) {\n            revert Errors.InvalidReceiver(params.addresses.receiver);\n        }\n\n        if (params.addresses.cancellationReceiver != address(0) && params.addresses.cancellationReceiver != account) {\n            revert Errors.InvalidCancellationReceiverForSubaccountOrder(params.addresses.cancellationReceiver, account);\n        }\n    }\n\n    // @note all params except subaccount should be part of the corresponding struct hash\n    function createOrder(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account, // main account\n        address subaccount,\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) external nonReentrant withRelay(relayParams, account, true) returns (bytes32) {\n        bytes32 structHash = RelayUtils.getCreateOrderStructHash(relayParams, subaccountApproval, account, params);\n        _validateCall(relayParams, subaccount, structHash);\n        _validateCreateOrderParams(account, params);\n        _handleSubaccountAction(account, subaccount, Keys.SUBACCOUNT_ORDER_ACTION, 1, subaccountApproval);\n\n        return\n            _createOrder(\n                account,\n                params,\n                true // isSubaccount\n            );\n    }\n\n    // @note all params except subaccount should be part of the corresponding struct hash\n    function updateOrder(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account, // main account\n        address subaccount,\n        UpdateOrderParams calldata params\n    ) external nonReentrant withRelay(relayParams, account, true) {\n        bytes32 structHash = RelayUtils.getUpdateOrderStructHash(relayParams, subaccountApproval, account, params);\n        _validateCall(relayParams, subaccount, structHash);\n        _handleSubaccountAction(account, subaccount, Keys.SUBACCOUNT_ORDER_ACTION, 1, subaccountApproval);\n\n        _updateOrder(\n            account,\n            params,\n            true // isSubaccount\n        );\n    }\n\n    // @note all params except subaccount should be part of the corresponding struct hash\n    function cancelOrder(\n        RelayParams calldata relayParams,\n        SubaccountApproval calldata subaccountApproval,\n        address account, // main account\n        address subaccount,\n        bytes32 key\n    ) external nonReentrant withRelay(relayParams, account, true) {\n        bytes32 structHash = RelayUtils.getCancelOrderStructHash(relayParams, subaccountApproval, account, key);\n        _validateCall(relayParams, subaccount, structHash);\n        _handleSubaccountAction(account, subaccount, Keys.SUBACCOUNT_ORDER_ACTION, 1, subaccountApproval);\n        _cancelOrder(account, key);\n    }\n\n    // @note all params except account should be part of the corresponding struct hash\n    function removeSubaccount(\n        RelayParams calldata relayParams,\n        address account,\n        address subaccount\n    ) external nonReentrant withRelay(relayParams, account, false) {\n        // isSubaccount=false is passed to `withRelay` modifier because this action is signed by the main account\n        bytes32 structHash = RelayUtils.getRemoveSubaccountStructHash(relayParams, subaccount);\n        _validateCall(relayParams, account, structHash);\n\n        SubaccountUtils.removeSubaccount(dataStore, eventEmitter, account, subaccount);\n    }\n\n    function _handleSubaccountAction(\n        address account,\n        address subaccount,\n        bytes32 actionType,\n        uint256 actionsCount,\n        SubaccountApproval calldata subaccountApproval\n    ) internal {\n        FeatureUtils.validateFeature(dataStore, Keys.subaccountFeatureDisabledKey(address(this)));\n\n        _handleSubaccountApproval(account, subaccountApproval);\n\n        SubaccountUtils.handleSubaccountAction(dataStore, eventEmitter, account, subaccount, actionType, actionsCount);\n    }\n\n    function _handleSubaccountApproval(address account, SubaccountApproval calldata subaccountApproval) internal {\n        if (subaccountApproval.signature.length == 0) {\n            return;\n        }\n\n        if (subaccountApproval.subaccount == address(0)) {\n            revert Errors.InvalidSubaccountApprovalSubaccount();\n        }\n\n        if (block.timestamp > subaccountApproval.deadline) {\n            revert Errors.SubaccountApprovalDeadlinePassed(block.timestamp, subaccountApproval.deadline);\n        }\n\n        uint256 storedNonce = subaccountApprovalNonces[account];\n        if (storedNonce != subaccountApproval.nonce) {\n            revert Errors.InvalidSubaccountApprovalNonce(storedNonce, subaccountApproval.nonce);\n        }\n        subaccountApprovalNonces[account] = storedNonce + 1;\n\n        bytes32 domainSeparator = _getDomainSeparator(block.chainid);\n        bytes32 structHash = RelayUtils.getSubaccountApprovalStructHash(subaccountApproval);\n        bytes32 digest = ECDSA.toTypedDataHash(domainSeparator, structHash);\n        _validateSignature(digest, subaccountApproval.signature, account, \"subaccount approval\");\n\n        SubaccountUtils.handleSubaccountApproval(dataStore, eventEmitter, account, subaccountApproval);\n    }\n}\n"
    },
    "contracts/router/Router.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../role/RoleModule.sol\";\n\n/**\n * @title Router\n * @dev Users will approve this router for token spenditures\n */\ncontract Router is RoleModule {\n    using SafeERC20 for IERC20;\n\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\n\n    /**\n     * @dev transfer the specified amount of tokens from the account to the receiver\n     * @param token the token to transfer\n     * @param account the account to transfer from\n     * @param receiver the account to transfer to\n     * @param amount the amount of tokens to transfer\n     */\n    function pluginTransfer(address token, address account, address receiver, uint256 amount) external onlyRouterPlugin {\n        IERC20(token).safeTransferFrom(account, receiver, amount);\n    }\n}\n"
    },
    "contracts/router/SubaccountRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./BaseRouter.sol\";\nimport \"../exchange/IOrderHandler.sol\";\nimport \"../feature/FeatureUtils.sol\";\nimport \"../subaccount/SubaccountUtils.sol\";\nimport \"../order/OrderVault.sol\";\nimport \"../order/OrderStoreUtils.sol\";\n\ncontract SubaccountRouter is BaseRouter {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    using Order for Order.Props;\n\n    IOrderHandler public immutable orderHandler;\n    OrderVault public immutable orderVault;\n\n    constructor(\n        Router _router,\n        RoleStore _roleStore,\n        DataStore _dataStore,\n        EventEmitter _eventEmitter,\n        IOrderHandler _orderHandler,\n        OrderVault _orderVault\n    ) BaseRouter(_router, _roleStore, _dataStore, _eventEmitter) {\n        orderHandler = _orderHandler;\n        orderVault = _orderVault;\n    }\n\n    receive() external payable {\n        address wnt = TokenUtils.wnt(dataStore);\n        if (msg.sender != wnt) {\n            revert Errors.InvalidNativeTokenSender(msg.sender);\n        }\n    }\n\n    function addSubaccount(address subaccount) external payable nonReentrant {\n        address account = msg.sender;\n        SubaccountUtils.addSubaccount(dataStore, eventEmitter, account, subaccount);\n    }\n\n    function removeSubaccount(address subaccount) external payable nonReentrant {\n        address account = msg.sender;\n        SubaccountUtils.removeSubaccount(dataStore, eventEmitter, account, subaccount);\n    }\n\n    function setSubaccountExpiresAt(\n        address subaccount,\n        bytes32 actionType,\n        uint256 expiresAt\n    ) external payable nonReentrant {\n        address account = msg.sender;\n        SubaccountUtils.setSubaccountExpiresAt(dataStore, eventEmitter, account, subaccount, actionType, expiresAt);\n    }\n\n    function setMaxAllowedSubaccountActionCount(\n        address subaccount,\n        bytes32 actionType,\n        uint256 maxAllowedCount\n    ) external payable nonReentrant {\n        address account = msg.sender;\n\n        SubaccountUtils.setMaxAllowedSubaccountActionCount(\n            dataStore,\n            eventEmitter,\n            account,\n            subaccount,\n            actionType,\n            maxAllowedCount\n        );\n    }\n\n    function setSubaccountAutoTopUpAmount(\n        address subaccount,\n        uint256 amount\n    ) external payable nonReentrant {\n        address account = msg.sender;\n\n        SubaccountUtils.setSubaccountAutoTopUpAmount(\n            dataStore,\n            eventEmitter,\n            account,\n            subaccount,\n            amount\n        );\n    }\n\n    function createOrder(\n        address account,\n        IBaseOrderUtils.CreateOrderParams calldata params\n    ) external payable nonReentrant returns (bytes32) {\n        uint256 startingGas = gasleft();\n\n        _handleSubaccountAction(account, Keys.SUBACCOUNT_ORDER_ACTION);\n\n        if (params.addresses.receiver != account) {\n            revert Errors.InvalidReceiverForSubaccountOrder(params.addresses.receiver, account);\n        }\n\n        if (params.addresses.cancellationReceiver != address(0) && params.addresses.cancellationReceiver != account) {\n            revert Errors.InvalidCancellationReceiverForSubaccountOrder(params.addresses.cancellationReceiver, account);\n        }\n\n        if (\n            params.orderType == Order.OrderType.MarketSwap ||\n            params.orderType == Order.OrderType.LimitSwap ||\n            params.orderType == Order.OrderType.MarketIncrease ||\n            params.orderType == Order.OrderType.LimitIncrease ||\n            params.orderType == Order.OrderType.StopIncrease\n        ) {\n            router.pluginTransfer(\n                params.addresses.initialCollateralToken, // token\n                account, // account\n                address(orderVault), // receiver\n                params.numbers.initialCollateralDeltaAmount // amount\n            );\n        }\n\n        bytes32 key = orderHandler.createOrder(\n            account,\n            params,\n            params.addresses.callbackContract != address(0)\n        );\n\n        _autoTopUpSubaccount(\n            account, // account\n            msg.sender, // subaccount\n            startingGas, // startingGas\n            params.numbers.executionFee // executionFee\n        );\n\n        return key;\n    }\n\n    function updateOrder(\n        bytes32 key,\n        uint256 sizeDeltaUsd,\n        uint256 acceptablePrice,\n        uint256 triggerPrice,\n        uint256 minOutputAmount,\n        uint256 validFromTime,\n        bool autoCancel\n    ) external payable nonReentrant {\n        uint256 startingGas = gasleft();\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n\n        if (order.account() == address(0)) { revert Errors.EmptyOrder(); }\n\n        _handleSubaccountAction(order.account(), Keys.SUBACCOUNT_ORDER_ACTION);\n\n        orderHandler.updateOrder(\n            key,\n            sizeDeltaUsd,\n            acceptablePrice,\n            triggerPrice,\n            minOutputAmount,\n            validFromTime,\n            autoCancel,\n            order,\n            order.callbackContract() != address(0)\n        );\n\n        _autoTopUpSubaccount(\n            order.account(), // account\n            msg.sender, // subaccount\n            startingGas, // startingGas\n            0 // executionFee\n        );\n    }\n\n    function cancelOrder(\n        bytes32 key\n    ) external payable nonReentrant {\n        uint256 startingGas = gasleft();\n\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\n\n        if (order.account() == address(0)) { revert Errors.EmptyOrder(); }\n\n        _handleSubaccountAction(order.account(), Keys.SUBACCOUNT_ORDER_ACTION);\n\n        orderHandler.cancelOrder(key);\n\n        _autoTopUpSubaccount(\n            order.account(), // account\n            msg.sender, // subaccount\n            startingGas, // startingGas\n            0 // executionFee\n        );\n    }\n\n    function _handleSubaccountAction(address account, bytes32 actionType) internal {\n        FeatureUtils.validateFeature(dataStore, Keys.subaccountFeatureDisabledKey(address(this)));\n\n        address subaccount = msg.sender;\n        SubaccountUtils.handleSubaccountAction(\n            dataStore,\n            eventEmitter,\n            account,\n            subaccount,\n            actionType,\n            1\n        );\n    }\n\n    // the subaccount is topped up with wrapped native tokens\n    // the subaccount should separately unwrap the token as needed\n    function _autoTopUpSubaccount(address account, address subaccount, uint256 startingGas, uint256 executionFee) internal {\n        uint256 amount = SubaccountUtils.getSubaccountAutoTopUpAmount(dataStore, account, subaccount);\n        if (amount == 0) {\n            return;\n        }\n\n        IERC20 wnt = IERC20(dataStore.getAddress(Keys.WNT));\n\n        if (wnt.allowance(account, address(router)) < amount) { return; }\n        if (wnt.balanceOf(account) < amount) { return; }\n\n        // cap the top up amount to the amount of native tokens used\n        uint256 nativeTokensUsed = (startingGas - gasleft()) * tx.gasprice + executionFee;\n        if (nativeTokensUsed < amount) { amount = nativeTokensUsed; }\n\n        router.pluginTransfer(\n            address(wnt), // token\n            account, // account\n            address(this), // receiver\n            amount // amount\n        );\n\n        TokenUtils.withdrawAndSendNativeToken(\n            dataStore,\n            address(wnt),\n            subaccount,\n            amount\n        );\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"amount\", amount);\n\n        eventEmitter.emitEventLog2(\n            \"SubaccountAutoTopUp\",\n            Cast.toBytes32(account),\n            Cast.toBytes32(subaccount),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/shift/Shift.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary Shift {\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n    }\n\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address fromMarket;\n        address toMarket;\n    }\n\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 minMarketTokens;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function fromMarket(Props memory props) internal pure returns (address) {\n        return props.addresses.fromMarket;\n    }\n\n    function setFromMarket(Props memory props, address value) internal pure {\n        props.addresses.fromMarket = value;\n    }\n\n    function toMarket(Props memory props) internal pure returns (address) {\n        return props.addresses.toMarket;\n    }\n\n    function setToMarket(Props memory props, address value) internal pure {\n        props.addresses.toMarket = value;\n    }\n\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.marketTokenAmount;\n    }\n\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.marketTokenAmount = value;\n    }\n\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minMarketTokens;\n    }\n\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\n        props.numbers.minMarketTokens = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n}\n"
    },
    "contracts/shift/ShiftEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nimport \"./Shift.sol\";\n\nlibrary ShiftEventUtils {\n    using Shift for Shift.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitShiftCreated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        Shift.Props memory shift\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(5);\n        eventData.addressItems.setItem(0, \"account\", shift.account());\n        eventData.addressItems.setItem(1, \"receiver\", shift.receiver());\n        eventData.addressItems.setItem(2, \"callbackContract\", shift.callbackContract());\n        eventData.addressItems.setItem(3, \"fromMarket\", shift.fromMarket());\n        eventData.addressItems.setItem(4, \"toMarket\", shift.toMarket());\n\n        eventData.uintItems.initItems(5);\n        eventData.uintItems.setItem(0, \"marketTokenAmount\", shift.marketTokenAmount());\n        eventData.uintItems.setItem(1, \"minMarketTokens\", shift.minMarketTokens());\n        eventData.uintItems.setItem(2, \"updatedAtTime\", shift.updatedAtTime());\n        eventData.uintItems.setItem(3, \"executionFee\", shift.executionFee());\n        eventData.uintItems.setItem(4, \"callbackGasLimit\", shift.callbackGasLimit());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog2(\n            \"ShiftCreated\",\n            key,\n            Cast.toBytes32(shift.account()),\n            eventData\n        );\n    }\n\n    function emitShiftExecuted(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        uint256 receivedMarketTokens\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"receivedMarketTokens\", receivedMarketTokens);\n\n        eventEmitter.emitEventLog2(\n            \"ShiftExecuted\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitShiftCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\n            \"ShiftCancelled\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/shift/ShiftStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Shift.sol\";\n\nlibrary ShiftStoreUtils {\n    using Shift for Shift.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\"RECEIVER\"));\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\"CALLBACK_CONTRACT\"));\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\"UI_FEE_RECEIVER\"));\n    bytes32 public constant FROM_MARKET = keccak256(abi.encode(\"FROM_MARKET\"));\n    bytes32 public constant TO_MARKET = keccak256(abi.encode(\"TO_MARKET\"));\n\n    bytes32 public constant MARKET_TOKEN_AMOUNT = keccak256(abi.encode(\"MARKET_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_MARKET_TOKENS = keccak256(abi.encode(\"MIN_MARKET_TOKENS\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\"EXECUTION_FEE\"));\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"CALLBACK_GAS_LIMIT\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (Shift.Props memory) {\n        Shift.Props memory shift;\n        if (!dataStore.containsBytes32(Keys.SHIFT_LIST, key)) {\n            return shift;\n        }\n\n        shift.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        shift.setReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        ));\n\n        shift.setCallbackContract(dataStore.getAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        ));\n\n        shift.setUiFeeReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        ));\n\n        shift.setFromMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, FROM_MARKET))\n        ));\n\n        shift.setToMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, TO_MARKET))\n        ));\n\n        shift.setMarketTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        ));\n\n        shift.setMinMarketTokens(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\n        ));\n\n        shift.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        shift.setExecutionFee(dataStore.getUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        ));\n\n        shift.setCallbackGasLimit(dataStore.getUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        ));\n\n        return shift;\n    }\n\n    function set(DataStore dataStore, bytes32 key, Shift.Props memory shift) external {\n        dataStore.addBytes32(\n            Keys.SHIFT_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountShiftListKey(shift.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            shift.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, RECEIVER)),\n            shift.receiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\n            shift.callbackContract()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\n            shift.uiFeeReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, FROM_MARKET)),\n            shift.fromMarket()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, TO_MARKET)),\n            shift.toMarket()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT)),\n            shift.marketTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS)),\n            shift.minMarketTokens()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            shift.updatedAtTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, EXECUTION_FEE)),\n            shift.executionFee()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\n            shift.callbackGasLimit()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.SHIFT_LIST, key)) {\n            revert Errors.ShiftNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.SHIFT_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountShiftListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, FROM_MARKET))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, TO_MARKET))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_MARKET_TOKENS))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        );\n    }\n\n    function getShiftCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.SHIFT_LIST);\n    }\n\n    function getShiftKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.SHIFT_LIST, start, end);\n    }\n\n    function getAccountShiftCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountShiftListKey(account));\n    }\n\n    function getAccountShiftKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountShiftListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/shift/ShiftUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\n\nimport \"./ShiftVault.sol\";\nimport \"./ShiftStoreUtils.sol\";\nimport \"./ShiftEventUtils.sol\";\n\nimport \"../nonce/NonceUtils.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\nimport \"../utils/AccountUtils.sol\";\n\nimport \"../deposit/ExecuteDepositUtils.sol\";\nimport \"../withdrawal/ExecuteWithdrawalUtils.sol\";\n\nlibrary ShiftUtils {\n    using Deposit for Deposit.Props;\n    using Withdrawal for Withdrawal.Props;\n    using Shift for Shift.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    struct CreateShiftParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address fromMarket;\n        address toMarket;\n        uint256 minMarketTokens;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    struct CreateShiftCache {\n        uint256 estimatedGasLimit;\n        uint256 oraclePriceCount;\n        bytes32 key;\n    }\n\n    struct ExecuteShiftParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        ShiftVault shiftVault;\n        Oracle oracle;\n        bytes32 key;\n        address keeper;\n        uint256 startingGas;\n    }\n\n    struct ExecuteShiftCache {\n        Withdrawal.Props withdrawal;\n        bytes32 withdrawalKey;\n        ExecuteWithdrawalUtils.ExecuteWithdrawalParams executeWithdrawalParams;\n        Market.Props depositMarket;\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n        Deposit.Props deposit;\n        bytes32 depositKey;\n        ExecuteDepositUtils.ExecuteDepositParams executeDepositParams;\n        uint256 receivedMarketTokens;\n    }\n\n    function createShift(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        ShiftVault shiftVault,\n        address account,\n        CreateShiftParams memory params\n    ) external returns (bytes32) {\n        AccountUtils.validateAccount(account);\n\n        if (params.fromMarket == params.toMarket) {\n            revert Errors.ShiftFromAndToMarketAreEqual(params.fromMarket);\n        }\n\n        address wnt = TokenUtils.wnt(dataStore);\n        uint256 wntAmount = shiftVault.recordTransferIn(wnt);\n\n        if (wntAmount < params.executionFee) {\n            revert Errors.InsufficientWntAmount(wntAmount, params.executionFee);\n        }\n\n        AccountUtils.validateReceiver(params.receiver);\n\n        uint256 marketTokenAmount = shiftVault.recordTransferIn(params.fromMarket);\n\n        if (marketTokenAmount == 0) {\n            revert Errors.EmptyShiftAmount();\n        }\n\n        params.executionFee = wntAmount;\n\n        Market.Props memory fromMarket = MarketUtils.getEnabledMarket(dataStore, params.fromMarket);\n        Market.Props memory toMarket = MarketUtils.getEnabledMarket(dataStore, params.toMarket);\n\n        if (fromMarket.longToken != toMarket.longToken) {\n            revert Errors.LongTokensAreNotEqual(fromMarket.longToken, toMarket.longToken);\n        }\n\n        if (fromMarket.shortToken != toMarket.shortToken) {\n            revert Errors.ShortTokensAreNotEqual(fromMarket.shortToken, toMarket.shortToken);\n        }\n\n        Shift.Props memory shift = Shift.Props(\n            Shift.Addresses(\n                account,\n                params.receiver,\n                params.callbackContract,\n                params.uiFeeReceiver,\n                params.fromMarket,\n                params.toMarket\n            ),\n            Shift.Numbers(\n                marketTokenAmount,\n                params.minMarketTokens,\n                Chain.currentTimestamp(),\n                params.executionFee,\n                params.callbackGasLimit\n            )\n        );\n\n        CallbackUtils.validateCallbackGasLimit(dataStore, shift.callbackGasLimit());\n\n        CreateShiftCache memory cache;\n\n        cache.estimatedGasLimit = GasUtils.estimateExecuteShiftGasLimit(dataStore, shift);\n        cache.oraclePriceCount = GasUtils.estimateShiftOraclePriceCount();\n        GasUtils.validateExecutionFee(dataStore, cache.estimatedGasLimit, params.executionFee, cache.oraclePriceCount);\n\n        cache.key = NonceUtils.getNextKey(dataStore);\n\n        ShiftStoreUtils.set(dataStore, cache.key, shift);\n\n        ShiftEventUtils.emitShiftCreated(eventEmitter, cache.key, shift);\n\n        return cache.key;\n    }\n\n    function executeShift(\n        ExecuteShiftParams memory params,\n        Shift.Props memory shift\n    ) external returns (uint256) {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        ShiftStoreUtils.remove(params.dataStore, params.key, shift.account());\n\n        if (shift.account() == address(0)) {\n            revert Errors.EmptyShift();\n        }\n\n        if (shift.marketTokenAmount() == 0) {\n            revert Errors.EmptyShiftAmount();\n        }\n\n        ExecuteShiftCache memory cache;\n\n        cache.depositMarket = MarketStoreUtils.get(params.dataStore, shift.toMarket());\n\n        // if a user sends tokens directly to the shiftVault\n        // the recordTransferIn after the shift withdrawal would record\n        // these additional tokens and perform a deposit on the combined\n        // token amount (tokens directly sent + tokens withdrawn)\n        //\n        // a user could use this to avoid paying deposit fees\n        //\n        // call shiftVault.recordTransferIn before the withdrawal to prevent\n        // this\n        params.shiftVault.recordTransferIn(cache.depositMarket.longToken);\n        params.shiftVault.recordTransferIn(cache.depositMarket.shortToken);\n\n        cache.withdrawal = Withdrawal.Props(\n            Withdrawal.Addresses(\n                shift.account(),\n                address(params.shiftVault), // receiver\n                address(0), // callbackContract\n                shift.uiFeeReceiver(), // uiFeeReceiver\n                shift.fromMarket(), // market\n                new address[](0), // longTokenSwapPath\n                new address[](0) // shortTokenSwapPath\n            ),\n            Withdrawal.Numbers(\n                shift.marketTokenAmount(),\n                0, // minLongTokenAmount\n                0, // minShortTokenAmount\n                shift.updatedAtTime(),\n                0, // executionFee\n                0 // callbackGasLimit\n            ),\n            Withdrawal.Flags(\n                false\n            )\n        );\n\n        cache.withdrawalKey = NonceUtils.getNextKey(params.dataStore);\n        params.dataStore.addBytes32(\n            Keys.WITHDRAWAL_LIST,\n            cache.withdrawalKey\n        );\n        WithdrawalEventUtils.emitWithdrawalCreated(\n            params.eventEmitter,\n            cache.withdrawalKey,\n            cache.withdrawal,\n            Withdrawal.WithdrawalType.Shift\n        );\n\n        cache.executeWithdrawalParams = ExecuteWithdrawalUtils.ExecuteWithdrawalParams(\n            params.dataStore,\n            params.eventEmitter,\n            WithdrawalVault(payable(params.shiftVault)),\n            params.oracle,\n            cache.withdrawalKey,\n            params.keeper,\n            params.startingGas,\n            ISwapPricingUtils.SwapPricingType.Shift\n        );\n\n        ExecuteWithdrawalUtils.executeWithdrawal(\n            cache.executeWithdrawalParams,\n            cache.withdrawal\n        );\n\n        // if the initialLongToken and initialShortToken are the same, only the initialLongTokenAmount would\n        // be non-zero, the initialShortTokenAmount would be zero\n        cache.initialLongTokenAmount = params.shiftVault.recordTransferIn(cache.depositMarket.longToken);\n        cache.initialShortTokenAmount = params.shiftVault.recordTransferIn(cache.depositMarket.shortToken);\n\n        // set the uiFeeReceiver to the zero address since the ui fee was already paid\n        // while executing the withdrawal\n        cache.deposit = Deposit.Props(\n            Deposit.Addresses(\n                shift.account(),\n                shift.receiver(),\n                address(0), // callbackContract\n                address(0), // uiFeeReceiver\n                shift.toMarket(), // market\n                cache.depositMarket.longToken, // initialLongToken\n                cache.depositMarket.shortToken, // initialShortToken\n                new address[](0), // longTokenSwapPath\n                new address[](0) // shortTokenSwapPath\n            ),\n            Deposit.Numbers(\n                cache.initialLongTokenAmount,\n                cache.initialShortTokenAmount,\n                shift.minMarketTokens(),\n                shift.updatedAtTime(),\n                0, // executionFee\n                0 // callbackGasLimit\n            ),\n            Deposit.Flags(\n                false // shouldUnwrapNativeToken\n            )\n        );\n\n        cache.depositKey = NonceUtils.getNextKey(params.dataStore);\n        params.dataStore.addBytes32(\n            Keys.DEPOSIT_LIST,\n            cache.depositKey\n        );\n        DepositEventUtils.emitDepositCreated(params.eventEmitter, cache.depositKey, cache.deposit, Deposit.DepositType.Shift);\n\n        // price impact from changes in virtual inventory should be excluded\n        // since the action of withdrawing and depositing should not result in\n        // a net change of virtual inventory\n        cache.executeDepositParams = ExecuteDepositUtils.ExecuteDepositParams(\n            params.dataStore,\n            params.eventEmitter,\n            DepositVault(payable(params.shiftVault)),\n            params.oracle,\n            cache.depositKey,\n            params.keeper,\n            params.startingGas,\n            ISwapPricingUtils.SwapPricingType.Shift,\n            false // includeVirtualInventoryImpact\n        );\n\n        cache.receivedMarketTokens = ExecuteDepositUtils.executeDeposit(\n            cache.executeDepositParams,\n            cache.deposit\n        );\n\n        ShiftEventUtils.emitShiftExecuted(\n            params.eventEmitter,\n            params.key,\n            shift.account(),\n            cache.receivedMarketTokens\n        );\n\n        EventUtils.EventLogData memory eventData;\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"receivedMarketTokens\", cache.receivedMarketTokens);\n        CallbackUtils.afterShiftExecution(params.key, shift, eventData);\n\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.shiftVault,\n            params.key,\n            shift.callbackContract(),\n            shift.executionFee(),\n            params.startingGas,\n            GasUtils.estimateShiftOraclePriceCount(),\n            params.keeper,\n            shift.receiver()\n        );\n\n        return cache.receivedMarketTokens;\n    }\n\n    function cancelShift(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        ShiftVault shiftVault,\n        bytes32 key,\n        address keeper,\n        uint256 startingGas,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        startingGas -= gasleft() / 63;\n\n        Shift.Props memory shift = ShiftStoreUtils.get(dataStore, key);\n\n        if (shift.account() == address(0)) {\n            revert Errors.EmptyShift();\n        }\n\n        if (shift.marketTokenAmount() == 0) {\n            revert Errors.EmptyShiftAmount();\n        }\n\n        ShiftStoreUtils.remove(dataStore, key, shift.account());\n\n        shiftVault.transferOut(\n            shift.fromMarket(),\n            shift.account(),\n            shift.marketTokenAmount(),\n            false // shouldUnwrapNativeToken\n        );\n\n        ShiftEventUtils.emitShiftCancelled(\n            eventEmitter,\n            key,\n            shift.account(),\n            reason,\n            reasonBytes\n        );\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterShiftCancellation(key, shift, eventData);\n\n        GasUtils.payExecutionFee(\n            dataStore,\n            eventEmitter,\n            shiftVault,\n            key,\n            shift.callbackContract(),\n            shift.executionFee(),\n            startingGas,\n            GasUtils.estimateShiftOraclePriceCount(),\n            keeper,\n            shift.receiver()\n        );\n    }\n}\n"
    },
    "contracts/shift/ShiftVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../bank/StrictBank.sol\";\n\ncontract ShiftVault is StrictBank {\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\n}\n"
    },
    "contracts/subaccount/SubaccountUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../utils/Cast.sol\";\n\nstruct SubaccountApproval {\n    address subaccount;\n    bool shouldAdd;\n    uint256 expiresAt;\n    uint256 maxAllowedCount;\n    bytes32 actionType;\n    uint256 nonce; // for replay attack protection\n    uint256 deadline;\n    bytes signature;\n}\n\nlibrary SubaccountUtils {\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function addSubaccount(DataStore dataStore, EventEmitter eventEmitter, address account, address subaccount) public {\n        bytes32 setKey = Keys.subaccountListKey(account);\n        dataStore.addAddress(setKey, subaccount);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventEmitter.emitEventLog2(\"AddSubaccount\", Cast.toBytes32(account), Cast.toBytes32(subaccount), eventData);\n    }\n\n    function removeSubaccount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        address subaccount\n    ) external {\n        bytes32 setKey = Keys.subaccountListKey(account);\n        dataStore.removeAddress(setKey, subaccount);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventEmitter.emitEventLog2(\"RemoveSubaccount\", Cast.toBytes32(account), Cast.toBytes32(subaccount), eventData);\n    }\n\n    function handleSubaccountApproval(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        SubaccountApproval calldata subaccountApproval\n    ) external {\n        if (subaccountApproval.maxAllowedCount > 0) {\n            setMaxAllowedSubaccountActionCount(\n                dataStore,\n                eventEmitter,\n                account,\n                subaccountApproval.subaccount,\n                subaccountApproval.actionType,\n                subaccountApproval.maxAllowedCount\n            );\n        }\n\n        if (subaccountApproval.expiresAt > 0) {\n            setSubaccountExpiresAt(\n                dataStore,\n                eventEmitter,\n                account,\n                subaccountApproval.subaccount,\n                subaccountApproval.actionType,\n                subaccountApproval.expiresAt\n            );\n        }\n\n        if (subaccountApproval.shouldAdd) {\n            addSubaccount(dataStore, eventEmitter, account, subaccountApproval.subaccount);\n        }\n    }\n\n    function handleSubaccountAction(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        address subaccount,\n        bytes32 actionType,\n        uint256 actionsCount\n    ) external {\n        validateSubaccount(dataStore, account, subaccount);\n\n        bytes32 key = Keys.subaccountActionCountKey(account, subaccount, actionType);\n        uint256 nextValue = dataStore.incrementUint(key, actionsCount);\n        validateSubaccountActionCountAndExpiresAt(dataStore, account, subaccount, actionType, nextValue);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"nextValue\", nextValue);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"actionType\", actionType);\n\n        eventEmitter.emitEventLog2(\n            \"IncrementSubaccountActionCount\",\n            Cast.toBytes32(account),\n            Cast.toBytes32(subaccount),\n            eventData\n        );\n    }\n\n    function setSubaccountExpiresAt(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        address subaccount,\n        bytes32 actionType,\n        uint256 expiresAt\n    ) public {\n        bytes32 key = Keys.subaccountExpiresAtKey(account, subaccount, actionType);\n        dataStore.setUint(key, expiresAt);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"expiresAt\", expiresAt);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"actionType\", actionType);\n\n        eventEmitter.emitEventLog2(\n            \"SetSubaccountExpiresAt\",\n            Cast.toBytes32(account),\n            Cast.toBytes32(subaccount),\n            eventData\n        );\n    }\n\n    function setMaxAllowedSubaccountActionCount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        address subaccount,\n        bytes32 actionType,\n        uint256 maxAllowedCount\n    ) public {\n        bytes32 key = Keys.maxAllowedSubaccountActionCountKey(account, subaccount, actionType);\n        dataStore.setUint(key, maxAllowedCount);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"maxAllowedCount\", maxAllowedCount);\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"actionType\", actionType);\n\n        eventEmitter.emitEventLog2(\n            \"SetMaxAllowedSubaccountActionCount\",\n            Cast.toBytes32(account),\n            Cast.toBytes32(subaccount),\n            eventData\n        );\n    }\n\n    function validateSubaccountActionCountAndExpiresAt(\n        DataStore dataStore,\n        address account,\n        address subaccount,\n        bytes32 actionType,\n        uint256 count\n    ) internal view {\n        bytes32 expiresAtKey = Keys.subaccountExpiresAtKey(account, subaccount, actionType);\n        uint256 expiresAt = dataStore.getUint(expiresAtKey);\n\n        if (block.timestamp > expiresAt) {\n            revert Errors.SubaccountApprovalExpired(account, subaccount, expiresAt, block.timestamp);\n        }\n\n        bytes32 maxCountKey = Keys.maxAllowedSubaccountActionCountKey(account, subaccount, actionType);\n        uint256 maxCount = dataStore.getUint(maxCountKey);\n\n        if (count > maxCount) {\n            revert Errors.MaxSubaccountActionCountExceeded(account, subaccount, count, maxCount);\n        }\n    }\n\n    function validateSubaccount(DataStore dataStore, address account, address subaccount) internal view {\n        bytes32 setKey = Keys.subaccountListKey(account);\n        if (!dataStore.containsAddress(setKey, subaccount)) {\n            revert Errors.SubaccountNotAuthorized(account, subaccount);\n        }\n    }\n\n    function getSubaccountAutoTopUpAmount(\n        DataStore dataStore,\n        address account,\n        address subaccount\n    ) internal view returns (uint256) {\n        bytes32 key = Keys.subaccountAutoTopUpAmountKey(account, subaccount);\n        return dataStore.getUint(key);\n    }\n\n    function setSubaccountAutoTopUpAmount(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        address account,\n        address subaccount,\n        uint256 amount\n    ) internal {\n        bytes32 key = Keys.subaccountAutoTopUpAmountKey(account, subaccount);\n\n        dataStore.setUint(key, amount);\n\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"account\", account);\n        eventData.addressItems.setItem(1, \"subaccount\", subaccount);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"amount\", amount);\n\n        eventEmitter.emitEventLog2(\n            \"SetSubaccountAutoTopUpAmount\",\n            Cast.toBytes32(account),\n            Cast.toBytes32(subaccount),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/swap/SwapHandler.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../role/RoleModule.sol\";\nimport \"./SwapUtils.sol\";\n\n/**\n * @title SwapHandler\n * @dev A contract to help with swap functions\n */\ncontract SwapHandler is ReentrancyGuard, RoleModule {\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\n\n    /**\n     * @dev perform a swap based on the given params\n     * @param params SwapUtils.SwapParams\n     * @return (outputToken, outputAmount)\n     */\n    function swap(\n        SwapUtils.SwapParams memory params\n    )\n        external\n        nonReentrant\n        onlyController\n        returns (address, uint256)\n    {\n        return SwapUtils.swap(params);\n    }\n}\n"
    },
    "contracts/swap/SwapUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\nimport \"../event/EventEmitter.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../pricing/SwapPricingUtils.sol\";\nimport \"../fee/FeeUtils.sol\";\n\n/**\n * @title SwapUtils\n * @dev Library for swap functions\n */\nlibrary SwapUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Price for Price.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    /**\n     * @param dataStore The contract that provides access to data stored on-chain.\n     * @param eventEmitter The contract that emits events.\n     * @param oracle The contract that provides access to price data from oracles.\n     * @param bank The contract providing the funds for the swap.\n     * @param key An identifying key for the swap.\n     * @param tokenIn The address of the token that is being swapped.\n     * @param amountIn The amount of the token that is being swapped.\n     * @param swapPathMarkets An array of market properties, specifying the markets in which the swap should be executed.\n     * @param minOutputAmount The minimum amount of tokens that should be received as part of the swap.\n     * @param receiver The address to which the swapped tokens should be sent.\n     * @param uiFeeReceiver The address of the ui fee receiver.\n     * @param shouldUnwrapNativeToken A boolean indicating whether the received tokens should be unwrapped from the wrapped native token (WNT) if they are wrapped.\n     */\n    struct SwapParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        Oracle oracle;\n        Bank bank;\n        bytes32 key;\n        address tokenIn;\n        uint256 amountIn;\n        Market.Props[] swapPathMarkets;\n        uint256 minOutputAmount;\n        address receiver;\n        address uiFeeReceiver;\n        bool shouldUnwrapNativeToken;\n        ISwapPricingUtils.SwapPricingType swapPricingType;\n    }\n\n    /**\n     * @param market The market in which the swap should be executed.\n     * @param tokenIn The address of the token that is being swapped.\n     * @param amountIn The amount of the token that is being swapped.\n     * @param receiver The address to which the swapped tokens should be sent.\n     * @param shouldUnwrapNativeToken A boolean indicating whether the received tokens should be unwrapped from the wrapped native token (WNT) if they are wrapped.\n     */\n    struct _SwapParams {\n        Market.Props market;\n        address tokenIn;\n        uint256 amountIn;\n        address receiver;\n        bool shouldUnwrapNativeToken;\n    }\n\n    /**\n     * @param tokenOut The address of the token that is being received as part of the swap.\n     * @param tokenInPrice The price of the token that is being swapped.\n     * @param tokenOutPrice The price of the token that is being received as part of the swap.\n     * @param amountIn The amount of the token that is being swapped.\n     * @param amountOut The amount of the token that is being received as part of the swap.\n     * @param poolAmountOut The total amount of the token that is being received by all users in the swap pool.\n     */\n    struct SwapCache {\n        address tokenOut;\n        Price.Props tokenInPrice;\n        Price.Props tokenOutPrice;\n        uint256 amountIn;\n        uint256 amountInAfterFees;\n        uint256 amountOut;\n        uint256 poolAmountOut;\n        int256 priceImpactUsd;\n        int256 priceImpactAmount;\n        uint256 cappedDiffUsd;\n        int256 tokenInPriceImpactAmount;\n    }\n\n    event SwapReverted(string reason, bytes reasonBytes);\n\n    /**\n     * @dev Swaps a given amount of a given token for another token based on a\n     * specified swap path.\n     * @param params The parameters for the swap.\n     * @return A tuple containing the address of the token that was received as\n     * part of the swap and the amount of the received token.\n     */\n    function swap(SwapParams memory params) external returns (address, uint256) {\n        if (params.amountIn == 0) {\n            return (params.tokenIn, params.amountIn);\n        }\n\n        if (params.swapPathMarkets.length == 0) {\n            if (params.amountIn < params.minOutputAmount) {\n                revert Errors.InsufficientOutputAmount(params.amountIn, params.minOutputAmount);\n            }\n\n            if (address(params.bank) != params.receiver) {\n                params.bank.transferOut(\n                    params.tokenIn,\n                    params.receiver,\n                    params.amountIn,\n                    params.shouldUnwrapNativeToken\n                );\n            }\n\n            return (params.tokenIn, params.amountIn);\n        }\n\n        if (address(params.bank) != params.swapPathMarkets[0].marketToken) {\n            params.bank.transferOut(params.tokenIn, params.swapPathMarkets[0].marketToken, params.amountIn, false);\n        }\n\n        address tokenOut = params.tokenIn;\n        uint256 outputAmount = params.amountIn;\n\n        for (uint256 i; i < params.swapPathMarkets.length; i++) {\n            Market.Props memory market = params.swapPathMarkets[i];\n\n            bool flagExists = params.dataStore.getBool(Keys.swapPathMarketFlagKey(market.marketToken));\n            if (flagExists) {\n                revert Errors.DuplicatedMarketInSwapPath(market.marketToken);\n            }\n\n            params.dataStore.setBool(Keys.swapPathMarketFlagKey(market.marketToken), true);\n\n            uint256 nextIndex = i + 1;\n            address receiver;\n            if (nextIndex < params.swapPathMarkets.length) {\n                receiver = params.swapPathMarkets[nextIndex].marketToken;\n            } else {\n                receiver = params.receiver;\n            }\n\n            _SwapParams memory _params = _SwapParams(\n                market,\n                tokenOut,\n                outputAmount,\n                receiver,\n                i == params.swapPathMarkets.length - 1 ? params.shouldUnwrapNativeToken : false // only convert ETH on the last swap if needed\n            );\n\n            (tokenOut, outputAmount) = _swap(params, _params);\n        }\n\n        for (uint256 i; i < params.swapPathMarkets.length; i++) {\n            Market.Props memory market = params.swapPathMarkets[i];\n            params.dataStore.setBool(Keys.swapPathMarketFlagKey(market.marketToken), false);\n        }\n\n        if (outputAmount < params.minOutputAmount) {\n            revert Errors.InsufficientSwapOutputAmount(outputAmount, params.minOutputAmount);\n        }\n\n        return (tokenOut, outputAmount);\n    }\n\n    function validateSwapOutputToken(\n        DataStore dataStore,\n        address[] memory swapPath,\n        address inputToken,\n        address expectedOutputToken\n    ) internal view {\n        address outputToken = getOutputToken(dataStore, swapPath, inputToken);\n        if (outputToken != expectedOutputToken) {\n            revert Errors.InvalidSwapOutputToken(outputToken, expectedOutputToken);\n        }\n    }\n\n    function getOutputToken(\n        DataStore dataStore,\n        address[] memory swapPath,\n        address inputToken\n    ) internal view returns (address) {\n        address outputToken = inputToken;\n        Market.Props[] memory markets = MarketUtils.getSwapPathMarkets(dataStore, swapPath);\n        uint256 marketCount = markets.length;\n\n        for (uint256 i; i < marketCount; i++) {\n            Market.Props memory market = markets[i];\n            outputToken = MarketUtils.getOppositeToken(outputToken, market);\n        }\n\n        return outputToken;\n    }\n\n    /**\n     * Performs a swap on a single market.\n     *\n     * @param params  The parameters for the swap.\n     * @param _params The parameters for the swap on this specific market.\n     * @return The token and amount that was swapped.\n     */\n    function _swap(SwapParams memory params, _SwapParams memory _params) internal returns (address, uint256) {\n        SwapCache memory cache;\n\n        if (_params.tokenIn != _params.market.longToken && _params.tokenIn != _params.market.shortToken) {\n            revert Errors.InvalidTokenIn(_params.tokenIn, _params.market.marketToken);\n        }\n\n        MarketUtils.validateSwapMarket(params.dataStore, _params.market);\n\n        cache.tokenOut = MarketUtils.getOppositeToken(_params.tokenIn, _params.market);\n        cache.tokenInPrice = params.oracle.getPrimaryPrice(_params.tokenIn);\n        cache.tokenOutPrice = params.oracle.getPrimaryPrice(cache.tokenOut);\n\n        // note that this may not be entirely accurate since the effect of the\n        // swap fees are not accounted for\n        cache.priceImpactUsd = SwapPricingUtils.getPriceImpactUsd(\n            SwapPricingUtils.GetPriceImpactUsdParams(\n                params.dataStore,\n                _params.market,\n                _params.tokenIn,\n                cache.tokenOut,\n                cache.tokenInPrice.midPrice(),\n                cache.tokenOutPrice.midPrice(),\n                (_params.amountIn * cache.tokenInPrice.midPrice()).toInt256(),\n                -(_params.amountIn * cache.tokenInPrice.midPrice()).toInt256(),\n                true // includeVirtualInventoryImpact\n            )\n        );\n\n        SwapPricingUtils.SwapFees memory fees = SwapPricingUtils.getSwapFees(\n            params.dataStore,\n            _params.market.marketToken,\n            _params.amountIn,\n            cache.priceImpactUsd > 0, // forPositiveImpact\n            params.uiFeeReceiver,\n            params.swapPricingType\n        );\n\n        bytes32 swapFeeType = params.swapPricingType == ISwapPricingUtils.SwapPricingType.AtomicSwap\n            ? Keys.ATOMIC_SWAP_FEE_TYPE\n            : Keys.SWAP_FEE_TYPE;\n\n        FeeUtils.incrementClaimableFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            _params.market.marketToken,\n            _params.tokenIn,\n            fees.feeReceiverAmount,\n            swapFeeType\n        );\n\n        FeeUtils.incrementClaimableUiFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            params.uiFeeReceiver,\n            _params.market.marketToken,\n            _params.tokenIn,\n            fees.uiFeeAmount,\n            Keys.UI_SWAP_FEE_TYPE\n        );\n\n        if (cache.priceImpactUsd > 0) {\n            // when there is a positive price impact factor, additional tokens from the swap impact pool\n            // are withdrawn for the user\n            // for example, if 50,000 USDC is swapped out and there is a positive price impact\n            // an additional 100 USDC may be sent to the user\n            // the swap impact pool is decreased by the used amount\n\n            cache.amountIn = fees.amountAfterFees;\n\n            (cache.priceImpactAmount, cache.cappedDiffUsd) = MarketUtils.applySwapImpactWithCap(\n                params.dataStore,\n                params.eventEmitter,\n                _params.market.marketToken,\n                cache.tokenOut,\n                cache.tokenOutPrice,\n                cache.priceImpactUsd\n            );\n\n            // if the positive price impact was capped, use the tokenIn swap\n            // impact pool to pay for the positive price impact\n            if (cache.cappedDiffUsd != 0) {\n                (cache.tokenInPriceImpactAmount /* uint256 cappedDiffUsd */, ) = MarketUtils.applySwapImpactWithCap(\n                    params.dataStore,\n                    params.eventEmitter,\n                    _params.market.marketToken,\n                    _params.tokenIn,\n                    cache.tokenInPrice,\n                    cache.cappedDiffUsd.toInt256()\n                );\n\n                // this additional amountIn is already in the Market\n                // it is subtracted from the swap impact pool amount\n                // and the market pool amount is increased by the updated\n                // amountIn below\n                cache.amountIn += cache.tokenInPriceImpactAmount.toUint256();\n            }\n\n            // round amountOut down\n            cache.amountOut = (cache.amountIn * cache.tokenInPrice.min) / cache.tokenOutPrice.max;\n            cache.poolAmountOut = cache.amountOut;\n\n            // the below amount is subtracted from the swap impact pool instead of the market pool amount\n            cache.amountOut += cache.priceImpactAmount.toUint256();\n        } else {\n            // when there is a negative price impact factor,\n            // less of the input amount is sent to the pool\n            // for example, if 10 ETH is swapped in and there is a negative price impact\n            // only 9.995 ETH may be swapped in\n            // the remaining 0.005 ETH will be stored in the swap impact pool\n\n            (cache.priceImpactAmount /* uint256 cappedDiffUsd */, ) = MarketUtils.applySwapImpactWithCap(\n                params.dataStore,\n                params.eventEmitter,\n                _params.market.marketToken,\n                _params.tokenIn,\n                cache.tokenInPrice,\n                cache.priceImpactUsd\n            );\n\n            if (fees.amountAfterFees <= (-cache.priceImpactAmount).toUint256()) {\n                revert Errors.SwapPriceImpactExceedsAmountIn(fees.amountAfterFees, cache.priceImpactAmount);\n            }\n\n            cache.amountIn = fees.amountAfterFees - (-cache.priceImpactAmount).toUint256();\n            cache.amountOut = (cache.amountIn * cache.tokenInPrice.min) / cache.tokenOutPrice.max;\n            cache.poolAmountOut = cache.amountOut;\n        }\n\n        // the amountOut value includes the positive price impact amount\n        if (_params.receiver != _params.market.marketToken) {\n            MarketToken(payable(_params.market.marketToken)).transferOut(\n                cache.tokenOut,\n                _params.receiver,\n                cache.amountOut,\n                _params.shouldUnwrapNativeToken\n            );\n        }\n\n        MarketUtils.applyDeltaToPoolAmount(\n            params.dataStore,\n            params.eventEmitter,\n            _params.market,\n            _params.tokenIn,\n            (cache.amountIn + fees.feeAmountForPool).toInt256()\n        );\n\n        // the poolAmountOut excludes the positive price impact amount\n        // as that is deducted from the swap impact pool instead\n        MarketUtils.applyDeltaToPoolAmount(\n            params.dataStore,\n            params.eventEmitter,\n            _params.market,\n            cache.tokenOut,\n            -cache.poolAmountOut.toInt256()\n        );\n\n        MarketUtils.MarketPrices memory prices = MarketUtils.MarketPrices(\n            params.oracle.getPrimaryPrice(_params.market.indexToken),\n            _params.tokenIn == _params.market.longToken ? cache.tokenInPrice : cache.tokenOutPrice,\n            _params.tokenIn == _params.market.shortToken ? cache.tokenInPrice : cache.tokenOutPrice\n        );\n\n        MarketUtils.validatePoolAmount(params.dataStore, _params.market, _params.tokenIn);\n\n        // for single token markets cache.tokenOut will always equal _params.market.longToken\n        // so only the reserve for longs will be validated\n        // swaps should be disabled for single token markets so this should not be an issue\n        MarketUtils.validateReserve(\n            params.dataStore,\n            _params.market,\n            prices,\n            cache.tokenOut == _params.market.longToken\n        );\n\n        MarketUtils.validateMaxPnl(\n            params.dataStore,\n            _params.market,\n            prices,\n            _params.tokenIn == _params.market.longToken\n                ? Keys.MAX_PNL_FACTOR_FOR_DEPOSITS\n                : Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n            cache.tokenOut == _params.market.shortToken\n                ? Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS\n                : Keys.MAX_PNL_FACTOR_FOR_DEPOSITS\n        );\n\n        SwapPricingUtils.EmitSwapInfoParams memory emitSwapInfoParams;\n\n        emitSwapInfoParams.orderKey = params.key;\n        emitSwapInfoParams.market = _params.market.marketToken;\n        emitSwapInfoParams.receiver = _params.receiver;\n        emitSwapInfoParams.tokenIn = _params.tokenIn;\n        emitSwapInfoParams.tokenOut = cache.tokenOut;\n        emitSwapInfoParams.tokenInPrice = cache.tokenInPrice.min;\n        emitSwapInfoParams.tokenOutPrice = cache.tokenOutPrice.max;\n        emitSwapInfoParams.amountIn = _params.amountIn;\n        emitSwapInfoParams.amountInAfterFees = fees.amountAfterFees;\n        emitSwapInfoParams.amountOut = cache.amountOut;\n        emitSwapInfoParams.priceImpactUsd = cache.priceImpactUsd;\n        emitSwapInfoParams.priceImpactAmount = cache.priceImpactAmount;\n        emitSwapInfoParams.tokenInPriceImpactAmount = cache.tokenInPriceImpactAmount;\n\n        SwapPricingUtils.emitSwapInfo(params.eventEmitter, emitSwapInfoParams);\n\n        SwapPricingUtils.emitSwapFeesCollected(\n            params.eventEmitter,\n            params.key,\n            _params.market.marketToken,\n            _params.tokenIn,\n            cache.tokenInPrice.min,\n            swapFeeType,\n            fees\n        );\n\n        return (cache.tokenOut, cache.amountOut);\n    }\n}\n"
    },
    "contracts/test/ArrayTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Array.sol\";\n\n/**\n * @title ArrayTest\n * @dev Contract to help test the Array library\n */\ncontract ArrayTest {\n    function getMedian(uint256[] memory arr) external pure returns (uint256) {\n        return Array.getMedian(arr);\n    }\n}\n"
    },
    "contracts/test/DepositStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../deposit/DepositStoreUtils.sol\";\n\n/**\n * @title DepositeStoreUtilsTest\n * @dev Contract to help test the DepositStoreUtils library\n */\ncontract DepositStoreUtilsTest {\n    function getEmptyDeposit() external pure returns (Deposit.Props memory) {\n        Deposit.Props memory deposit;\n        return deposit;\n    }\n\n    function setDeposit(DataStore dataStore, bytes32 key, Deposit.Props memory deposit) external {\n        DepositStoreUtils.set(dataStore, key, deposit);\n    }\n\n    function removeDeposit(DataStore dataStore, bytes32 key, address account) external {\n        DepositStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/test/GasTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ArbGasInfo {\n    function getCurrentTxL1GasFees() external view returns (uint256);\n}\n\ncontract GasTest {\n    address constant ARB_GAS_INFO_ADDRESS = 0x000000000000000000000000000000000000006C;\n    string public data;\n\n    event CurrentTxL1GasFees(uint256 a, uint256 b);\n\n    function revertIfTxOriginIsZero() public view returns (uint256) {\n        if (tx.origin == address(0)) {\n            revert(\"TX_ORIGIN_IS_ZERO\");\n        }\n        return 1;\n    }\n\n    function getCurrentTxL1GasFees(string calldata _data) public view returns (uint256, uint256) {\n        uint256 a = ArbGasInfo(ARB_GAS_INFO_ADDRESS).getCurrentTxL1GasFees();\n        uint256 b;\n        if (keccak256(abi.encodePacked(_data)) == keccak256(abi.encodePacked(\"FOO\"))) {\n            revert(\"FOO\");\n        } else {\n            b = ArbGasInfo(ARB_GAS_INFO_ADDRESS).getCurrentTxL1GasFees();\n        }\n        return (a, b);\n    }\n\n    function test(string calldata _data) public returns (uint256, uint256) {\n        uint256 a = ArbGasInfo(ARB_GAS_INFO_ADDRESS).getCurrentTxL1GasFees();\n        uint256 b;\n        data = _data;\n        if (keccak256(abi.encodePacked(_data)) == keccak256(abi.encodePacked(\"FOO\"))) {\n            revert(\"FOO\");\n        } else {\n            b = ArbGasInfo(ARB_GAS_INFO_ADDRESS).getCurrentTxL1GasFees();\n        }\n        emit CurrentTxL1GasFees(a, b);\n        return (a, b);\n    }\n}\n"
    },
    "contracts/test/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ncontract GelatoRelay {\n    struct SponsoredCall {\n        uint256 chainId;\n        address target;\n        bytes data;\n    }\n\n    function sponsoredCall(\n        SponsoredCall calldata _call,\n        address,\n        address,\n        uint256,\n        uint256,\n        uint256,\n        bytes32\n    ) external {\n        (bool success, bytes memory result) = _call.target.call(_call.data);\n\n        if (!success) {\n            // bubble up the revert\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/GlvDepositStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../glv/glvDeposit/GlvDepositStoreUtils.sol\";\n\n/**\n * @title DepositeStoreUtilsTest\n * @dev Contract to help test the DepositStoreUtils library\n */\ncontract GlvDepositStoreUtilsTest {\n    function getEmptyGlvDeposit() external pure returns (GlvDeposit.Props memory) {\n        GlvDeposit.Props memory glvDeposit;\n        return glvDeposit;\n    }\n\n    function setGlvDeposit(DataStore dataStore, bytes32 key, GlvDeposit.Props memory glvDeposit) external {\n        GlvDepositStoreUtils.set(dataStore, key, glvDeposit);\n    }\n\n    function removeGlvDeposit(DataStore dataStore, bytes32 key, address account) external {\n        GlvDepositStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/test/GlvShiftStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../glv/glvShift/GlvShiftStoreUtils.sol\";\n\n/**\n * @title ShifteStoreUtilsTest\n * @dev Contract to help test the ShiftStoreUtils library\n */\ncontract GlvShiftStoreUtilsTest {\n    function getEmptyGlvShift() external pure returns (GlvShift.Props memory) {\n        GlvShift.Props memory glvShift;\n        return glvShift;\n    }\n\n    function setGlvShift(DataStore dataStore, bytes32 key, GlvShift.Props memory glvShift) external {\n        GlvShiftStoreUtils.set(dataStore, key, glvShift);\n    }\n\n    function removeGlvShift(DataStore dataStore, bytes32 key) external {\n        GlvShiftStoreUtils.remove(dataStore, key);\n    }\n}\n"
    },
    "contracts/test/GlvStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../glv/GlvStoreUtils.sol\";\n\n/**\n * @title GlvStoreUtilsTest\n * @dev Contract to help test the StoreUtils library\n */\ncontract GlvStoreUtilsTest {\n    function getEmptyGlv() external pure returns (Glv.Props memory) {\n        Glv.Props memory glv;\n        return glv;\n    }\n\n    function setGlv(DataStore dataStore, address key, bytes32 salt, Glv.Props memory glv) external {\n        GlvStoreUtils.set(dataStore, key, salt, glv);\n    }\n\n    function removeGlv(DataStore dataStore, address key) external {\n        GlvStoreUtils.remove(dataStore, key);\n    }\n}\n"
    },
    "contracts/test/GlvWithdrawalStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../glv/glvWithdrawal/GlvWithdrawalStoreUtils.sol\";\n\n/**\n * @title WithdrawaleStoreUtilsTest\n * @dev Contract to help test the WithdrawalStoreUtils library\n */\ncontract GlvWithdrawalStoreUtilsTest {\n    function getEmptyGlvWithdrawal() external pure returns (GlvWithdrawal.Props memory) {\n        GlvWithdrawal.Props memory glvWithdrawal;\n        return glvWithdrawal;\n    }\n\n    function setGlvWithdrawal(DataStore dataStore, bytes32 key, GlvWithdrawal.Props memory glvWithdrawal) external {\n        GlvWithdrawalStoreUtils.set(dataStore, key, glvWithdrawal);\n    }\n\n    function removeGlvWithdrawal(DataStore dataStore, bytes32 key, address account) external {\n        GlvWithdrawalStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/test/MarketStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../market/MarketStoreUtils.sol\";\n\n/**\n * @title MarketStoreUtilsTest\n * @dev Contract to help test the MarketStoreUtils library\n */\ncontract MarketStoreUtilsTest {\n    function getEmptyMarket() external pure returns (Market.Props memory) {\n        Market.Props memory market;\n        return market;\n    }\n\n    function setMarket(DataStore dataStore, address key, bytes32 salt, Market.Props memory market) external {\n        MarketStoreUtils.set(dataStore, key, salt, market);\n    }\n\n    function removeMarket(DataStore dataStore, address key) external {\n        MarketStoreUtils.remove(dataStore, key);\n    }\n}\n"
    },
    "contracts/test/MarketUtilsTest.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../market/MarketUtils.sol\";\n\ncontract MarketUtilsTest {\n    function getUsageFactor(\n        DataStore dataStore,\n        Market.Props memory market,\n        bool isLong,\n        uint256 reservedUsd,\n        uint256 poolUsd\n    ) public view returns (uint256) {\n        return MarketUtils.getUsageFactor(dataStore, market, isLong, reservedUsd, poolUsd);\n    }\n\n    function getPoolUsdWithoutPnl(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        bool isLong,\n        bool maximize\n    ) public view returns (uint256) {\n        return MarketUtils.getPoolUsdWithoutPnl(dataStore, market, prices, isLong, maximize);\n    }\n\n    function getReservedUsd(\n        DataStore dataStore,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        bool isLong\n    ) public view returns (uint256) {\n        return MarketUtils.getReservedUsd(dataStore, market, prices, isLong);\n    }\n}\n"
    },
    "contracts/test/OracleModuleTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../oracle/OracleModule.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../oracle/GmOracleUtils.sol\";\nimport \"../utils/Uint256Mask.sol\";\nimport \"../chain/Chain.sol\";\n\n/**\n * @title OracleModuleTest\n * @dev Contract to help test the OracleModule contract\n */\ncontract OracleModuleTest is OracleModule {\n    using Uint256Mask for Uint256Mask.Mask;\n\n    constructor(Oracle _oracle) OracleModule(_oracle) {}\n\n    function withOraclePricesTest(\n        OracleUtils.SetPricesParams memory oracleParams\n    ) external withOraclePrices(oracleParams) {\n    }\n\n    function getTokenOracleType(DataStore dataStore, address token) external view returns (bytes32) {\n        return dataStore.getBytes32(Keys.oracleTypeKey(token));\n    }\n\n    function validateSignerWithSalt(\n        DataStore dataStore,\n        bytes32 SALT,\n        GmOracleUtils.Report memory report,\n        address token,\n        uint256 minPrice,\n        uint256 maxPrice,\n        bytes memory signature,\n        address expectedSigner\n    ) external view {\n        bytes32 tokenOracleType = dataStore.getBytes32(Keys.oracleTypeKey(token));\n\n        GmOracleUtils.validateSigner(\n            SALT,\n            report,\n            token,\n            minPrice,\n            maxPrice,\n            tokenOracleType,\n            signature,\n            expectedSigner\n        );\n    }\n\n    function validateSigner(\n        DataStore dataStore,\n        GmOracleUtils.Report memory report,\n        address token,\n        uint256 minPrice,\n        uint256 maxPrice,\n        bytes memory signature,\n        address expectedSigner\n    ) external view {\n        bytes32 tokenOracleType = dataStore.getBytes32(Keys.oracleTypeKey(token));\n\n        GmOracleUtils.validateSigner(\n            getSalt(),\n            report,\n            token,\n            minPrice,\n            maxPrice,\n            tokenOracleType,\n            signature,\n            expectedSigner\n        );\n    }\n\n    function getSalt() public view returns (bytes32) {\n        return keccak256(abi.encode(block.chainid, \"xget-oracle-v1\"));\n    }\n}\n"
    },
    "contracts/test/OrderStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../order/OrderStoreUtils.sol\";\n\n/**\n * @title OrderStoreUtilsTest\n * @dev Contract to help test the OrderStoreUtils library\n */\ncontract OrderStoreUtilsTest {\n    function getEmptyOrder() external pure returns (Order.Props memory) {\n        Order.Props memory order;\n        return order;\n    }\n\n    function setOrder(DataStore dataStore, bytes32 key, Order.Props memory order) external {\n        OrderStoreUtils.set(dataStore, key, order);\n    }\n\n    function removeOrder(DataStore dataStore, bytes32 key, address account) external {\n        OrderStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/test/PositionStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../position/PositionStoreUtils.sol\";\n\n/**\n * @title PositionStoreUtilsTest\n * @dev Contract to help test the PositionStoreUtils library\n */\ncontract PositionStoreUtilsTest {\n    function getEmptyPosition() external pure returns (Position.Props memory) {\n        Position.Props memory position;\n        return position;\n    }\n\n    function setPosition(DataStore dataStore, bytes32 key, Position.Props memory position) external {\n        PositionStoreUtils.set(dataStore, key, position);\n    }\n\n    function removePosition(DataStore dataStore, bytes32 key, address account) external {\n        PositionStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/test/ShiftStoreUtilsTest.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../shift/ShiftStoreUtils.sol\";\n\ncontract ShiftStoreUtilsTest {\n    function getEmptyShift() external pure returns (Shift.Props memory) {\n        Shift.Props memory shift;\n        return shift;\n    }\n\n    function setShift(DataStore dataStore, bytes32 key, Shift.Props memory shift) external {\n        ShiftStoreUtils.set(dataStore, key, shift);\n    }\n\n    function removeShift(DataStore dataStore, bytes32 key, address account) external {\n        ShiftStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/test/WithdrawalStoreUtilsTest.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../withdrawal/WithdrawalStoreUtils.sol\";\n\n/**\n * @title WithdrawalStoreUtilsTest\n * @dev Contract to help test the WithdrawalStoreUtils library\n */\ncontract WithdrawalStoreUtilsTest {\n    function getEmptyWithdrawal() external pure returns (Withdrawal.Props memory) {\n        Withdrawal.Props memory withdrawal;\n        return withdrawal;\n    }\n\n    function setWithdrawal(DataStore dataStore, bytes32 key, Withdrawal.Props memory withdrawal) external {\n        WithdrawalStoreUtils.set(dataStore, key, withdrawal);\n    }\n\n    function removeWithdrawal(DataStore dataStore, bytes32 key, address account) external {\n        WithdrawalStoreUtils.remove(dataStore, key, account);\n    }\n}\n"
    },
    "contracts/token/IWNT.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title IWNT\n * @dev Interface for Wrapped Native Tokens, e.g. WETH\n * The contract is named WNT instead of WETH for a more general reference name\n * that can be used on any blockchain\n */\ninterface IWNT {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/token/TokenUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../data/DataStore.sol\";\nimport \"../data/Keys.sol\";\nimport \"../error/ErrorUtils.sol\";\nimport \"../utils/AccountUtils.sol\";\n\nimport \"./IWNT.sol\";\n\n/**\n * @title TokenUtils\n * @dev Library for token functions, helps with transferring of tokens and\n * native token functions\n */\nlibrary TokenUtils {\n    using Address for address;\n    using SafeERC20 for IERC20;\n\n    event TokenTransferReverted(string reason, bytes returndata);\n    event NativeTokenTransferReverted(string reason);\n\n    /**\n     * @dev Returns the address of the WNT token.\n     * @param dataStore DataStore contract instance where the address of the WNT token is stored.\n     * @return The address of the WNT token.\n     */\n    function wnt(DataStore dataStore) internal view returns (address) {\n        return dataStore.getAddress(Keys.WNT);\n    }\n\n    /**\n     * @dev Transfers the specified amount of `token` from the caller to `receiver`.\n     * limit the amount of gas forwarded so that a user cannot intentionally\n     * construct a token call that would consume all gas and prevent necessary\n     * actions like request cancellation from being executed\n     *\n     * @param dataStore The data store that contains the `tokenTransferGasLimit` for the specified `token`.\n     * @param token The address of the ERC20 token that is being transferred.\n     * @param receiver The address of the recipient of the `token` transfer.\n     * @param amount The amount of `token` to transfer.\n     */\n    function transfer(\n        DataStore dataStore,\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal {\n        if (amount == 0) { return; }\n        AccountUtils.validateReceiver(receiver);\n\n        uint256 gasLimit = dataStore.getUint(Keys.tokenTransferGasLimit(token));\n        if (gasLimit == 0) {\n            revert Errors.EmptyTokenTranferGasLimit(token);\n        }\n\n        (bool success0, /* bytes memory returndata */) = nonRevertingTransferWithGasLimit(\n            IERC20(token),\n            receiver,\n            amount,\n            gasLimit\n        );\n\n        if (success0) { return; }\n\n        address holdingAddress = dataStore.getAddress(Keys.HOLDING_ADDRESS);\n\n        if (holdingAddress == address(0)) {\n            revert Errors.EmptyHoldingAddress();\n        }\n\n        // in case transfers to the receiver fail due to blacklisting or other reasons\n        // send the tokens to a holding address to avoid possible gaming through reverting\n        // transfers\n        (bool success1, bytes memory returndata) = nonRevertingTransferWithGasLimit(\n            IERC20(token),\n            holdingAddress,\n            amount,\n            gasLimit\n        );\n\n        if (success1) { return; }\n\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(returndata);\n        emit TokenTransferReverted(reason, returndata);\n\n        // throw custom errors to prevent spoofing of errors\n        // this is necessary because contracts like DepositHandler, WithdrawalHandler, OrderHandler\n        // do not cancel requests for specific errors\n        revert Errors.TokenTransferError(token, receiver, amount);\n    }\n\n    function sendNativeToken(\n        DataStore dataStore,\n        address receiver,\n        uint256 amount\n    ) internal {\n        if (amount == 0) { return; }\n\n        AccountUtils.validateReceiver(receiver);\n\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\n\n        bool success;\n        // use an assembly call to avoid loading large data into memory\n        // input mem[in…(in+insize)]\n        // output area mem[out…(out+outsize))]\n        assembly {\n            success := call(\n                gasLimit, // gas limit\n                receiver, // receiver\n                amount, // value\n                0, // in\n                0, // insize\n                0, // out\n                0 // outsize\n            )\n        }\n\n        if (success) { return; }\n\n        // if the transfer failed, re-wrap the token and send it to the receiver\n        depositAndSendWrappedNativeToken(\n            dataStore,\n            receiver,\n            amount\n        );\n    }\n\n    /**\n     * Deposits the specified amount of native token and sends the specified\n     * amount of wrapped native token to the specified receiver address.\n     *\n     * @param dataStore the data store to use for storing and retrieving data\n     * @param receiver the address of the recipient of the wrapped native token transfer\n     * @param amount the amount of native token to deposit and the amount of wrapped native token to send\n     */\n    function depositAndSendWrappedNativeToken(\n        DataStore dataStore,\n        address receiver,\n        uint256 amount\n    ) internal {\n        if (amount == 0) { return; }\n        AccountUtils.validateReceiver(receiver);\n\n        address _wnt = wnt(dataStore);\n        IWNT(_wnt).deposit{value: amount}();\n\n        transfer(\n            dataStore,\n            _wnt,\n            receiver,\n            amount\n        );\n    }\n\n    /**\n     * @dev Withdraws the specified amount of wrapped native token and sends the\n     * corresponding amount of native token to the specified receiver address.\n     *\n     * limit the amount of gas forwarded so that a user cannot intentionally\n     * construct a token call that would consume all gas and prevent necessary\n     * actions like request cancellation from being executed\n     *\n     * @param dataStore the data store to use for storing and retrieving data\n     * @param _wnt the address of the WNT contract to withdraw the wrapped native token from\n     * @param receiver the address of the recipient of the native token transfer\n     * @param amount the amount of wrapped native token to withdraw and the amount of native token to send\n     */\n    function withdrawAndSendNativeToken(\n        DataStore dataStore,\n        address _wnt,\n        address receiver,\n        uint256 amount\n    ) internal {\n        if (amount == 0) { return; }\n        AccountUtils.validateReceiver(receiver);\n\n        IWNT(_wnt).withdraw(amount);\n\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\n\n        bool success;\n        // use an assembly call to avoid loading large data into memory\n        // input mem[in…(in+insize)]\n        // output area mem[out…(out+outsize))]\n        assembly {\n            success := call(\n                gasLimit, // gas limit\n                receiver, // receiver\n                amount, // value\n                0, // in\n                0, // insize\n                0, // out\n                0 // outsize\n            )\n        }\n\n        if (success) { return; }\n\n        // if the transfer failed, re-wrap the token and send it to the receiver\n        depositAndSendWrappedNativeToken(\n            dataStore,\n            receiver,\n            amount\n        );\n    }\n\n    /**\n     * @dev Transfers the specified amount of ERC20 token to the specified receiver\n     * address, with a gas limit to prevent the transfer from consuming all available gas.\n     * adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\n     *\n     * @param token the ERC20 contract to transfer the tokens from\n     * @param to the address of the recipient of the token transfer\n     * @param amount the amount of tokens to transfer\n     * @param gasLimit the maximum amount of gas that the token transfer can consume\n     * @return a tuple containing a boolean indicating the success or failure of the\n     * token transfer, and a bytes value containing the return data from the token transfer\n     */\n    function nonRevertingTransferWithGasLimit(\n        IERC20 token,\n        address to,\n        uint256 amount,\n        uint256 gasLimit\n    ) internal returns (bool, bytes memory) {\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, to, amount);\n        (bool success, bytes memory returndata) = address(token).call{ gas: gasLimit }(data);\n\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                if (!address(token).isContract()) {\n                    return (false, \"Call to non-contract\");\n                }\n            }\n\n            // some tokens do not revert on a failed transfer, they will return a boolean instead\n            // validate that the returned boolean is true, otherwise indicate that the token transfer failed\n            if (returndata.length > 0 && !abi.decode(returndata, (bool))) {\n                return (false, returndata);\n            }\n\n            // transfers on some tokens do not return a boolean value, they will just revert if a transfer fails\n            // for these tokens, if success is true then the transfer should have completed\n            return (true, returndata);\n        }\n\n        return (false, returndata);\n    }\n}\n"
    },
    "contracts/utils/AccountUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../error/Errors.sol\";\n\nlibrary AccountUtils {\n    function validateAccount(address account) internal pure {\n        if (account == address(0)) {\n            revert Errors.EmptyAccount();\n        }\n    }\n\n    function validateReceiver(address receiver) internal pure {\n        if (receiver == address(0)) {\n            revert Errors.EmptyReceiver();\n        }\n    }\n}\n"
    },
    "contracts/utils/Array.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"../error/Errors.sol\";\n\n/**\n * @title Array\n * @dev Library for array functions\n */\nlibrary Array {\n    using SafeCast for int256;\n\n    /**\n     * @dev Gets the value of the element at the specified index in the given array. If the index is out of bounds, returns 0.\n     *\n     * @param arr the array to get the value from\n     * @param index the index of the element in the array\n     * @return the value of the element at the specified index in the array\n     */\n    function get(bytes32[] memory arr, uint256 index) internal pure returns (bytes32) {\n        if (index < arr.length) {\n            return arr[index];\n        }\n\n        return bytes32(0);\n    }\n\n    /**\n     * @dev Determines whether all of the elements in the given array are equal to the specified value.\n     *\n     * @param arr the array to check the elements of\n     * @param value the value to compare the elements of the array to\n     * @return true if all of the elements in the array are equal to the specified value, false otherwise\n     */\n    function areEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\n        for (uint256 i; i < arr.length; i++) {\n            if (arr[i] != value) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Determines whether all of the elements in the given array are greater than the specified value.\n     *\n     * @param arr the array to check the elements of\n     * @param value the value to compare the elements of the array to\n     * @return true if all of the elements in the array are greater than the specified value, false otherwise\n     */\n    function areGreaterThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\n        for (uint256 i; i < arr.length; i++) {\n            if (arr[i] <= value) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Determines whether all of the elements in the given array are greater than or equal to the specified value.\n     *\n     * @param arr the array to check the elements of\n     * @param value the value to compare the elements of the array to\n     * @return true if all of the elements in the array are greater than or equal to the specified value, false otherwise\n     */\n    function areGreaterThanOrEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\n        for (uint256 i; i < arr.length; i++) {\n            if (arr[i] < value) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Determines whether all of the elements in the given array are less than the specified value.\n     *\n     * @param arr the array to check the elements of\n     * @param value the value to compare the elements of the array to\n     * @return true if all of the elements in the array are less than the specified value, false otherwise\n     */\n    function areLessThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\n        for (uint256 i; i < arr.length; i++) {\n            if (arr[i] >= value) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Determines whether all of the elements in the given array are less than or equal to the specified value.\n     *\n     * @param arr the array to check the elements of\n     * @param value the value to compare the elements of the array to\n     * @return true if all of the elements in the array are less than or equal to the specified value, false otherwise\n     */\n    function areLessThanOrEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\n        for (uint256 i; i < arr.length; i++) {\n            if (arr[i] > value) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Gets the median value of the elements in the given array. For arrays with an odd number of elements, returns the element at the middle index. For arrays with an even number of elements, returns the average of the two middle elements.\n     *\n     * @param arr the array to get the median value from\n     * @return the median value of the elements in the given array\n     */\n    function getMedian(uint256[] memory arr) internal pure returns (uint256) {\n        if (arr.length % 2 == 1) {\n            return arr[arr.length / 2];\n        }\n\n        return (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;\n    }\n\n    /**\n     * @dev Gets the uncompacted value at the specified index in the given array of compacted values.\n     *\n     * @param compactedValues the array of compacted values to get the uncompacted value from\n     * @param index the index of the uncompacted value in the array\n     * @param compactedValueBitLength the length of each compacted value, in bits\n     * @param bitmask the bitmask to use to extract the uncompacted value from the compacted value\n     * @return the uncompacted value at the specified index in the array of compacted values\n     */\n    function getUncompactedValue(\n        uint256[] memory compactedValues,\n        uint256 index,\n        uint256 compactedValueBitLength,\n        uint256 bitmask,\n        string memory label\n    ) internal pure returns (uint256) {\n        uint256 compactedValuesPerSlot = 256 / compactedValueBitLength;\n\n        uint256 slotIndex = index / compactedValuesPerSlot;\n        if (slotIndex >= compactedValues.length) {\n            revert Errors.CompactedArrayOutOfBounds(compactedValues, index, slotIndex, label);\n        }\n\n        uint256 slotBits = compactedValues[slotIndex];\n        uint256 offset = (index - slotIndex * compactedValuesPerSlot) * compactedValueBitLength;\n\n        uint256 value = (slotBits >> offset) & bitmask;\n\n        return value;\n    }\n}\n"
    },
    "contracts/utils/BasicMulticall.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../error/ErrorUtils.sol\";\n\n/**\n * @title BasicMulticall\n */\nabstract contract BasicMulticall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n\n        for (uint256 i; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                ErrorUtils.revertWithParsedMessage(result);\n            }\n\n            results[i] = result;\n        }\n\n        return results;\n    }\n}\n"
    },
    "contracts/utils/Bits.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title Bits\n * @dev Library for bit values\n */\nlibrary Bits {\n    // @dev uint256(~0) is 256 bits of 1s\n    // @dev shift the 1s by (256 - 8) to get (256 - 8) 0s followed by 8 1s\n    uint256 constant public BITMASK_8 = ~uint256(0) >> (256 - 8);\n    // @dev shift the 1s by (256 - 16) to get (256 - 16) 0s followed by 16 1s\n    uint256 constant public BITMASK_16 = ~uint256(0) >> (256 - 16);\n    // @dev shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\n    uint256 constant public BITMASK_32 = ~uint256(0) >> (256 - 32);\n    // @dev shift the 1s by (256 - 64) to get (256 - 64) 0s followed by 64 1s\n    uint256 constant public BITMASK_64 = ~uint256(0) >> (256 - 64);\n}\n"
    },
    "contracts/utils/Calc.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\n/**\n * @title Calc\n * @dev Library for math functions\n */\nlibrary Calc {\n    using SignedMath for int256;\n    using SafeCast for uint256;\n\n    // this method assumes that min is less than max\n    function boundMagnitude(int256 value, uint256 min, uint256 max) internal pure returns (int256) {\n        uint256 magnitude = value.abs();\n\n        if (magnitude < min) {\n            magnitude = min;\n        }\n\n        if (magnitude > max) {\n            magnitude = max;\n        }\n\n        int256 sign = value == 0 ? int256(1) : value / value.abs().toInt256();\n\n        return magnitude.toInt256() * sign;\n    }\n\n    /**\n     * @dev Calculates the result of dividing the first number by the second number,\n     * rounded up to the nearest integer.\n     *\n     * @param a the dividend\n     * @param b the divisor\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\n     */\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a + b - 1) / b;\n    }\n\n    /**\n     * Calculates the result of dividing the first number by the second number,\n     * rounded up to the nearest integer.\n     * The rounding is purely on the magnitude of a, if a is negative the result\n     * is a larger magnitude negative\n     *\n     * @param a the dividend\n     * @param b the divisor\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\n     */\n    function roundUpMagnitudeDivision(int256 a, uint256 b) internal pure returns (int256) {\n        if (a < 0) {\n            return (a - b.toInt256() + 1) / b.toInt256();\n        }\n\n        return (a + b.toInt256() - 1) / b.toInt256();\n    }\n\n    /**\n     * Adds two numbers together and return a uint256 value, treating the second number as a signed integer.\n     *\n     * @param a the first number\n     * @param b the second number\n     * @return the result of adding the two numbers together\n     */\n    function sumReturnUint256(uint256 a, int256 b) internal pure returns (uint256) {\n        if (b > 0) {\n            return a + b.abs();\n        }\n\n        return a - b.abs();\n    }\n\n    /**\n     * Adds two numbers together and return an int256 value, treating the second number as a signed integer.\n     *\n     * @param a the first number\n     * @param b the second number\n     * @return the result of adding the two numbers together\n     */\n    function sumReturnInt256(uint256 a, int256 b) internal pure returns (int256) {\n        return a.toInt256() + b;\n    }\n\n    /**\n     * @dev Calculates the absolute difference between two numbers.\n     *\n     * @param a the first number\n     * @param b the second number\n     * @return the absolute difference between the two numbers\n     */\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    /**\n     * Adds two numbers together, the result is bounded to prevent overflows.\n     *\n     * @param a the first number\n     * @param b the second number\n     * @return the result of adding the two numbers together\n     */\n    function boundedAdd(int256 a, int256 b) internal pure returns (int256) {\n        // if either a or b is zero or if the signs are different there should not be any overflows\n        if (a == 0 || b == 0 || (a < 0 && b > 0) || (a > 0 && b < 0)) {\n            return a + b;\n        }\n\n        // if adding `b` to `a` would result in a value less than the min int256 value\n        // then return the min int256 value\n        if (a < 0 && b <= type(int256).min - a) {\n            return type(int256).min;\n        }\n\n        // if adding `b` to `a` would result in a value more than the max int256 value\n        // then return the max int256 value\n        if (a > 0 && b >= type(int256).max - a) {\n            return type(int256).max;\n        }\n\n        return a + b;\n    }\n\n    /**\n     * Returns a - b, the result is bounded to prevent overflows.\n     * Note that this will revert if b is type(int256).min because of the usage of \"-b\".\n     *\n     * @param a the first number\n     * @param b the second number\n     * @return the bounded result of a - b\n     */\n    function boundedSub(int256 a, int256 b) internal pure returns (int256) {\n        // if either a or b is zero or the signs are the same there should not be any overflow\n        if (a == 0 || b == 0 || (a > 0 && b > 0) || (a < 0 && b < 0)) {\n            return a - b;\n        }\n\n        // if adding `-b` to `a` would result in a value greater than the max int256 value\n        // then return the max int256 value\n        if (a > 0 && -b >= type(int256).max - a) {\n            return type(int256).max;\n        }\n\n        // if subtracting `b` from `a` would result in a value less than the min int256 value\n        // then return the min int256 value\n        if (a < 0 && -b <= type(int256).min - a) {\n            return type(int256).min;\n        }\n\n        return a - b;\n    }\n\n\n    /**\n     * Converts the given unsigned integer to a signed integer, using the given\n     * flag to determine whether the result should be positive or negative.\n     *\n     * @param a the unsigned integer to convert\n     * @param isPositive whether the result should be positive (if true) or negative (if false)\n     * @return the signed integer representation of the given unsigned integer\n     */\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\n        if (isPositive) {\n            return a.toInt256();\n        } else {\n            return -a.toInt256();\n        }\n    }\n}\n"
    },
    "contracts/utils/Cast.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../error/Errors.sol\";\n\n/**\n * @title Cast\n * @dev Library for casting functions\n */\nlibrary Cast {\n    function toBytes32(address value) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(value)));\n    }\n\n    /**\n     * @dev Converts a bytes array to a uint256.\n     * Handles cases where the uint256 stored in bytes is stored with or without padding.\n     * @param uint256AsBytes The bytes array representing the uint256 value.\n     * @return value The uint256 value obtained from the bytes array.\n     */\n    function bytesToUint256(bytes memory uint256AsBytes) internal pure returns (uint256) {\n        uint256 length = uint256AsBytes.length;\n        \n        if(length > 32) {\n            revert Errors.Uint256AsBytesLengthExceeds32Bytes(length);\n        }\n\n        if (length == 0) {\n            return 0;\n        }\n\n        uint256 value;\n        \n        assembly {\n            value := mload(add(uint256AsBytes, 32))\n        }\n\n        return value = value >> (8 * (32 - length));\n    }\n}\n"
    },
    "contracts/utils/EnumerableValues.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/**\n * @title EnumerableValues\n * @dev Library to extend the EnumerableSet library with functions to get\n * valuesAt for a range\n */\nlibrary EnumerableValues {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /**\n     * Returns an array of bytes32 values from the given set, starting at the given\n     * start index and ending before the given end index.\n     *\n     * @param set The set to get the values from.\n     * @param start The starting index.\n     * @param end The ending index.\n     * @return An array of bytes32 values.\n     */\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        uint256 max = set.length();\n        if (end > max) { end = max; }\n\n        bytes32[] memory items = new bytes32[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            items[i - start] = set.at(i);\n        }\n\n        return items;\n    }\n\n\n    /**\n     * Returns an array of address values from the given set, starting at the given\n     * start index and ending before the given end index.\n     *\n     * @param set The set to get the values from.\n     * @param start The starting index.\n     * @param end The ending index.\n     * @return An array of address values.\n     */\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\n        uint256 max = set.length();\n        if (end > max) { end = max; }\n\n        address[] memory items = new address[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            items[i - start] = set.at(i);\n        }\n\n        return items;\n    }\n\n\n    /**\n     * Returns an array of uint256 values from the given set, starting at the given\n     * start index and ending before the given end index, the item at the end index will not be returned.\n     *\n     * @param set The set to get the values from.\n     * @param start The starting index (inclusive, item at the start index will be returned).\n     * @param end The ending index (exclusive, item at the end index will not be returned).\n     * @return An array of uint256 values.\n     */\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\n        if (start >= set.length()) {\n            return new uint256[](0);\n        }\n\n        uint256 max = set.length();\n        if (end > max) { end = max; }\n\n        uint256[] memory items = new uint256[](end - start);\n        for (uint256 i = start; i < end; i++) {\n            items[i - start] = set.at(i);\n        }\n\n        return items;\n    }\n}\n"
    },
    "contracts/utils/GlobalReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nabstract contract GlobalReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n    uint256 private constant NOT_ENTERED = 0;\n    uint256 private constant ENTERED = 1;\n\n    DataStore public immutable dataStore;\n\n    constructor(DataStore _dataStore) {\n        dataStore = _dataStore;\n    }\n\n    modifier globalNonReentrant() {\n        _globalNonReentrantBefore();\n        _;\n        _globalNonReentrantAfter();\n    }\n\n    function _globalNonReentrantBefore() private {\n        uint256 status = dataStore.getUint(Keys.REENTRANCY_GUARD_STATUS);\n\n        require(status == NOT_ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        dataStore.setUint(Keys.REENTRANCY_GUARD_STATUS, ENTERED);\n    }\n\n    function _globalNonReentrantAfter() private {\n        dataStore.setUint(Keys.REENTRANCY_GUARD_STATUS, NOT_ENTERED);\n    }\n}\n"
    },
    "contracts/utils/PayableMulticall.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../error/ErrorUtils.sol\";\n\n/**\n * @title PayableMulticall\n * @dev Contract to help call multiple functions in a single transaction\n * all function calls will have the original sender as the msg.sender value\n * IMPORTANT: in the multicall, msg.value will be the same for each delegatecall\n * extra care should be taken if msg.value is used in any of the functions of the inheriting contract\n */\nabstract contract PayableMulticall {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     */\n    function multicall(bytes[] calldata data) external payable virtual returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n\n        for (uint256 i; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                ErrorUtils.revertWithParsedMessage(result);\n            }\n\n            results[i] = result;\n        }\n\n        return results;\n    }\n}\n"
    },
    "contracts/utils/Precision.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// there is a known issue with prb-math v3.x releases\n// https://github.com/PaulRBerg/prb-math/issues/178\n// due to this, either prb-math v2.x or v4.x versions should be used instead\nimport \"prb-math/contracts/PRBMathUD60x18.sol\";\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @title Precision\n * @dev Library for precision values and conversions\n */\nlibrary Precision {\n    using SafeCast for uint256;\n    using SignedMath for int256;\n\n    uint256 public constant FLOAT_PRECISION = 10 ** 30;\n    uint256 public constant FLOAT_PRECISION_SQRT = 10 ** 15;\n\n    uint256 public constant WEI_PRECISION = 10 ** 18;\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\n\n    uint256 public constant FLOAT_TO_WEI_DIVISOR = 10 ** 12;\n\n    /**\n     * Applies the given factor to the given value and returns the result.\n     *\n     * @param value The value to apply the factor to.\n     * @param factor The factor to apply.\n     * @return The result of applying the factor to the value.\n     */\n    function applyFactor(uint256 value, uint256 factor) internal pure returns (uint256) {\n        return mulDiv(value, factor, FLOAT_PRECISION);\n    }\n\n    /**\n     * Applies the given factor to the given value and returns the result.\n     *\n     * @param value The value to apply the factor to.\n     * @param factor The factor to apply.\n     * @return The result of applying the factor to the value.\n     */\n    function applyFactor(uint256 value, int256 factor) internal pure returns (int256) {\n        return mulDiv(value, factor, FLOAT_PRECISION);\n    }\n\n    function applyFactor(uint256 value, int256 factor, bool roundUpMagnitude) internal pure returns (int256) {\n        return mulDiv(value, factor, FLOAT_PRECISION, roundUpMagnitude);\n    }\n\n    function mulDiv(uint256 value, uint256 numerator, uint256 denominator) internal pure returns (uint256) {\n        return Math.mulDiv(value, numerator, denominator);\n    }\n\n    function mulDiv(int256 value, uint256 numerator, uint256 denominator) internal pure returns (int256) {\n        return mulDiv(numerator, value, denominator);\n    }\n\n    function mulDiv(uint256 value, int256 numerator, uint256 denominator) internal pure returns (int256) {\n        uint256 result = mulDiv(value, numerator.abs(), denominator);\n        return numerator > 0 ? result.toInt256() : -result.toInt256();\n    }\n\n    function mulDiv(uint256 value, int256 numerator, uint256 denominator, bool roundUpMagnitude) internal pure returns (int256) {\n        uint256 result = mulDiv(value, numerator.abs(), denominator, roundUpMagnitude);\n        return numerator > 0 ? result.toInt256() : -result.toInt256();\n    }\n\n    function mulDiv(uint256 value, uint256 numerator, uint256 denominator, bool roundUpMagnitude) internal pure returns (uint256) {\n        if (roundUpMagnitude) {\n            return Math.mulDiv(value, numerator, denominator, Math.Rounding.Up);\n        }\n\n        return Math.mulDiv(value, numerator, denominator);\n    }\n\n    function applyExponentFactor(\n        uint256 floatValue,\n        uint256 exponentFactor\n    ) internal pure returns (uint256) {\n        // `PRBMathUD60x18.pow` doesn't work for `x` less than one\n        if (floatValue < FLOAT_PRECISION) {\n            return 0;\n        }\n\n        if (exponentFactor == FLOAT_PRECISION) {\n            return floatValue;\n        }\n\n        // `PRBMathUD60x18.pow` accepts 2 fixed point numbers 60x18\n        // we need to convert float (30 decimals) to 60x18 (18 decimals) and then back to 30 decimals\n        uint256 weiValue = PRBMathUD60x18.pow(\n            floatToWei(floatValue),\n            floatToWei(exponentFactor)\n        );\n\n        return weiToFloat(weiValue);\n    }\n\n    function toFactor(uint256 value, uint256 divisor, bool roundUpMagnitude) internal pure returns (uint256) {\n        if (value == 0) { return 0; }\n\n        if (roundUpMagnitude) {\n            return Math.mulDiv(value, FLOAT_PRECISION, divisor, Math.Rounding.Up);\n        }\n\n        return Math.mulDiv(value, FLOAT_PRECISION, divisor);\n    }\n\n    function toFactor(uint256 value, uint256 divisor) internal pure returns (uint256) {\n        return toFactor(value, divisor, false);\n    }\n\n    function toFactor(int256 value, uint256 divisor) internal pure returns (int256) {\n        uint256 result = toFactor(value.abs(), divisor);\n        return value > 0 ? result.toInt256() : -result.toInt256();\n    }\n\n    /**\n     * Converts the given value from float to wei.\n     *\n     * @param value The value to convert.\n     * @return The converted value in wei.\n     */\n    function floatToWei(uint256 value) internal pure returns (uint256) {\n        return value / FLOAT_TO_WEI_DIVISOR;\n    }\n\n    /**\n     * Converts the given value from wei to float.\n     *\n     * @param value The value to convert.\n     * @return The converted value in float.\n     */\n    function weiToFloat(uint256 value) internal pure returns (uint256) {\n        return value * FLOAT_TO_WEI_DIVISOR;\n    }\n\n    /**\n     * Converts the given number of basis points to float.\n     *\n     * @param basisPoints The number of basis points to convert.\n     * @return The converted value in float.\n     */\n    function basisPointsToFloat(uint256 basisPoints) internal pure returns (uint256) {\n        return basisPoints * FLOAT_PRECISION / BASIS_POINTS_DIVISOR;\n    }\n}\n"
    },
    "contracts/utils/Uint256Mask.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../error/Errors.sol\";\n\nlibrary Uint256Mask {\n    struct Mask {\n        uint256 bits;\n    }\n\n    function validateUniqueAndSetIndex(\n        Mask memory mask,\n        uint256 index,\n        string memory label\n    ) internal pure {\n        if (index >= 256) {\n            revert Errors.MaskIndexOutOfBounds(index, label);\n        }\n\n        uint256 bit = 1 << index;\n\n        if (mask.bits & bit != 0) {\n            revert Errors.DuplicatedIndex(index, label);\n        }\n\n        mask.bits = mask.bits | bit;\n    }\n}\n"
    },
    "contracts/v1/IRouterV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IRouterV1 {\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\n}\n"
    },
    "contracts/v1/IVaultGovV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IVaultGovV1 {\n    function withdrawFees(address _vault, address _token, address _receiver) external;\n}\n"
    },
    "contracts/v1/IVaultV1.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\ninterface IVaultV1 {\n    function allWhitelistedTokensLength() external view returns (uint256);\n    function allWhitelistedTokens(uint256) external view returns (address);\n    function gov() external view returns (address);\n    function feeReserves(address feeToken) external view returns (uint256);\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\n}\n"
    },
    "contracts/withdrawal/ExecuteWithdrawalUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\n\nimport \"./WithdrawalVault.sol\";\nimport \"./WithdrawalStoreUtils.sol\";\nimport \"./WithdrawalEventUtils.sol\";\n\nimport \"../pricing/SwapPricingUtils.sol\";\nimport \"../oracle/Oracle.sol\";\nimport \"../position/PositionUtils.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\n\nimport \"../utils/Array.sol\";\n\nlibrary ExecuteWithdrawalUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Array for uint256[];\n    using Price for Price.Props;\n    using Withdrawal for Withdrawal.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    struct ExecuteWithdrawalParams {\n        DataStore dataStore;\n        EventEmitter eventEmitter;\n        WithdrawalVault withdrawalVault;\n        Oracle oracle;\n        bytes32 key;\n        address keeper;\n        uint256 startingGas;\n        ISwapPricingUtils.SwapPricingType swapPricingType;\n    }\n\n    struct ExecuteWithdrawalCache {\n        uint256 requestExpirationTime;\n        uint256 maxOracleTimestamp;\n        uint256 marketTokensBalance;\n        uint256 oraclePriceCount;\n        Market.Props market;\n        MarketUtils.MarketPrices prices;\n        ExecuteWithdrawalResult result;\n    }\n\n    struct _ExecuteWithdrawalCache {\n        uint256 longTokenOutputAmount;\n        uint256 shortTokenOutputAmount;\n        SwapPricingUtils.SwapFees longTokenFees;\n        SwapPricingUtils.SwapFees shortTokenFees;\n        uint256 longTokenPoolAmountDelta;\n        uint256 shortTokenPoolAmountDelta;\n    }\n\n    struct ExecuteWithdrawalResult {\n        address outputToken;\n        uint256 outputAmount;\n        address secondaryOutputToken;\n        uint256 secondaryOutputAmount;\n    }\n\n    struct SwapCache {\n        Market.Props[] swapPathMarkets;\n        SwapUtils.SwapParams swapParams;\n        address outputToken;\n        uint256 outputAmount;\n    }\n\n    /**\n     * Executes a withdrawal on the market.\n     *\n     * @param params The parameters for executing the withdrawal.\n     */\n    function executeWithdrawal(\n        ExecuteWithdrawalParams memory params,\n        Withdrawal.Props memory withdrawal\n    ) external returns (ExecuteWithdrawalResult memory) {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        params.startingGas -= gasleft() / 63;\n\n        WithdrawalStoreUtils.remove(params.dataStore, params.key, withdrawal.account());\n\n        if (withdrawal.account() == address(0)) {\n            revert Errors.EmptyWithdrawal();\n        }\n        if (withdrawal.marketTokenAmount() == 0) {\n            revert Errors.EmptyWithdrawalAmount();\n        }\n\n        if (params.oracle.minTimestamp() < withdrawal.updatedAtTime()) {\n            revert Errors.OracleTimestampsAreSmallerThanRequired(\n                params.oracle.minTimestamp(),\n                withdrawal.updatedAtTime()\n            );\n        }\n\n        ExecuteWithdrawalCache memory cache;\n\n        cache.requestExpirationTime = params.dataStore.getUint(Keys.REQUEST_EXPIRATION_TIME);\n        cache.maxOracleTimestamp = params.oracle.maxTimestamp();\n\n        if (cache.maxOracleTimestamp > withdrawal.updatedAtTime() + cache.requestExpirationTime) {\n            revert Errors.OracleTimestampsAreLargerThanRequestExpirationTime(\n                cache.maxOracleTimestamp,\n                withdrawal.updatedAtTime(),\n                cache.requestExpirationTime\n            );\n        }\n\n        MarketUtils.distributePositionImpactPool(params.dataStore, params.eventEmitter, withdrawal.market());\n\n        cache.market = MarketUtils.getEnabledMarket(params.dataStore, withdrawal.market());\n        cache.prices = MarketUtils.getMarketPrices(params.oracle, cache.market);\n\n        PositionUtils.updateFundingAndBorrowingState(params.dataStore, params.eventEmitter, cache.market, cache.prices);\n\n        cache.marketTokensBalance = MarketToken(payable(withdrawal.market())).balanceOf(\n            address(params.withdrawalVault)\n        );\n        if (cache.marketTokensBalance < withdrawal.marketTokenAmount()) {\n            revert Errors.InsufficientMarketTokens(cache.marketTokensBalance, withdrawal.marketTokenAmount());\n        }\n\n        cache.result = _executeWithdrawal(params, withdrawal, cache.market, cache.prices);\n\n        WithdrawalEventUtils.emitWithdrawalExecuted(\n            params.eventEmitter,\n            params.key,\n            withdrawal.account(),\n            params.swapPricingType\n        );\n\n        EventUtils.EventLogData memory eventData;\n        eventData.addressItems.initItems(2);\n        eventData.addressItems.setItem(0, \"outputToken\", cache.result.outputToken);\n        eventData.addressItems.setItem(1, \"secondaryOutputToken\", cache.result.secondaryOutputToken);\n        eventData.uintItems.initItems(2);\n        eventData.uintItems.setItem(0, \"outputAmount\", cache.result.outputAmount);\n        eventData.uintItems.setItem(1, \"secondaryOutputAmount\", cache.result.secondaryOutputAmount);\n        CallbackUtils.afterWithdrawalExecution(params.key, withdrawal, eventData);\n\n        cache.oraclePriceCount = GasUtils.estimateWithdrawalOraclePriceCount(\n            withdrawal.longTokenSwapPath().length + withdrawal.shortTokenSwapPath().length\n        );\n\n        GasUtils.payExecutionFee(\n            params.dataStore,\n            params.eventEmitter,\n            params.withdrawalVault,\n            params.key,\n            withdrawal.callbackContract(),\n            withdrawal.executionFee(),\n            params.startingGas,\n            cache.oraclePriceCount,\n            params.keeper,\n            withdrawal.receiver()\n        );\n\n        return cache.result;\n    }\n\n    /**\n     * @dev executes a withdrawal.\n     * @param params ExecuteWithdrawalParams.\n     * @param withdrawal The withdrawal to execute.\n     */\n    function _executeWithdrawal(\n        ExecuteWithdrawalParams memory params,\n        Withdrawal.Props memory withdrawal,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices\n    ) internal returns (ExecuteWithdrawalResult memory) {\n        _ExecuteWithdrawalCache memory cache;\n\n        (cache.longTokenOutputAmount, cache.shortTokenOutputAmount) = _getOutputAmounts(\n            params,\n            market,\n            prices,\n            withdrawal.marketTokenAmount()\n        );\n\n        cache.longTokenFees = SwapPricingUtils.getSwapFees(\n            params.dataStore,\n            market.marketToken,\n            cache.longTokenOutputAmount,\n            false, // forPositiveImpact\n            withdrawal.uiFeeReceiver(),\n            params.swapPricingType\n        );\n\n        FeeUtils.incrementClaimableFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            market.marketToken,\n            market.longToken,\n            cache.longTokenFees.feeReceiverAmount,\n            Keys.WITHDRAWAL_FEE_TYPE\n        );\n\n        FeeUtils.incrementClaimableUiFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            withdrawal.uiFeeReceiver(),\n            market.marketToken,\n            market.longToken,\n            cache.longTokenFees.uiFeeAmount,\n            Keys.UI_WITHDRAWAL_FEE_TYPE\n        );\n\n        cache.shortTokenFees = SwapPricingUtils.getSwapFees(\n            params.dataStore,\n            market.marketToken,\n            cache.shortTokenOutputAmount,\n            false, // forPositiveImpact\n            withdrawal.uiFeeReceiver(),\n            params.swapPricingType\n        );\n\n        FeeUtils.incrementClaimableFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            market.marketToken,\n            market.shortToken,\n            cache.shortTokenFees.feeReceiverAmount,\n            Keys.WITHDRAWAL_FEE_TYPE\n        );\n\n        FeeUtils.incrementClaimableUiFeeAmount(\n            params.dataStore,\n            params.eventEmitter,\n            withdrawal.uiFeeReceiver(),\n            market.marketToken,\n            market.shortToken,\n            cache.shortTokenFees.uiFeeAmount,\n            Keys.UI_WITHDRAWAL_FEE_TYPE\n        );\n\n        // the pool will be reduced by the outputAmount minus the fees for the pool\n        cache.longTokenPoolAmountDelta = cache.longTokenOutputAmount - cache.longTokenFees.feeAmountForPool;\n        cache.longTokenOutputAmount = cache.longTokenFees.amountAfterFees;\n\n        cache.shortTokenPoolAmountDelta = cache.shortTokenOutputAmount - cache.shortTokenFees.feeAmountForPool;\n        cache.shortTokenOutputAmount = cache.shortTokenFees.amountAfterFees;\n\n        // it is rare but possible for withdrawals to be blocked because pending borrowing fees\n        // have not yet been deducted from position collateral and credited to the poolAmount value\n        MarketUtils.applyDeltaToPoolAmount(\n            params.dataStore,\n            params.eventEmitter,\n            market,\n            market.longToken,\n            -cache.longTokenPoolAmountDelta.toInt256()\n        );\n\n        MarketUtils.applyDeltaToPoolAmount(\n            params.dataStore,\n            params.eventEmitter,\n            market,\n            market.shortToken,\n            -cache.shortTokenPoolAmountDelta.toInt256()\n        );\n\n        MarketUtils.validateReserve(params.dataStore, market, prices, true);\n\n        MarketUtils.validateReserve(params.dataStore, market, prices, false);\n\n        MarketUtils.validateMaxPnl(\n            params.dataStore,\n            market,\n            prices,\n            Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n            Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS\n        );\n\n        MarketToken(payable(market.marketToken)).burn(address(params.withdrawalVault), withdrawal.marketTokenAmount());\n\n        params.withdrawalVault.syncTokenBalance(market.marketToken);\n\n        ExecuteWithdrawalResult memory result;\n        (result.outputToken, result.outputAmount) = _swap(\n            params,\n            market,\n            market.longToken,\n            cache.longTokenOutputAmount,\n            withdrawal.longTokenSwapPath(),\n            withdrawal.minLongTokenAmount(),\n            withdrawal.receiver(),\n            withdrawal.uiFeeReceiver(),\n            withdrawal.shouldUnwrapNativeToken()\n        );\n\n        (result.secondaryOutputToken, result.secondaryOutputAmount) = _swap(\n            params,\n            market,\n            market.shortToken,\n            cache.shortTokenOutputAmount,\n            withdrawal.shortTokenSwapPath(),\n            withdrawal.minShortTokenAmount(),\n            withdrawal.receiver(),\n            withdrawal.uiFeeReceiver(),\n            withdrawal.shouldUnwrapNativeToken()\n        );\n\n        SwapPricingUtils.emitSwapFeesCollected(\n            params.eventEmitter,\n            params.key,\n            market.marketToken,\n            market.longToken,\n            prices.longTokenPrice.min,\n            Keys.WITHDRAWAL_FEE_TYPE,\n            cache.longTokenFees\n        );\n\n        SwapPricingUtils.emitSwapFeesCollected(\n            params.eventEmitter,\n            params.key,\n            market.marketToken,\n            market.shortToken,\n            prices.shortTokenPrice.min,\n            Keys.WITHDRAWAL_FEE_TYPE,\n            cache.shortTokenFees\n        );\n\n        // if the native token was transferred to the receiver in a swap\n        // it may be possible to invoke external contracts before the validations\n        // are called\n        MarketUtils.validateMarketTokenBalance(params.dataStore, market);\n\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            market,\n            prices.indexTokenPrice,\n            prices.longTokenPrice,\n            prices.shortTokenPrice,\n            Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n            false\n        );\n\n        uint256 marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\n\n        MarketEventUtils.emitMarketPoolValueUpdated(\n            params.eventEmitter,\n            keccak256(abi.encode(\"WITHDRAWAL\")),\n            params.key,\n            market.marketToken,\n            poolValueInfo,\n            marketTokensSupply\n        );\n\n        return result;\n    }\n\n    function _swap(\n        ExecuteWithdrawalParams memory params,\n        Market.Props memory market,\n        address tokenIn,\n        uint256 amountIn,\n        address[] memory swapPath,\n        uint256 minOutputAmount,\n        address receiver,\n        address uiFeeReceiver,\n        bool shouldUnwrapNativeToken\n    ) internal returns (address, uint256) {\n        SwapCache memory cache;\n\n        cache.swapPathMarkets = MarketUtils.getSwapPathMarkets(params.dataStore, swapPath);\n\n        cache.swapParams = SwapUtils.SwapParams({\n            dataStore: params.dataStore,\n            eventEmitter: params.eventEmitter,\n            oracle: params.oracle,\n            bank: Bank(payable(market.marketToken)),\n            key: params.key,\n            tokenIn: tokenIn,\n            amountIn: amountIn,\n            swapPathMarkets: cache.swapPathMarkets,\n            minOutputAmount: minOutputAmount,\n            receiver: receiver,\n            uiFeeReceiver: uiFeeReceiver,\n            shouldUnwrapNativeToken: shouldUnwrapNativeToken,\n            swapPricingType: params.swapPricingType\n        });\n\n        (cache.outputToken, cache.outputAmount) = SwapUtils.swap(cache.swapParams);\n\n        // validate that internal state changes are correct before calling\n        // external callbacks\n        MarketUtils.validateMarketTokenBalance(params.dataStore, cache.swapPathMarkets);\n\n        return (cache.outputToken, cache.outputAmount);\n    }\n\n    function _getOutputAmounts(\n        ExecuteWithdrawalParams memory params,\n        Market.Props memory market,\n        MarketUtils.MarketPrices memory prices,\n        uint256 marketTokenAmount\n    ) internal returns (uint256, uint256) {\n        // the max pnl factor for withdrawals should be the lower of the max pnl factor values\n        // which means that pnl would be capped to a smaller amount and the pool\n        // value would be higher even if there is a large pnl\n        // this should be okay since MarketUtils.validateMaxPnl is called after the withdrawal\n        // which ensures that the max pnl factor for withdrawals was not exceeded\n        MarketPoolValueInfo.Props memory poolValueInfo = MarketUtils.getPoolValueInfo(\n            params.dataStore,\n            market,\n            params.oracle.getPrimaryPrice(market.indexToken),\n            prices.longTokenPrice,\n            prices.shortTokenPrice,\n            Keys.MAX_PNL_FACTOR_FOR_WITHDRAWALS,\n            false\n        );\n\n        if (poolValueInfo.poolValue <= 0) {\n            revert Errors.InvalidPoolValueForWithdrawal(poolValueInfo.poolValue);\n        }\n\n        uint256 poolValue = poolValueInfo.poolValue.toUint256();\n        uint256 marketTokensSupply = MarketUtils.getMarketTokenSupply(MarketToken(payable(market.marketToken)));\n\n        MarketEventUtils.emitMarketPoolValueInfo(\n            params.eventEmitter,\n            params.key,\n            market.marketToken,\n            poolValueInfo,\n            marketTokensSupply\n        );\n\n        uint256 longTokenPoolAmount = MarketUtils.getPoolAmount(params.dataStore, market, market.longToken);\n        uint256 shortTokenPoolAmount = MarketUtils.getPoolAmount(params.dataStore, market, market.shortToken);\n\n        uint256 longTokenPoolUsd = longTokenPoolAmount * prices.longTokenPrice.max;\n        uint256 shortTokenPoolUsd = shortTokenPoolAmount * prices.shortTokenPrice.max;\n\n        uint256 totalPoolUsd = longTokenPoolUsd + shortTokenPoolUsd;\n\n        uint256 marketTokensUsd = MarketUtils.marketTokenAmountToUsd(marketTokenAmount, poolValue, marketTokensSupply);\n\n        uint256 longTokenOutputUsd = Precision.mulDiv(marketTokensUsd, longTokenPoolUsd, totalPoolUsd);\n        uint256 shortTokenOutputUsd = Precision.mulDiv(marketTokensUsd, shortTokenPoolUsd, totalPoolUsd);\n\n        return (longTokenOutputUsd / prices.longTokenPrice.max, shortTokenOutputUsd / prices.shortTokenPrice.max);\n    }\n}\n"
    },
    "contracts/withdrawal/Withdrawal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title Withdrawal\n * @dev Struct for withdrawals\n */\nlibrary Withdrawal {\n    enum WithdrawalType {\n        Normal,\n        Shift,\n        Glv\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n     // @param account The account to withdraw for.\n     // @param receiver The address that will receive the withdrawn tokens.\n     // @param callbackContract The contract that will be called back.\n     // @param uiFeeReceiver The ui fee receiver.\n     // @param market The market on which the withdrawal will be executed.\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n     // @param marketTokenAmount The amount of market tokens that will be withdrawn.\n     // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n     // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n     // @param executionFee The execution fee for the withdrawal.\n     // @param callbackGasLimit The gas limit for calling the callback contract.\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.longTokenSwapPath;\n    }\n\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.longTokenSwapPath = value;\n    }\n\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.shortTokenSwapPath;\n    }\n\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.shortTokenSwapPath = value;\n    }\n\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.marketTokenAmount;\n    }\n\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.marketTokenAmount = value;\n    }\n\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minLongTokenAmount;\n    }\n\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minLongTokenAmount = value;\n    }\n\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minShortTokenAmount;\n    }\n\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minShortTokenAmount = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n}\n"
    },
    "contracts/withdrawal/WithdrawalEventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../event/EventEmitter.sol\";\nimport \"../event/EventUtils.sol\";\nimport \"../utils/Cast.sol\";\n\nimport \"./Withdrawal.sol\";\nimport \"../pricing/ISwapPricingUtils.sol\";\n\nlibrary WithdrawalEventUtils {\n    using Withdrawal for Withdrawal.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    function emitWithdrawalCreated(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        Withdrawal.Props memory withdrawal,\n        Withdrawal.WithdrawalType withdrawalType\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.addressItems.initItems(4);\n        eventData.addressItems.setItem(0, \"account\", withdrawal.account());\n        eventData.addressItems.setItem(1, \"receiver\", withdrawal.receiver());\n        eventData.addressItems.setItem(2, \"callbackContract\", withdrawal.callbackContract());\n        eventData.addressItems.setItem(3, \"market\", withdrawal.market());\n\n        eventData.addressItems.initArrayItems(2);\n        eventData.addressItems.setItem(0, \"longTokenSwapPath\", withdrawal.longTokenSwapPath());\n        eventData.addressItems.setItem(1, \"shortTokenSwapPath\", withdrawal.shortTokenSwapPath());\n\n        eventData.uintItems.initItems(7);\n        eventData.uintItems.setItem(0, \"marketTokenAmount\", withdrawal.marketTokenAmount());\n        eventData.uintItems.setItem(1, \"minLongTokenAmount\", withdrawal.minLongTokenAmount());\n        eventData.uintItems.setItem(2, \"minShortTokenAmount\", withdrawal.minShortTokenAmount());\n        eventData.uintItems.setItem(3, \"updatedAtTime\", withdrawal.updatedAtTime());\n        eventData.uintItems.setItem(4, \"executionFee\", withdrawal.executionFee());\n        eventData.uintItems.setItem(5, \"callbackGasLimit\", withdrawal.callbackGasLimit());\n        eventData.uintItems.setItem(6, \"withdrawalType\", uint256(withdrawalType));\n\n        eventData.boolItems.initItems(1);\n        eventData.boolItems.setItem(0, \"shouldUnwrapNativeToken\", withdrawal.shouldUnwrapNativeToken());\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventEmitter.emitEventLog2(\n            \"WithdrawalCreated\",\n            key,\n            Cast.toBytes32(withdrawal.account()),\n            eventData\n        );\n    }\n\n    function emitWithdrawalExecuted(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        ISwapPricingUtils.SwapPricingType swapPricingType\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.uintItems.initItems(1);\n        eventData.uintItems.setItem(0, \"swapPricingType\", uint256(swapPricingType));\n\n        eventEmitter.emitEventLog2(\n            \"WithdrawalExecuted\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n\n    function emitWithdrawalCancelled(\n        EventEmitter eventEmitter,\n        bytes32 key,\n        address account,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        EventUtils.EventLogData memory eventData;\n\n        eventData.bytes32Items.initItems(1);\n        eventData.bytes32Items.setItem(0, \"key\", key);\n\n        eventData.addressItems.initItems(1);\n        eventData.addressItems.setItem(0, \"account\", account);\n\n        eventData.stringItems.initItems(1);\n        eventData.stringItems.setItem(0, \"reason\", reason);\n\n        eventData.bytesItems.initItems(1);\n        eventData.bytesItems.setItem(0, \"reasonBytes\", reasonBytes);\n\n        eventEmitter.emitEventLog2(\n            \"WithdrawalCancelled\",\n            key,\n            Cast.toBytes32(account),\n            eventData\n        );\n    }\n}\n"
    },
    "contracts/withdrawal/WithdrawalStoreUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/Keys.sol\";\nimport \"../data/DataStore.sol\";\n\nimport \"./Withdrawal.sol\";\n\n/**\n * @title WithdrawalStoreUtils\n * @dev Library for withdrawal storage functions\n */\nlibrary WithdrawalStoreUtils {\n    using Withdrawal for Withdrawal.Props;\n\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\"ACCOUNT\"));\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\"RECEIVER\"));\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\"CALLBACK_CONTRACT\"));\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\"UI_FEE_RECEIVER\"));\n    bytes32 public constant MARKET = keccak256(abi.encode(\"MARKET\"));\n    bytes32 public constant LONG_TOKEN_SWAP_PATH = keccak256(abi.encode(\"LONG_TOKEN_SWAP_PATH\"));\n    bytes32 public constant SHORT_TOKEN_SWAP_PATH = keccak256(abi.encode(\"SHORT_TOKEN_SWAP_PATH\"));\n\n    bytes32 public constant MARKET_TOKEN_AMOUNT = keccak256(abi.encode(\"MARKET_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_LONG_TOKEN_AMOUNT = keccak256(abi.encode(\"MIN_LONG_TOKEN_AMOUNT\"));\n    bytes32 public constant MIN_SHORT_TOKEN_AMOUNT = keccak256(abi.encode(\"MIN_SHORT_TOKEN_AMOUNT\"));\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\"UPDATED_AT_TIME\"));\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\"EXECUTION_FEE\"));\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\"CALLBACK_GAS_LIMIT\"));\n\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\"SHOULD_UNWRAP_NATIVE_TOKEN\"));\n\n    function get(DataStore dataStore, bytes32 key) external view returns (Withdrawal.Props memory) {\n        Withdrawal.Props memory withdrawal;\n        if (!dataStore.containsBytes32(Keys.WITHDRAWAL_LIST, key)) {\n            return withdrawal;\n        }\n\n        withdrawal.setAccount(dataStore.getAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        ));\n\n        withdrawal.setReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        ));\n\n        withdrawal.setCallbackContract(dataStore.getAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        ));\n\n        withdrawal.setUiFeeReceiver(dataStore.getAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        ));\n\n        withdrawal.setMarket(dataStore.getAddress(\n            keccak256(abi.encode(key, MARKET))\n        ));\n\n        withdrawal.setLongTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        ));\n\n        withdrawal.setShortTokenSwapPath(dataStore.getAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        ));\n\n        withdrawal.setMarketTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        ));\n\n        withdrawal.setMinLongTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_LONG_TOKEN_AMOUNT))\n        ));\n\n        withdrawal.setMinShortTokenAmount(dataStore.getUint(\n            keccak256(abi.encode(key, MIN_SHORT_TOKEN_AMOUNT))\n        ));\n\n        withdrawal.setUpdatedAtTime(dataStore.getUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        ));\n\n        withdrawal.setExecutionFee(dataStore.getUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        ));\n\n        withdrawal.setCallbackGasLimit(dataStore.getUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        ));\n\n        withdrawal.setShouldUnwrapNativeToken(dataStore.getBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        ));\n\n        return withdrawal;\n    }\n\n    function set(DataStore dataStore, bytes32 key, Withdrawal.Props memory withdrawal) external {\n        dataStore.addBytes32(\n            Keys.WITHDRAWAL_LIST,\n            key\n        );\n\n        dataStore.addBytes32(\n            Keys.accountWithdrawalListKey(withdrawal.account()),\n            key\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, ACCOUNT)),\n            withdrawal.account()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, RECEIVER)),\n            withdrawal.receiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\n            withdrawal.callbackContract()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\n            withdrawal.uiFeeReceiver()\n        );\n\n        dataStore.setAddress(\n            keccak256(abi.encode(key, MARKET)),\n            withdrawal.market()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH)),\n            withdrawal.longTokenSwapPath()\n        );\n\n        dataStore.setAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH)),\n            withdrawal.shortTokenSwapPath()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT)),\n            withdrawal.marketTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_LONG_TOKEN_AMOUNT)),\n            withdrawal.minLongTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, MIN_SHORT_TOKEN_AMOUNT)),\n            withdrawal.minShortTokenAmount()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\n            withdrawal.updatedAtTime()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, EXECUTION_FEE)),\n            withdrawal.executionFee()\n        );\n\n        dataStore.setUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\n            withdrawal.callbackGasLimit()\n        );\n\n        dataStore.setBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\n            withdrawal.shouldUnwrapNativeToken()\n        );\n    }\n\n    function remove(DataStore dataStore, bytes32 key, address account) external {\n        if (!dataStore.containsBytes32(Keys.WITHDRAWAL_LIST, key)) {\n            revert Errors.WithdrawalNotFound(key);\n        }\n\n        dataStore.removeBytes32(\n            Keys.WITHDRAWAL_LIST,\n            key\n        );\n\n        dataStore.removeBytes32(\n            Keys.accountWithdrawalListKey(account),\n            key\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, ACCOUNT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\n        );\n\n        dataStore.removeAddress(\n            keccak256(abi.encode(key, MARKET))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, LONG_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeAddressArray(\n            keccak256(abi.encode(key, SHORT_TOKEN_SWAP_PATH))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MARKET_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_LONG_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, MIN_SHORT_TOKEN_AMOUNT))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, EXECUTION_FEE))\n        );\n\n        dataStore.removeUint(\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\n        );\n\n        dataStore.removeBool(\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\n        );\n    }\n\n    function getWithdrawalCount(DataStore dataStore) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.WITHDRAWAL_LIST);\n    }\n\n    function getWithdrawalKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.WITHDRAWAL_LIST, start, end);\n    }\n\n    function getAccountWithdrawalCount(DataStore dataStore, address account) internal view returns (uint256) {\n        return dataStore.getBytes32Count(Keys.accountWithdrawalListKey(account));\n    }\n\n    function getAccountWithdrawalKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\n        return dataStore.getBytes32ValuesAt(Keys.accountWithdrawalListKey(account), start, end);\n    }\n}\n"
    },
    "contracts/withdrawal/WithdrawalUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../data/DataStore.sol\";\n\nimport \"./WithdrawalVault.sol\";\nimport \"./WithdrawalStoreUtils.sol\";\nimport \"./WithdrawalEventUtils.sol\";\n\nimport \"../nonce/NonceUtils.sol\";\nimport \"../oracle/Oracle.sol\";\n\nimport \"../gas/GasUtils.sol\";\nimport \"../callback/CallbackUtils.sol\";\n\nimport \"../utils/Array.sol\";\nimport \"../utils/AccountUtils.sol\";\n\n/**\n * @title WithdrawalUtils\n * @dev Library for withdrawal functions\n */\nlibrary WithdrawalUtils {\n    using SafeCast for uint256;\n    using SafeCast for int256;\n    using Array for uint256[];\n    using Price for Price.Props;\n    using Withdrawal for Withdrawal.Props;\n\n    using EventUtils for EventUtils.AddressItems;\n    using EventUtils for EventUtils.UintItems;\n    using EventUtils for EventUtils.IntItems;\n    using EventUtils for EventUtils.BoolItems;\n    using EventUtils for EventUtils.Bytes32Items;\n    using EventUtils for EventUtils.BytesItems;\n    using EventUtils for EventUtils.StringItems;\n\n    /**\n     * @param receiver The address that will receive the withdrawal tokens.\n     * @param callbackContract The contract that will be called back.\n     * @param market The market on which the withdrawal will be executed.\n     * @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n     * @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n     * @param shouldUnwrapNativeToken Whether the native token should be unwrapped when executing the withdrawal.\n     * @param executionFee The execution fee for the withdrawal.\n     * @param callbackGasLimit The gas limit for calling the callback contract.\n     */\n    struct CreateWithdrawalParams {\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        bool shouldUnwrapNativeToken;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    /**\n     * @dev Creates a withdrawal in the withdrawal store.\n     *\n     * @param dataStore The data store where withdrawal data is stored.\n     * @param eventEmitter The event emitter that is used to emit events.\n     * @param withdrawalVault WithdrawalVault.\n     * @param account The account that initiated the withdrawal.\n     * @param params The parameters for creating the withdrawal.\n     * @return The unique identifier of the created withdrawal.\n     */\n    function createWithdrawal(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        WithdrawalVault withdrawalVault,\n        address account,\n        CreateWithdrawalParams memory params\n    ) external returns (bytes32) {\n        AccountUtils.validateAccount(account);\n\n        address wnt = TokenUtils.wnt(dataStore);\n        uint256 wntAmount = withdrawalVault.recordTransferIn(wnt);\n\n        if (wntAmount < params.executionFee) {\n            revert Errors.InsufficientWntAmount(wntAmount, params.executionFee);\n        }\n\n        AccountUtils.validateReceiver(params.receiver);\n\n        uint256 marketTokenAmount = withdrawalVault.recordTransferIn(params.market);\n\n        if (marketTokenAmount == 0) {\n            revert Errors.EmptyWithdrawalAmount();\n        }\n        params.executionFee = wntAmount;\n\n        MarketUtils.validateEnabledMarket(dataStore, params.market);\n        MarketUtils.validateSwapPath(dataStore, params.longTokenSwapPath);\n        MarketUtils.validateSwapPath(dataStore, params.shortTokenSwapPath);\n\n        Withdrawal.Props memory withdrawal = Withdrawal.Props(\n            Withdrawal.Addresses(\n                account,\n                params.receiver,\n                params.callbackContract,\n                params.uiFeeReceiver,\n                params.market,\n                params.longTokenSwapPath,\n                params.shortTokenSwapPath\n            ),\n            Withdrawal.Numbers(\n                marketTokenAmount,\n                params.minLongTokenAmount,\n                params.minShortTokenAmount,\n                Chain.currentTimestamp(), // updatedAtTime\n                params.executionFee,\n                params.callbackGasLimit\n            ),\n            Withdrawal.Flags(\n                params.shouldUnwrapNativeToken\n            )\n        );\n\n        CallbackUtils.validateCallbackGasLimit(dataStore, withdrawal.callbackGasLimit());\n\n        uint256 estimatedGasLimit = GasUtils.estimateExecuteWithdrawalGasLimit(dataStore, withdrawal);\n        uint256 oraclePriceCount = GasUtils.estimateWithdrawalOraclePriceCount(withdrawal.longTokenSwapPath().length + withdrawal.shortTokenSwapPath().length);\n        GasUtils.validateExecutionFee(dataStore, estimatedGasLimit, params.executionFee, oraclePriceCount);\n\n        bytes32 key = NonceUtils.getNextKey(dataStore);\n\n        WithdrawalStoreUtils.set(dataStore, key, withdrawal);\n\n        WithdrawalEventUtils.emitWithdrawalCreated(eventEmitter, key, withdrawal, Withdrawal.WithdrawalType.Normal);\n\n        return key;\n    }\n\n    /**\n     * @dev Cancels a withdrawal.\n     * @param dataStore The data store.\n     * @param eventEmitter The event emitter.\n     * @param withdrawalVault The withdrawal vault.\n     * @param key The withdrawal key.\n     * @param keeper The keeper sending the transaction.\n     * @param startingGas The starting gas for the transaction.\n     */\n    function cancelWithdrawal(\n        DataStore dataStore,\n        EventEmitter eventEmitter,\n        WithdrawalVault withdrawalVault,\n        bytes32 key,\n        address keeper,\n        uint256 startingGas,\n        string memory reason,\n        bytes memory reasonBytes\n    ) external {\n        // 63/64 gas is forwarded to external calls, reduce the startingGas to account for this\n        startingGas -= gasleft() / 63;\n\n        Withdrawal.Props memory withdrawal = WithdrawalStoreUtils.get(dataStore, key);\n\n        if (withdrawal.account() == address(0)) {\n            revert Errors.EmptyWithdrawal();\n        }\n\n        if (withdrawal.marketTokenAmount() == 0) {\n            revert Errors.EmptyWithdrawalAmount();\n        }\n\n        WithdrawalStoreUtils.remove(dataStore, key, withdrawal.account());\n\n        withdrawalVault.transferOut(\n            withdrawal.market(),\n            withdrawal.account(),\n            withdrawal.marketTokenAmount(),\n            false // shouldUnwrapNativeToken\n        );\n\n        WithdrawalEventUtils.emitWithdrawalCancelled(\n            eventEmitter,\n            key,\n            withdrawal.account(),\n            reason,\n            reasonBytes\n        );\n\n        EventUtils.EventLogData memory eventData;\n        CallbackUtils.afterWithdrawalCancellation(key, withdrawal, eventData);\n\n        GasUtils.payExecutionFee(\n            dataStore,\n            eventEmitter,\n            withdrawalVault,\n            key,\n            withdrawal.callbackContract(),\n            withdrawal.executionFee(),\n            startingGas,\n            GasUtils.estimateWithdrawalOraclePriceCount(withdrawal.longTokenSwapPath().length + withdrawal.shortTokenSwapPath().length),\n            keeper,\n            withdrawal.receiver()\n        );\n    }\n}\n"
    },
    "contracts/withdrawal/WithdrawalVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../bank/StrictBank.sol\";\n\n// @title WithdrawalVault\n// @dev Vault for withdrawals\ncontract WithdrawalVault is StrictBank {\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\n}\n"
    },
    "prb-math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10,
      "details": {
        "constantOptimizer": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}